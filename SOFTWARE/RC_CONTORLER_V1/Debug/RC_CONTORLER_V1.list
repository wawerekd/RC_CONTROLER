
RC_CONTORLER_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a10  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000011fc  08006bf4  08006bf4  00016bf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08007df0  08007df0  00017df0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08007df4  08007df4  00017df4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000088  20000000  08007df8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000008a0  20000088  08007e80  00020088  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000928  08007e80  00020928  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
  9 .debug_info   00024bdb  00000000  00000000  000200b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00004738  00000000  00000000  00044c8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000f5ca  00000000  00000000  000493c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001300  00000000  00000000  00058990  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001ac8  00000000  00000000  00059c90  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000bf46  00000000  00000000  0005b758  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000069e7  00000000  00000000  0006769e  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0006e085  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000045d4  00000000  00000000  0006e104  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000088 	.word	0x20000088
 8000200:	00000000 	.word	0x00000000
 8000204:	08006bdc 	.word	0x08006bdc

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	2000008c 	.word	0x2000008c
 8000220:	08006bdc 	.word	0x08006bdc

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <__aeabi_frsub>:
 8000234:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000238:	e002      	b.n	8000240 <__addsf3>
 800023a:	bf00      	nop

0800023c <__aeabi_fsub>:
 800023c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000240 <__addsf3>:
 8000240:	0042      	lsls	r2, r0, #1
 8000242:	bf1f      	itttt	ne
 8000244:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000248:	ea92 0f03 	teqne	r2, r3
 800024c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000250:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000254:	d06a      	beq.n	800032c <__addsf3+0xec>
 8000256:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800025a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800025e:	bfc1      	itttt	gt
 8000260:	18d2      	addgt	r2, r2, r3
 8000262:	4041      	eorgt	r1, r0
 8000264:	4048      	eorgt	r0, r1
 8000266:	4041      	eorgt	r1, r0
 8000268:	bfb8      	it	lt
 800026a:	425b      	neglt	r3, r3
 800026c:	2b19      	cmp	r3, #25
 800026e:	bf88      	it	hi
 8000270:	4770      	bxhi	lr
 8000272:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000276:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800027a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800027e:	bf18      	it	ne
 8000280:	4240      	negne	r0, r0
 8000282:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000286:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800028a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800028e:	bf18      	it	ne
 8000290:	4249      	negne	r1, r1
 8000292:	ea92 0f03 	teq	r2, r3
 8000296:	d03f      	beq.n	8000318 <__addsf3+0xd8>
 8000298:	f1a2 0201 	sub.w	r2, r2, #1
 800029c:	fa41 fc03 	asr.w	ip, r1, r3
 80002a0:	eb10 000c 	adds.w	r0, r0, ip
 80002a4:	f1c3 0320 	rsb	r3, r3, #32
 80002a8:	fa01 f103 	lsl.w	r1, r1, r3
 80002ac:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80002b0:	d502      	bpl.n	80002b8 <__addsf3+0x78>
 80002b2:	4249      	negs	r1, r1
 80002b4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80002b8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80002bc:	d313      	bcc.n	80002e6 <__addsf3+0xa6>
 80002be:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80002c2:	d306      	bcc.n	80002d2 <__addsf3+0x92>
 80002c4:	0840      	lsrs	r0, r0, #1
 80002c6:	ea4f 0131 	mov.w	r1, r1, rrx
 80002ca:	f102 0201 	add.w	r2, r2, #1
 80002ce:	2afe      	cmp	r2, #254	; 0xfe
 80002d0:	d251      	bcs.n	8000376 <__addsf3+0x136>
 80002d2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80002d6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80002da:	bf08      	it	eq
 80002dc:	f020 0001 	biceq.w	r0, r0, #1
 80002e0:	ea40 0003 	orr.w	r0, r0, r3
 80002e4:	4770      	bx	lr
 80002e6:	0049      	lsls	r1, r1, #1
 80002e8:	eb40 0000 	adc.w	r0, r0, r0
 80002ec:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80002f0:	f1a2 0201 	sub.w	r2, r2, #1
 80002f4:	d1ed      	bne.n	80002d2 <__addsf3+0x92>
 80002f6:	fab0 fc80 	clz	ip, r0
 80002fa:	f1ac 0c08 	sub.w	ip, ip, #8
 80002fe:	ebb2 020c 	subs.w	r2, r2, ip
 8000302:	fa00 f00c 	lsl.w	r0, r0, ip
 8000306:	bfaa      	itet	ge
 8000308:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 800030c:	4252      	neglt	r2, r2
 800030e:	4318      	orrge	r0, r3
 8000310:	bfbc      	itt	lt
 8000312:	40d0      	lsrlt	r0, r2
 8000314:	4318      	orrlt	r0, r3
 8000316:	4770      	bx	lr
 8000318:	f092 0f00 	teq	r2, #0
 800031c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000320:	bf06      	itte	eq
 8000322:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000326:	3201      	addeq	r2, #1
 8000328:	3b01      	subne	r3, #1
 800032a:	e7b5      	b.n	8000298 <__addsf3+0x58>
 800032c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000330:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000334:	bf18      	it	ne
 8000336:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800033a:	d021      	beq.n	8000380 <__addsf3+0x140>
 800033c:	ea92 0f03 	teq	r2, r3
 8000340:	d004      	beq.n	800034c <__addsf3+0x10c>
 8000342:	f092 0f00 	teq	r2, #0
 8000346:	bf08      	it	eq
 8000348:	4608      	moveq	r0, r1
 800034a:	4770      	bx	lr
 800034c:	ea90 0f01 	teq	r0, r1
 8000350:	bf1c      	itt	ne
 8000352:	2000      	movne	r0, #0
 8000354:	4770      	bxne	lr
 8000356:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 800035a:	d104      	bne.n	8000366 <__addsf3+0x126>
 800035c:	0040      	lsls	r0, r0, #1
 800035e:	bf28      	it	cs
 8000360:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000364:	4770      	bx	lr
 8000366:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800036a:	bf3c      	itt	cc
 800036c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000370:	4770      	bxcc	lr
 8000372:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000376:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800037a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800037e:	4770      	bx	lr
 8000380:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000384:	bf16      	itet	ne
 8000386:	4608      	movne	r0, r1
 8000388:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 800038c:	4601      	movne	r1, r0
 800038e:	0242      	lsls	r2, r0, #9
 8000390:	bf06      	itte	eq
 8000392:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000396:	ea90 0f01 	teqeq	r0, r1
 800039a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 800039e:	4770      	bx	lr

080003a0 <__aeabi_ui2f>:
 80003a0:	f04f 0300 	mov.w	r3, #0
 80003a4:	e004      	b.n	80003b0 <__aeabi_i2f+0x8>
 80003a6:	bf00      	nop

080003a8 <__aeabi_i2f>:
 80003a8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80003ac:	bf48      	it	mi
 80003ae:	4240      	negmi	r0, r0
 80003b0:	ea5f 0c00 	movs.w	ip, r0
 80003b4:	bf08      	it	eq
 80003b6:	4770      	bxeq	lr
 80003b8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80003bc:	4601      	mov	r1, r0
 80003be:	f04f 0000 	mov.w	r0, #0
 80003c2:	e01c      	b.n	80003fe <__aeabi_l2f+0x2a>

080003c4 <__aeabi_ul2f>:
 80003c4:	ea50 0201 	orrs.w	r2, r0, r1
 80003c8:	bf08      	it	eq
 80003ca:	4770      	bxeq	lr
 80003cc:	f04f 0300 	mov.w	r3, #0
 80003d0:	e00a      	b.n	80003e8 <__aeabi_l2f+0x14>
 80003d2:	bf00      	nop

080003d4 <__aeabi_l2f>:
 80003d4:	ea50 0201 	orrs.w	r2, r0, r1
 80003d8:	bf08      	it	eq
 80003da:	4770      	bxeq	lr
 80003dc:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80003e0:	d502      	bpl.n	80003e8 <__aeabi_l2f+0x14>
 80003e2:	4240      	negs	r0, r0
 80003e4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003e8:	ea5f 0c01 	movs.w	ip, r1
 80003ec:	bf02      	ittt	eq
 80003ee:	4684      	moveq	ip, r0
 80003f0:	4601      	moveq	r1, r0
 80003f2:	2000      	moveq	r0, #0
 80003f4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80003f8:	bf08      	it	eq
 80003fa:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80003fe:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000402:	fabc f28c 	clz	r2, ip
 8000406:	3a08      	subs	r2, #8
 8000408:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 800040c:	db10      	blt.n	8000430 <__aeabi_l2f+0x5c>
 800040e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000412:	4463      	add	r3, ip
 8000414:	fa00 fc02 	lsl.w	ip, r0, r2
 8000418:	f1c2 0220 	rsb	r2, r2, #32
 800041c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000420:	fa20 f202 	lsr.w	r2, r0, r2
 8000424:	eb43 0002 	adc.w	r0, r3, r2
 8000428:	bf08      	it	eq
 800042a:	f020 0001 	biceq.w	r0, r0, #1
 800042e:	4770      	bx	lr
 8000430:	f102 0220 	add.w	r2, r2, #32
 8000434:	fa01 fc02 	lsl.w	ip, r1, r2
 8000438:	f1c2 0220 	rsb	r2, r2, #32
 800043c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000440:	fa21 f202 	lsr.w	r2, r1, r2
 8000444:	eb43 0002 	adc.w	r0, r3, r2
 8000448:	bf08      	it	eq
 800044a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800044e:	4770      	bx	lr

08000450 <__aeabi_fmul>:
 8000450:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000454:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000458:	bf1e      	ittt	ne
 800045a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800045e:	ea92 0f0c 	teqne	r2, ip
 8000462:	ea93 0f0c 	teqne	r3, ip
 8000466:	d06f      	beq.n	8000548 <__aeabi_fmul+0xf8>
 8000468:	441a      	add	r2, r3
 800046a:	ea80 0c01 	eor.w	ip, r0, r1
 800046e:	0240      	lsls	r0, r0, #9
 8000470:	bf18      	it	ne
 8000472:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000476:	d01e      	beq.n	80004b6 <__aeabi_fmul+0x66>
 8000478:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800047c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000480:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000484:	fba0 3101 	umull	r3, r1, r0, r1
 8000488:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800048c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000490:	bf3e      	ittt	cc
 8000492:	0049      	lslcc	r1, r1, #1
 8000494:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000498:	005b      	lslcc	r3, r3, #1
 800049a:	ea40 0001 	orr.w	r0, r0, r1
 800049e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80004a2:	2afd      	cmp	r2, #253	; 0xfd
 80004a4:	d81d      	bhi.n	80004e2 <__aeabi_fmul+0x92>
 80004a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80004aa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80004ae:	bf08      	it	eq
 80004b0:	f020 0001 	biceq.w	r0, r0, #1
 80004b4:	4770      	bx	lr
 80004b6:	f090 0f00 	teq	r0, #0
 80004ba:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80004be:	bf08      	it	eq
 80004c0:	0249      	lsleq	r1, r1, #9
 80004c2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80004c6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80004ca:	3a7f      	subs	r2, #127	; 0x7f
 80004cc:	bfc2      	ittt	gt
 80004ce:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80004d2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80004d6:	4770      	bxgt	lr
 80004d8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004dc:	f04f 0300 	mov.w	r3, #0
 80004e0:	3a01      	subs	r2, #1
 80004e2:	dc5d      	bgt.n	80005a0 <__aeabi_fmul+0x150>
 80004e4:	f112 0f19 	cmn.w	r2, #25
 80004e8:	bfdc      	itt	le
 80004ea:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80004ee:	4770      	bxle	lr
 80004f0:	f1c2 0200 	rsb	r2, r2, #0
 80004f4:	0041      	lsls	r1, r0, #1
 80004f6:	fa21 f102 	lsr.w	r1, r1, r2
 80004fa:	f1c2 0220 	rsb	r2, r2, #32
 80004fe:	fa00 fc02 	lsl.w	ip, r0, r2
 8000502:	ea5f 0031 	movs.w	r0, r1, rrx
 8000506:	f140 0000 	adc.w	r0, r0, #0
 800050a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800050e:	bf08      	it	eq
 8000510:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000514:	4770      	bx	lr
 8000516:	f092 0f00 	teq	r2, #0
 800051a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800051e:	bf02      	ittt	eq
 8000520:	0040      	lsleq	r0, r0, #1
 8000522:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000526:	3a01      	subeq	r2, #1
 8000528:	d0f9      	beq.n	800051e <__aeabi_fmul+0xce>
 800052a:	ea40 000c 	orr.w	r0, r0, ip
 800052e:	f093 0f00 	teq	r3, #0
 8000532:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000536:	bf02      	ittt	eq
 8000538:	0049      	lsleq	r1, r1, #1
 800053a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800053e:	3b01      	subeq	r3, #1
 8000540:	d0f9      	beq.n	8000536 <__aeabi_fmul+0xe6>
 8000542:	ea41 010c 	orr.w	r1, r1, ip
 8000546:	e78f      	b.n	8000468 <__aeabi_fmul+0x18>
 8000548:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800054c:	ea92 0f0c 	teq	r2, ip
 8000550:	bf18      	it	ne
 8000552:	ea93 0f0c 	teqne	r3, ip
 8000556:	d00a      	beq.n	800056e <__aeabi_fmul+0x11e>
 8000558:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800055c:	bf18      	it	ne
 800055e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000562:	d1d8      	bne.n	8000516 <__aeabi_fmul+0xc6>
 8000564:	ea80 0001 	eor.w	r0, r0, r1
 8000568:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800056c:	4770      	bx	lr
 800056e:	f090 0f00 	teq	r0, #0
 8000572:	bf17      	itett	ne
 8000574:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000578:	4608      	moveq	r0, r1
 800057a:	f091 0f00 	teqne	r1, #0
 800057e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000582:	d014      	beq.n	80005ae <__aeabi_fmul+0x15e>
 8000584:	ea92 0f0c 	teq	r2, ip
 8000588:	d101      	bne.n	800058e <__aeabi_fmul+0x13e>
 800058a:	0242      	lsls	r2, r0, #9
 800058c:	d10f      	bne.n	80005ae <__aeabi_fmul+0x15e>
 800058e:	ea93 0f0c 	teq	r3, ip
 8000592:	d103      	bne.n	800059c <__aeabi_fmul+0x14c>
 8000594:	024b      	lsls	r3, r1, #9
 8000596:	bf18      	it	ne
 8000598:	4608      	movne	r0, r1
 800059a:	d108      	bne.n	80005ae <__aeabi_fmul+0x15e>
 800059c:	ea80 0001 	eor.w	r0, r0, r1
 80005a0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80005a4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80005a8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80005ac:	4770      	bx	lr
 80005ae:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80005b2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80005b6:	4770      	bx	lr

080005b8 <__aeabi_fdiv>:
 80005b8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005bc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80005c0:	bf1e      	ittt	ne
 80005c2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80005c6:	ea92 0f0c 	teqne	r2, ip
 80005ca:	ea93 0f0c 	teqne	r3, ip
 80005ce:	d069      	beq.n	80006a4 <__aeabi_fdiv+0xec>
 80005d0:	eba2 0203 	sub.w	r2, r2, r3
 80005d4:	ea80 0c01 	eor.w	ip, r0, r1
 80005d8:	0249      	lsls	r1, r1, #9
 80005da:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80005de:	d037      	beq.n	8000650 <__aeabi_fdiv+0x98>
 80005e0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80005e4:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80005e8:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80005ec:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80005f0:	428b      	cmp	r3, r1
 80005f2:	bf38      	it	cc
 80005f4:	005b      	lslcc	r3, r3, #1
 80005f6:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80005fa:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80005fe:	428b      	cmp	r3, r1
 8000600:	bf24      	itt	cs
 8000602:	1a5b      	subcs	r3, r3, r1
 8000604:	ea40 000c 	orrcs.w	r0, r0, ip
 8000608:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 800060c:	bf24      	itt	cs
 800060e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000612:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000616:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 800061a:	bf24      	itt	cs
 800061c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000620:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000624:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000628:	bf24      	itt	cs
 800062a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800062e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000632:	011b      	lsls	r3, r3, #4
 8000634:	bf18      	it	ne
 8000636:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 800063a:	d1e0      	bne.n	80005fe <__aeabi_fdiv+0x46>
 800063c:	2afd      	cmp	r2, #253	; 0xfd
 800063e:	f63f af50 	bhi.w	80004e2 <__aeabi_fmul+0x92>
 8000642:	428b      	cmp	r3, r1
 8000644:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000648:	bf08      	it	eq
 800064a:	f020 0001 	biceq.w	r0, r0, #1
 800064e:	4770      	bx	lr
 8000650:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000654:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000658:	327f      	adds	r2, #127	; 0x7f
 800065a:	bfc2      	ittt	gt
 800065c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000660:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000664:	4770      	bxgt	lr
 8000666:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800066a:	f04f 0300 	mov.w	r3, #0
 800066e:	3a01      	subs	r2, #1
 8000670:	e737      	b.n	80004e2 <__aeabi_fmul+0x92>
 8000672:	f092 0f00 	teq	r2, #0
 8000676:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800067a:	bf02      	ittt	eq
 800067c:	0040      	lsleq	r0, r0, #1
 800067e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000682:	3a01      	subeq	r2, #1
 8000684:	d0f9      	beq.n	800067a <__aeabi_fdiv+0xc2>
 8000686:	ea40 000c 	orr.w	r0, r0, ip
 800068a:	f093 0f00 	teq	r3, #0
 800068e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000692:	bf02      	ittt	eq
 8000694:	0049      	lsleq	r1, r1, #1
 8000696:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800069a:	3b01      	subeq	r3, #1
 800069c:	d0f9      	beq.n	8000692 <__aeabi_fdiv+0xda>
 800069e:	ea41 010c 	orr.w	r1, r1, ip
 80006a2:	e795      	b.n	80005d0 <__aeabi_fdiv+0x18>
 80006a4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80006a8:	ea92 0f0c 	teq	r2, ip
 80006ac:	d108      	bne.n	80006c0 <__aeabi_fdiv+0x108>
 80006ae:	0242      	lsls	r2, r0, #9
 80006b0:	f47f af7d 	bne.w	80005ae <__aeabi_fmul+0x15e>
 80006b4:	ea93 0f0c 	teq	r3, ip
 80006b8:	f47f af70 	bne.w	800059c <__aeabi_fmul+0x14c>
 80006bc:	4608      	mov	r0, r1
 80006be:	e776      	b.n	80005ae <__aeabi_fmul+0x15e>
 80006c0:	ea93 0f0c 	teq	r3, ip
 80006c4:	d104      	bne.n	80006d0 <__aeabi_fdiv+0x118>
 80006c6:	024b      	lsls	r3, r1, #9
 80006c8:	f43f af4c 	beq.w	8000564 <__aeabi_fmul+0x114>
 80006cc:	4608      	mov	r0, r1
 80006ce:	e76e      	b.n	80005ae <__aeabi_fmul+0x15e>
 80006d0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80006d4:	bf18      	it	ne
 80006d6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80006da:	d1ca      	bne.n	8000672 <__aeabi_fdiv+0xba>
 80006dc:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80006e0:	f47f af5c 	bne.w	800059c <__aeabi_fmul+0x14c>
 80006e4:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80006e8:	f47f af3c 	bne.w	8000564 <__aeabi_fmul+0x114>
 80006ec:	e75f      	b.n	80005ae <__aeabi_fmul+0x15e>
 80006ee:	bf00      	nop

080006f0 <__aeabi_f2uiz>:
 80006f0:	0042      	lsls	r2, r0, #1
 80006f2:	d20e      	bcs.n	8000712 <__aeabi_f2uiz+0x22>
 80006f4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80006f8:	d30b      	bcc.n	8000712 <__aeabi_f2uiz+0x22>
 80006fa:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80006fe:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000702:	d409      	bmi.n	8000718 <__aeabi_f2uiz+0x28>
 8000704:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000708:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800070c:	fa23 f002 	lsr.w	r0, r3, r2
 8000710:	4770      	bx	lr
 8000712:	f04f 0000 	mov.w	r0, #0
 8000716:	4770      	bx	lr
 8000718:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800071c:	d101      	bne.n	8000722 <__aeabi_f2uiz+0x32>
 800071e:	0242      	lsls	r2, r0, #9
 8000720:	d102      	bne.n	8000728 <__aeabi_f2uiz+0x38>
 8000722:	f04f 30ff 	mov.w	r0, #4294967295
 8000726:	4770      	bx	lr
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	4770      	bx	lr
 800072e:	bf00      	nop

08000730 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000730:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000732:	4b0e      	ldr	r3, [pc, #56]	; (800076c <HAL_InitTick+0x3c>)
{
 8000734:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000736:	7818      	ldrb	r0, [r3, #0]
 8000738:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800073c:	fbb3 f3f0 	udiv	r3, r3, r0
 8000740:	4a0b      	ldr	r2, [pc, #44]	; (8000770 <HAL_InitTick+0x40>)
 8000742:	6810      	ldr	r0, [r2, #0]
 8000744:	fbb0 f0f3 	udiv	r0, r0, r3
 8000748:	f000 fad2 	bl	8000cf0 <HAL_SYSTICK_Config>
 800074c:	4604      	mov	r4, r0
 800074e:	b958      	cbnz	r0, 8000768 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000750:	2d0f      	cmp	r5, #15
 8000752:	d809      	bhi.n	8000768 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000754:	4602      	mov	r2, r0
 8000756:	4629      	mov	r1, r5
 8000758:	f04f 30ff 	mov.w	r0, #4294967295
 800075c:	f000 fa86 	bl	8000c6c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000760:	4b04      	ldr	r3, [pc, #16]	; (8000774 <HAL_InitTick+0x44>)
 8000762:	4620      	mov	r0, r4
 8000764:	601d      	str	r5, [r3, #0]
 8000766:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000768:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800076a:	bd38      	pop	{r3, r4, r5, pc}
 800076c:	20000000 	.word	0x20000000
 8000770:	20000020 	.word	0x20000020
 8000774:	20000004 	.word	0x20000004

08000778 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000778:	4a07      	ldr	r2, [pc, #28]	; (8000798 <HAL_Init+0x20>)
{
 800077a:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800077c:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800077e:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000780:	f043 0310 	orr.w	r3, r3, #16
 8000784:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000786:	f000 fa5f 	bl	8000c48 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800078a:	2000      	movs	r0, #0
 800078c:	f7ff ffd0 	bl	8000730 <HAL_InitTick>
  HAL_MspInit();
 8000790:	f004 fe28 	bl	80053e4 <HAL_MspInit>
}
 8000794:	2000      	movs	r0, #0
 8000796:	bd08      	pop	{r3, pc}
 8000798:	40022000 	.word	0x40022000

0800079c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800079c:	4a03      	ldr	r2, [pc, #12]	; (80007ac <HAL_IncTick+0x10>)
 800079e:	4b04      	ldr	r3, [pc, #16]	; (80007b0 <HAL_IncTick+0x14>)
 80007a0:	6811      	ldr	r1, [r2, #0]
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	440b      	add	r3, r1
 80007a6:	6013      	str	r3, [r2, #0]
 80007a8:	4770      	bx	lr
 80007aa:	bf00      	nop
 80007ac:	20000584 	.word	0x20000584
 80007b0:	20000000 	.word	0x20000000

080007b4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80007b4:	4b01      	ldr	r3, [pc, #4]	; (80007bc <HAL_GetTick+0x8>)
 80007b6:	6818      	ldr	r0, [r3, #0]
}
 80007b8:	4770      	bx	lr
 80007ba:	bf00      	nop
 80007bc:	20000584 	.word	0x20000584

080007c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80007c0:	b538      	push	{r3, r4, r5, lr}
 80007c2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80007c4:	f7ff fff6 	bl	80007b4 <HAL_GetTick>
 80007c8:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80007ca:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80007cc:	bf1e      	ittt	ne
 80007ce:	4b04      	ldrne	r3, [pc, #16]	; (80007e0 <HAL_Delay+0x20>)
 80007d0:	781b      	ldrbne	r3, [r3, #0]
 80007d2:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80007d4:	f7ff ffee 	bl	80007b4 <HAL_GetTick>
 80007d8:	1b40      	subs	r0, r0, r5
 80007da:	4284      	cmp	r4, r0
 80007dc:	d8fa      	bhi.n	80007d4 <HAL_Delay+0x14>
  {
  }
}
 80007de:	bd38      	pop	{r3, r4, r5, pc}
 80007e0:	20000000 	.word	0x20000000

080007e4 <HAL_ADC_ConvCpltCallback>:
 80007e4:	4770      	bx	lr

080007e6 <ADC_DMAConvCplt>:
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80007e6:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 80007e8:	b510      	push	{r4, lr}
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80007ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80007ec:	f012 0f50 	tst.w	r2, #80	; 0x50
 80007f0:	d11b      	bne.n	800082a <ADC_DMAConvCplt+0x44>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80007f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80007f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80007f8:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80007fa:	681a      	ldr	r2, [r3, #0]
 80007fc:	6892      	ldr	r2, [r2, #8]
 80007fe:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8000802:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8000806:	d10c      	bne.n	8000822 <ADC_DMAConvCplt+0x3c>
 8000808:	7b1a      	ldrb	r2, [r3, #12]
 800080a:	b952      	cbnz	r2, 8000822 <ADC_DMAConvCplt+0x3c>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800080c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800080e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000812:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000814:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000816:	04d2      	lsls	r2, r2, #19
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000818:	bf5e      	ittt	pl
 800081a:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
 800081c:	f042 0201 	orrpl.w	r2, r2, #1
 8000820:	629a      	strpl	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8000822:	4618      	mov	r0, r3
 8000824:	f7ff ffde 	bl	80007e4 <HAL_ADC_ConvCpltCallback>
 8000828:	bd10      	pop	{r4, pc}
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800082a:	6a1b      	ldr	r3, [r3, #32]
  }
}
 800082c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	4718      	bx	r3

08000834 <HAL_ADC_ConvHalfCpltCallback>:
 8000834:	4770      	bx	lr

08000836 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8000836:	b508      	push	{r3, lr}
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8000838:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800083a:	f7ff fffb 	bl	8000834 <HAL_ADC_ConvHalfCpltCallback>
 800083e:	bd08      	pop	{r3, pc}

08000840 <HAL_ADC_ErrorCallback>:
{
 8000840:	4770      	bx	lr

08000842 <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000842:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 8000844:	b508      	push	{r3, lr}
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8000846:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000848:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800084c:	6283      	str	r3, [r0, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800084e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000850:	f043 0304 	orr.w	r3, r3, #4
 8000854:	62c3      	str	r3, [r0, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8000856:	f7ff fff3 	bl	8000840 <HAL_ADC_ErrorCallback>
 800085a:	bd08      	pop	{r3, pc}

0800085c <HAL_ADC_ConfigChannel>:
  __IO uint32_t wait_loop_index = 0U;
 800085c:	2300      	movs	r3, #0
{ 
 800085e:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 8000860:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8000862:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8000866:	2b01      	cmp	r3, #1
 8000868:	d074      	beq.n	8000954 <HAL_ADC_ConfigChannel+0xf8>
 800086a:	2301      	movs	r3, #1
  if (sConfig->Rank < 7U)
 800086c:	684d      	ldr	r5, [r1, #4]
  __HAL_LOCK(hadc);
 800086e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  if (sConfig->Rank < 7U)
 8000872:	2d06      	cmp	r5, #6
 8000874:	6802      	ldr	r2, [r0, #0]
 8000876:	ea4f 0385 	mov.w	r3, r5, lsl #2
 800087a:	680c      	ldr	r4, [r1, #0]
 800087c:	d825      	bhi.n	80008ca <HAL_ADC_ConfigChannel+0x6e>
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800087e:	442b      	add	r3, r5
 8000880:	251f      	movs	r5, #31
 8000882:	6b56      	ldr	r6, [r2, #52]	; 0x34
 8000884:	3b05      	subs	r3, #5
 8000886:	409d      	lsls	r5, r3
 8000888:	ea26 0505 	bic.w	r5, r6, r5
 800088c:	fa04 f303 	lsl.w	r3, r4, r3
 8000890:	432b      	orrs	r3, r5
 8000892:	6353      	str	r3, [r2, #52]	; 0x34
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000894:	2c09      	cmp	r4, #9
 8000896:	ea4f 0344 	mov.w	r3, r4, lsl #1
 800089a:	688d      	ldr	r5, [r1, #8]
 800089c:	d92f      	bls.n	80008fe <HAL_ADC_ConfigChannel+0xa2>
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800089e:	2607      	movs	r6, #7
 80008a0:	4423      	add	r3, r4
 80008a2:	68d1      	ldr	r1, [r2, #12]
 80008a4:	3b1e      	subs	r3, #30
 80008a6:	409e      	lsls	r6, r3
 80008a8:	ea21 0106 	bic.w	r1, r1, r6
 80008ac:	fa05 f303 	lsl.w	r3, r5, r3
 80008b0:	430b      	orrs	r3, r1
 80008b2:	60d3      	str	r3, [r2, #12]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80008b4:	f1a4 0310 	sub.w	r3, r4, #16
 80008b8:	2b01      	cmp	r3, #1
 80008ba:	d92b      	bls.n	8000914 <HAL_ADC_ConfigChannel+0xb8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80008bc:	2300      	movs	r3, #0
  __HAL_UNLOCK(hadc);
 80008be:	2200      	movs	r2, #0
 80008c0:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
}
 80008c4:	4618      	mov	r0, r3
 80008c6:	b002      	add	sp, #8
 80008c8:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13U)
 80008ca:	2d0c      	cmp	r5, #12
 80008cc:	d80b      	bhi.n	80008e6 <HAL_ADC_ConfigChannel+0x8a>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80008ce:	442b      	add	r3, r5
 80008d0:	251f      	movs	r5, #31
 80008d2:	6b16      	ldr	r6, [r2, #48]	; 0x30
 80008d4:	3b23      	subs	r3, #35	; 0x23
 80008d6:	409d      	lsls	r5, r3
 80008d8:	ea26 0505 	bic.w	r5, r6, r5
 80008dc:	fa04 f303 	lsl.w	r3, r4, r3
 80008e0:	432b      	orrs	r3, r5
 80008e2:	6313      	str	r3, [r2, #48]	; 0x30
 80008e4:	e7d6      	b.n	8000894 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80008e6:	442b      	add	r3, r5
 80008e8:	251f      	movs	r5, #31
 80008ea:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
 80008ec:	3b41      	subs	r3, #65	; 0x41
 80008ee:	409d      	lsls	r5, r3
 80008f0:	ea26 0505 	bic.w	r5, r6, r5
 80008f4:	fa04 f303 	lsl.w	r3, r4, r3
 80008f8:	432b      	orrs	r3, r5
 80008fa:	62d3      	str	r3, [r2, #44]	; 0x2c
 80008fc:	e7ca      	b.n	8000894 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80008fe:	2607      	movs	r6, #7
 8000900:	6911      	ldr	r1, [r2, #16]
 8000902:	4423      	add	r3, r4
 8000904:	409e      	lsls	r6, r3
 8000906:	ea21 0106 	bic.w	r1, r1, r6
 800090a:	fa05 f303 	lsl.w	r3, r5, r3
 800090e:	430b      	orrs	r3, r1
 8000910:	6113      	str	r3, [r2, #16]
 8000912:	e7cf      	b.n	80008b4 <HAL_ADC_ConfigChannel+0x58>
    if (hadc->Instance == ADC1)
 8000914:	4b10      	ldr	r3, [pc, #64]	; (8000958 <HAL_ADC_ConfigChannel+0xfc>)
 8000916:	429a      	cmp	r2, r3
 8000918:	d116      	bne.n	8000948 <HAL_ADC_ConfigChannel+0xec>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800091a:	6893      	ldr	r3, [r2, #8]
 800091c:	021b      	lsls	r3, r3, #8
 800091e:	d4cd      	bmi.n	80008bc <HAL_ADC_ConfigChannel+0x60>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000920:	6893      	ldr	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000922:	2c10      	cmp	r4, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000924:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000928:	6093      	str	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800092a:	d1c7      	bne.n	80008bc <HAL_ADC_ConfigChannel+0x60>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800092c:	4b0b      	ldr	r3, [pc, #44]	; (800095c <HAL_ADC_ConfigChannel+0x100>)
 800092e:	4a0c      	ldr	r2, [pc, #48]	; (8000960 <HAL_ADC_ConfigChannel+0x104>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	fbb3 f2f2 	udiv	r2, r3, r2
 8000936:	230a      	movs	r3, #10
 8000938:	4353      	muls	r3, r2
            wait_loop_index--;
 800093a:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 800093c:	9b01      	ldr	r3, [sp, #4]
 800093e:	2b00      	cmp	r3, #0
 8000940:	d0bc      	beq.n	80008bc <HAL_ADC_ConfigChannel+0x60>
            wait_loop_index--;
 8000942:	9b01      	ldr	r3, [sp, #4]
 8000944:	3b01      	subs	r3, #1
 8000946:	e7f8      	b.n	800093a <HAL_ADC_ConfigChannel+0xde>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000948:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800094a:	f043 0320 	orr.w	r3, r3, #32
 800094e:	6283      	str	r3, [r0, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 8000950:	2301      	movs	r3, #1
 8000952:	e7b4      	b.n	80008be <HAL_ADC_ConfigChannel+0x62>
  __HAL_LOCK(hadc);
 8000954:	2302      	movs	r3, #2
 8000956:	e7b5      	b.n	80008c4 <HAL_ADC_ConfigChannel+0x68>
 8000958:	40012400 	.word	0x40012400
 800095c:	20000020 	.word	0x20000020
 8000960:	000f4240 	.word	0x000f4240

08000964 <ADC_Enable>:
  __IO uint32_t wait_loop_index = 0U;
 8000964:	2300      	movs	r3, #0
{
 8000966:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 8000968:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 800096a:	6803      	ldr	r3, [r0, #0]
{
 800096c:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 800096e:	689a      	ldr	r2, [r3, #8]
 8000970:	07d2      	lsls	r2, r2, #31
 8000972:	d502      	bpl.n	800097a <ADC_Enable+0x16>
  return HAL_OK;
 8000974:	2000      	movs	r0, #0
}
 8000976:	b002      	add	sp, #8
 8000978:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_ADC_ENABLE(hadc);
 800097a:	689a      	ldr	r2, [r3, #8]
 800097c:	f042 0201 	orr.w	r2, r2, #1
 8000980:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000982:	4b12      	ldr	r3, [pc, #72]	; (80009cc <ADC_Enable+0x68>)
 8000984:	4a12      	ldr	r2, [pc, #72]	; (80009d0 <ADC_Enable+0x6c>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	fbb3 f3f2 	udiv	r3, r3, r2
      wait_loop_index--;
 800098c:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 800098e:	9b01      	ldr	r3, [sp, #4]
 8000990:	b9c3      	cbnz	r3, 80009c4 <ADC_Enable+0x60>
    tickstart = HAL_GetTick();
 8000992:	f7ff ff0f 	bl	80007b4 <HAL_GetTick>
 8000996:	4606      	mov	r6, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000998:	6823      	ldr	r3, [r4, #0]
 800099a:	689d      	ldr	r5, [r3, #8]
 800099c:	f015 0501 	ands.w	r5, r5, #1
 80009a0:	d1e8      	bne.n	8000974 <ADC_Enable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80009a2:	f7ff ff07 	bl	80007b4 <HAL_GetTick>
 80009a6:	1b80      	subs	r0, r0, r6
 80009a8:	2802      	cmp	r0, #2
 80009aa:	d9f5      	bls.n	8000998 <ADC_Enable+0x34>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80009ac:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        __HAL_UNLOCK(hadc);
 80009ae:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80009b2:	f043 0310 	orr.w	r3, r3, #16
 80009b6:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80009b8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        __HAL_UNLOCK(hadc);
 80009ba:	2001      	movs	r0, #1
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80009bc:	f043 0301 	orr.w	r3, r3, #1
 80009c0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80009c2:	e7d8      	b.n	8000976 <ADC_Enable+0x12>
      wait_loop_index--;
 80009c4:	9b01      	ldr	r3, [sp, #4]
 80009c6:	3b01      	subs	r3, #1
 80009c8:	e7e0      	b.n	800098c <ADC_Enable+0x28>
 80009ca:	bf00      	nop
 80009cc:	20000020 	.word	0x20000020
 80009d0:	000f4240 	.word	0x000f4240

080009d4 <HAL_ADC_Start_DMA>:
{
 80009d4:	e92d 41d8 	stmdb	sp!, {r3, r4, r6, r7, r8, lr}
 80009d8:	4690      	mov	r8, r2
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80009da:	4b40      	ldr	r3, [pc, #256]	; (8000adc <HAL_ADC_Start_DMA+0x108>)
 80009dc:	6802      	ldr	r2, [r0, #0]
{
 80009de:	4604      	mov	r4, r0
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80009e0:	429a      	cmp	r2, r3
{
 80009e2:	460f      	mov	r7, r1
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80009e4:	d002      	beq.n	80009ec <HAL_ADC_Start_DMA+0x18>
 80009e6:	493e      	ldr	r1, [pc, #248]	; (8000ae0 <HAL_ADC_Start_DMA+0x10c>)
 80009e8:	428a      	cmp	r2, r1
 80009ea:	d103      	bne.n	80009f4 <HAL_ADC_Start_DMA+0x20>
 80009ec:	685b      	ldr	r3, [r3, #4]
 80009ee:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 80009f2:	d16e      	bne.n	8000ad2 <HAL_ADC_Start_DMA+0xfe>
    __HAL_LOCK(hadc);
 80009f4:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80009f8:	2b01      	cmp	r3, #1
 80009fa:	d06c      	beq.n	8000ad6 <HAL_ADC_Start_DMA+0x102>
 80009fc:	2301      	movs	r3, #1
    tmp_hal_status = ADC_Enable(hadc);
 80009fe:	4620      	mov	r0, r4
    __HAL_LOCK(hadc);
 8000a00:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    tmp_hal_status = ADC_Enable(hadc);
 8000a04:	f7ff ffae 	bl	8000964 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8000a08:	4606      	mov	r6, r0
 8000a0a:	2800      	cmp	r0, #0
 8000a0c:	d15d      	bne.n	8000aca <HAL_ADC_Start_DMA+0xf6>
      ADC_STATE_CLR_SET(hadc->State,
 8000a0e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000a10:	6821      	ldr	r1, [r4, #0]
      ADC_STATE_CLR_SET(hadc->State,
 8000a12:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000a16:	4b32      	ldr	r3, [pc, #200]	; (8000ae0 <HAL_ADC_Start_DMA+0x10c>)
      ADC_STATE_CLR_SET(hadc->State,
 8000a18:	f020 0001 	bic.w	r0, r0, #1
 8000a1c:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000a20:	4299      	cmp	r1, r3
      ADC_STATE_CLR_SET(hadc->State,
 8000a22:	62a0      	str	r0, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000a24:	d104      	bne.n	8000a30 <HAL_ADC_Start_DMA+0x5c>
 8000a26:	4a2d      	ldr	r2, [pc, #180]	; (8000adc <HAL_ADC_Start_DMA+0x108>)
 8000a28:	6853      	ldr	r3, [r2, #4]
 8000a2a:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 8000a2e:	d13e      	bne.n	8000aae <HAL_ADC_Start_DMA+0xda>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000a30:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000a32:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8000a36:	62a3      	str	r3, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000a38:	684b      	ldr	r3, [r1, #4]
 8000a3a:	055a      	lsls	r2, r3, #21
 8000a3c:	d505      	bpl.n	8000a4a <HAL_ADC_Start_DMA+0x76>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000a3e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000a40:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000a44:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000a48:	62a3      	str	r3, [r4, #40]	; 0x28
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000a4a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000a4c:	6a20      	ldr	r0, [r4, #32]
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000a4e:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000a52:	bf18      	it	ne
 8000a54:	6ae3      	ldrne	r3, [r4, #44]	; 0x2c
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000a56:	463a      	mov	r2, r7
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000a58:	bf18      	it	ne
 8000a5a:	f023 0306 	bicne.w	r3, r3, #6
        ADC_CLEAR_ERRORCODE(hadc);
 8000a5e:	62e3      	str	r3, [r4, #44]	; 0x2c
      __HAL_UNLOCK(hadc);
 8000a60:	2300      	movs	r3, #0
 8000a62:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000a66:	4b1f      	ldr	r3, [pc, #124]	; (8000ae4 <HAL_ADC_Start_DMA+0x110>)
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000a68:	314c      	adds	r1, #76	; 0x4c
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000a6a:	6283      	str	r3, [r0, #40]	; 0x28
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000a6c:	4b1e      	ldr	r3, [pc, #120]	; (8000ae8 <HAL_ADC_Start_DMA+0x114>)
 8000a6e:	62c3      	str	r3, [r0, #44]	; 0x2c
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000a70:	4b1e      	ldr	r3, [pc, #120]	; (8000aec <HAL_ADC_Start_DMA+0x118>)
 8000a72:	6303      	str	r3, [r0, #48]	; 0x30
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000a74:	f06f 0302 	mvn.w	r3, #2
 8000a78:	f841 3c4c 	str.w	r3, [r1, #-76]
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8000a7c:	f851 3c44 	ldr.w	r3, [r1, #-68]
 8000a80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a84:	f841 3c44 	str.w	r3, [r1, #-68]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000a88:	4643      	mov	r3, r8
 8000a8a:	f000 f987 	bl	8000d9c <HAL_DMA_Start_IT>
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8000a8e:	6823      	ldr	r3, [r4, #0]
 8000a90:	689a      	ldr	r2, [r3, #8]
 8000a92:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8000a96:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000a9a:	689a      	ldr	r2, [r3, #8]
 8000a9c:	bf0c      	ite	eq
 8000a9e:	f442 02a0 	orreq.w	r2, r2, #5242880	; 0x500000
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000aa2:	f442 1280 	orrne.w	r2, r2, #1048576	; 0x100000
 8000aa6:	609a      	str	r2, [r3, #8]
}
 8000aa8:	4630      	mov	r0, r6
 8000aaa:	e8bd 81d8 	ldmia.w	sp!, {r3, r4, r6, r7, r8, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000aae:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000ab0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000ab4:	62a3      	str	r3, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000ab6:	6853      	ldr	r3, [r2, #4]
 8000ab8:	055b      	lsls	r3, r3, #21
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000aba:	bf41      	itttt	mi
 8000abc:	6aa0      	ldrmi	r0, [r4, #40]	; 0x28
 8000abe:	f420 5040 	bicmi.w	r0, r0, #12288	; 0x3000
 8000ac2:	f440 5080 	orrmi.w	r0, r0, #4096	; 0x1000
 8000ac6:	62a0      	strmi	r0, [r4, #40]	; 0x28
 8000ac8:	e7bf      	b.n	8000a4a <HAL_ADC_Start_DMA+0x76>
      __HAL_UNLOCK(hadc);
 8000aca:	2300      	movs	r3, #0
 8000acc:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 8000ad0:	e7ea      	b.n	8000aa8 <HAL_ADC_Start_DMA+0xd4>
    tmp_hal_status = HAL_ERROR;
 8000ad2:	2601      	movs	r6, #1
 8000ad4:	e7e8      	b.n	8000aa8 <HAL_ADC_Start_DMA+0xd4>
    __HAL_LOCK(hadc);
 8000ad6:	2602      	movs	r6, #2
 8000ad8:	e7e6      	b.n	8000aa8 <HAL_ADC_Start_DMA+0xd4>
 8000ada:	bf00      	nop
 8000adc:	40012400 	.word	0x40012400
 8000ae0:	40012800 	.word	0x40012800
 8000ae4:	080007e7 	.word	0x080007e7
 8000ae8:	08000837 	.word	0x08000837
 8000aec:	08000843 	.word	0x08000843

08000af0 <ADC_ConversionStop_Disable>:
{
 8000af0:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000af2:	6803      	ldr	r3, [r0, #0]
{
 8000af4:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000af6:	689a      	ldr	r2, [r3, #8]
 8000af8:	07d2      	lsls	r2, r2, #31
 8000afa:	d401      	bmi.n	8000b00 <ADC_ConversionStop_Disable+0x10>
  return HAL_OK;
 8000afc:	2000      	movs	r0, #0
 8000afe:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 8000b00:	689a      	ldr	r2, [r3, #8]
 8000b02:	f022 0201 	bic.w	r2, r2, #1
 8000b06:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8000b08:	f7ff fe54 	bl	80007b4 <HAL_GetTick>
 8000b0c:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000b0e:	6823      	ldr	r3, [r4, #0]
 8000b10:	689b      	ldr	r3, [r3, #8]
 8000b12:	07db      	lsls	r3, r3, #31
 8000b14:	d5f2      	bpl.n	8000afc <ADC_ConversionStop_Disable+0xc>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000b16:	f7ff fe4d 	bl	80007b4 <HAL_GetTick>
 8000b1a:	1b40      	subs	r0, r0, r5
 8000b1c:	2802      	cmp	r0, #2
 8000b1e:	d9f6      	bls.n	8000b0e <ADC_ConversionStop_Disable+0x1e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000b20:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b22:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000b24:	f043 0310 	orr.w	r3, r3, #16
 8000b28:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b2a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000b2c:	f043 0301 	orr.w	r3, r3, #1
 8000b30:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000b32:	bd38      	pop	{r3, r4, r5, pc}

08000b34 <HAL_ADC_Init>:
{
 8000b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(hadc == NULL)
 8000b36:	4604      	mov	r4, r0
 8000b38:	2800      	cmp	r0, #0
 8000b3a:	d077      	beq.n	8000c2c <HAL_ADC_Init+0xf8>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000b3c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000b3e:	b923      	cbnz	r3, 8000b4a <HAL_ADC_Init+0x16>
    ADC_CLEAR_ERRORCODE(hadc);
 8000b40:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 8000b42:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 8000b46:	f004 fc6f 	bl	8005428 <HAL_ADC_MspInit>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000b4a:	4620      	mov	r0, r4
 8000b4c:	f7ff ffd0 	bl	8000af0 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000b50:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000b52:	f013 0310 	ands.w	r3, r3, #16
 8000b56:	d16b      	bne.n	8000c30 <HAL_ADC_Init+0xfc>
 8000b58:	2800      	cmp	r0, #0
 8000b5a:	d169      	bne.n	8000c30 <HAL_ADC_Init+0xfc>
    ADC_STATE_CLR_SET(hadc->State,
 8000b5c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000b5e:	4937      	ldr	r1, [pc, #220]	; (8000c3c <HAL_ADC_Init+0x108>)
    ADC_STATE_CLR_SET(hadc->State,
 8000b60:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 8000b64:	f022 0202 	bic.w	r2, r2, #2
 8000b68:	f042 0202 	orr.w	r2, r2, #2
 8000b6c:	62a2      	str	r2, [r4, #40]	; 0x28
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000b6e:	e894 0024 	ldmia.w	r4, {r2, r5}
 8000b72:	428a      	cmp	r2, r1
 8000b74:	69e1      	ldr	r1, [r4, #28]
 8000b76:	d104      	bne.n	8000b82 <HAL_ADC_Init+0x4e>
 8000b78:	f5b1 2f40 	cmp.w	r1, #786432	; 0xc0000
 8000b7c:	bf08      	it	eq
 8000b7e:	f44f 2100 	moveq.w	r1, #524288	; 0x80000
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000b82:	7b26      	ldrb	r6, [r4, #12]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000b84:	ea45 0546 	orr.w	r5, r5, r6, lsl #1
 8000b88:	4329      	orrs	r1, r5
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000b8a:	68a5      	ldr	r5, [r4, #8]
 8000b8c:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8000b90:	d035      	beq.n	8000bfe <HAL_ADC_Init+0xca>
 8000b92:	2d01      	cmp	r5, #1
 8000b94:	bf08      	it	eq
 8000b96:	f44f 7380 	moveq.w	r3, #256	; 0x100
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000b9a:	7d27      	ldrb	r7, [r4, #20]
 8000b9c:	2f01      	cmp	r7, #1
 8000b9e:	d106      	bne.n	8000bae <HAL_ADC_Init+0x7a>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000ba0:	bb7e      	cbnz	r6, 8000c02 <HAL_ADC_Init+0xce>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000ba2:	69a6      	ldr	r6, [r4, #24]
 8000ba4:	3e01      	subs	r6, #1
 8000ba6:	ea43 3346 	orr.w	r3, r3, r6, lsl #13
 8000baa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
      MODIFY_REG(hadc->Instance->CR1,
 8000bae:	6856      	ldr	r6, [r2, #4]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000bb0:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR1,
 8000bb4:	f426 4669 	bic.w	r6, r6, #59648	; 0xe900
 8000bb8:	ea43 0306 	orr.w	r3, r3, r6
 8000bbc:	6053      	str	r3, [r2, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8000bbe:	6896      	ldr	r6, [r2, #8]
 8000bc0:	4b1f      	ldr	r3, [pc, #124]	; (8000c40 <HAL_ADC_Init+0x10c>)
 8000bc2:	ea03 0306 	and.w	r3, r3, r6
 8000bc6:	ea43 0301 	orr.w	r3, r3, r1
 8000bca:	6093      	str	r3, [r2, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000bcc:	d001      	beq.n	8000bd2 <HAL_ADC_Init+0x9e>
 8000bce:	2d01      	cmp	r5, #1
 8000bd0:	d120      	bne.n	8000c14 <HAL_ADC_Init+0xe0>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000bd2:	6923      	ldr	r3, [r4, #16]
 8000bd4:	3b01      	subs	r3, #1
 8000bd6:	051b      	lsls	r3, r3, #20
    MODIFY_REG(hadc->Instance->SQR1,
 8000bd8:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
 8000bda:	f425 0570 	bic.w	r5, r5, #15728640	; 0xf00000
 8000bde:	432b      	orrs	r3, r5
 8000be0:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000be2:	6892      	ldr	r2, [r2, #8]
 8000be4:	4b17      	ldr	r3, [pc, #92]	; (8000c44 <HAL_ADC_Init+0x110>)
 8000be6:	4013      	ands	r3, r2
 8000be8:	4299      	cmp	r1, r3
 8000bea:	d115      	bne.n	8000c18 <HAL_ADC_Init+0xe4>
      ADC_CLEAR_ERRORCODE(hadc);
 8000bec:	2300      	movs	r3, #0
 8000bee:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 8000bf0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000bf2:	f023 0303 	bic.w	r3, r3, #3
 8000bf6:	f043 0301 	orr.w	r3, r3, #1
 8000bfa:	62a3      	str	r3, [r4, #40]	; 0x28
 8000bfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000bfe:	462b      	mov	r3, r5
 8000c00:	e7cb      	b.n	8000b9a <HAL_ADC_Init+0x66>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000c02:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8000c04:	f046 0620 	orr.w	r6, r6, #32
 8000c08:	62a6      	str	r6, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c0a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000c0c:	f046 0601 	orr.w	r6, r6, #1
 8000c10:	62e6      	str	r6, [r4, #44]	; 0x2c
 8000c12:	e7cc      	b.n	8000bae <HAL_ADC_Init+0x7a>
  uint32_t tmp_sqr1 = 0U;
 8000c14:	2300      	movs	r3, #0
 8000c16:	e7df      	b.n	8000bd8 <HAL_ADC_Init+0xa4>
      ADC_STATE_CLR_SET(hadc->State,
 8000c18:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000c1a:	f023 0312 	bic.w	r3, r3, #18
 8000c1e:	f043 0310 	orr.w	r3, r3, #16
 8000c22:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c24:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000c26:	f043 0301 	orr.w	r3, r3, #1
 8000c2a:	62e3      	str	r3, [r4, #44]	; 0x2c
    return HAL_ERROR;
 8000c2c:	2001      	movs	r0, #1
}
 8000c2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c30:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000c32:	f043 0310 	orr.w	r3, r3, #16
 8000c36:	62a3      	str	r3, [r4, #40]	; 0x28
 8000c38:	e7f8      	b.n	8000c2c <HAL_ADC_Init+0xf8>
 8000c3a:	bf00      	nop
 8000c3c:	40013c00 	.word	0x40013c00
 8000c40:	ffe1f7fd 	.word	0xffe1f7fd
 8000c44:	ff1f0efe 	.word	0xff1f0efe

08000c48 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c48:	4a07      	ldr	r2, [pc, #28]	; (8000c68 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c4a:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c4c:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c4e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c52:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000c56:	041b      	lsls	r3, r3, #16
 8000c58:	0c1b      	lsrs	r3, r3, #16
 8000c5a:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8000c62:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000c64:	60d3      	str	r3, [r2, #12]
 8000c66:	4770      	bx	lr
 8000c68:	e000ed00 	.word	0xe000ed00

08000c6c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c6c:	4b17      	ldr	r3, [pc, #92]	; (8000ccc <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c6e:	b530      	push	{r4, r5, lr}
 8000c70:	68dc      	ldr	r4, [r3, #12]
 8000c72:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c76:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c7a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c7c:	2b04      	cmp	r3, #4
 8000c7e:	bf28      	it	cs
 8000c80:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c82:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c84:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c88:	bf98      	it	ls
 8000c8a:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c8c:	fa05 f303 	lsl.w	r3, r5, r3
 8000c90:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c94:	bf88      	it	hi
 8000c96:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c98:	4019      	ands	r1, r3
 8000c9a:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c9c:	fa05 f404 	lsl.w	r4, r5, r4
 8000ca0:	3c01      	subs	r4, #1
 8000ca2:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 8000ca4:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ca6:	ea42 0201 	orr.w	r2, r2, r1
 8000caa:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cae:	bfa9      	itett	ge
 8000cb0:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cb4:	4b06      	ldrlt	r3, [pc, #24]	; (8000cd0 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cb6:	b2d2      	uxtbge	r2, r2
 8000cb8:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cbc:	bfbb      	ittet	lt
 8000cbe:	f000 000f 	andlt.w	r0, r0, #15
 8000cc2:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cc4:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cc8:	541a      	strblt	r2, [r3, r0]
 8000cca:	bd30      	pop	{r4, r5, pc}
 8000ccc:	e000ed00 	.word	0xe000ed00
 8000cd0:	e000ed14 	.word	0xe000ed14

08000cd4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000cd4:	2800      	cmp	r0, #0
 8000cd6:	db08      	blt.n	8000cea <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cd8:	2301      	movs	r3, #1
 8000cda:	0942      	lsrs	r2, r0, #5
 8000cdc:	f000 001f 	and.w	r0, r0, #31
 8000ce0:	fa03 f000 	lsl.w	r0, r3, r0
 8000ce4:	4b01      	ldr	r3, [pc, #4]	; (8000cec <HAL_NVIC_EnableIRQ+0x18>)
 8000ce6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000cea:	4770      	bx	lr
 8000cec:	e000e100 	.word	0xe000e100

08000cf0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cf0:	3801      	subs	r0, #1
 8000cf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000cf6:	d20a      	bcs.n	8000d0e <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cf8:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cfa:	4b06      	ldr	r3, [pc, #24]	; (8000d14 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cfc:	4a06      	ldr	r2, [pc, #24]	; (8000d18 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cfe:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d00:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d04:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d06:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d08:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d0a:	601a      	str	r2, [r3, #0]
 8000d0c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000d0e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000d10:	4770      	bx	lr
 8000d12:	bf00      	nop
 8000d14:	e000e010 	.word	0xe000e010
 8000d18:	e000ed00 	.word	0xe000ed00

08000d1c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000d1c:	b510      	push	{r4, lr}
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000d1e:	2800      	cmp	r0, #0
 8000d20:	d032      	beq.n	8000d88 <HAL_DMA_Init+0x6c>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000d22:	6801      	ldr	r1, [r0, #0]
 8000d24:	4b19      	ldr	r3, [pc, #100]	; (8000d8c <HAL_DMA_Init+0x70>)
 8000d26:	2414      	movs	r4, #20
 8000d28:	4299      	cmp	r1, r3
 8000d2a:	d825      	bhi.n	8000d78 <HAL_DMA_Init+0x5c>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000d2c:	4a18      	ldr	r2, [pc, #96]	; (8000d90 <HAL_DMA_Init+0x74>)
    hdma->DmaBaseAddress = DMA1;
 8000d2e:	f2a3 4307 	subw	r3, r3, #1031	; 0x407
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000d32:	440a      	add	r2, r1
 8000d34:	fbb2 f2f4 	udiv	r2, r2, r4
 8000d38:	0092      	lsls	r2, r2, #2
 8000d3a:	6402      	str	r2, [r0, #64]	; 0x40
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000d3c:	6884      	ldr	r4, [r0, #8]
    hdma->DmaBaseAddress = DMA2;
 8000d3e:	63c3      	str	r3, [r0, #60]	; 0x3c
  tmp |=  hdma->Init.Direction        |
 8000d40:	6843      	ldr	r3, [r0, #4]
  tmp = hdma->Instance->CCR;
 8000d42:	680a      	ldr	r2, [r1, #0]
  tmp |=  hdma->Init.Direction        |
 8000d44:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d46:	68c4      	ldr	r4, [r0, #12]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000d48:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d4c:	4323      	orrs	r3, r4
 8000d4e:	6904      	ldr	r4, [r0, #16]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000d50:	f022 0230 	bic.w	r2, r2, #48	; 0x30
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d54:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d56:	6944      	ldr	r4, [r0, #20]
 8000d58:	4323      	orrs	r3, r4
 8000d5a:	6984      	ldr	r4, [r0, #24]
 8000d5c:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 8000d5e:	69c4      	ldr	r4, [r0, #28]
 8000d60:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 8000d62:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000d64:	600b      	str	r3, [r1, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000d66:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000d68:	2300      	movs	r3, #0
  hdma->State = HAL_DMA_STATE_READY;
 8000d6a:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000d6e:	6383      	str	r3, [r0, #56]	; 0x38
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000d70:	f880 3020 	strb.w	r3, [r0, #32]

  return HAL_OK;
 8000d74:	4618      	mov	r0, r3
 8000d76:	bd10      	pop	{r4, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8000d78:	4b06      	ldr	r3, [pc, #24]	; (8000d94 <HAL_DMA_Init+0x78>)
 8000d7a:	440b      	add	r3, r1
 8000d7c:	fbb3 f3f4 	udiv	r3, r3, r4
 8000d80:	009b      	lsls	r3, r3, #2
 8000d82:	6403      	str	r3, [r0, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8000d84:	4b04      	ldr	r3, [pc, #16]	; (8000d98 <HAL_DMA_Init+0x7c>)
 8000d86:	e7d9      	b.n	8000d3c <HAL_DMA_Init+0x20>
    return HAL_ERROR;
 8000d88:	2001      	movs	r0, #1
}
 8000d8a:	bd10      	pop	{r4, pc}
 8000d8c:	40020407 	.word	0x40020407
 8000d90:	bffdfff8 	.word	0xbffdfff8
 8000d94:	bffdfbf8 	.word	0xbffdfbf8
 8000d98:	40020400 	.word	0x40020400

08000d9c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000d9c:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000d9e:	f890 4020 	ldrb.w	r4, [r0, #32]
 8000da2:	2c01      	cmp	r4, #1
 8000da4:	d035      	beq.n	8000e12 <HAL_DMA_Start_IT+0x76>
 8000da6:	2401      	movs	r4, #1
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000da8:	f890 5021 	ldrb.w	r5, [r0, #33]	; 0x21
  __HAL_LOCK(hdma);
 8000dac:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8000db0:	42a5      	cmp	r5, r4
 8000db2:	f04f 0600 	mov.w	r6, #0
 8000db6:	f04f 0402 	mov.w	r4, #2
 8000dba:	d128      	bne.n	8000e0e <HAL_DMA_Start_IT+0x72>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000dbc:	f880 4021 	strb.w	r4, [r0, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000dc0:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000dc2:	6386      	str	r6, [r0, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 8000dc4:	6826      	ldr	r6, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000dc6:	6c07      	ldr	r7, [r0, #64]	; 0x40
    __HAL_DMA_DISABLE(hdma);
 8000dc8:	f026 0601 	bic.w	r6, r6, #1
 8000dcc:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000dce:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
 8000dd0:	40bd      	lsls	r5, r7
 8000dd2:	6075      	str	r5, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000dd4:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000dd6:	6843      	ldr	r3, [r0, #4]
 8000dd8:	6805      	ldr	r5, [r0, #0]
 8000dda:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback)
 8000ddc:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000dde:	bf0b      	itete	eq
 8000de0:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8000de2:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8000de4:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8000de6:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 8000de8:	b14b      	cbz	r3, 8000dfe <HAL_DMA_Start_IT+0x62>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000dea:	6823      	ldr	r3, [r4, #0]
 8000dec:	f043 030e 	orr.w	r3, r3, #14
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000df0:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8000df2:	682b      	ldr	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000df4:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8000df6:	f043 0301 	orr.w	r3, r3, #1
 8000dfa:	602b      	str	r3, [r5, #0]
 8000dfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000dfe:	6823      	ldr	r3, [r4, #0]
 8000e00:	f023 0304 	bic.w	r3, r3, #4
 8000e04:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000e06:	6823      	ldr	r3, [r4, #0]
 8000e08:	f043 030a 	orr.w	r3, r3, #10
 8000e0c:	e7f0      	b.n	8000df0 <HAL_DMA_Start_IT+0x54>
    __HAL_UNLOCK(hdma); 
 8000e0e:	f880 6020 	strb.w	r6, [r0, #32]
  __HAL_LOCK(hdma);
 8000e12:	2002      	movs	r0, #2
}
 8000e14:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08000e18 <HAL_DMA_IRQHandler>:
{
 8000e18:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000e1a:	2504      	movs	r5, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000e1c:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000e1e:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000e20:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8000e22:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000e24:	4095      	lsls	r5, r2
 8000e26:	4225      	tst	r5, r4
  uint32_t source_it = hdma->Instance->CCR;
 8000e28:	6819      	ldr	r1, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000e2a:	d055      	beq.n	8000ed8 <HAL_DMA_IRQHandler+0xc0>
 8000e2c:	074d      	lsls	r5, r1, #29
 8000e2e:	d553      	bpl.n	8000ed8 <HAL_DMA_IRQHandler+0xc0>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000e30:	681a      	ldr	r2, [r3, #0]
 8000e32:	0696      	lsls	r6, r2, #26
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000e34:	bf5e      	ittt	pl
 8000e36:	681a      	ldrpl	r2, [r3, #0]
 8000e38:	f022 0204 	bicpl.w	r2, r2, #4
 8000e3c:	601a      	strpl	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000e3e:	4a60      	ldr	r2, [pc, #384]	; (8000fc0 <HAL_DMA_IRQHandler+0x1a8>)
 8000e40:	4293      	cmp	r3, r2
 8000e42:	d91f      	bls.n	8000e84 <HAL_DMA_IRQHandler+0x6c>
 8000e44:	f502 7262 	add.w	r2, r2, #904	; 0x388
 8000e48:	4293      	cmp	r3, r2
 8000e4a:	d014      	beq.n	8000e76 <HAL_DMA_IRQHandler+0x5e>
 8000e4c:	3214      	adds	r2, #20
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d013      	beq.n	8000e7a <HAL_DMA_IRQHandler+0x62>
 8000e52:	3214      	adds	r2, #20
 8000e54:	4293      	cmp	r3, r2
 8000e56:	d012      	beq.n	8000e7e <HAL_DMA_IRQHandler+0x66>
 8000e58:	3214      	adds	r2, #20
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	bf0c      	ite	eq
 8000e5e:	f44f 4380 	moveq.w	r3, #16384	; 0x4000
 8000e62:	f44f 2380 	movne.w	r3, #262144	; 0x40000
 8000e66:	4a57      	ldr	r2, [pc, #348]	; (8000fc4 <HAL_DMA_IRQHandler+0x1ac>)
 8000e68:	6053      	str	r3, [r2, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 8000e6a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (hdma->XferErrorCallback != NULL)
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	f000 80a5 	beq.w	8000fbc <HAL_DMA_IRQHandler+0x1a4>
}
 8000e72:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8000e74:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000e76:	2304      	movs	r3, #4
 8000e78:	e7f5      	b.n	8000e66 <HAL_DMA_IRQHandler+0x4e>
 8000e7a:	2340      	movs	r3, #64	; 0x40
 8000e7c:	e7f3      	b.n	8000e66 <HAL_DMA_IRQHandler+0x4e>
 8000e7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e82:	e7f0      	b.n	8000e66 <HAL_DMA_IRQHandler+0x4e>
 8000e84:	4950      	ldr	r1, [pc, #320]	; (8000fc8 <HAL_DMA_IRQHandler+0x1b0>)
 8000e86:	428b      	cmp	r3, r1
 8000e88:	d016      	beq.n	8000eb8 <HAL_DMA_IRQHandler+0xa0>
 8000e8a:	3114      	adds	r1, #20
 8000e8c:	428b      	cmp	r3, r1
 8000e8e:	d015      	beq.n	8000ebc <HAL_DMA_IRQHandler+0xa4>
 8000e90:	3114      	adds	r1, #20
 8000e92:	428b      	cmp	r3, r1
 8000e94:	d014      	beq.n	8000ec0 <HAL_DMA_IRQHandler+0xa8>
 8000e96:	3114      	adds	r1, #20
 8000e98:	428b      	cmp	r3, r1
 8000e9a:	d014      	beq.n	8000ec6 <HAL_DMA_IRQHandler+0xae>
 8000e9c:	3114      	adds	r1, #20
 8000e9e:	428b      	cmp	r3, r1
 8000ea0:	d014      	beq.n	8000ecc <HAL_DMA_IRQHandler+0xb4>
 8000ea2:	3114      	adds	r1, #20
 8000ea4:	428b      	cmp	r3, r1
 8000ea6:	d014      	beq.n	8000ed2 <HAL_DMA_IRQHandler+0xba>
 8000ea8:	4293      	cmp	r3, r2
 8000eaa:	bf14      	ite	ne
 8000eac:	f44f 2380 	movne.w	r3, #262144	; 0x40000
 8000eb0:	f04f 6380 	moveq.w	r3, #67108864	; 0x4000000
 8000eb4:	4a45      	ldr	r2, [pc, #276]	; (8000fcc <HAL_DMA_IRQHandler+0x1b4>)
 8000eb6:	e7d7      	b.n	8000e68 <HAL_DMA_IRQHandler+0x50>
 8000eb8:	2304      	movs	r3, #4
 8000eba:	e7fb      	b.n	8000eb4 <HAL_DMA_IRQHandler+0x9c>
 8000ebc:	2340      	movs	r3, #64	; 0x40
 8000ebe:	e7f9      	b.n	8000eb4 <HAL_DMA_IRQHandler+0x9c>
 8000ec0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ec4:	e7f6      	b.n	8000eb4 <HAL_DMA_IRQHandler+0x9c>
 8000ec6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000eca:	e7f3      	b.n	8000eb4 <HAL_DMA_IRQHandler+0x9c>
 8000ecc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000ed0:	e7f0      	b.n	8000eb4 <HAL_DMA_IRQHandler+0x9c>
 8000ed2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000ed6:	e7ed      	b.n	8000eb4 <HAL_DMA_IRQHandler+0x9c>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8000ed8:	2502      	movs	r5, #2
 8000eda:	4095      	lsls	r5, r2
 8000edc:	4225      	tst	r5, r4
 8000ede:	d057      	beq.n	8000f90 <HAL_DMA_IRQHandler+0x178>
 8000ee0:	078d      	lsls	r5, r1, #30
 8000ee2:	d555      	bpl.n	8000f90 <HAL_DMA_IRQHandler+0x178>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000ee4:	681a      	ldr	r2, [r3, #0]
 8000ee6:	0694      	lsls	r4, r2, #26
 8000ee8:	d406      	bmi.n	8000ef8 <HAL_DMA_IRQHandler+0xe0>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8000eea:	681a      	ldr	r2, [r3, #0]
 8000eec:	f022 020a 	bic.w	r2, r2, #10
 8000ef0:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000ef8:	4a31      	ldr	r2, [pc, #196]	; (8000fc0 <HAL_DMA_IRQHandler+0x1a8>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d91e      	bls.n	8000f3c <HAL_DMA_IRQHandler+0x124>
 8000efe:	f502 7262 	add.w	r2, r2, #904	; 0x388
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d013      	beq.n	8000f2e <HAL_DMA_IRQHandler+0x116>
 8000f06:	3214      	adds	r2, #20
 8000f08:	4293      	cmp	r3, r2
 8000f0a:	d012      	beq.n	8000f32 <HAL_DMA_IRQHandler+0x11a>
 8000f0c:	3214      	adds	r2, #20
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d011      	beq.n	8000f36 <HAL_DMA_IRQHandler+0x11e>
 8000f12:	3214      	adds	r2, #20
 8000f14:	4293      	cmp	r3, r2
 8000f16:	bf0c      	ite	eq
 8000f18:	f44f 5300 	moveq.w	r3, #8192	; 0x2000
 8000f1c:	f44f 3300 	movne.w	r3, #131072	; 0x20000
 8000f20:	4a28      	ldr	r2, [pc, #160]	; (8000fc4 <HAL_DMA_IRQHandler+0x1ac>)
 8000f22:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 8000f24:	2300      	movs	r3, #0
 8000f26:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8000f2a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000f2c:	e79e      	b.n	8000e6c <HAL_DMA_IRQHandler+0x54>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000f2e:	2302      	movs	r3, #2
 8000f30:	e7f6      	b.n	8000f20 <HAL_DMA_IRQHandler+0x108>
 8000f32:	2320      	movs	r3, #32
 8000f34:	e7f4      	b.n	8000f20 <HAL_DMA_IRQHandler+0x108>
 8000f36:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f3a:	e7f1      	b.n	8000f20 <HAL_DMA_IRQHandler+0x108>
 8000f3c:	4922      	ldr	r1, [pc, #136]	; (8000fc8 <HAL_DMA_IRQHandler+0x1b0>)
 8000f3e:	428b      	cmp	r3, r1
 8000f40:	d016      	beq.n	8000f70 <HAL_DMA_IRQHandler+0x158>
 8000f42:	3114      	adds	r1, #20
 8000f44:	428b      	cmp	r3, r1
 8000f46:	d015      	beq.n	8000f74 <HAL_DMA_IRQHandler+0x15c>
 8000f48:	3114      	adds	r1, #20
 8000f4a:	428b      	cmp	r3, r1
 8000f4c:	d014      	beq.n	8000f78 <HAL_DMA_IRQHandler+0x160>
 8000f4e:	3114      	adds	r1, #20
 8000f50:	428b      	cmp	r3, r1
 8000f52:	d014      	beq.n	8000f7e <HAL_DMA_IRQHandler+0x166>
 8000f54:	3114      	adds	r1, #20
 8000f56:	428b      	cmp	r3, r1
 8000f58:	d014      	beq.n	8000f84 <HAL_DMA_IRQHandler+0x16c>
 8000f5a:	3114      	adds	r1, #20
 8000f5c:	428b      	cmp	r3, r1
 8000f5e:	d014      	beq.n	8000f8a <HAL_DMA_IRQHandler+0x172>
 8000f60:	4293      	cmp	r3, r2
 8000f62:	bf14      	ite	ne
 8000f64:	f44f 3300 	movne.w	r3, #131072	; 0x20000
 8000f68:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 8000f6c:	4a17      	ldr	r2, [pc, #92]	; (8000fcc <HAL_DMA_IRQHandler+0x1b4>)
 8000f6e:	e7d8      	b.n	8000f22 <HAL_DMA_IRQHandler+0x10a>
 8000f70:	2302      	movs	r3, #2
 8000f72:	e7fb      	b.n	8000f6c <HAL_DMA_IRQHandler+0x154>
 8000f74:	2320      	movs	r3, #32
 8000f76:	e7f9      	b.n	8000f6c <HAL_DMA_IRQHandler+0x154>
 8000f78:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f7c:	e7f6      	b.n	8000f6c <HAL_DMA_IRQHandler+0x154>
 8000f7e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f82:	e7f3      	b.n	8000f6c <HAL_DMA_IRQHandler+0x154>
 8000f84:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f88:	e7f0      	b.n	8000f6c <HAL_DMA_IRQHandler+0x154>
 8000f8a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000f8e:	e7ed      	b.n	8000f6c <HAL_DMA_IRQHandler+0x154>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000f90:	2508      	movs	r5, #8
 8000f92:	4095      	lsls	r5, r2
 8000f94:	4225      	tst	r5, r4
 8000f96:	d011      	beq.n	8000fbc <HAL_DMA_IRQHandler+0x1a4>
 8000f98:	0709      	lsls	r1, r1, #28
 8000f9a:	d50f      	bpl.n	8000fbc <HAL_DMA_IRQHandler+0x1a4>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f9c:	6819      	ldr	r1, [r3, #0]
 8000f9e:	f021 010e 	bic.w	r1, r1, #14
 8000fa2:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	fa03 f202 	lsl.w	r2, r3, r2
 8000faa:	6072      	str	r2, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000fac:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 8000fae:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 8000fb8:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8000fba:	e757      	b.n	8000e6c <HAL_DMA_IRQHandler+0x54>
}
 8000fbc:	bc70      	pop	{r4, r5, r6}
 8000fbe:	4770      	bx	lr
 8000fc0:	40020080 	.word	0x40020080
 8000fc4:	40020400 	.word	0x40020400
 8000fc8:	40020008 	.word	0x40020008
 8000fcc:	40020000 	.word	0x40020000

08000fd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fd0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000fd4:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 8000fd6:	4626      	mov	r6, r4
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000fd8:	4f6c      	ldr	r7, [pc, #432]	; (800118c <HAL_GPIO_Init+0x1bc>)
 8000fda:	4b6d      	ldr	r3, [pc, #436]	; (8001190 <HAL_GPIO_Init+0x1c0>)
        temp = AFIO->EXTICR[position >> 2u];
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000fdc:	f8df e1b8 	ldr.w	lr, [pc, #440]	; 8001198 <HAL_GPIO_Init+0x1c8>
      switch (GPIO_Init->Mode)
 8000fe0:	f8df c1b8 	ldr.w	ip, [pc, #440]	; 800119c <HAL_GPIO_Init+0x1cc>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fe4:	680a      	ldr	r2, [r1, #0]
 8000fe6:	fa32 f506 	lsrs.w	r5, r2, r6
 8000fea:	d102      	bne.n	8000ff2 <HAL_GPIO_Init+0x22>
      }
    }

	position++;
  }
}
 8000fec:	b003      	add	sp, #12
 8000fee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 8000ff2:	f04f 0801 	mov.w	r8, #1
 8000ff6:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ffa:	ea02 0208 	and.w	r2, r2, r8
    if (iocurrent == ioposition)
 8000ffe:	4590      	cmp	r8, r2
 8001000:	f040 8084 	bne.w	800110c <HAL_GPIO_Init+0x13c>
      switch (GPIO_Init->Mode)
 8001004:	684d      	ldr	r5, [r1, #4]
 8001006:	2d12      	cmp	r5, #18
 8001008:	f000 80b1 	beq.w	800116e <HAL_GPIO_Init+0x19e>
 800100c:	f200 8087 	bhi.w	800111e <HAL_GPIO_Init+0x14e>
 8001010:	2d02      	cmp	r5, #2
 8001012:	f000 80a9 	beq.w	8001168 <HAL_GPIO_Init+0x198>
 8001016:	d87b      	bhi.n	8001110 <HAL_GPIO_Init+0x140>
 8001018:	2d00      	cmp	r5, #0
 800101a:	f000 808c 	beq.w	8001136 <HAL_GPIO_Init+0x166>
 800101e:	2d01      	cmp	r5, #1
 8001020:	f000 80a0 	beq.w	8001164 <HAL_GPIO_Init+0x194>
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001024:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001028:	2aff      	cmp	r2, #255	; 0xff
 800102a:	bf93      	iteet	ls
 800102c:	4682      	movls	sl, r0
 800102e:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 8001032:	3d08      	subhi	r5, #8
 8001034:	f8d0 b000 	ldrls.w	fp, [r0]
 8001038:	bf92      	itee	ls
 800103a:	00b5      	lslls	r5, r6, #2
 800103c:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8001040:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001042:	fa09 f805 	lsl.w	r8, r9, r5
 8001046:	ea2b 0808 	bic.w	r8, fp, r8
 800104a:	fa04 f505 	lsl.w	r5, r4, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800104e:	bf88      	it	hi
 8001050:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001054:	ea48 0505 	orr.w	r5, r8, r5
 8001058:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800105c:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8001060:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8001064:	d052      	beq.n	800110c <HAL_GPIO_Init+0x13c>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001066:	69bd      	ldr	r5, [r7, #24]
 8001068:	f026 0803 	bic.w	r8, r6, #3
 800106c:	f045 0501 	orr.w	r5, r5, #1
 8001070:	61bd      	str	r5, [r7, #24]
 8001072:	69bd      	ldr	r5, [r7, #24]
 8001074:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8001078:	f005 0501 	and.w	r5, r5, #1
 800107c:	9501      	str	r5, [sp, #4]
 800107e:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001082:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001086:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001088:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 800108c:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001090:	fa09 f90b 	lsl.w	r9, r9, fp
 8001094:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001098:	4d3e      	ldr	r5, [pc, #248]	; (8001194 <HAL_GPIO_Init+0x1c4>)
 800109a:	42a8      	cmp	r0, r5
 800109c:	d06c      	beq.n	8001178 <HAL_GPIO_Init+0x1a8>
 800109e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80010a2:	42a8      	cmp	r0, r5
 80010a4:	d06a      	beq.n	800117c <HAL_GPIO_Init+0x1ac>
 80010a6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80010aa:	42a8      	cmp	r0, r5
 80010ac:	d068      	beq.n	8001180 <HAL_GPIO_Init+0x1b0>
 80010ae:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80010b2:	42a8      	cmp	r0, r5
 80010b4:	d066      	beq.n	8001184 <HAL_GPIO_Init+0x1b4>
 80010b6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80010ba:	42a8      	cmp	r0, r5
 80010bc:	d064      	beq.n	8001188 <HAL_GPIO_Init+0x1b8>
 80010be:	4570      	cmp	r0, lr
 80010c0:	bf0c      	ite	eq
 80010c2:	2505      	moveq	r5, #5
 80010c4:	2506      	movne	r5, #6
 80010c6:	fa05 f50b 	lsl.w	r5, r5, fp
 80010ca:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 80010ce:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 80010d2:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010d4:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 80010d8:	bf14      	ite	ne
 80010da:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80010dc:	4395      	biceq	r5, r2
 80010de:	601d      	str	r5, [r3, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 80010e0:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010e2:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80010e6:	bf14      	ite	ne
 80010e8:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80010ea:	4395      	biceq	r5, r2
 80010ec:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 80010ee:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010f0:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 80010f4:	bf14      	ite	ne
 80010f6:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80010f8:	4395      	biceq	r5, r2
 80010fa:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 80010fc:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010fe:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8001102:	bf14      	ite	ne
 8001104:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001106:	ea25 0202 	biceq.w	r2, r5, r2
 800110a:	60da      	str	r2, [r3, #12]
	position++;
 800110c:	3601      	adds	r6, #1
 800110e:	e769      	b.n	8000fe4 <HAL_GPIO_Init+0x14>
      switch (GPIO_Init->Mode)
 8001110:	2d03      	cmp	r5, #3
 8001112:	d025      	beq.n	8001160 <HAL_GPIO_Init+0x190>
 8001114:	2d11      	cmp	r5, #17
 8001116:	d185      	bne.n	8001024 <HAL_GPIO_Init+0x54>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001118:	68cc      	ldr	r4, [r1, #12]
 800111a:	3404      	adds	r4, #4
          break;
 800111c:	e782      	b.n	8001024 <HAL_GPIO_Init+0x54>
      switch (GPIO_Init->Mode)
 800111e:	4565      	cmp	r5, ip
 8001120:	d009      	beq.n	8001136 <HAL_GPIO_Init+0x166>
 8001122:	d812      	bhi.n	800114a <HAL_GPIO_Init+0x17a>
 8001124:	f8df 9078 	ldr.w	r9, [pc, #120]	; 80011a0 <HAL_GPIO_Init+0x1d0>
 8001128:	454d      	cmp	r5, r9
 800112a:	d004      	beq.n	8001136 <HAL_GPIO_Init+0x166>
 800112c:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8001130:	454d      	cmp	r5, r9
 8001132:	f47f af77 	bne.w	8001024 <HAL_GPIO_Init+0x54>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001136:	688c      	ldr	r4, [r1, #8]
 8001138:	b1e4      	cbz	r4, 8001174 <HAL_GPIO_Init+0x1a4>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800113a:	2c01      	cmp	r4, #1
            GPIOx->BSRR = ioposition;
 800113c:	bf0c      	ite	eq
 800113e:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8001142:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001146:	2408      	movs	r4, #8
 8001148:	e76c      	b.n	8001024 <HAL_GPIO_Init+0x54>
      switch (GPIO_Init->Mode)
 800114a:	f8df 9058 	ldr.w	r9, [pc, #88]	; 80011a4 <HAL_GPIO_Init+0x1d4>
 800114e:	454d      	cmp	r5, r9
 8001150:	d0f1      	beq.n	8001136 <HAL_GPIO_Init+0x166>
 8001152:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8001156:	454d      	cmp	r5, r9
 8001158:	d0ed      	beq.n	8001136 <HAL_GPIO_Init+0x166>
 800115a:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 800115e:	e7e7      	b.n	8001130 <HAL_GPIO_Init+0x160>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001160:	2400      	movs	r4, #0
 8001162:	e75f      	b.n	8001024 <HAL_GPIO_Init+0x54>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001164:	68cc      	ldr	r4, [r1, #12]
          break;
 8001166:	e75d      	b.n	8001024 <HAL_GPIO_Init+0x54>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001168:	68cc      	ldr	r4, [r1, #12]
 800116a:	3408      	adds	r4, #8
          break;
 800116c:	e75a      	b.n	8001024 <HAL_GPIO_Init+0x54>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800116e:	68cc      	ldr	r4, [r1, #12]
 8001170:	340c      	adds	r4, #12
          break;
 8001172:	e757      	b.n	8001024 <HAL_GPIO_Init+0x54>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001174:	2404      	movs	r4, #4
 8001176:	e755      	b.n	8001024 <HAL_GPIO_Init+0x54>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001178:	2500      	movs	r5, #0
 800117a:	e7a4      	b.n	80010c6 <HAL_GPIO_Init+0xf6>
 800117c:	2501      	movs	r5, #1
 800117e:	e7a2      	b.n	80010c6 <HAL_GPIO_Init+0xf6>
 8001180:	2502      	movs	r5, #2
 8001182:	e7a0      	b.n	80010c6 <HAL_GPIO_Init+0xf6>
 8001184:	2503      	movs	r5, #3
 8001186:	e79e      	b.n	80010c6 <HAL_GPIO_Init+0xf6>
 8001188:	2504      	movs	r5, #4
 800118a:	e79c      	b.n	80010c6 <HAL_GPIO_Init+0xf6>
 800118c:	40021000 	.word	0x40021000
 8001190:	40010400 	.word	0x40010400
 8001194:	40010800 	.word	0x40010800
 8001198:	40011c00 	.word	0x40011c00
 800119c:	10210000 	.word	0x10210000
 80011a0:	10110000 	.word	0x10110000
 80011a4:	10310000 	.word	0x10310000

080011a8 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80011a8:	6883      	ldr	r3, [r0, #8]
 80011aa:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80011ac:	bf14      	ite	ne
 80011ae:	2001      	movne	r0, #1
 80011b0:	2000      	moveq	r0, #0
 80011b2:	4770      	bx	lr

080011b4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80011b4:	b10a      	cbz	r2, 80011ba <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80011b6:	6101      	str	r1, [r0, #16]
 80011b8:	4770      	bx	lr
 80011ba:	0409      	lsls	r1, r1, #16
 80011bc:	e7fb      	b.n	80011b6 <HAL_GPIO_WritePin+0x2>

080011be <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80011be:	68c3      	ldr	r3, [r0, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80011c0:	ea03 0201 	and.w	r2, r3, r1
 80011c4:	ea21 0103 	bic.w	r1, r1, r3
 80011c8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80011cc:	6101      	str	r1, [r0, #16]
 80011ce:	4770      	bx	lr

080011d0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80011d0:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80011d2:	4b04      	ldr	r3, [pc, #16]	; (80011e4 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 80011d4:	6959      	ldr	r1, [r3, #20]
 80011d6:	4201      	tst	r1, r0
 80011d8:	d002      	beq.n	80011e0 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80011da:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80011dc:	f002 fd94 	bl	8003d08 <HAL_GPIO_EXTI_Callback>
 80011e0:	bd08      	pop	{r3, pc}
 80011e2:	bf00      	nop
 80011e4:	40010400 	.word	0x40010400

080011e8 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80011e8:	6801      	ldr	r1, [r0, #0]
 80011ea:	2200      	movs	r2, #0
 80011ec:	694b      	ldr	r3, [r1, #20]
 80011ee:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 80011f2:	d010      	beq.n	8001216 <I2C_IsAcknowledgeFailed+0x2e>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80011f4:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 80011f8:	614b      	str	r3, [r1, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 80011fa:	2320      	movs	r3, #32
    hi2c->PreviousState       = I2C_STATE_NONE;
 80011fc:	6302      	str	r2, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80011fe:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001202:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001206:	6c03      	ldr	r3, [r0, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001208:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800120c:	f043 0304 	orr.w	r3, r3, #4
 8001210:	6403      	str	r3, [r0, #64]	; 0x40

    return HAL_ERROR;
 8001212:	2001      	movs	r0, #1
 8001214:	4770      	bx	lr
  }
  return HAL_OK;
 8001216:	4618      	mov	r0, r3
}
 8001218:	4770      	bx	lr

0800121a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 800121a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800121e:	4604      	mov	r4, r0
 8001220:	4617      	mov	r7, r2
 8001222:	4699      	mov	r9, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001224:	f3c1 4807 	ubfx	r8, r1, #16, #8
 8001228:	b28e      	uxth	r6, r1
 800122a:	6825      	ldr	r5, [r4, #0]
 800122c:	f1b8 0f01 	cmp.w	r8, #1
 8001230:	bf0c      	ite	eq
 8001232:	696b      	ldreq	r3, [r5, #20]
 8001234:	69ab      	ldrne	r3, [r5, #24]
 8001236:	ea36 0303 	bics.w	r3, r6, r3
 800123a:	bf14      	ite	ne
 800123c:	2001      	movne	r0, #1
 800123e:	2000      	moveq	r0, #0
 8001240:	b908      	cbnz	r0, 8001246 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x2c>
}
 8001242:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001246:	696b      	ldr	r3, [r5, #20]
 8001248:	055a      	lsls	r2, r3, #21
 800124a:	d516      	bpl.n	800127a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x60>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800124c:	682b      	ldr	r3, [r5, #0]
      hi2c->State               = HAL_I2C_STATE_READY;
 800124e:	2220      	movs	r2, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001250:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001254:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001256:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 800125a:	616b      	str	r3, [r5, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 800125c:	2300      	movs	r3, #0
 800125e:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001260:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001264:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001268:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800126a:	f042 0204 	orr.w	r2, r2, #4
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800126e:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8001270:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8001274:	2001      	movs	r0, #1
 8001276:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (Timeout != HAL_MAX_DELAY)
 800127a:	1c7b      	adds	r3, r7, #1
 800127c:	d0d5      	beq.n	800122a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800127e:	f7ff fa99 	bl	80007b4 <HAL_GetTick>
 8001282:	eba0 0009 	sub.w	r0, r0, r9
 8001286:	4287      	cmp	r7, r0
 8001288:	d301      	bcc.n	800128e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x74>
 800128a:	2f00      	cmp	r7, #0
 800128c:	d1cd      	bne.n	800122a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        hi2c->PreviousState       = I2C_STATE_NONE;
 800128e:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8001290:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001292:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001294:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001298:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800129c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800129e:	f042 0220 	orr.w	r2, r2, #32
 80012a2:	e7e4      	b.n	800126e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x54>

080012a4 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 80012a4:	b570      	push	{r4, r5, r6, lr}
 80012a6:	4604      	mov	r4, r0
 80012a8:	460d      	mov	r5, r1
 80012aa:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80012ac:	6823      	ldr	r3, [r4, #0]
 80012ae:	695b      	ldr	r3, [r3, #20]
 80012b0:	075b      	lsls	r3, r3, #29
 80012b2:	d501      	bpl.n	80012b8 <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 80012b4:	2000      	movs	r0, #0
 80012b6:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80012b8:	4620      	mov	r0, r4
 80012ba:	f7ff ff95 	bl	80011e8 <I2C_IsAcknowledgeFailed>
 80012be:	b9a8      	cbnz	r0, 80012ec <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 80012c0:	1c6a      	adds	r2, r5, #1
 80012c2:	d0f3      	beq.n	80012ac <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80012c4:	f7ff fa76 	bl	80007b4 <HAL_GetTick>
 80012c8:	1b80      	subs	r0, r0, r6
 80012ca:	4285      	cmp	r5, r0
 80012cc:	d301      	bcc.n	80012d2 <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 80012ce:	2d00      	cmp	r5, #0
 80012d0:	d1ec      	bne.n	80012ac <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 80012d2:	2300      	movs	r3, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 80012d4:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 80012d6:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80012d8:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80012dc:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80012e0:	6c22      	ldr	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 80012e2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80012e6:	f042 0220 	orr.w	r2, r2, #32
 80012ea:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 80012ec:	2001      	movs	r0, #1
}
 80012ee:	bd70      	pop	{r4, r5, r6, pc}

080012f0 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 80012f0:	b570      	push	{r4, r5, r6, lr}
 80012f2:	4604      	mov	r4, r0
 80012f4:	460d      	mov	r5, r1
 80012f6:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80012f8:	6820      	ldr	r0, [r4, #0]
 80012fa:	6943      	ldr	r3, [r0, #20]
 80012fc:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8001300:	d001      	beq.n	8001306 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
  return HAL_OK;
 8001302:	2000      	movs	r0, #0
}
 8001304:	bd70      	pop	{r4, r5, r6, pc}
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001306:	6942      	ldr	r2, [r0, #20]
 8001308:	06d2      	lsls	r2, r2, #27
 800130a:	d50e      	bpl.n	800132a <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800130c:	f06f 0210 	mvn.w	r2, #16
 8001310:	6142      	str	r2, [r0, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 8001312:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001314:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001316:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800131a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800131e:	6c22      	ldr	r2, [r4, #64]	; 0x40
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001320:	6422      	str	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8001322:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8001326:	2001      	movs	r0, #1
 8001328:	bd70      	pop	{r4, r5, r6, pc}
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800132a:	f7ff fa43 	bl	80007b4 <HAL_GetTick>
 800132e:	1b80      	subs	r0, r0, r6
 8001330:	42a8      	cmp	r0, r5
 8001332:	d801      	bhi.n	8001338 <I2C_WaitOnRXNEFlagUntilTimeout+0x48>
 8001334:	2d00      	cmp	r5, #0
 8001336:	d1df      	bne.n	80012f8 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001338:	2300      	movs	r3, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 800133a:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 800133c:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800133e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001342:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001346:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001348:	f042 0220 	orr.w	r2, r2, #32
 800134c:	e7e8      	b.n	8001320 <I2C_WaitOnRXNEFlagUntilTimeout+0x30>

0800134e <I2C_WaitOnFlagUntilTimeout>:
{
 800134e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001352:	4604      	mov	r4, r0
 8001354:	4690      	mov	r8, r2
 8001356:	461f      	mov	r7, r3
 8001358:	9e08      	ldr	r6, [sp, #32]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800135a:	f3c1 4907 	ubfx	r9, r1, #16, #8
 800135e:	b28d      	uxth	r5, r1
 8001360:	6823      	ldr	r3, [r4, #0]
 8001362:	f1b9 0f01 	cmp.w	r9, #1
 8001366:	bf0c      	ite	eq
 8001368:	695b      	ldreq	r3, [r3, #20]
 800136a:	699b      	ldrne	r3, [r3, #24]
 800136c:	ea35 0303 	bics.w	r3, r5, r3
 8001370:	bf0c      	ite	eq
 8001372:	2301      	moveq	r3, #1
 8001374:	2300      	movne	r3, #0
 8001376:	4543      	cmp	r3, r8
 8001378:	d002      	beq.n	8001380 <I2C_WaitOnFlagUntilTimeout+0x32>
  return HAL_OK;
 800137a:	2000      	movs	r0, #0
}
 800137c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (Timeout != HAL_MAX_DELAY)
 8001380:	1c7b      	adds	r3, r7, #1
 8001382:	d0ed      	beq.n	8001360 <I2C_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001384:	f7ff fa16 	bl	80007b4 <HAL_GetTick>
 8001388:	1b80      	subs	r0, r0, r6
 800138a:	4287      	cmp	r7, r0
 800138c:	d301      	bcc.n	8001392 <I2C_WaitOnFlagUntilTimeout+0x44>
 800138e:	2f00      	cmp	r7, #0
 8001390:	d1e6      	bne.n	8001360 <I2C_WaitOnFlagUntilTimeout+0x12>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001392:	2300      	movs	r3, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 8001394:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001396:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001398:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800139c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80013a0:	6c22      	ldr	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 80013a2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80013a6:	f042 0220 	orr.w	r2, r2, #32
 80013aa:	6422      	str	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 80013ac:	2001      	movs	r0, #1
 80013ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080013b2 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 80013b2:	b570      	push	{r4, r5, r6, lr}
 80013b4:	4604      	mov	r4, r0
 80013b6:	460d      	mov	r5, r1
 80013b8:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80013ba:	6823      	ldr	r3, [r4, #0]
 80013bc:	695b      	ldr	r3, [r3, #20]
 80013be:	061b      	lsls	r3, r3, #24
 80013c0:	d501      	bpl.n	80013c6 <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;
 80013c2:	2000      	movs	r0, #0
 80013c4:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80013c6:	4620      	mov	r0, r4
 80013c8:	f7ff ff0e 	bl	80011e8 <I2C_IsAcknowledgeFailed>
 80013cc:	b9a8      	cbnz	r0, 80013fa <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 80013ce:	1c6a      	adds	r2, r5, #1
 80013d0:	d0f3      	beq.n	80013ba <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80013d2:	f7ff f9ef 	bl	80007b4 <HAL_GetTick>
 80013d6:	1b80      	subs	r0, r0, r6
 80013d8:	4285      	cmp	r5, r0
 80013da:	d301      	bcc.n	80013e0 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 80013dc:	2d00      	cmp	r5, #0
 80013de:	d1ec      	bne.n	80013ba <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 80013e0:	2300      	movs	r3, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 80013e2:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 80013e4:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80013e6:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80013ea:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80013ee:	6c22      	ldr	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 80013f0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80013f4:	f042 0220 	orr.w	r2, r2, #32
 80013f8:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 80013fa:	2001      	movs	r0, #1
}
 80013fc:	bd70      	pop	{r4, r5, r6, pc}
	...

08001400 <I2C_RequestMemoryRead>:
{
 8001400:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8001404:	4698      	mov	r8, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001406:	6803      	ldr	r3, [r0, #0]
{
 8001408:	4616      	mov	r6, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800140a:	681a      	ldr	r2, [r3, #0]
{
 800140c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800140e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001412:	601a      	str	r2, [r3, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001414:	681a      	ldr	r2, [r3, #0]
{
 8001416:	460f      	mov	r7, r1
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001418:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800141c:	601a      	str	r2, [r3, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800141e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001422:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001424:	9500      	str	r5, [sp, #0]
 8001426:	2200      	movs	r2, #0
{
 8001428:	4604      	mov	r4, r0
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800142a:	f7ff ff90 	bl	800134e <I2C_WaitOnFlagUntilTimeout>
 800142e:	6823      	ldr	r3, [r4, #0]
 8001430:	b148      	cbz	r0, 8001446 <I2C_RequestMemoryRead+0x46>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	05db      	lsls	r3, r3, #23
 8001436:	d502      	bpl.n	800143e <I2C_RequestMemoryRead+0x3e>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001438:	f44f 7300 	mov.w	r3, #512	; 0x200
 800143c:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 800143e:	2003      	movs	r0, #3
}
 8001440:	b004      	add	sp, #16
 8001442:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001446:	b2ff      	uxtb	r7, r7
 8001448:	f007 02fe 	and.w	r2, r7, #254	; 0xfe
 800144c:	611a      	str	r2, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800144e:	492a      	ldr	r1, [pc, #168]	; (80014f8 <I2C_RequestMemoryRead+0xf8>)
 8001450:	462b      	mov	r3, r5
 8001452:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001454:	4620      	mov	r0, r4
 8001456:	f7ff fee0 	bl	800121a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800145a:	b108      	cbz	r0, 8001460 <I2C_RequestMemoryRead+0x60>
    return HAL_ERROR;
 800145c:	2001      	movs	r0, #1
 800145e:	e7ef      	b.n	8001440 <I2C_RequestMemoryRead+0x40>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001460:	6823      	ldr	r3, [r4, #0]
 8001462:	9003      	str	r0, [sp, #12]
 8001464:	695a      	ldr	r2, [r3, #20]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001466:	990a      	ldr	r1, [sp, #40]	; 0x28
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001468:	9203      	str	r2, [sp, #12]
 800146a:	699b      	ldr	r3, [r3, #24]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800146c:	462a      	mov	r2, r5
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800146e:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001470:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001472:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001474:	f7ff ff9d 	bl	80013b2 <I2C_WaitOnTXEFlagUntilTimeout>
 8001478:	b140      	cbz	r0, 800148c <I2C_RequestMemoryRead+0x8c>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800147a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800147c:	2b04      	cmp	r3, #4
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800147e:	bf01      	itttt	eq
 8001480:	6822      	ldreq	r2, [r4, #0]
 8001482:	6813      	ldreq	r3, [r2, #0]
 8001484:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 8001488:	6013      	streq	r3, [r2, #0]
 800148a:	e7e7      	b.n	800145c <I2C_RequestMemoryRead+0x5c>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800148c:	f1b8 0f01 	cmp.w	r8, #1
 8001490:	6823      	ldr	r3, [r4, #0]
 8001492:	d125      	bne.n	80014e0 <I2C_RequestMemoryRead+0xe0>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001494:	b2f6      	uxtb	r6, r6
 8001496:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001498:	462a      	mov	r2, r5
 800149a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800149c:	4620      	mov	r0, r4
 800149e:	f7ff ff88 	bl	80013b2 <I2C_WaitOnTXEFlagUntilTimeout>
 80014a2:	4602      	mov	r2, r0
 80014a4:	2800      	cmp	r0, #0
 80014a6:	d1e8      	bne.n	800147a <I2C_RequestMemoryRead+0x7a>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80014a8:	6821      	ldr	r1, [r4, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80014aa:	4620      	mov	r0, r4
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80014ac:	680b      	ldr	r3, [r1, #0]
 80014ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014b2:	600b      	str	r3, [r1, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80014b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80014b6:	9500      	str	r5, [sp, #0]
 80014b8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80014bc:	f7ff ff47 	bl	800134e <I2C_WaitOnFlagUntilTimeout>
 80014c0:	6823      	ldr	r3, [r4, #0]
 80014c2:	2800      	cmp	r0, #0
 80014c4:	d1b5      	bne.n	8001432 <I2C_RequestMemoryRead+0x32>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80014c6:	f047 0701 	orr.w	r7, r7, #1
 80014ca:	611f      	str	r7, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80014cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80014ce:	462b      	mov	r3, r5
 80014d0:	4909      	ldr	r1, [pc, #36]	; (80014f8 <I2C_RequestMemoryRead+0xf8>)
 80014d2:	4620      	mov	r0, r4
 80014d4:	f7ff fea1 	bl	800121a <I2C_WaitOnMasterAddressFlagUntilTimeout>
    return HAL_TIMEOUT;
 80014d8:	3000      	adds	r0, #0
 80014da:	bf18      	it	ne
 80014dc:	2001      	movne	r0, #1
 80014de:	e7af      	b.n	8001440 <I2C_RequestMemoryRead+0x40>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80014e0:	0a32      	lsrs	r2, r6, #8
 80014e2:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80014e4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80014e6:	462a      	mov	r2, r5
 80014e8:	4620      	mov	r0, r4
 80014ea:	f7ff ff62 	bl	80013b2 <I2C_WaitOnTXEFlagUntilTimeout>
 80014ee:	2800      	cmp	r0, #0
 80014f0:	d1c3      	bne.n	800147a <I2C_RequestMemoryRead+0x7a>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80014f2:	6823      	ldr	r3, [r4, #0]
 80014f4:	e7ce      	b.n	8001494 <I2C_RequestMemoryRead+0x94>
 80014f6:	bf00      	nop
 80014f8:	00010002 	.word	0x00010002

080014fc <HAL_I2C_Init>:
{
 80014fc:	b570      	push	{r4, r5, r6, lr}
  if (hi2c == NULL)
 80014fe:	4604      	mov	r4, r0
 8001500:	b908      	cbnz	r0, 8001506 <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 8001502:	2001      	movs	r0, #1
 8001504:	bd70      	pop	{r4, r5, r6, pc}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001506:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800150a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800150e:	b91b      	cbnz	r3, 8001518 <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 8001510:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8001514:	f003 fff8 	bl	8005508 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001518:	2324      	movs	r3, #36	; 0x24
 800151a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 800151e:	6823      	ldr	r3, [r4, #0]
 8001520:	681a      	ldr	r2, [r3, #0]
 8001522:	f022 0201 	bic.w	r2, r2, #1
 8001526:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001528:	681a      	ldr	r2, [r3, #0]
 800152a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800152e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001530:	681a      	ldr	r2, [r3, #0]
 8001532:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001536:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001538:	f000 ff64 	bl	8002404 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800153c:	6865      	ldr	r5, [r4, #4]
 800153e:	4b41      	ldr	r3, [pc, #260]	; (8001644 <HAL_I2C_Init+0x148>)
 8001540:	429d      	cmp	r5, r3
 8001542:	d84d      	bhi.n	80015e0 <HAL_I2C_Init+0xe4>
 8001544:	4b40      	ldr	r3, [pc, #256]	; (8001648 <HAL_I2C_Init+0x14c>)
 8001546:	4298      	cmp	r0, r3
 8001548:	d9db      	bls.n	8001502 <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 800154a:	4940      	ldr	r1, [pc, #256]	; (800164c <HAL_I2C_Init+0x150>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800154c:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 800154e:	fbb0 f1f1 	udiv	r1, r0, r1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001552:	6853      	ldr	r3, [r2, #4]
 8001554:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001558:	430b      	orrs	r3, r1
 800155a:	6053      	str	r3, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800155c:	6a13      	ldr	r3, [r2, #32]
 800155e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001562:	3101      	adds	r1, #1
 8001564:	4319      	orrs	r1, r3
 8001566:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001568:	69d1      	ldr	r1, [r2, #28]
 800156a:	4b36      	ldr	r3, [pc, #216]	; (8001644 <HAL_I2C_Init+0x148>)
 800156c:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8001570:	429d      	cmp	r5, r3
 8001572:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8001576:	f100 30ff 	add.w	r0, r0, #4294967295
 800157a:	d848      	bhi.n	800160e <HAL_I2C_Init+0x112>
 800157c:	006d      	lsls	r5, r5, #1
 800157e:	fbb0 f0f5 	udiv	r0, r0, r5
 8001582:	3001      	adds	r0, #1
 8001584:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8001588:	2b04      	cmp	r3, #4
 800158a:	bf38      	it	cc
 800158c:	2304      	movcc	r3, #4
 800158e:	430b      	orrs	r3, r1
 8001590:	61d3      	str	r3, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001592:	6811      	ldr	r1, [r2, #0]
 8001594:	6a20      	ldr	r0, [r4, #32]
 8001596:	69e3      	ldr	r3, [r4, #28]
 8001598:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 800159c:	4303      	orrs	r3, r0
 800159e:	430b      	orrs	r3, r1
 80015a0:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80015a2:	6891      	ldr	r1, [r2, #8]
 80015a4:	68e0      	ldr	r0, [r4, #12]
 80015a6:	6923      	ldr	r3, [r4, #16]
 80015a8:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 80015ac:	4303      	orrs	r3, r0
 80015ae:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80015b2:	430b      	orrs	r3, r1
 80015b4:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80015b6:	68d1      	ldr	r1, [r2, #12]
 80015b8:	69a0      	ldr	r0, [r4, #24]
 80015ba:	6963      	ldr	r3, [r4, #20]
 80015bc:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80015c0:	4303      	orrs	r3, r0
 80015c2:	430b      	orrs	r3, r1
 80015c4:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 80015c6:	6813      	ldr	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015c8:	2000      	movs	r0, #0
  __HAL_I2C_ENABLE(hi2c);
 80015ca:	f043 0301 	orr.w	r3, r3, #1
 80015ce:	6013      	str	r3, [r2, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 80015d0:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015d2:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80015d4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80015d8:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80015da:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 80015de:	bd70      	pop	{r4, r5, r6, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80015e0:	4b1b      	ldr	r3, [pc, #108]	; (8001650 <HAL_I2C_Init+0x154>)
 80015e2:	4298      	cmp	r0, r3
 80015e4:	d98d      	bls.n	8001502 <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 80015e6:	4e19      	ldr	r6, [pc, #100]	; (800164c <HAL_I2C_Init+0x150>)
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80015e8:	f44f 7196 	mov.w	r1, #300	; 0x12c
  freqrange = I2C_FREQRANGE(pclk1);
 80015ec:	fbb0 f6f6 	udiv	r6, r0, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80015f0:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80015f2:	4371      	muls	r1, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80015f4:	6853      	ldr	r3, [r2, #4]
 80015f6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80015fa:	4333      	orrs	r3, r6
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80015fc:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001600:	6053      	str	r3, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001602:	6a13      	ldr	r3, [r2, #32]
 8001604:	fbb1 f1f6 	udiv	r1, r1, r6
 8001608:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800160c:	e7a9      	b.n	8001562 <HAL_I2C_Init+0x66>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800160e:	68a3      	ldr	r3, [r4, #8]
 8001610:	b953      	cbnz	r3, 8001628 <HAL_I2C_Init+0x12c>
 8001612:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8001616:	fbb0 f0f3 	udiv	r0, r0, r3
 800161a:	1c43      	adds	r3, r0, #1
 800161c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001620:	b16b      	cbz	r3, 800163e <HAL_I2C_Init+0x142>
 8001622:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001626:	e7b2      	b.n	800158e <HAL_I2C_Init+0x92>
 8001628:	2319      	movs	r3, #25
 800162a:	436b      	muls	r3, r5
 800162c:	fbb0 f0f3 	udiv	r0, r0, r3
 8001630:	1c43      	adds	r3, r0, #1
 8001632:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001636:	b113      	cbz	r3, 800163e <HAL_I2C_Init+0x142>
 8001638:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800163c:	e7a7      	b.n	800158e <HAL_I2C_Init+0x92>
 800163e:	2301      	movs	r3, #1
 8001640:	e7a5      	b.n	800158e <HAL_I2C_Init+0x92>
 8001642:	bf00      	nop
 8001644:	000186a0 	.word	0x000186a0
 8001648:	001e847f 	.word	0x001e847f
 800164c:	000f4240 	.word	0x000f4240
 8001650:	003d08ff 	.word	0x003d08ff

08001654 <HAL_I2C_Master_Transmit>:
{
 8001654:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8001658:	4604      	mov	r4, r0
 800165a:	461f      	mov	r7, r3
 800165c:	460d      	mov	r5, r1
 800165e:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 8001660:	f7ff f8a8 	bl	80007b4 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001664:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  uint32_t tickstart = HAL_GetTick();
 8001668:	4606      	mov	r6, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 800166a:	2b20      	cmp	r3, #32
 800166c:	d004      	beq.n	8001678 <HAL_I2C_Master_Transmit+0x24>
    return HAL_BUSY;
 800166e:	2502      	movs	r5, #2
}
 8001670:	4628      	mov	r0, r5
 8001672:	b004      	add	sp, #16
 8001674:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001678:	9000      	str	r0, [sp, #0]
 800167a:	2319      	movs	r3, #25
 800167c:	2201      	movs	r2, #1
 800167e:	495b      	ldr	r1, [pc, #364]	; (80017ec <HAL_I2C_Master_Transmit+0x198>)
 8001680:	4620      	mov	r0, r4
 8001682:	f7ff fe64 	bl	800134e <I2C_WaitOnFlagUntilTimeout>
 8001686:	2800      	cmp	r0, #0
 8001688:	d1f1      	bne.n	800166e <HAL_I2C_Master_Transmit+0x1a>
    __HAL_LOCK(hi2c);
 800168a:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800168e:	2b01      	cmp	r3, #1
 8001690:	d0ed      	beq.n	800166e <HAL_I2C_Master_Transmit+0x1a>
 8001692:	2301      	movs	r3, #1
 8001694:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001698:	6823      	ldr	r3, [r4, #0]
 800169a:	681a      	ldr	r2, [r3, #0]
 800169c:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 800169e:	bf5e      	ittt	pl
 80016a0:	681a      	ldrpl	r2, [r3, #0]
 80016a2:	f042 0201 	orrpl.w	r2, r2, #1
 80016a6:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80016a8:	681a      	ldr	r2, [r3, #0]
 80016aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80016ae:	601a      	str	r2, [r3, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80016b0:	2221      	movs	r2, #33	; 0x21
 80016b2:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80016b6:	2210      	movs	r2, #16
 80016b8:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80016bc:	2200      	movs	r2, #0
 80016be:	6422      	str	r2, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 80016c0:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80016c2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
 80016c4:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferSize    = hi2c->XferCount;
 80016c8:	8522      	strh	r2, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80016ca:	4a49      	ldr	r2, [pc, #292]	; (80017f0 <HAL_I2C_Master_Transmit+0x19c>)
 80016cc:	62e2      	str	r2, [r4, #44]	; 0x2c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80016ce:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80016d0:	2a08      	cmp	r2, #8
 80016d2:	d004      	beq.n	80016de <HAL_I2C_Master_Transmit+0x8a>
 80016d4:	2a01      	cmp	r2, #1
 80016d6:	d002      	beq.n	80016de <HAL_I2C_Master_Transmit+0x8a>
 80016d8:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 80016dc:	d104      	bne.n	80016e8 <HAL_I2C_Master_Transmit+0x94>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80016de:	681a      	ldr	r2, [r3, #0]
 80016e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80016e4:	601a      	str	r2, [r3, #0]
 80016e6:	e002      	b.n	80016ee <HAL_I2C_Master_Transmit+0x9a>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80016e8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80016ea:	2a12      	cmp	r2, #18
 80016ec:	d0f7      	beq.n	80016de <HAL_I2C_Master_Transmit+0x8a>
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80016ee:	2200      	movs	r2, #0
 80016f0:	9600      	str	r6, [sp, #0]
 80016f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80016f4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80016f8:	4620      	mov	r0, r4
 80016fa:	f7ff fe28 	bl	800134e <I2C_WaitOnFlagUntilTimeout>
 80016fe:	6822      	ldr	r2, [r4, #0]
 8001700:	b138      	cbz	r0, 8001712 <HAL_I2C_Master_Transmit+0xbe>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001702:	6813      	ldr	r3, [r2, #0]
 8001704:	05db      	lsls	r3, r3, #23
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001706:	bf44      	itt	mi
 8001708:	f44f 7300 	movmi.w	r3, #512	; 0x200
 800170c:	6423      	strmi	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 800170e:	2501      	movs	r5, #1
 8001710:	e7ae      	b.n	8001670 <HAL_I2C_Master_Transmit+0x1c>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001712:	6923      	ldr	r3, [r4, #16]
 8001714:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001718:	d113      	bne.n	8001742 <HAL_I2C_Master_Transmit+0xee>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800171a:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 800171e:	6115      	str	r5, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001720:	4633      	mov	r3, r6
 8001722:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001724:	4933      	ldr	r1, [pc, #204]	; (80017f4 <HAL_I2C_Master_Transmit+0x1a0>)
 8001726:	4620      	mov	r0, r4
 8001728:	f7ff fd77 	bl	800121a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800172c:	4605      	mov	r5, r0
 800172e:	2800      	cmp	r0, #0
 8001730:	d1ed      	bne.n	800170e <HAL_I2C_Master_Transmit+0xba>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001732:	6823      	ldr	r3, [r4, #0]
 8001734:	9003      	str	r0, [sp, #12]
 8001736:	695a      	ldr	r2, [r3, #20]
 8001738:	9203      	str	r2, [sp, #12]
 800173a:	699b      	ldr	r3, [r3, #24]
 800173c:	9303      	str	r3, [sp, #12]
 800173e:	9b03      	ldr	r3, [sp, #12]
    while (hi2c->XferSize > 0U)
 8001740:	e044      	b.n	80017cc <HAL_I2C_Master_Transmit+0x178>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001742:	11eb      	asrs	r3, r5, #7
 8001744:	f003 0306 	and.w	r3, r3, #6
 8001748:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 800174c:	6113      	str	r3, [r2, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800174e:	492a      	ldr	r1, [pc, #168]	; (80017f8 <HAL_I2C_Master_Transmit+0x1a4>)
 8001750:	4633      	mov	r3, r6
 8001752:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001754:	4620      	mov	r0, r4
 8001756:	f7ff fd60 	bl	800121a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800175a:	2800      	cmp	r0, #0
 800175c:	d1d7      	bne.n	800170e <HAL_I2C_Master_Transmit+0xba>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800175e:	6823      	ldr	r3, [r4, #0]
 8001760:	b2ed      	uxtb	r5, r5
 8001762:	611d      	str	r5, [r3, #16]
 8001764:	e7dc      	b.n	8001720 <HAL_I2C_Master_Transmit+0xcc>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001766:	4632      	mov	r2, r6
 8001768:	990a      	ldr	r1, [sp, #40]	; 0x28
 800176a:	4620      	mov	r0, r4
 800176c:	f7ff fe21 	bl	80013b2 <I2C_WaitOnTXEFlagUntilTimeout>
 8001770:	b140      	cbz	r0, 8001784 <HAL_I2C_Master_Transmit+0x130>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001772:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001774:	2b04      	cmp	r3, #4
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001776:	bf01      	itttt	eq
 8001778:	6822      	ldreq	r2, [r4, #0]
 800177a:	6813      	ldreq	r3, [r2, #0]
 800177c:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 8001780:	6013      	streq	r3, [r2, #0]
 8001782:	e7c4      	b.n	800170e <HAL_I2C_Master_Transmit+0xba>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001784:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001786:	6820      	ldr	r0, [r4, #0]
 8001788:	461a      	mov	r2, r3
 800178a:	f812 1b01 	ldrb.w	r1, [r2], #1
 800178e:	6101      	str	r1, [r0, #16]
      hi2c->pBuffPtr++;
 8001790:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8001792:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001794:	3a01      	subs	r2, #1
 8001796:	b292      	uxth	r2, r2
 8001798:	8562      	strh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800179a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800179c:	6947      	ldr	r7, [r0, #20]
      hi2c->XferSize--;
 800179e:	1e51      	subs	r1, r2, #1
 80017a0:	b289      	uxth	r1, r1
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80017a2:	077f      	lsls	r7, r7, #29
      hi2c->XferSize--;
 80017a4:	8521      	strh	r1, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80017a6:	d50a      	bpl.n	80017be <HAL_I2C_Master_Transmit+0x16a>
 80017a8:	b149      	cbz	r1, 80017be <HAL_I2C_Master_Transmit+0x16a>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80017aa:	7859      	ldrb	r1, [r3, #1]
        hi2c->pBuffPtr++;
 80017ac:	3302      	adds	r3, #2
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80017ae:	6101      	str	r1, [r0, #16]
        hi2c->pBuffPtr++;
 80017b0:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 80017b2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 80017b4:	3a02      	subs	r2, #2
        hi2c->XferCount--;
 80017b6:	3b01      	subs	r3, #1
 80017b8:	b29b      	uxth	r3, r3
 80017ba:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 80017bc:	8522      	strh	r2, [r4, #40]	; 0x28
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017be:	4632      	mov	r2, r6
 80017c0:	990a      	ldr	r1, [sp, #40]	; 0x28
 80017c2:	4620      	mov	r0, r4
 80017c4:	f7ff fd6e 	bl	80012a4 <I2C_WaitOnBTFFlagUntilTimeout>
 80017c8:	2800      	cmp	r0, #0
 80017ca:	d1d2      	bne.n	8001772 <HAL_I2C_Master_Transmit+0x11e>
    while (hi2c->XferSize > 0U)
 80017cc:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d1c9      	bne.n	8001766 <HAL_I2C_Master_Transmit+0x112>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017d2:	6821      	ldr	r1, [r4, #0]
 80017d4:	680a      	ldr	r2, [r1, #0]
 80017d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80017da:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80017dc:	2220      	movs	r2, #32
    __HAL_UNLOCK(hi2c);
 80017de:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 80017e2:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80017e6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 80017ea:	e741      	b.n	8001670 <HAL_I2C_Master_Transmit+0x1c>
 80017ec:	00100002 	.word	0x00100002
 80017f0:	ffff0000 	.word	0xffff0000
 80017f4:	00010002 	.word	0x00010002
 80017f8:	00010008 	.word	0x00010008

080017fc <HAL_I2C_Master_Receive>:
{
 80017fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001800:	461f      	mov	r7, r3
  __IO uint32_t count = 0U;
 8001802:	2300      	movs	r3, #0
{
 8001804:	4604      	mov	r4, r0
 8001806:	b088      	sub	sp, #32
  __IO uint32_t count = 0U;
 8001808:	9302      	str	r3, [sp, #8]
{
 800180a:	460d      	mov	r5, r1
 800180c:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 800180e:	f7fe ffd1 	bl	80007b4 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001812:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  uint32_t tickstart = HAL_GetTick();
 8001816:	4606      	mov	r6, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001818:	2b20      	cmp	r3, #32
 800181a:	d004      	beq.n	8001826 <HAL_I2C_Master_Receive+0x2a>
    return HAL_BUSY;
 800181c:	2502      	movs	r5, #2
}
 800181e:	4628      	mov	r0, r5
 8001820:	b008      	add	sp, #32
 8001822:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001826:	9000      	str	r0, [sp, #0]
 8001828:	2319      	movs	r3, #25
 800182a:	2201      	movs	r2, #1
 800182c:	498d      	ldr	r1, [pc, #564]	; (8001a64 <HAL_I2C_Master_Receive+0x268>)
 800182e:	4620      	mov	r0, r4
 8001830:	f7ff fd8d 	bl	800134e <I2C_WaitOnFlagUntilTimeout>
 8001834:	2800      	cmp	r0, #0
 8001836:	d1f1      	bne.n	800181c <HAL_I2C_Master_Receive+0x20>
    __HAL_LOCK(hi2c);
 8001838:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800183c:	2b01      	cmp	r3, #1
 800183e:	d0ed      	beq.n	800181c <HAL_I2C_Master_Receive+0x20>
 8001840:	2301      	movs	r3, #1
 8001842:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001846:	6823      	ldr	r3, [r4, #0]
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 800184c:	bf5e      	ittt	pl
 800184e:	681a      	ldrpl	r2, [r3, #0]
 8001850:	f042 0201 	orrpl.w	r2, r2, #1
 8001854:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800185c:	601a      	str	r2, [r3, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800185e:	2222      	movs	r2, #34	; 0x22
 8001860:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001864:	2210      	movs	r2, #16
 8001866:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800186a:	2200      	movs	r2, #0
 800186c:	6422      	str	r2, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 800186e:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001870:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
 8001872:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferSize    = hi2c->XferCount;
 8001876:	8522      	strh	r2, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001878:	4a7b      	ldr	r2, [pc, #492]	; (8001a68 <HAL_I2C_Master_Receive+0x26c>)
 800187a:	62e2      	str	r2, [r4, #44]	; 0x2c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800187c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800187e:	6819      	ldr	r1, [r3, #0]
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001880:	2a08      	cmp	r2, #8
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001882:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8001886:	6019      	str	r1, [r3, #0]
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001888:	d004      	beq.n	8001894 <HAL_I2C_Master_Receive+0x98>
 800188a:	2a01      	cmp	r2, #1
 800188c:	d002      	beq.n	8001894 <HAL_I2C_Master_Receive+0x98>
 800188e:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8001892:	d104      	bne.n	800189e <HAL_I2C_Master_Receive+0xa2>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001894:	681a      	ldr	r2, [r3, #0]
 8001896:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800189a:	601a      	str	r2, [r3, #0]
 800189c:	e002      	b.n	80018a4 <HAL_I2C_Master_Receive+0xa8>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800189e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80018a0:	2a11      	cmp	r2, #17
 80018a2:	d0f7      	beq.n	8001894 <HAL_I2C_Master_Receive+0x98>
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80018a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80018a6:	9600      	str	r6, [sp, #0]
 80018a8:	2200      	movs	r2, #0
 80018aa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80018ae:	4620      	mov	r0, r4
 80018b0:	f7ff fd4d 	bl	800134e <I2C_WaitOnFlagUntilTimeout>
 80018b4:	6823      	ldr	r3, [r4, #0]
 80018b6:	b138      	cbz	r0, 80018c8 <HAL_I2C_Master_Receive+0xcc>
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	05dd      	lsls	r5, r3, #23
 80018bc:	d502      	bpl.n	80018c4 <HAL_I2C_Master_Receive+0xc8>
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80018be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80018c2:	6423      	str	r3, [r4, #64]	; 0x40
              return HAL_ERROR;
 80018c4:	2501      	movs	r5, #1
 80018c6:	e7aa      	b.n	800181e <HAL_I2C_Master_Receive+0x22>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80018c8:	6922      	ldr	r2, [r4, #16]
 80018ca:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 80018ce:	d144      	bne.n	800195a <HAL_I2C_Master_Receive+0x15e>
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80018d0:	f045 0501 	orr.w	r5, r5, #1
 80018d4:	b2ed      	uxtb	r5, r5
 80018d6:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80018d8:	4633      	mov	r3, r6
 80018da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80018dc:	4963      	ldr	r1, [pc, #396]	; (8001a6c <HAL_I2C_Master_Receive+0x270>)
 80018de:	4620      	mov	r0, r4
 80018e0:	f7ff fc9b 	bl	800121a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80018e4:	4605      	mov	r5, r0
 80018e6:	2800      	cmp	r0, #0
 80018e8:	d1ec      	bne.n	80018c4 <HAL_I2C_Master_Receive+0xc8>
    if (hi2c->XferSize == 0U)
 80018ea:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 80018ec:	6823      	ldr	r3, [r4, #0]
 80018ee:	2a00      	cmp	r2, #0
 80018f0:	d067      	beq.n	80019c2 <HAL_I2C_Master_Receive+0x1c6>
    else if (hi2c->XferSize == 1U)
 80018f2:	2a01      	cmp	r2, #1
 80018f4:	d178      	bne.n	80019e8 <HAL_I2C_Master_Receive+0x1ec>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80018f6:	681a      	ldr	r2, [r3, #0]
 80018f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80018fc:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018fe:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001900:	6823      	ldr	r3, [r4, #0]
 8001902:	9504      	str	r5, [sp, #16]
 8001904:	695a      	ldr	r2, [r3, #20]
 8001906:	9204      	str	r2, [sp, #16]
 8001908:	699a      	ldr	r2, [r3, #24]
 800190a:	9204      	str	r2, [sp, #16]
 800190c:	9a04      	ldr	r2, [sp, #16]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	f442 7200 	orr.w	r2, r2, #512	; 0x200
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001914:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001916:	b662      	cpsie	i
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001918:	4f55      	ldr	r7, [pc, #340]	; (8001a70 <HAL_I2C_Master_Receive+0x274>)
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800191a:	f8df 815c 	ldr.w	r8, [pc, #348]	; 8001a78 <HAL_I2C_Master_Receive+0x27c>
    while (hi2c->XferSize > 0U)
 800191e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001920:	2b00      	cmp	r3, #0
 8001922:	d058      	beq.n	80019d6 <HAL_I2C_Master_Receive+0x1da>
      if (hi2c->XferSize <= 3U)
 8001924:	2b03      	cmp	r3, #3
 8001926:	f200 80e9 	bhi.w	8001afc <HAL_I2C_Master_Receive+0x300>
        if (hi2c->XferSize == 1U)
 800192a:	2b01      	cmp	r3, #1
 800192c:	d178      	bne.n	8001a20 <HAL_I2C_Master_Receive+0x224>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800192e:	4632      	mov	r2, r6
 8001930:	990e      	ldr	r1, [sp, #56]	; 0x38
 8001932:	4620      	mov	r0, r4
 8001934:	f7ff fcdc 	bl	80012f0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001938:	2800      	cmp	r0, #0
 800193a:	d1c3      	bne.n	80018c4 <HAL_I2C_Master_Receive+0xc8>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800193c:	6822      	ldr	r2, [r4, #0]
 800193e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001940:	6912      	ldr	r2, [r2, #16]
 8001942:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8001944:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001946:	3301      	adds	r3, #1
 8001948:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 800194a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800194c:	3b01      	subs	r3, #1
 800194e:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8001950:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001952:	3b01      	subs	r3, #1
 8001954:	b29b      	uxth	r3, r3
 8001956:	8563      	strh	r3, [r4, #42]	; 0x2a
 8001958:	e7e1      	b.n	800191e <HAL_I2C_Master_Receive+0x122>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800195a:	11ef      	asrs	r7, r5, #7
 800195c:	f007 0706 	and.w	r7, r7, #6
 8001960:	f047 02f0 	orr.w	r2, r7, #240	; 0xf0
 8001964:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001966:	4943      	ldr	r1, [pc, #268]	; (8001a74 <HAL_I2C_Master_Receive+0x278>)
 8001968:	4633      	mov	r3, r6
 800196a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800196c:	4620      	mov	r0, r4
 800196e:	f7ff fc54 	bl	800121a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001972:	2800      	cmp	r0, #0
 8001974:	d1a6      	bne.n	80018c4 <HAL_I2C_Master_Receive+0xc8>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001976:	6823      	ldr	r3, [r4, #0]
 8001978:	b2ed      	uxtb	r5, r5
 800197a:	611d      	str	r5, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800197c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800197e:	4633      	mov	r3, r6
 8001980:	493a      	ldr	r1, [pc, #232]	; (8001a6c <HAL_I2C_Master_Receive+0x270>)
 8001982:	4620      	mov	r0, r4
 8001984:	f7ff fc49 	bl	800121a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001988:	4602      	mov	r2, r0
 800198a:	2800      	cmp	r0, #0
 800198c:	d19a      	bne.n	80018c4 <HAL_I2C_Master_Receive+0xc8>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800198e:	6823      	ldr	r3, [r4, #0]
 8001990:	9007      	str	r0, [sp, #28]
 8001992:	6959      	ldr	r1, [r3, #20]
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001994:	4620      	mov	r0, r4
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001996:	9107      	str	r1, [sp, #28]
 8001998:	6999      	ldr	r1, [r3, #24]
 800199a:	9107      	str	r1, [sp, #28]
 800199c:	9907      	ldr	r1, [sp, #28]
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800199e:	6819      	ldr	r1, [r3, #0]
 80019a0:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 80019a4:	6019      	str	r1, [r3, #0]
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80019a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80019a8:	9600      	str	r6, [sp, #0]
 80019aa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80019ae:	f7ff fcce 	bl	800134e <I2C_WaitOnFlagUntilTimeout>
 80019b2:	6823      	ldr	r3, [r4, #0]
 80019b4:	2800      	cmp	r0, #0
 80019b6:	f47f af7f 	bne.w	80018b8 <HAL_I2C_Master_Receive+0xbc>
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80019ba:	f047 07f1 	orr.w	r7, r7, #241	; 0xf1
 80019be:	611f      	str	r7, [r3, #16]
 80019c0:	e78a      	b.n	80018d8 <HAL_I2C_Master_Receive+0xdc>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80019c2:	9503      	str	r5, [sp, #12]
 80019c4:	695a      	ldr	r2, [r3, #20]
 80019c6:	9203      	str	r2, [sp, #12]
 80019c8:	699a      	ldr	r2, [r3, #24]
 80019ca:	9203      	str	r2, [sp, #12]
 80019cc:	9a03      	ldr	r2, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019ce:	681a      	ldr	r2, [r3, #0]
 80019d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80019d4:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80019d6:	2320      	movs	r3, #32
 80019d8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80019dc:	2300      	movs	r3, #0
 80019de:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 80019e2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 80019e6:	e71a      	b.n	800181e <HAL_I2C_Master_Receive+0x22>
    else if (hi2c->XferSize == 2U)
 80019e8:	2a02      	cmp	r2, #2
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80019ea:	681a      	ldr	r2, [r3, #0]
    else if (hi2c->XferSize == 2U)
 80019ec:	d10e      	bne.n	8001a0c <HAL_I2C_Master_Receive+0x210>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80019ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80019f2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80019f4:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80019f6:	6823      	ldr	r3, [r4, #0]
 80019f8:	9505      	str	r5, [sp, #20]
 80019fa:	695a      	ldr	r2, [r3, #20]
 80019fc:	9205      	str	r2, [sp, #20]
 80019fe:	699a      	ldr	r2, [r3, #24]
 8001a00:	9205      	str	r2, [sp, #20]
 8001a02:	9a05      	ldr	r2, [sp, #20]
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a04:	681a      	ldr	r2, [r3, #0]
 8001a06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a0a:	e783      	b.n	8001914 <HAL_I2C_Master_Receive+0x118>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a0c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001a10:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a12:	9506      	str	r5, [sp, #24]
 8001a14:	695a      	ldr	r2, [r3, #20]
 8001a16:	9206      	str	r2, [sp, #24]
 8001a18:	699b      	ldr	r3, [r3, #24]
 8001a1a:	9306      	str	r3, [sp, #24]
 8001a1c:	9b06      	ldr	r3, [sp, #24]
 8001a1e:	e77b      	b.n	8001918 <HAL_I2C_Master_Receive+0x11c>
        else if (hi2c->XferSize == 2U)
 8001a20:	2b02      	cmp	r3, #2
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001a22:	9600      	str	r6, [sp, #0]
 8001a24:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001a26:	f04f 0200 	mov.w	r2, #0
 8001a2a:	4639      	mov	r1, r7
 8001a2c:	4620      	mov	r0, r4
        else if (hi2c->XferSize == 2U)
 8001a2e:	d125      	bne.n	8001a7c <HAL_I2C_Master_Receive+0x280>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001a30:	f7ff fc8d 	bl	800134e <I2C_WaitOnFlagUntilTimeout>
 8001a34:	2800      	cmp	r0, #0
 8001a36:	f47f af45 	bne.w	80018c4 <HAL_I2C_Master_Receive+0xc8>
 8001a3a:	b672      	cpsid	i
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a3c:	6823      	ldr	r3, [r4, #0]
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a44:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a46:	691b      	ldr	r3, [r3, #16]
 8001a48:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001a4a:	7013      	strb	r3, [r2, #0]
          hi2c->pBuffPtr++;
 8001a4c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001a4e:	3301      	adds	r3, #1
 8001a50:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8001a52:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001a54:	3b01      	subs	r3, #1
 8001a56:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8001a58:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001a5a:	3b01      	subs	r3, #1
 8001a5c:	b29b      	uxth	r3, r3
 8001a5e:	8563      	strh	r3, [r4, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001a60:	b662      	cpsie	i
 8001a62:	e76b      	b.n	800193c <HAL_I2C_Master_Receive+0x140>
 8001a64:	00100002 	.word	0x00100002
 8001a68:	ffff0000 	.word	0xffff0000
 8001a6c:	00010002 	.word	0x00010002
 8001a70:	00010004 	.word	0x00010004
 8001a74:	00010008 	.word	0x00010008
 8001a78:	20000020 	.word	0x20000020
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001a7c:	f7ff fc67 	bl	800134e <I2C_WaitOnFlagUntilTimeout>
 8001a80:	2800      	cmp	r0, #0
 8001a82:	f47f af1f 	bne.w	80018c4 <HAL_I2C_Master_Receive+0xc8>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a86:	6822      	ldr	r2, [r4, #0]
 8001a88:	6813      	ldr	r3, [r2, #0]
 8001a8a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001a8e:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001a90:	b672      	cpsid	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a92:	6822      	ldr	r2, [r4, #0]
 8001a94:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001a96:	6912      	ldr	r2, [r2, #16]
 8001a98:	701a      	strb	r2, [r3, #0]
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8001a9a:	f246 12a8 	movw	r2, #25000	; 0x61a8
          hi2c->pBuffPtr++;
 8001a9e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001aa0:	1c4b      	adds	r3, r1, #1
 8001aa2:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8001aa4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001aa6:	3b01      	subs	r3, #1
 8001aa8:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8001aaa:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001aac:	3b01      	subs	r3, #1
 8001aae:	b29b      	uxth	r3, r3
 8001ab0:	8563      	strh	r3, [r4, #42]	; 0x2a
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8001ab2:	f8d8 3000 	ldr.w	r3, [r8]
 8001ab6:	fbb3 f2f2 	udiv	r2, r3, r2
 8001aba:	2323      	movs	r3, #35	; 0x23
 8001abc:	4353      	muls	r3, r2
 8001abe:	9302      	str	r3, [sp, #8]
            count--;
 8001ac0:	9b02      	ldr	r3, [sp, #8]
 8001ac2:	3b01      	subs	r3, #1
 8001ac4:	9302      	str	r3, [sp, #8]
            if (count == 0U)
 8001ac6:	9b02      	ldr	r3, [sp, #8]
 8001ac8:	b96b      	cbnz	r3, 8001ae6 <HAL_I2C_Master_Receive+0x2ea>
              hi2c->State               = HAL_I2C_STATE_READY;
 8001aca:	2220      	movs	r2, #32
              hi2c->PreviousState       = I2C_STATE_NONE;
 8001acc:	6323      	str	r3, [r4, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8001ace:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ad2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001ad6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001ad8:	f042 0220 	orr.w	r2, r2, #32
 8001adc:	6422      	str	r2, [r4, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8001ade:	b662      	cpsie	i
              __HAL_UNLOCK(hi2c);
 8001ae0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8001ae4:	e6ee      	b.n	80018c4 <HAL_I2C_Master_Receive+0xc8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8001ae6:	6823      	ldr	r3, [r4, #0]
 8001ae8:	695a      	ldr	r2, [r3, #20]
 8001aea:	0750      	lsls	r0, r2, #29
 8001aec:	d5e8      	bpl.n	8001ac0 <HAL_I2C_Master_Receive+0x2c4>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001af4:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001af6:	691b      	ldr	r3, [r3, #16]
 8001af8:	704b      	strb	r3, [r1, #1]
 8001afa:	e7a7      	b.n	8001a4c <HAL_I2C_Master_Receive+0x250>
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001afc:	4632      	mov	r2, r6
 8001afe:	990e      	ldr	r1, [sp, #56]	; 0x38
 8001b00:	4620      	mov	r0, r4
 8001b02:	f7ff fbf5 	bl	80012f0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001b06:	2800      	cmp	r0, #0
 8001b08:	f47f aedc 	bne.w	80018c4 <HAL_I2C_Master_Receive+0xc8>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b0c:	6822      	ldr	r2, [r4, #0]
 8001b0e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001b10:	6912      	ldr	r2, [r2, #16]
 8001b12:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8001b14:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001b16:	1c53      	adds	r3, r2, #1
 8001b18:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 8001b1a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001b1c:	3b01      	subs	r3, #1
 8001b1e:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8001b20:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001b22:	3b01      	subs	r3, #1
 8001b24:	b29b      	uxth	r3, r3
 8001b26:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001b28:	6823      	ldr	r3, [r4, #0]
 8001b2a:	6959      	ldr	r1, [r3, #20]
 8001b2c:	0749      	lsls	r1, r1, #29
 8001b2e:	f57f aef6 	bpl.w	800191e <HAL_I2C_Master_Receive+0x122>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b32:	691b      	ldr	r3, [r3, #16]
 8001b34:	7053      	strb	r3, [r2, #1]
 8001b36:	e705      	b.n	8001944 <HAL_I2C_Master_Receive+0x148>

08001b38 <HAL_I2C_Mem_Read>:
{
 8001b38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001b3c:	4699      	mov	r9, r3
  __IO uint32_t count = 0U;
 8001b3e:	2300      	movs	r3, #0
{
 8001b40:	4604      	mov	r4, r0
 8001b42:	b089      	sub	sp, #36	; 0x24
  __IO uint32_t count = 0U;
 8001b44:	9303      	str	r3, [sp, #12]
{
 8001b46:	460d      	mov	r5, r1
 8001b48:	4690      	mov	r8, r2
 8001b4a:	9f12      	ldr	r7, [sp, #72]	; 0x48
  uint32_t tickstart = HAL_GetTick();
 8001b4c:	f7fe fe32 	bl	80007b4 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b50:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  uint32_t tickstart = HAL_GetTick();
 8001b54:	4606      	mov	r6, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b56:	2b20      	cmp	r3, #32
 8001b58:	d004      	beq.n	8001b64 <HAL_I2C_Mem_Read+0x2c>
    return HAL_BUSY;
 8001b5a:	2502      	movs	r5, #2
}
 8001b5c:	4628      	mov	r0, r5
 8001b5e:	b009      	add	sp, #36	; 0x24
 8001b60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001b64:	9000      	str	r0, [sp, #0]
 8001b66:	2319      	movs	r3, #25
 8001b68:	2201      	movs	r2, #1
 8001b6a:	498e      	ldr	r1, [pc, #568]	; (8001da4 <HAL_I2C_Mem_Read+0x26c>)
 8001b6c:	4620      	mov	r0, r4
 8001b6e:	f7ff fbee 	bl	800134e <I2C_WaitOnFlagUntilTimeout>
 8001b72:	2800      	cmp	r0, #0
 8001b74:	d1f1      	bne.n	8001b5a <HAL_I2C_Mem_Read+0x22>
    __HAL_LOCK(hi2c);
 8001b76:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8001b7a:	2b01      	cmp	r3, #1
 8001b7c:	d0ed      	beq.n	8001b5a <HAL_I2C_Mem_Read+0x22>
 8001b7e:	2301      	movs	r3, #1
 8001b80:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001b84:	6823      	ldr	r3, [r4, #0]
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001b86:	4629      	mov	r1, r5
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001b88:	681a      	ldr	r2, [r3, #0]
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001b8a:	4620      	mov	r0, r4
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001b8c:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8001b8e:	bf5e      	ittt	pl
 8001b90:	681a      	ldrpl	r2, [r3, #0]
 8001b92:	f042 0201 	orrpl.w	r2, r2, #1
 8001b96:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001b98:	681a      	ldr	r2, [r3, #0]
 8001b9a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b9e:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001ba0:	2322      	movs	r3, #34	; 0x22
 8001ba2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001ba6:	2340      	movs	r3, #64	; 0x40
 8001ba8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001bac:	2300      	movs	r3, #0
 8001bae:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8001bb0:	9b10      	ldr	r3, [sp, #64]	; 0x40
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001bb2:	9601      	str	r6, [sp, #4]
    hi2c->pBuffPtr    = pData;
 8001bb4:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001bb6:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001bba:	9700      	str	r7, [sp, #0]
    hi2c->XferCount   = Size;
 8001bbc:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001bbe:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001bc0:	4642      	mov	r2, r8
    hi2c->XferSize    = hi2c->XferCount;
 8001bc2:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001bc4:	4b78      	ldr	r3, [pc, #480]	; (8001da8 <HAL_I2C_Mem_Read+0x270>)
 8001bc6:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001bc8:	464b      	mov	r3, r9
 8001bca:	f7ff fc19 	bl	8001400 <I2C_RequestMemoryRead>
 8001bce:	4605      	mov	r5, r0
 8001bd0:	b108      	cbz	r0, 8001bd6 <HAL_I2C_Mem_Read+0x9e>
              return HAL_ERROR;
 8001bd2:	2501      	movs	r5, #1
 8001bd4:	e7c2      	b.n	8001b5c <HAL_I2C_Mem_Read+0x24>
    if (hi2c->XferSize == 0U)
 8001bd6:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8001bd8:	6823      	ldr	r3, [r4, #0]
 8001bda:	b992      	cbnz	r2, 8001c02 <HAL_I2C_Mem_Read+0xca>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001bdc:	9004      	str	r0, [sp, #16]
 8001bde:	695a      	ldr	r2, [r3, #20]
 8001be0:	9204      	str	r2, [sp, #16]
 8001be2:	699a      	ldr	r2, [r3, #24]
 8001be4:	9204      	str	r2, [sp, #16]
 8001be6:	9a04      	ldr	r2, [sp, #16]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001bee:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8001bf0:	2320      	movs	r3, #32
 8001bf2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8001bfc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8001c00:	e7ac      	b.n	8001b5c <HAL_I2C_Mem_Read+0x24>
    else if (hi2c->XferSize == 1U)
 8001c02:	2a01      	cmp	r2, #1
 8001c04:	d132      	bne.n	8001c6c <HAL_I2C_Mem_Read+0x134>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c0c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001c0e:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c10:	6823      	ldr	r3, [r4, #0]
 8001c12:	9005      	str	r0, [sp, #20]
 8001c14:	695a      	ldr	r2, [r3, #20]
 8001c16:	9205      	str	r2, [sp, #20]
 8001c18:	699a      	ldr	r2, [r3, #24]
 8001c1a:	9205      	str	r2, [sp, #20]
 8001c1c:	9a05      	ldr	r2, [sp, #20]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c24:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001c26:	b662      	cpsie	i
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001c28:	f8df 8180 	ldr.w	r8, [pc, #384]	; 8001dac <HAL_I2C_Mem_Read+0x274>
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8001c2c:	f8df 9180 	ldr.w	r9, [pc, #384]	; 8001db0 <HAL_I2C_Mem_Read+0x278>
    while (hi2c->XferSize > 0U)
 8001c30:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d0dc      	beq.n	8001bf0 <HAL_I2C_Mem_Read+0xb8>
      if (hi2c->XferSize <= 3U)
 8001c36:	2b03      	cmp	r3, #3
 8001c38:	f200 8095 	bhi.w	8001d66 <HAL_I2C_Mem_Read+0x22e>
        if (hi2c->XferSize == 1U)
 8001c3c:	2b01      	cmp	r3, #1
 8001c3e:	d131      	bne.n	8001ca4 <HAL_I2C_Mem_Read+0x16c>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c40:	4632      	mov	r2, r6
 8001c42:	4639      	mov	r1, r7
 8001c44:	4620      	mov	r0, r4
 8001c46:	f7ff fb53 	bl	80012f0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001c4a:	2800      	cmp	r0, #0
 8001c4c:	d1c1      	bne.n	8001bd2 <HAL_I2C_Mem_Read+0x9a>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c4e:	6822      	ldr	r2, [r4, #0]
 8001c50:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001c52:	6912      	ldr	r2, [r2, #16]
 8001c54:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8001c56:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001c58:	3301      	adds	r3, #1
 8001c5a:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8001c5c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001c5e:	3b01      	subs	r3, #1
 8001c60:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8001c62:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001c64:	3b01      	subs	r3, #1
 8001c66:	b29b      	uxth	r3, r3
 8001c68:	8563      	strh	r3, [r4, #42]	; 0x2a
 8001c6a:	e7e1      	b.n	8001c30 <HAL_I2C_Mem_Read+0xf8>
    else if (hi2c->XferSize == 2U)
 8001c6c:	2a02      	cmp	r2, #2
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001c6e:	681a      	ldr	r2, [r3, #0]
    else if (hi2c->XferSize == 2U)
 8001c70:	d10e      	bne.n	8001c90 <HAL_I2C_Mem_Read+0x158>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001c72:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001c76:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001c78:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c7a:	6823      	ldr	r3, [r4, #0]
 8001c7c:	9006      	str	r0, [sp, #24]
 8001c7e:	695a      	ldr	r2, [r3, #20]
 8001c80:	9206      	str	r2, [sp, #24]
 8001c82:	699a      	ldr	r2, [r3, #24]
 8001c84:	9206      	str	r2, [sp, #24]
 8001c86:	9a06      	ldr	r2, [sp, #24]
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c88:	681a      	ldr	r2, [r3, #0]
 8001c8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c8e:	e7c9      	b.n	8001c24 <HAL_I2C_Mem_Read+0xec>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c90:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001c94:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c96:	9007      	str	r0, [sp, #28]
 8001c98:	695a      	ldr	r2, [r3, #20]
 8001c9a:	9207      	str	r2, [sp, #28]
 8001c9c:	699b      	ldr	r3, [r3, #24]
 8001c9e:	9307      	str	r3, [sp, #28]
 8001ca0:	9b07      	ldr	r3, [sp, #28]
 8001ca2:	e7c1      	b.n	8001c28 <HAL_I2C_Mem_Read+0xf0>
        else if (hi2c->XferSize == 2U)
 8001ca4:	2b02      	cmp	r3, #2
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001ca6:	9600      	str	r6, [sp, #0]
 8001ca8:	463b      	mov	r3, r7
 8001caa:	f04f 0200 	mov.w	r2, #0
 8001cae:	4641      	mov	r1, r8
 8001cb0:	4620      	mov	r0, r4
        else if (hi2c->XferSize == 2U)
 8001cb2:	d118      	bne.n	8001ce6 <HAL_I2C_Mem_Read+0x1ae>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001cb4:	f7ff fb4b 	bl	800134e <I2C_WaitOnFlagUntilTimeout>
 8001cb8:	2800      	cmp	r0, #0
 8001cba:	d18a      	bne.n	8001bd2 <HAL_I2C_Mem_Read+0x9a>
 8001cbc:	b672      	cpsid	i
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cbe:	6823      	ldr	r3, [r4, #0]
 8001cc0:	681a      	ldr	r2, [r3, #0]
 8001cc2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001cc6:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001cc8:	691b      	ldr	r3, [r3, #16]
 8001cca:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001ccc:	7013      	strb	r3, [r2, #0]
          hi2c->pBuffPtr++;
 8001cce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001cd0:	3301      	adds	r3, #1
 8001cd2:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8001cd4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001cd6:	3b01      	subs	r3, #1
 8001cd8:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8001cda:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001cdc:	3b01      	subs	r3, #1
 8001cde:	b29b      	uxth	r3, r3
 8001ce0:	8563      	strh	r3, [r4, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001ce2:	b662      	cpsie	i
 8001ce4:	e7b3      	b.n	8001c4e <HAL_I2C_Mem_Read+0x116>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001ce6:	f7ff fb32 	bl	800134e <I2C_WaitOnFlagUntilTimeout>
 8001cea:	2800      	cmp	r0, #0
 8001cec:	f47f af71 	bne.w	8001bd2 <HAL_I2C_Mem_Read+0x9a>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001cf0:	6822      	ldr	r2, [r4, #0]
 8001cf2:	6813      	ldr	r3, [r2, #0]
 8001cf4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001cf8:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001cfa:	b672      	cpsid	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001cfc:	6822      	ldr	r2, [r4, #0]
 8001cfe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001d00:	6912      	ldr	r2, [r2, #16]
 8001d02:	701a      	strb	r2, [r3, #0]
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8001d04:	f246 12a8 	movw	r2, #25000	; 0x61a8
          hi2c->pBuffPtr++;
 8001d08:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001d0a:	1c4b      	adds	r3, r1, #1
 8001d0c:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8001d0e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001d10:	3b01      	subs	r3, #1
 8001d12:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8001d14:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001d16:	3b01      	subs	r3, #1
 8001d18:	b29b      	uxth	r3, r3
 8001d1a:	8563      	strh	r3, [r4, #42]	; 0x2a
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8001d1c:	f8d9 3000 	ldr.w	r3, [r9]
 8001d20:	fbb3 f2f2 	udiv	r2, r3, r2
 8001d24:	2323      	movs	r3, #35	; 0x23
 8001d26:	4353      	muls	r3, r2
 8001d28:	9303      	str	r3, [sp, #12]
            count--;
 8001d2a:	9b03      	ldr	r3, [sp, #12]
 8001d2c:	3b01      	subs	r3, #1
 8001d2e:	9303      	str	r3, [sp, #12]
            if (count == 0U)
 8001d30:	9b03      	ldr	r3, [sp, #12]
 8001d32:	b96b      	cbnz	r3, 8001d50 <HAL_I2C_Mem_Read+0x218>
              hi2c->State               = HAL_I2C_STATE_READY;
 8001d34:	2220      	movs	r2, #32
              hi2c->PreviousState       = I2C_STATE_NONE;
 8001d36:	6323      	str	r3, [r4, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8001d38:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d3c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001d40:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001d42:	f042 0220 	orr.w	r2, r2, #32
 8001d46:	6422      	str	r2, [r4, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8001d48:	b662      	cpsie	i
              __HAL_UNLOCK(hi2c);
 8001d4a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8001d4e:	e740      	b.n	8001bd2 <HAL_I2C_Mem_Read+0x9a>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8001d50:	6823      	ldr	r3, [r4, #0]
 8001d52:	695a      	ldr	r2, [r3, #20]
 8001d54:	0750      	lsls	r0, r2, #29
 8001d56:	d5e8      	bpl.n	8001d2a <HAL_I2C_Mem_Read+0x1f2>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d5e:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d60:	691b      	ldr	r3, [r3, #16]
 8001d62:	704b      	strb	r3, [r1, #1]
 8001d64:	e7b3      	b.n	8001cce <HAL_I2C_Mem_Read+0x196>
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d66:	4632      	mov	r2, r6
 8001d68:	4639      	mov	r1, r7
 8001d6a:	4620      	mov	r0, r4
 8001d6c:	f7ff fac0 	bl	80012f0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001d70:	2800      	cmp	r0, #0
 8001d72:	f47f af2e 	bne.w	8001bd2 <HAL_I2C_Mem_Read+0x9a>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d76:	6822      	ldr	r2, [r4, #0]
 8001d78:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001d7a:	6912      	ldr	r2, [r2, #16]
 8001d7c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8001d7e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001d80:	1c53      	adds	r3, r2, #1
 8001d82:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 8001d84:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001d86:	3b01      	subs	r3, #1
 8001d88:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8001d8a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001d8c:	3b01      	subs	r3, #1
 8001d8e:	b29b      	uxth	r3, r3
 8001d90:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001d92:	6823      	ldr	r3, [r4, #0]
 8001d94:	6959      	ldr	r1, [r3, #20]
 8001d96:	0749      	lsls	r1, r1, #29
 8001d98:	f57f af4a 	bpl.w	8001c30 <HAL_I2C_Mem_Read+0xf8>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d9c:	691b      	ldr	r3, [r3, #16]
 8001d9e:	7053      	strb	r3, [r2, #1]
 8001da0:	e759      	b.n	8001c56 <HAL_I2C_Mem_Read+0x11e>
 8001da2:	bf00      	nop
 8001da4:	00100002 	.word	0x00100002
 8001da8:	ffff0000 	.word	0xffff0000
 8001dac:	00010004 	.word	0x00010004
 8001db0:	20000020 	.word	0x20000020

08001db4 <HAL_I2C_IsDeviceReady>:
{
 8001db4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001db8:	4604      	mov	r4, r0
 8001dba:	b085      	sub	sp, #20
 8001dbc:	4698      	mov	r8, r3
 8001dbe:	4689      	mov	r9, r1
 8001dc0:	4692      	mov	sl, r2
  uint32_t tickstart = HAL_GetTick();
 8001dc2:	f7fe fcf7 	bl	80007b4 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001dc6:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  uint32_t tickstart = HAL_GetTick();
 8001dca:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001dcc:	2b20      	cmp	r3, #32
 8001dce:	d003      	beq.n	8001dd8 <HAL_I2C_IsDeviceReady+0x24>
    return HAL_BUSY;
 8001dd0:	2002      	movs	r0, #2
}
 8001dd2:	b005      	add	sp, #20
 8001dd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001dd8:	9000      	str	r0, [sp, #0]
 8001dda:	2319      	movs	r3, #25
 8001ddc:	2201      	movs	r2, #1
 8001dde:	494c      	ldr	r1, [pc, #304]	; (8001f10 <HAL_I2C_IsDeviceReady+0x15c>)
 8001de0:	4620      	mov	r0, r4
 8001de2:	f7ff fab4 	bl	800134e <I2C_WaitOnFlagUntilTimeout>
 8001de6:	2800      	cmp	r0, #0
 8001de8:	d1f2      	bne.n	8001dd0 <HAL_I2C_IsDeviceReady+0x1c>
    __HAL_LOCK(hi2c);
 8001dea:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d0ee      	beq.n	8001dd0 <HAL_I2C_IsDeviceReady+0x1c>
 8001df2:	2301      	movs	r3, #1
 8001df4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001df8:	6823      	ldr	r3, [r4, #0]
  uint32_t I2C_Trials = 1U;
 8001dfa:	2701      	movs	r7, #1
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001dfc:	681a      	ldr	r2, [r3, #0]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001dfe:	f8df b110 	ldr.w	fp, [pc, #272]	; 8001f10 <HAL_I2C_IsDeviceReady+0x15c>
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001e02:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8001e04:	bf58      	it	pl
 8001e06:	681a      	ldrpl	r2, [r3, #0]
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001e08:	f009 09fe 	and.w	r9, r9, #254	; 0xfe
      __HAL_I2C_ENABLE(hi2c);
 8001e0c:	bf5c      	itt	pl
 8001e0e:	f042 0201 	orrpl.w	r2, r2, #1
 8001e12:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001e14:	681a      	ldr	r2, [r3, #0]
 8001e16:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e1a:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e1c:	2324      	movs	r3, #36	; 0x24
 8001e1e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e22:	2300      	movs	r3, #0
 8001e24:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001e26:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 8001e2a:	62e3      	str	r3, [r4, #44]	; 0x2c
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001e2c:	6822      	ldr	r2, [r4, #0]
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001e2e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001e32:	6813      	ldr	r3, [r2, #0]
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001e34:	4620      	mov	r0, r4
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001e36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e3a:	6013      	str	r3, [r2, #0]
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001e3c:	4643      	mov	r3, r8
 8001e3e:	9500      	str	r5, [sp, #0]
 8001e40:	2200      	movs	r2, #0
 8001e42:	f7ff fa84 	bl	800134e <I2C_WaitOnFlagUntilTimeout>
 8001e46:	6823      	ldr	r3, [r4, #0]
 8001e48:	b138      	cbz	r0, 8001e5a <HAL_I2C_IsDeviceReady+0xa6>
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	05db      	lsls	r3, r3, #23
 8001e4e:	d502      	bpl.n	8001e56 <HAL_I2C_IsDeviceReady+0xa2>
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001e50:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e54:	6423      	str	r3, [r4, #64]	; 0x40
        return HAL_TIMEOUT;
 8001e56:	2003      	movs	r0, #3
 8001e58:	e7bb      	b.n	8001dd2 <HAL_I2C_IsDeviceReady+0x1e>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001e5a:	f8c3 9010 	str.w	r9, [r3, #16]
      tickstart = HAL_GetTick();
 8001e5e:	f7fe fca9 	bl	80007b4 <HAL_GetTick>
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8001e62:	26a0      	movs	r6, #160	; 0xa0
      tickstart = HAL_GetTick();
 8001e64:	4605      	mov	r5, r0
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001e66:	6823      	ldr	r3, [r4, #0]
 8001e68:	695a      	ldr	r2, [r3, #20]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001e6a:	695b      	ldr	r3, [r3, #20]
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001e6c:	f3c2 0240 	ubfx	r2, r2, #1, #1
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001e70:	f3c3 2380 	ubfx	r3, r3, #10, #1
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001e74:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 8001e78:	29a0      	cmp	r1, #160	; 0xa0
 8001e7a:	d001      	beq.n	8001e80 <HAL_I2C_IsDeviceReady+0xcc>
 8001e7c:	b902      	cbnz	r2, 8001e80 <HAL_I2C_IsDeviceReady+0xcc>
 8001e7e:	b1e3      	cbz	r3, 8001eba <HAL_I2C_IsDeviceReady+0x106>
      hi2c->State = HAL_I2C_STATE_READY;
 8001e80:	2620      	movs	r6, #32
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001e82:	6823      	ldr	r3, [r4, #0]
      hi2c->State = HAL_I2C_STATE_READY;
 8001e84:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001e88:	695a      	ldr	r2, [r3, #20]
 8001e8a:	f012 0f02 	tst.w	r2, #2
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e94:	601a      	str	r2, [r3, #0]
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001e96:	d027      	beq.n	8001ee8 <HAL_I2C_IsDeviceReady+0x134>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e98:	2200      	movs	r2, #0
 8001e9a:	9203      	str	r2, [sp, #12]
 8001e9c:	695a      	ldr	r2, [r3, #20]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001e9e:	491c      	ldr	r1, [pc, #112]	; (8001f10 <HAL_I2C_IsDeviceReady+0x15c>)
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ea0:	9203      	str	r2, [sp, #12]
 8001ea2:	699b      	ldr	r3, [r3, #24]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001ea4:	2201      	movs	r2, #1
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ea6:	9303      	str	r3, [sp, #12]
 8001ea8:	9b03      	ldr	r3, [sp, #12]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001eaa:	9500      	str	r5, [sp, #0]
 8001eac:	2319      	movs	r3, #25
 8001eae:	4620      	mov	r0, r4
 8001eb0:	f7ff fa4d 	bl	800134e <I2C_WaitOnFlagUntilTimeout>
 8001eb4:	b198      	cbz	r0, 8001ede <HAL_I2C_IsDeviceReady+0x12a>
    return HAL_ERROR;
 8001eb6:	2001      	movs	r0, #1
 8001eb8:	e78b      	b.n	8001dd2 <HAL_I2C_IsDeviceReady+0x1e>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001eba:	f7fe fc7b 	bl	80007b4 <HAL_GetTick>
 8001ebe:	1b40      	subs	r0, r0, r5
 8001ec0:	4580      	cmp	r8, r0
 8001ec2:	d302      	bcc.n	8001eca <HAL_I2C_IsDeviceReady+0x116>
 8001ec4:	f1b8 0f00 	cmp.w	r8, #0
 8001ec8:	d101      	bne.n	8001ece <HAL_I2C_IsDeviceReady+0x11a>
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8001eca:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001ece:	6823      	ldr	r3, [r4, #0]
 8001ed0:	695a      	ldr	r2, [r3, #20]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001ed2:	695b      	ldr	r3, [r3, #20]
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001ed4:	f3c2 0240 	ubfx	r2, r2, #1, #1
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001ed8:	f3c3 2380 	ubfx	r3, r3, #10, #1
 8001edc:	e7ca      	b.n	8001e74 <HAL_I2C_IsDeviceReady+0xc0>
        hi2c->State = HAL_I2C_STATE_READY;
 8001ede:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 8001ee2:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
        return HAL_OK;
 8001ee6:	e774      	b.n	8001dd2 <HAL_I2C_IsDeviceReady+0x1e>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ee8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001eec:	4659      	mov	r1, fp
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001eee:	615a      	str	r2, [r3, #20]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001ef0:	4620      	mov	r0, r4
 8001ef2:	9500      	str	r5, [sp, #0]
 8001ef4:	2319      	movs	r3, #25
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	f7ff fa29 	bl	800134e <I2C_WaitOnFlagUntilTimeout>
 8001efc:	2800      	cmp	r0, #0
 8001efe:	d1da      	bne.n	8001eb6 <HAL_I2C_IsDeviceReady+0x102>
      I2C_Trials++;
 8001f00:	3701      	adds	r7, #1
    while (I2C_Trials < Trials);
 8001f02:	4557      	cmp	r7, sl
 8001f04:	d392      	bcc.n	8001e2c <HAL_I2C_IsDeviceReady+0x78>
    hi2c->State = HAL_I2C_STATE_READY;
 8001f06:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8001f0a:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
 8001f0e:	e7d2      	b.n	8001eb6 <HAL_I2C_IsDeviceReady+0x102>
 8001f10:	00100002 	.word	0x00100002

08001f14 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f14:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f18:	4605      	mov	r5, r0
 8001f1a:	b908      	cbnz	r0, 8001f20 <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 8001f1c:	2001      	movs	r0, #1
 8001f1e:	e03c      	b.n	8001f9a <HAL_RCC_OscConfig+0x86>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f20:	6803      	ldr	r3, [r0, #0]
 8001f22:	07db      	lsls	r3, r3, #31
 8001f24:	d410      	bmi.n	8001f48 <HAL_RCC_OscConfig+0x34>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f26:	682b      	ldr	r3, [r5, #0]
 8001f28:	079f      	lsls	r7, r3, #30
 8001f2a:	d45d      	bmi.n	8001fe8 <HAL_RCC_OscConfig+0xd4>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f2c:	682b      	ldr	r3, [r5, #0]
 8001f2e:	0719      	lsls	r1, r3, #28
 8001f30:	f100 8094 	bmi.w	800205c <HAL_RCC_OscConfig+0x148>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f34:	682b      	ldr	r3, [r5, #0]
 8001f36:	075a      	lsls	r2, r3, #29
 8001f38:	f100 80be 	bmi.w	80020b8 <HAL_RCC_OscConfig+0x1a4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f3c:	69e8      	ldr	r0, [r5, #28]
 8001f3e:	2800      	cmp	r0, #0
 8001f40:	f040 812c 	bne.w	800219c <HAL_RCC_OscConfig+0x288>
        }
      }
    }
  }

  return HAL_OK;
 8001f44:	2000      	movs	r0, #0
 8001f46:	e028      	b.n	8001f9a <HAL_RCC_OscConfig+0x86>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f48:	4c8f      	ldr	r4, [pc, #572]	; (8002188 <HAL_RCC_OscConfig+0x274>)
 8001f4a:	6863      	ldr	r3, [r4, #4]
 8001f4c:	f003 030c 	and.w	r3, r3, #12
 8001f50:	2b04      	cmp	r3, #4
 8001f52:	d007      	beq.n	8001f64 <HAL_RCC_OscConfig+0x50>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001f54:	6863      	ldr	r3, [r4, #4]
 8001f56:	f003 030c 	and.w	r3, r3, #12
 8001f5a:	2b08      	cmp	r3, #8
 8001f5c:	d109      	bne.n	8001f72 <HAL_RCC_OscConfig+0x5e>
 8001f5e:	6863      	ldr	r3, [r4, #4]
 8001f60:	03de      	lsls	r6, r3, #15
 8001f62:	d506      	bpl.n	8001f72 <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f64:	6823      	ldr	r3, [r4, #0]
 8001f66:	039c      	lsls	r4, r3, #14
 8001f68:	d5dd      	bpl.n	8001f26 <HAL_RCC_OscConfig+0x12>
 8001f6a:	686b      	ldr	r3, [r5, #4]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d1da      	bne.n	8001f26 <HAL_RCC_OscConfig+0x12>
 8001f70:	e7d4      	b.n	8001f1c <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f72:	686b      	ldr	r3, [r5, #4]
 8001f74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f78:	d112      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x8c>
 8001f7a:	6823      	ldr	r3, [r4, #0]
 8001f7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f80:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001f82:	f7fe fc17 	bl	80007b4 <HAL_GetTick>
 8001f86:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f88:	6823      	ldr	r3, [r4, #0]
 8001f8a:	0398      	lsls	r0, r3, #14
 8001f8c:	d4cb      	bmi.n	8001f26 <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f8e:	f7fe fc11 	bl	80007b4 <HAL_GetTick>
 8001f92:	1b80      	subs	r0, r0, r6
 8001f94:	2864      	cmp	r0, #100	; 0x64
 8001f96:	d9f7      	bls.n	8001f88 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8001f98:	2003      	movs	r0, #3
}
 8001f9a:	b002      	add	sp, #8
 8001f9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fa0:	b99b      	cbnz	r3, 8001fca <HAL_RCC_OscConfig+0xb6>
 8001fa2:	6823      	ldr	r3, [r4, #0]
 8001fa4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fa8:	6023      	str	r3, [r4, #0]
 8001faa:	6823      	ldr	r3, [r4, #0]
 8001fac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fb0:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001fb2:	f7fe fbff 	bl	80007b4 <HAL_GetTick>
 8001fb6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fb8:	6823      	ldr	r3, [r4, #0]
 8001fba:	0399      	lsls	r1, r3, #14
 8001fbc:	d5b3      	bpl.n	8001f26 <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fbe:	f7fe fbf9 	bl	80007b4 <HAL_GetTick>
 8001fc2:	1b80      	subs	r0, r0, r6
 8001fc4:	2864      	cmp	r0, #100	; 0x64
 8001fc6:	d9f7      	bls.n	8001fb8 <HAL_RCC_OscConfig+0xa4>
 8001fc8:	e7e6      	b.n	8001f98 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fca:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001fce:	6823      	ldr	r3, [r4, #0]
 8001fd0:	d103      	bne.n	8001fda <HAL_RCC_OscConfig+0xc6>
 8001fd2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fd6:	6023      	str	r3, [r4, #0]
 8001fd8:	e7cf      	b.n	8001f7a <HAL_RCC_OscConfig+0x66>
 8001fda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fde:	6023      	str	r3, [r4, #0]
 8001fe0:	6823      	ldr	r3, [r4, #0]
 8001fe2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fe6:	e7cb      	b.n	8001f80 <HAL_RCC_OscConfig+0x6c>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001fe8:	4c67      	ldr	r4, [pc, #412]	; (8002188 <HAL_RCC_OscConfig+0x274>)
 8001fea:	6863      	ldr	r3, [r4, #4]
 8001fec:	f013 0f0c 	tst.w	r3, #12
 8001ff0:	d007      	beq.n	8002002 <HAL_RCC_OscConfig+0xee>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001ff2:	6863      	ldr	r3, [r4, #4]
 8001ff4:	f003 030c 	and.w	r3, r3, #12
 8001ff8:	2b08      	cmp	r3, #8
 8001ffa:	d110      	bne.n	800201e <HAL_RCC_OscConfig+0x10a>
 8001ffc:	6863      	ldr	r3, [r4, #4]
 8001ffe:	03da      	lsls	r2, r3, #15
 8002000:	d40d      	bmi.n	800201e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002002:	6823      	ldr	r3, [r4, #0]
 8002004:	079b      	lsls	r3, r3, #30
 8002006:	d502      	bpl.n	800200e <HAL_RCC_OscConfig+0xfa>
 8002008:	692b      	ldr	r3, [r5, #16]
 800200a:	2b01      	cmp	r3, #1
 800200c:	d186      	bne.n	8001f1c <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800200e:	6823      	ldr	r3, [r4, #0]
 8002010:	696a      	ldr	r2, [r5, #20]
 8002012:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002016:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800201a:	6023      	str	r3, [r4, #0]
 800201c:	e786      	b.n	8001f2c <HAL_RCC_OscConfig+0x18>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800201e:	692a      	ldr	r2, [r5, #16]
 8002020:	4b5a      	ldr	r3, [pc, #360]	; (800218c <HAL_RCC_OscConfig+0x278>)
 8002022:	b16a      	cbz	r2, 8002040 <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_ENABLE();
 8002024:	2201      	movs	r2, #1
 8002026:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002028:	f7fe fbc4 	bl	80007b4 <HAL_GetTick>
 800202c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800202e:	6823      	ldr	r3, [r4, #0]
 8002030:	079f      	lsls	r7, r3, #30
 8002032:	d4ec      	bmi.n	800200e <HAL_RCC_OscConfig+0xfa>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002034:	f7fe fbbe 	bl	80007b4 <HAL_GetTick>
 8002038:	1b80      	subs	r0, r0, r6
 800203a:	2802      	cmp	r0, #2
 800203c:	d9f7      	bls.n	800202e <HAL_RCC_OscConfig+0x11a>
 800203e:	e7ab      	b.n	8001f98 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8002040:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002042:	f7fe fbb7 	bl	80007b4 <HAL_GetTick>
 8002046:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002048:	6823      	ldr	r3, [r4, #0]
 800204a:	0798      	lsls	r0, r3, #30
 800204c:	f57f af6e 	bpl.w	8001f2c <HAL_RCC_OscConfig+0x18>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002050:	f7fe fbb0 	bl	80007b4 <HAL_GetTick>
 8002054:	1b80      	subs	r0, r0, r6
 8002056:	2802      	cmp	r0, #2
 8002058:	d9f6      	bls.n	8002048 <HAL_RCC_OscConfig+0x134>
 800205a:	e79d      	b.n	8001f98 <HAL_RCC_OscConfig+0x84>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800205c:	69aa      	ldr	r2, [r5, #24]
 800205e:	4c4a      	ldr	r4, [pc, #296]	; (8002188 <HAL_RCC_OscConfig+0x274>)
 8002060:	4b4b      	ldr	r3, [pc, #300]	; (8002190 <HAL_RCC_OscConfig+0x27c>)
 8002062:	b1da      	cbz	r2, 800209c <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 8002064:	2201      	movs	r2, #1
 8002066:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8002068:	f7fe fba4 	bl	80007b4 <HAL_GetTick>
 800206c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800206e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002070:	079b      	lsls	r3, r3, #30
 8002072:	d50d      	bpl.n	8002090 <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002074:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8002078:	4b46      	ldr	r3, [pc, #280]	; (8002194 <HAL_RCC_OscConfig+0x280>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	fbb3 f3f2 	udiv	r3, r3, r2
 8002080:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8002082:	bf00      	nop
  }
  while (Delay --);
 8002084:	9b01      	ldr	r3, [sp, #4]
 8002086:	1e5a      	subs	r2, r3, #1
 8002088:	9201      	str	r2, [sp, #4]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d1f9      	bne.n	8002082 <HAL_RCC_OscConfig+0x16e>
 800208e:	e751      	b.n	8001f34 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002090:	f7fe fb90 	bl	80007b4 <HAL_GetTick>
 8002094:	1b80      	subs	r0, r0, r6
 8002096:	2802      	cmp	r0, #2
 8002098:	d9e9      	bls.n	800206e <HAL_RCC_OscConfig+0x15a>
 800209a:	e77d      	b.n	8001f98 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 800209c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800209e:	f7fe fb89 	bl	80007b4 <HAL_GetTick>
 80020a2:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80020a6:	079f      	lsls	r7, r3, #30
 80020a8:	f57f af44 	bpl.w	8001f34 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020ac:	f7fe fb82 	bl	80007b4 <HAL_GetTick>
 80020b0:	1b80      	subs	r0, r0, r6
 80020b2:	2802      	cmp	r0, #2
 80020b4:	d9f6      	bls.n	80020a4 <HAL_RCC_OscConfig+0x190>
 80020b6:	e76f      	b.n	8001f98 <HAL_RCC_OscConfig+0x84>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020b8:	4c33      	ldr	r4, [pc, #204]	; (8002188 <HAL_RCC_OscConfig+0x274>)
 80020ba:	69e3      	ldr	r3, [r4, #28]
 80020bc:	00d8      	lsls	r0, r3, #3
 80020be:	d424      	bmi.n	800210a <HAL_RCC_OscConfig+0x1f6>
      pwrclkchanged = SET;
 80020c0:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80020c2:	69e3      	ldr	r3, [r4, #28]
 80020c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020c8:	61e3      	str	r3, [r4, #28]
 80020ca:	69e3      	ldr	r3, [r4, #28]
 80020cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020d0:	9300      	str	r3, [sp, #0]
 80020d2:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020d4:	4e30      	ldr	r6, [pc, #192]	; (8002198 <HAL_RCC_OscConfig+0x284>)
 80020d6:	6833      	ldr	r3, [r6, #0]
 80020d8:	05d9      	lsls	r1, r3, #23
 80020da:	d518      	bpl.n	800210e <HAL_RCC_OscConfig+0x1fa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020dc:	68eb      	ldr	r3, [r5, #12]
 80020de:	2b01      	cmp	r3, #1
 80020e0:	d126      	bne.n	8002130 <HAL_RCC_OscConfig+0x21c>
 80020e2:	6a23      	ldr	r3, [r4, #32]
 80020e4:	f043 0301 	orr.w	r3, r3, #1
 80020e8:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80020ea:	f7fe fb63 	bl	80007b4 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020ee:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80020f2:	4680      	mov	r8, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020f4:	6a23      	ldr	r3, [r4, #32]
 80020f6:	079b      	lsls	r3, r3, #30
 80020f8:	d53f      	bpl.n	800217a <HAL_RCC_OscConfig+0x266>
    if (pwrclkchanged == SET)
 80020fa:	2f00      	cmp	r7, #0
 80020fc:	f43f af1e 	beq.w	8001f3c <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002100:	69e3      	ldr	r3, [r4, #28]
 8002102:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002106:	61e3      	str	r3, [r4, #28]
 8002108:	e718      	b.n	8001f3c <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 800210a:	2700      	movs	r7, #0
 800210c:	e7e2      	b.n	80020d4 <HAL_RCC_OscConfig+0x1c0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800210e:	6833      	ldr	r3, [r6, #0]
 8002110:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002114:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8002116:	f7fe fb4d 	bl	80007b4 <HAL_GetTick>
 800211a:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800211c:	6833      	ldr	r3, [r6, #0]
 800211e:	05da      	lsls	r2, r3, #23
 8002120:	d4dc      	bmi.n	80020dc <HAL_RCC_OscConfig+0x1c8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002122:	f7fe fb47 	bl	80007b4 <HAL_GetTick>
 8002126:	eba0 0008 	sub.w	r0, r0, r8
 800212a:	2864      	cmp	r0, #100	; 0x64
 800212c:	d9f6      	bls.n	800211c <HAL_RCC_OscConfig+0x208>
 800212e:	e733      	b.n	8001f98 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002130:	b9ab      	cbnz	r3, 800215e <HAL_RCC_OscConfig+0x24a>
 8002132:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002134:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002138:	f023 0301 	bic.w	r3, r3, #1
 800213c:	6223      	str	r3, [r4, #32]
 800213e:	6a23      	ldr	r3, [r4, #32]
 8002140:	f023 0304 	bic.w	r3, r3, #4
 8002144:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8002146:	f7fe fb35 	bl	80007b4 <HAL_GetTick>
 800214a:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800214c:	6a23      	ldr	r3, [r4, #32]
 800214e:	0798      	lsls	r0, r3, #30
 8002150:	d5d3      	bpl.n	80020fa <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002152:	f7fe fb2f 	bl	80007b4 <HAL_GetTick>
 8002156:	1b80      	subs	r0, r0, r6
 8002158:	4540      	cmp	r0, r8
 800215a:	d9f7      	bls.n	800214c <HAL_RCC_OscConfig+0x238>
 800215c:	e71c      	b.n	8001f98 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800215e:	2b05      	cmp	r3, #5
 8002160:	6a23      	ldr	r3, [r4, #32]
 8002162:	d103      	bne.n	800216c <HAL_RCC_OscConfig+0x258>
 8002164:	f043 0304 	orr.w	r3, r3, #4
 8002168:	6223      	str	r3, [r4, #32]
 800216a:	e7ba      	b.n	80020e2 <HAL_RCC_OscConfig+0x1ce>
 800216c:	f023 0301 	bic.w	r3, r3, #1
 8002170:	6223      	str	r3, [r4, #32]
 8002172:	6a23      	ldr	r3, [r4, #32]
 8002174:	f023 0304 	bic.w	r3, r3, #4
 8002178:	e7b6      	b.n	80020e8 <HAL_RCC_OscConfig+0x1d4>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800217a:	f7fe fb1b 	bl	80007b4 <HAL_GetTick>
 800217e:	eba0 0008 	sub.w	r0, r0, r8
 8002182:	42b0      	cmp	r0, r6
 8002184:	d9b6      	bls.n	80020f4 <HAL_RCC_OscConfig+0x1e0>
 8002186:	e707      	b.n	8001f98 <HAL_RCC_OscConfig+0x84>
 8002188:	40021000 	.word	0x40021000
 800218c:	42420000 	.word	0x42420000
 8002190:	42420480 	.word	0x42420480
 8002194:	20000020 	.word	0x20000020
 8002198:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800219c:	4b2a      	ldr	r3, [pc, #168]	; (8002248 <HAL_RCC_OscConfig+0x334>)
 800219e:	685a      	ldr	r2, [r3, #4]
 80021a0:	461c      	mov	r4, r3
 80021a2:	f002 020c 	and.w	r2, r2, #12
 80021a6:	2a08      	cmp	r2, #8
 80021a8:	d03d      	beq.n	8002226 <HAL_RCC_OscConfig+0x312>
 80021aa:	2300      	movs	r3, #0
 80021ac:	4e27      	ldr	r6, [pc, #156]	; (800224c <HAL_RCC_OscConfig+0x338>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021ae:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 80021b0:	6033      	str	r3, [r6, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021b2:	d12b      	bne.n	800220c <HAL_RCC_OscConfig+0x2f8>
        tickstart = HAL_GetTick();
 80021b4:	f7fe fafe 	bl	80007b4 <HAL_GetTick>
 80021b8:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021ba:	6823      	ldr	r3, [r4, #0]
 80021bc:	0199      	lsls	r1, r3, #6
 80021be:	d41f      	bmi.n	8002200 <HAL_RCC_OscConfig+0x2ec>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80021c0:	6a2b      	ldr	r3, [r5, #32]
 80021c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021c6:	d105      	bne.n	80021d4 <HAL_RCC_OscConfig+0x2c0>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80021c8:	6862      	ldr	r2, [r4, #4]
 80021ca:	68a9      	ldr	r1, [r5, #8]
 80021cc:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80021d0:	430a      	orrs	r2, r1
 80021d2:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021d4:	6a69      	ldr	r1, [r5, #36]	; 0x24
 80021d6:	6862      	ldr	r2, [r4, #4]
 80021d8:	430b      	orrs	r3, r1
 80021da:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 80021de:	4313      	orrs	r3, r2
 80021e0:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 80021e2:	2301      	movs	r3, #1
 80021e4:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80021e6:	f7fe fae5 	bl	80007b4 <HAL_GetTick>
 80021ea:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021ec:	6823      	ldr	r3, [r4, #0]
 80021ee:	019a      	lsls	r2, r3, #6
 80021f0:	f53f aea8 	bmi.w	8001f44 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021f4:	f7fe fade 	bl	80007b4 <HAL_GetTick>
 80021f8:	1b40      	subs	r0, r0, r5
 80021fa:	2802      	cmp	r0, #2
 80021fc:	d9f6      	bls.n	80021ec <HAL_RCC_OscConfig+0x2d8>
 80021fe:	e6cb      	b.n	8001f98 <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002200:	f7fe fad8 	bl	80007b4 <HAL_GetTick>
 8002204:	1bc0      	subs	r0, r0, r7
 8002206:	2802      	cmp	r0, #2
 8002208:	d9d7      	bls.n	80021ba <HAL_RCC_OscConfig+0x2a6>
 800220a:	e6c5      	b.n	8001f98 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 800220c:	f7fe fad2 	bl	80007b4 <HAL_GetTick>
 8002210:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002212:	6823      	ldr	r3, [r4, #0]
 8002214:	019b      	lsls	r3, r3, #6
 8002216:	f57f ae95 	bpl.w	8001f44 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800221a:	f7fe facb 	bl	80007b4 <HAL_GetTick>
 800221e:	1b40      	subs	r0, r0, r5
 8002220:	2802      	cmp	r0, #2
 8002222:	d9f6      	bls.n	8002212 <HAL_RCC_OscConfig+0x2fe>
 8002224:	e6b8      	b.n	8001f98 <HAL_RCC_OscConfig+0x84>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002226:	2801      	cmp	r0, #1
 8002228:	f43f aeb7 	beq.w	8001f9a <HAL_RCC_OscConfig+0x86>
        pll_config = RCC->CFGR;
 800222c:	6858      	ldr	r0, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800222e:	6a2b      	ldr	r3, [r5, #32]
 8002230:	f400 3280 	and.w	r2, r0, #65536	; 0x10000
 8002234:	429a      	cmp	r2, r3
 8002236:	f47f ae71 	bne.w	8001f1c <HAL_RCC_OscConfig+0x8>
 800223a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800223c:	f400 1070 	and.w	r0, r0, #3932160	; 0x3c0000
    return HAL_ERROR;
 8002240:	1ac0      	subs	r0, r0, r3
 8002242:	bf18      	it	ne
 8002244:	2001      	movne	r0, #1
 8002246:	e6a8      	b.n	8001f9a <HAL_RCC_OscConfig+0x86>
 8002248:	40021000 	.word	0x40021000
 800224c:	42420060 	.word	0x42420060

08002250 <HAL_RCC_GetSysClockFreq>:
{
 8002250:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002252:	4b19      	ldr	r3, [pc, #100]	; (80022b8 <HAL_RCC_GetSysClockFreq+0x68>)
{
 8002254:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002256:	ac02      	add	r4, sp, #8
 8002258:	f103 0510 	add.w	r5, r3, #16
 800225c:	4622      	mov	r2, r4
 800225e:	6818      	ldr	r0, [r3, #0]
 8002260:	6859      	ldr	r1, [r3, #4]
 8002262:	3308      	adds	r3, #8
 8002264:	c203      	stmia	r2!, {r0, r1}
 8002266:	42ab      	cmp	r3, r5
 8002268:	4614      	mov	r4, r2
 800226a:	d1f7      	bne.n	800225c <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800226c:	2301      	movs	r3, #1
 800226e:	f88d 3004 	strb.w	r3, [sp, #4]
 8002272:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 8002274:	4911      	ldr	r1, [pc, #68]	; (80022bc <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002276:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 800227a:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 800227c:	f003 020c 	and.w	r2, r3, #12
 8002280:	2a08      	cmp	r2, #8
 8002282:	d117      	bne.n	80022b4 <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002284:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8002288:	a806      	add	r0, sp, #24
 800228a:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800228c:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800228e:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002292:	d50c      	bpl.n	80022ae <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002294:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002296:	480a      	ldr	r0, [pc, #40]	; (80022c0 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002298:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800229c:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800229e:	aa06      	add	r2, sp, #24
 80022a0:	4413      	add	r3, r2
 80022a2:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80022a6:	fbb0 f0f3 	udiv	r0, r0, r3
}
 80022aa:	b007      	add	sp, #28
 80022ac:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80022ae:	4805      	ldr	r0, [pc, #20]	; (80022c4 <HAL_RCC_GetSysClockFreq+0x74>)
 80022b0:	4350      	muls	r0, r2
 80022b2:	e7fa      	b.n	80022aa <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 80022b4:	4802      	ldr	r0, [pc, #8]	; (80022c0 <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 80022b6:	e7f8      	b.n	80022aa <HAL_RCC_GetSysClockFreq+0x5a>
 80022b8:	08006bf4 	.word	0x08006bf4
 80022bc:	40021000 	.word	0x40021000
 80022c0:	007a1200 	.word	0x007a1200
 80022c4:	003d0900 	.word	0x003d0900

080022c8 <HAL_RCC_ClockConfig>:
{
 80022c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80022cc:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 80022ce:	4604      	mov	r4, r0
 80022d0:	b910      	cbnz	r0, 80022d8 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80022d2:	2001      	movs	r0, #1
 80022d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80022d8:	4a45      	ldr	r2, [pc, #276]	; (80023f0 <HAL_RCC_ClockConfig+0x128>)
 80022da:	6813      	ldr	r3, [r2, #0]
 80022dc:	f003 0307 	and.w	r3, r3, #7
 80022e0:	428b      	cmp	r3, r1
 80022e2:	d329      	bcc.n	8002338 <HAL_RCC_ClockConfig+0x70>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022e4:	6821      	ldr	r1, [r4, #0]
 80022e6:	078e      	lsls	r6, r1, #30
 80022e8:	d431      	bmi.n	800234e <HAL_RCC_ClockConfig+0x86>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022ea:	07ca      	lsls	r2, r1, #31
 80022ec:	d444      	bmi.n	8002378 <HAL_RCC_ClockConfig+0xb0>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80022ee:	4a40      	ldr	r2, [pc, #256]	; (80023f0 <HAL_RCC_ClockConfig+0x128>)
 80022f0:	6813      	ldr	r3, [r2, #0]
 80022f2:	f003 0307 	and.w	r3, r3, #7
 80022f6:	429d      	cmp	r5, r3
 80022f8:	d367      	bcc.n	80023ca <HAL_RCC_ClockConfig+0x102>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022fa:	6822      	ldr	r2, [r4, #0]
 80022fc:	4d3d      	ldr	r5, [pc, #244]	; (80023f4 <HAL_RCC_ClockConfig+0x12c>)
 80022fe:	f012 0f04 	tst.w	r2, #4
 8002302:	d16e      	bne.n	80023e2 <HAL_RCC_ClockConfig+0x11a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002304:	0713      	lsls	r3, r2, #28
 8002306:	d506      	bpl.n	8002316 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002308:	686b      	ldr	r3, [r5, #4]
 800230a:	6922      	ldr	r2, [r4, #16]
 800230c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8002310:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002314:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002316:	f7ff ff9b 	bl	8002250 <HAL_RCC_GetSysClockFreq>
 800231a:	686b      	ldr	r3, [r5, #4]
 800231c:	4a36      	ldr	r2, [pc, #216]	; (80023f8 <HAL_RCC_ClockConfig+0x130>)
 800231e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002322:	5cd3      	ldrb	r3, [r2, r3]
 8002324:	40d8      	lsrs	r0, r3
 8002326:	4b35      	ldr	r3, [pc, #212]	; (80023fc <HAL_RCC_ClockConfig+0x134>)
 8002328:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 800232a:	4b35      	ldr	r3, [pc, #212]	; (8002400 <HAL_RCC_ClockConfig+0x138>)
 800232c:	6818      	ldr	r0, [r3, #0]
 800232e:	f7fe f9ff 	bl	8000730 <HAL_InitTick>
  return HAL_OK;
 8002332:	2000      	movs	r0, #0
 8002334:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002338:	6813      	ldr	r3, [r2, #0]
 800233a:	f023 0307 	bic.w	r3, r3, #7
 800233e:	430b      	orrs	r3, r1
 8002340:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002342:	6813      	ldr	r3, [r2, #0]
 8002344:	f003 0307 	and.w	r3, r3, #7
 8002348:	4299      	cmp	r1, r3
 800234a:	d1c2      	bne.n	80022d2 <HAL_RCC_ClockConfig+0xa>
 800234c:	e7ca      	b.n	80022e4 <HAL_RCC_ClockConfig+0x1c>
 800234e:	4b29      	ldr	r3, [pc, #164]	; (80023f4 <HAL_RCC_ClockConfig+0x12c>)
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002350:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002354:	bf1e      	ittt	ne
 8002356:	685a      	ldrne	r2, [r3, #4]
 8002358:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 800235c:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800235e:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002360:	bf42      	ittt	mi
 8002362:	685a      	ldrmi	r2, [r3, #4]
 8002364:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8002368:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800236a:	685a      	ldr	r2, [r3, #4]
 800236c:	68a0      	ldr	r0, [r4, #8]
 800236e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002372:	4302      	orrs	r2, r0
 8002374:	605a      	str	r2, [r3, #4]
 8002376:	e7b8      	b.n	80022ea <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002378:	6862      	ldr	r2, [r4, #4]
 800237a:	4e1e      	ldr	r6, [pc, #120]	; (80023f4 <HAL_RCC_ClockConfig+0x12c>)
 800237c:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800237e:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002380:	d11b      	bne.n	80023ba <HAL_RCC_ClockConfig+0xf2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002382:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002386:	d0a4      	beq.n	80022d2 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002388:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800238a:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800238e:	f023 0303 	bic.w	r3, r3, #3
 8002392:	4313      	orrs	r3, r2
 8002394:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8002396:	f7fe fa0d 	bl	80007b4 <HAL_GetTick>
 800239a:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800239c:	6873      	ldr	r3, [r6, #4]
 800239e:	6862      	ldr	r2, [r4, #4]
 80023a0:	f003 030c 	and.w	r3, r3, #12
 80023a4:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80023a8:	d0a1      	beq.n	80022ee <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023aa:	f7fe fa03 	bl	80007b4 <HAL_GetTick>
 80023ae:	1bc0      	subs	r0, r0, r7
 80023b0:	4540      	cmp	r0, r8
 80023b2:	d9f3      	bls.n	800239c <HAL_RCC_ClockConfig+0xd4>
        return HAL_TIMEOUT;
 80023b4:	2003      	movs	r0, #3
}
 80023b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023ba:	2a02      	cmp	r2, #2
 80023bc:	d102      	bne.n	80023c4 <HAL_RCC_ClockConfig+0xfc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023be:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80023c2:	e7e0      	b.n	8002386 <HAL_RCC_ClockConfig+0xbe>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023c4:	f013 0f02 	tst.w	r3, #2
 80023c8:	e7dd      	b.n	8002386 <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023ca:	6813      	ldr	r3, [r2, #0]
 80023cc:	f023 0307 	bic.w	r3, r3, #7
 80023d0:	432b      	orrs	r3, r5
 80023d2:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023d4:	6813      	ldr	r3, [r2, #0]
 80023d6:	f003 0307 	and.w	r3, r3, #7
 80023da:	429d      	cmp	r5, r3
 80023dc:	f47f af79 	bne.w	80022d2 <HAL_RCC_ClockConfig+0xa>
 80023e0:	e78b      	b.n	80022fa <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023e2:	686b      	ldr	r3, [r5, #4]
 80023e4:	68e1      	ldr	r1, [r4, #12]
 80023e6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80023ea:	430b      	orrs	r3, r1
 80023ec:	606b      	str	r3, [r5, #4]
 80023ee:	e789      	b.n	8002304 <HAL_RCC_ClockConfig+0x3c>
 80023f0:	40022000 	.word	0x40022000
 80023f4:	40021000 	.word	0x40021000
 80023f8:	08007d3e 	.word	0x08007d3e
 80023fc:	20000020 	.word	0x20000020
 8002400:	20000004 	.word	0x20000004

08002404 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002404:	4b04      	ldr	r3, [pc, #16]	; (8002418 <HAL_RCC_GetPCLK1Freq+0x14>)
 8002406:	4a05      	ldr	r2, [pc, #20]	; (800241c <HAL_RCC_GetPCLK1Freq+0x18>)
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800240e:	5cd3      	ldrb	r3, [r2, r3]
 8002410:	4a03      	ldr	r2, [pc, #12]	; (8002420 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002412:	6810      	ldr	r0, [r2, #0]
}
 8002414:	40d8      	lsrs	r0, r3
 8002416:	4770      	bx	lr
 8002418:	40021000 	.word	0x40021000
 800241c:	08007d4e 	.word	0x08007d4e
 8002420:	20000020 	.word	0x20000020

08002424 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002424:	4b04      	ldr	r3, [pc, #16]	; (8002438 <HAL_RCC_GetPCLK2Freq+0x14>)
 8002426:	4a05      	ldr	r2, [pc, #20]	; (800243c <HAL_RCC_GetPCLK2Freq+0x18>)
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800242e:	5cd3      	ldrb	r3, [r2, r3]
 8002430:	4a03      	ldr	r2, [pc, #12]	; (8002440 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002432:	6810      	ldr	r0, [r2, #0]
}
 8002434:	40d8      	lsrs	r0, r3
 8002436:	4770      	bx	lr
 8002438:	40021000 	.word	0x40021000
 800243c:	08007d4e 	.word	0x08007d4e
 8002440:	20000020 	.word	0x20000020

08002444 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002444:	6803      	ldr	r3, [r0, #0]
{
 8002446:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800244a:	07d9      	lsls	r1, r3, #31
{
 800244c:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800244e:	d520      	bpl.n	8002492 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002450:	4c35      	ldr	r4, [pc, #212]	; (8002528 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8002452:	69e3      	ldr	r3, [r4, #28]
 8002454:	00da      	lsls	r2, r3, #3
 8002456:	d432      	bmi.n	80024be <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8002458:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800245a:	69e3      	ldr	r3, [r4, #28]
 800245c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002460:	61e3      	str	r3, [r4, #28]
 8002462:	69e3      	ldr	r3, [r4, #28]
 8002464:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002468:	9301      	str	r3, [sp, #4]
 800246a:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800246c:	4e2f      	ldr	r6, [pc, #188]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800246e:	6833      	ldr	r3, [r6, #0]
 8002470:	05db      	lsls	r3, r3, #23
 8002472:	d526      	bpl.n	80024c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002474:	6a23      	ldr	r3, [r4, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002476:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800247a:	d136      	bne.n	80024ea <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800247c:	6a23      	ldr	r3, [r4, #32]
 800247e:	686a      	ldr	r2, [r5, #4]
 8002480:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002484:	4313      	orrs	r3, r2
 8002486:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002488:	b11f      	cbz	r7, 8002492 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800248a:	69e3      	ldr	r3, [r4, #28]
 800248c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002490:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002492:	6828      	ldr	r0, [r5, #0]
 8002494:	0783      	lsls	r3, r0, #30
 8002496:	d506      	bpl.n	80024a6 <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002498:	4a23      	ldr	r2, [pc, #140]	; (8002528 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 800249a:	68a9      	ldr	r1, [r5, #8]
 800249c:	6853      	ldr	r3, [r2, #4]
 800249e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80024a2:	430b      	orrs	r3, r1
 80024a4:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80024a6:	f010 0010 	ands.w	r0, r0, #16
 80024aa:	d01b      	beq.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80024ac:	4a1e      	ldr	r2, [pc, #120]	; (8002528 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 80024ae:	6969      	ldr	r1, [r5, #20]
 80024b0:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80024b2:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80024b4:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80024b8:	430b      	orrs	r3, r1
 80024ba:	6053      	str	r3, [r2, #4]
 80024bc:	e012      	b.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;
 80024be:	2700      	movs	r7, #0
 80024c0:	e7d4      	b.n	800246c <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024c2:	6833      	ldr	r3, [r6, #0]
 80024c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024c8:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80024ca:	f7fe f973 	bl	80007b4 <HAL_GetTick>
 80024ce:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024d0:	6833      	ldr	r3, [r6, #0]
 80024d2:	05d8      	lsls	r0, r3, #23
 80024d4:	d4ce      	bmi.n	8002474 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024d6:	f7fe f96d 	bl	80007b4 <HAL_GetTick>
 80024da:	eba0 0008 	sub.w	r0, r0, r8
 80024de:	2864      	cmp	r0, #100	; 0x64
 80024e0:	d9f6      	bls.n	80024d0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 80024e2:	2003      	movs	r0, #3
}
 80024e4:	b002      	add	sp, #8
 80024e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80024ea:	686a      	ldr	r2, [r5, #4]
 80024ec:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d0c3      	beq.n	800247c <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 80024f4:	2001      	movs	r0, #1
 80024f6:	4a0e      	ldr	r2, [pc, #56]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0xec>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80024f8:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 80024fa:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80024fc:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80024fe:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002502:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 8002504:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002506:	07d9      	lsls	r1, r3, #31
 8002508:	d5b8      	bpl.n	800247c <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 800250a:	f7fe f953 	bl	80007b4 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800250e:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8002512:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002514:	6a23      	ldr	r3, [r4, #32]
 8002516:	079a      	lsls	r2, r3, #30
 8002518:	d4b0      	bmi.n	800247c <HAL_RCCEx_PeriphCLKConfig+0x38>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800251a:	f7fe f94b 	bl	80007b4 <HAL_GetTick>
 800251e:	1b80      	subs	r0, r0, r6
 8002520:	4540      	cmp	r0, r8
 8002522:	d9f7      	bls.n	8002514 <HAL_RCCEx_PeriphCLKConfig+0xd0>
 8002524:	e7dd      	b.n	80024e2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8002526:	bf00      	nop
 8002528:	40021000 	.word	0x40021000
 800252c:	40007000 	.word	0x40007000
 8002530:	42420440 	.word	0x42420440

08002534 <SPI_WaitFlagStateUntilTimeout.constprop.8>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8002534:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8002538:	461c      	mov	r4, r3
 800253a:	4616      	mov	r6, r2
 800253c:	460f      	mov	r7, r1
 800253e:	4605      	mov	r5, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002540:	f7fe f938 	bl	80007b4 <HAL_GetTick>
 8002544:	4434      	add	r4, r6
 8002546:	1a24      	subs	r4, r4, r0
  tmp_tickstart = HAL_GetTick();
 8002548:	f7fe f934 	bl	80007b4 <HAL_GetTick>
 800254c:	4680      	mov	r8, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800254e:	4b23      	ldr	r3, [pc, #140]	; (80025dc <SPI_WaitFlagStateUntilTimeout.constprop.8+0xa8>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8002556:	4363      	muls	r3, r4

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002558:	682a      	ldr	r2, [r5, #0]
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
      {
        tmp_timeout = 0U;
      }
      count--;
 800255a:	9301      	str	r3, [sp, #4]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800255c:	6893      	ldr	r3, [r2, #8]
 800255e:	ea37 0303 	bics.w	r3, r7, r3
 8002562:	d001      	beq.n	8002568 <SPI_WaitFlagStateUntilTimeout.constprop.8+0x34>
    }
  }

  return HAL_OK;
 8002564:	2000      	movs	r0, #0
 8002566:	e02e      	b.n	80025c6 <SPI_WaitFlagStateUntilTimeout.constprop.8+0x92>
    if (Timeout != HAL_MAX_DELAY)
 8002568:	1c73      	adds	r3, r6, #1
 800256a:	d0f7      	beq.n	800255c <SPI_WaitFlagStateUntilTimeout.constprop.8+0x28>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800256c:	f7fe f922 	bl	80007b4 <HAL_GetTick>
 8002570:	eba0 0008 	sub.w	r0, r0, r8
 8002574:	42a0      	cmp	r0, r4
 8002576:	d329      	bcc.n	80025cc <SPI_WaitFlagStateUntilTimeout.constprop.8+0x98>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002578:	682b      	ldr	r3, [r5, #0]
 800257a:	685a      	ldr	r2, [r3, #4]
 800257c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002580:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002582:	686a      	ldr	r2, [r5, #4]
 8002584:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8002588:	d10a      	bne.n	80025a0 <SPI_WaitFlagStateUntilTimeout.constprop.8+0x6c>
 800258a:	68aa      	ldr	r2, [r5, #8]
 800258c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8002590:	d002      	beq.n	8002598 <SPI_WaitFlagStateUntilTimeout.constprop.8+0x64>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002592:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8002596:	d103      	bne.n	80025a0 <SPI_WaitFlagStateUntilTimeout.constprop.8+0x6c>
          __HAL_SPI_DISABLE(hspi);
 8002598:	681a      	ldr	r2, [r3, #0]
 800259a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800259e:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80025a0:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 80025a2:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80025a6:	d107      	bne.n	80025b8 <SPI_WaitFlagStateUntilTimeout.constprop.8+0x84>
          SPI_RESET_CRC(hspi);
 80025a8:	681a      	ldr	r2, [r3, #0]
 80025aa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80025ae:	601a      	str	r2, [r3, #0]
 80025b0:	681a      	ldr	r2, [r3, #0]
 80025b2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80025b6:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 80025b8:	2301      	movs	r3, #1
 80025ba:	f885 3051 	strb.w	r3, [r5, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 80025be:	2300      	movs	r3, #0
 80025c0:	2003      	movs	r0, #3
 80025c2:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
}
 80025c6:	b002      	add	sp, #8
 80025c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(count == 0U)
 80025cc:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 80025ce:	2b00      	cmp	r3, #0
      count--;
 80025d0:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 80025d2:	bf08      	it	eq
 80025d4:	2400      	moveq	r4, #0
      count--;
 80025d6:	3b01      	subs	r3, #1
 80025d8:	e7be      	b.n	8002558 <SPI_WaitFlagStateUntilTimeout.constprop.8+0x24>
 80025da:	bf00      	nop
 80025dc:	20000020 	.word	0x20000020

080025e0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80025e0:	b538      	push	{r3, r4, r5, lr}
 80025e2:	4613      	mov	r3, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80025e4:	6842      	ldr	r2, [r0, #4]
{
 80025e6:	4604      	mov	r4, r0
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80025e8:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 80025ec:	d116      	bne.n	800261c <SPI_EndRxTransaction+0x3c>
 80025ee:	6880      	ldr	r0, [r0, #8]
 80025f0:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80025f4:	d002      	beq.n	80025fc <SPI_EndRxTransaction+0x1c>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80025f6:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 80025fa:	d10f      	bne.n	800261c <SPI_EndRxTransaction+0x3c>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80025fc:	6822      	ldr	r2, [r4, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 80025fe:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
    __HAL_SPI_DISABLE(hspi);
 8002602:	6815      	ldr	r5, [r2, #0]
 8002604:	f025 0540 	bic.w	r5, r5, #64	; 0x40
 8002608:	6015      	str	r5, [r2, #0]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 800260a:	d107      	bne.n	800261c <SPI_EndRxTransaction+0x3c>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800260c:	460a      	mov	r2, r1
 800260e:	2101      	movs	r1, #1
 8002610:	4620      	mov	r0, r4
 8002612:	f7ff ff8f 	bl	8002534 <SPI_WaitFlagStateUntilTimeout.constprop.8>
 8002616:	b920      	cbnz	r0, 8002622 <SPI_EndRxTransaction+0x42>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
 8002618:	2000      	movs	r0, #0
 800261a:	bd38      	pop	{r3, r4, r5, pc}
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800261c:	460a      	mov	r2, r1
 800261e:	2180      	movs	r1, #128	; 0x80
 8002620:	e7f6      	b.n	8002610 <SPI_EndRxTransaction+0x30>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002622:	6d63      	ldr	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8002624:	2003      	movs	r0, #3
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002626:	f043 0320 	orr.w	r3, r3, #32
 800262a:	6563      	str	r3, [r4, #84]	; 0x54
}
 800262c:	bd38      	pop	{r3, r4, r5, pc}

0800262e <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800262e:	b510      	push	{r4, lr}
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002630:	4613      	mov	r3, r2
 8002632:	460a      	mov	r2, r1
 8002634:	2180      	movs	r1, #128	; 0x80
{
 8002636:	4604      	mov	r4, r0
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002638:	f7ff ff7c 	bl	8002534 <SPI_WaitFlagStateUntilTimeout.constprop.8>
 800263c:	b120      	cbz	r0, 8002648 <SPI_EndRxTxTransaction+0x1a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
 800263e:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002640:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002642:	f043 0320 	orr.w	r3, r3, #32
 8002646:	6563      	str	r3, [r4, #84]	; 0x54
  }
  return HAL_OK;
}
 8002648:	bd10      	pop	{r4, pc}

0800264a <HAL_SPI_Init>:
{
 800264a:	b510      	push	{r4, lr}
  if (hspi == NULL)
 800264c:	4604      	mov	r4, r0
 800264e:	2800      	cmp	r0, #0
 8002650:	d051      	beq.n	80026f6 <HAL_SPI_Init+0xac>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002652:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002654:	2b00      	cmp	r3, #0
 8002656:	d14a      	bne.n	80026ee <HAL_SPI_Init+0xa4>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002658:	6842      	ldr	r2, [r0, #4]
 800265a:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 800265e:	d000      	beq.n	8002662 <HAL_SPI_Init+0x18>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002660:	61c3      	str	r3, [r0, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002662:	2300      	movs	r3, #0
 8002664:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8002666:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 800266a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800266e:	b923      	cbnz	r3, 800267a <HAL_SPI_Init+0x30>
    hspi->Lock = HAL_UNLOCKED;
 8002670:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8002674:	4620      	mov	r0, r4
 8002676:	f002 ffa5 	bl	80055c4 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 800267a:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 800267c:	6822      	ldr	r2, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 800267e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8002682:	6813      	ldr	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002684:	68a0      	ldr	r0, [r4, #8]
  __HAL_SPI_DISABLE(hspi);
 8002686:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800268a:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800268c:	6863      	ldr	r3, [r4, #4]
 800268e:	f400 4004 	and.w	r0, r0, #33792	; 0x8400
 8002692:	f403 7382 	and.w	r3, r3, #260	; 0x104
 8002696:	4303      	orrs	r3, r0
 8002698:	68e0      	ldr	r0, [r4, #12]
 800269a:	69a1      	ldr	r1, [r4, #24]
 800269c:	f400 6000 	and.w	r0, r0, #2048	; 0x800
 80026a0:	4303      	orrs	r3, r0
 80026a2:	6920      	ldr	r0, [r4, #16]
 80026a4:	f000 0002 	and.w	r0, r0, #2
 80026a8:	4303      	orrs	r3, r0
 80026aa:	6960      	ldr	r0, [r4, #20]
 80026ac:	f000 0001 	and.w	r0, r0, #1
 80026b0:	4303      	orrs	r3, r0
 80026b2:	f401 7000 	and.w	r0, r1, #512	; 0x200
 80026b6:	4303      	orrs	r3, r0
 80026b8:	69e0      	ldr	r0, [r4, #28]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80026ba:	0c09      	lsrs	r1, r1, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80026bc:	f000 0038 	and.w	r0, r0, #56	; 0x38
 80026c0:	4303      	orrs	r3, r0
 80026c2:	6a20      	ldr	r0, [r4, #32]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80026c4:	f001 0104 	and.w	r1, r1, #4
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80026c8:	f000 0080 	and.w	r0, r0, #128	; 0x80
 80026cc:	4303      	orrs	r3, r0
 80026ce:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80026d0:	f400 5000 	and.w	r0, r0, #8192	; 0x2000
 80026d4:	4303      	orrs	r3, r0
 80026d6:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80026d8:	6051      	str	r1, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80026da:	69d3      	ldr	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80026dc:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80026de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80026e2:	61d3      	str	r3, [r2, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 80026e4:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80026e6:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80026e8:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  return HAL_OK;
 80026ec:	bd10      	pop	{r4, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80026ee:	2300      	movs	r3, #0
 80026f0:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80026f2:	6143      	str	r3, [r0, #20]
 80026f4:	e7b5      	b.n	8002662 <HAL_SPI_Init+0x18>
    return HAL_ERROR;
 80026f6:	2001      	movs	r0, #1
}
 80026f8:	bd10      	pop	{r4, pc}

080026fa <HAL_SPI_Transmit>:
{
 80026fa:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80026fe:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8002700:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 8002704:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 8002706:	2b01      	cmp	r3, #1
{
 8002708:	460d      	mov	r5, r1
 800270a:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 800270c:	f000 809e 	beq.w	800284c <HAL_SPI_Transmit+0x152>
 8002710:	2301      	movs	r3, #1
 8002712:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8002716:	f7fe f84d 	bl	80007b4 <HAL_GetTick>
 800271a:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 800271c:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 8002720:	b2c0      	uxtb	r0, r0
 8002722:	2801      	cmp	r0, #1
 8002724:	f040 8090 	bne.w	8002848 <HAL_SPI_Transmit+0x14e>
  if ((pData == NULL) || (Size == 0U))
 8002728:	2d00      	cmp	r5, #0
 800272a:	d060      	beq.n	80027ee <HAL_SPI_Transmit+0xf4>
 800272c:	f1b8 0f00 	cmp.w	r8, #0
 8002730:	d05d      	beq.n	80027ee <HAL_SPI_Transmit+0xf4>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002732:	2303      	movs	r3, #3
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002734:	2000      	movs	r0, #0
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002736:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800273a:	68a3      	ldr	r3, [r4, #8]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800273c:	6560      	str	r0, [r4, #84]	; 0x54
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800273e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
  hspi->TxXferCount = Size;
 8002742:	f8a4 8036 	strh.w	r8, [r4, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002746:	63a0      	str	r0, [r4, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002748:	87a0      	strh	r0, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800274a:	87e0      	strh	r0, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800274c:	6460      	str	r0, [r4, #68]	; 0x44
  hspi->RxISR       = NULL;
 800274e:	6420      	str	r0, [r4, #64]	; 0x40
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002750:	6325      	str	r5, [r4, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002752:	f8a4 8034 	strh.w	r8, [r4, #52]	; 0x34
 8002756:	6820      	ldr	r0, [r4, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002758:	d107      	bne.n	800276a <HAL_SPI_Transmit+0x70>
    __HAL_SPI_DISABLE(hspi);
 800275a:	6803      	ldr	r3, [r0, #0]
 800275c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002760:	6003      	str	r3, [r0, #0]
    SPI_1LINE_TX(hspi);
 8002762:	6803      	ldr	r3, [r0, #0]
 8002764:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002768:	6003      	str	r3, [r0, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800276a:	6803      	ldr	r3, [r0, #0]
 800276c:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 800276e:	bf5e      	ittt	pl
 8002770:	6803      	ldrpl	r3, [r0, #0]
 8002772:	f043 0340 	orrpl.w	r3, r3, #64	; 0x40
 8002776:	6003      	strpl	r3, [r0, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002778:	68e3      	ldr	r3, [r4, #12]
 800277a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800277e:	6863      	ldr	r3, [r4, #4]
 8002780:	d13e      	bne.n	8002800 <HAL_SPI_Transmit+0x106>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002782:	b113      	cbz	r3, 800278a <HAL_SPI_Transmit+0x90>
 8002784:	f1b8 0f01 	cmp.w	r8, #1
 8002788:	d107      	bne.n	800279a <HAL_SPI_Transmit+0xa0>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800278a:	f835 3b02 	ldrh.w	r3, [r5], #2
 800278e:	60c3      	str	r3, [r0, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002790:	6325      	str	r5, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8002792:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002794:	3b01      	subs	r3, #1
 8002796:	b29b      	uxth	r3, r3
 8002798:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 800279a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800279c:	b29b      	uxth	r3, r3
 800279e:	b9a3      	cbnz	r3, 80027ca <HAL_SPI_Transmit+0xd0>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80027a0:	463a      	mov	r2, r7
 80027a2:	4631      	mov	r1, r6
 80027a4:	4620      	mov	r0, r4
 80027a6:	f7ff ff42 	bl	800262e <SPI_EndRxTxTransaction>
 80027aa:	2800      	cmp	r0, #0
 80027ac:	d149      	bne.n	8002842 <HAL_SPI_Transmit+0x148>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80027ae:	68a3      	ldr	r3, [r4, #8]
 80027b0:	b933      	cbnz	r3, 80027c0 <HAL_SPI_Transmit+0xc6>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80027b2:	9301      	str	r3, [sp, #4]
 80027b4:	6823      	ldr	r3, [r4, #0]
 80027b6:	68da      	ldr	r2, [r3, #12]
 80027b8:	9201      	str	r2, [sp, #4]
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	9301      	str	r3, [sp, #4]
 80027be:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80027c0:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 80027c2:	3000      	adds	r0, #0
 80027c4:	bf18      	it	ne
 80027c6:	2001      	movne	r0, #1
 80027c8:	e011      	b.n	80027ee <HAL_SPI_Transmit+0xf4>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80027ca:	6822      	ldr	r2, [r4, #0]
 80027cc:	6893      	ldr	r3, [r2, #8]
 80027ce:	0798      	lsls	r0, r3, #30
 80027d0:	d505      	bpl.n	80027de <HAL_SPI_Transmit+0xe4>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80027d2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80027d4:	f833 1b02 	ldrh.w	r1, [r3], #2
 80027d8:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80027da:	6323      	str	r3, [r4, #48]	; 0x30
 80027dc:	e7d9      	b.n	8002792 <HAL_SPI_Transmit+0x98>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80027de:	f7fd ffe9 	bl	80007b4 <HAL_GetTick>
 80027e2:	1bc0      	subs	r0, r0, r7
 80027e4:	42b0      	cmp	r0, r6
 80027e6:	d3d8      	bcc.n	800279a <HAL_SPI_Transmit+0xa0>
 80027e8:	1c71      	adds	r1, r6, #1
 80027ea:	d0d6      	beq.n	800279a <HAL_SPI_Transmit+0xa0>
          errorcode = HAL_TIMEOUT;
 80027ec:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 80027ee:	2301      	movs	r3, #1
 80027f0:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80027f4:	2300      	movs	r3, #0
 80027f6:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 80027fa:	b002      	add	sp, #8
 80027fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002800:	b113      	cbz	r3, 8002808 <HAL_SPI_Transmit+0x10e>
 8002802:	f1b8 0f01 	cmp.w	r8, #1
 8002806:	d108      	bne.n	800281a <HAL_SPI_Transmit+0x120>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002808:	782b      	ldrb	r3, [r5, #0]
 800280a:	7303      	strb	r3, [r0, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800280c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800280e:	3301      	adds	r3, #1
 8002810:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8002812:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002814:	3b01      	subs	r3, #1
 8002816:	b29b      	uxth	r3, r3
 8002818:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 800281a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800281c:	b29b      	uxth	r3, r3
 800281e:	2b00      	cmp	r3, #0
 8002820:	d0be      	beq.n	80027a0 <HAL_SPI_Transmit+0xa6>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002822:	6823      	ldr	r3, [r4, #0]
 8002824:	689a      	ldr	r2, [r3, #8]
 8002826:	0792      	lsls	r2, r2, #30
 8002828:	d503      	bpl.n	8002832 <HAL_SPI_Transmit+0x138>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800282a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800282c:	7812      	ldrb	r2, [r2, #0]
 800282e:	731a      	strb	r2, [r3, #12]
 8002830:	e7ec      	b.n	800280c <HAL_SPI_Transmit+0x112>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002832:	f7fd ffbf 	bl	80007b4 <HAL_GetTick>
 8002836:	1bc0      	subs	r0, r0, r7
 8002838:	4286      	cmp	r6, r0
 800283a:	d8ee      	bhi.n	800281a <HAL_SPI_Transmit+0x120>
 800283c:	1c73      	adds	r3, r6, #1
 800283e:	d0ec      	beq.n	800281a <HAL_SPI_Transmit+0x120>
 8002840:	e7d4      	b.n	80027ec <HAL_SPI_Transmit+0xf2>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002842:	2320      	movs	r3, #32
 8002844:	6563      	str	r3, [r4, #84]	; 0x54
 8002846:	e7b2      	b.n	80027ae <HAL_SPI_Transmit+0xb4>
    errorcode = HAL_BUSY;
 8002848:	2002      	movs	r0, #2
 800284a:	e7d0      	b.n	80027ee <HAL_SPI_Transmit+0xf4>
  __HAL_LOCK(hspi);
 800284c:	2002      	movs	r0, #2
 800284e:	e7d4      	b.n	80027fa <HAL_SPI_Transmit+0x100>

08002850 <HAL_SPI_TransmitReceive>:
{
 8002850:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002854:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8002856:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 800285a:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 800285c:	2b01      	cmp	r3, #1
{
 800285e:	460d      	mov	r5, r1
 8002860:	4691      	mov	r9, r2
 8002862:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  __HAL_LOCK(hspi);
 8002864:	f000 80e2 	beq.w	8002a2c <HAL_SPI_TransmitReceive+0x1dc>
 8002868:	2301      	movs	r3, #1
 800286a:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 800286e:	f7fd ffa1 	bl	80007b4 <HAL_GetTick>
  tmp_state           = hspi->State;
 8002872:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  tickstart = HAL_GetTick();
 8002876:	4680      	mov	r8, r0
  tmp_state           = hspi->State;
 8002878:	b2db      	uxtb	r3, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800287a:	2b01      	cmp	r3, #1
  tmp_mode            = hspi->Init.Mode;
 800287c:	6861      	ldr	r1, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800287e:	d00a      	beq.n	8002896 <HAL_SPI_TransmitReceive+0x46>
 8002880:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 8002884:	f040 80d0 	bne.w	8002a28 <HAL_SPI_TransmitReceive+0x1d8>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002888:	68a0      	ldr	r0, [r4, #8]
 800288a:	2800      	cmp	r0, #0
 800288c:	f040 80cc 	bne.w	8002a28 <HAL_SPI_TransmitReceive+0x1d8>
 8002890:	2b04      	cmp	r3, #4
 8002892:	f040 80c9 	bne.w	8002a28 <HAL_SPI_TransmitReceive+0x1d8>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002896:	2d00      	cmp	r5, #0
 8002898:	f000 80c4 	beq.w	8002a24 <HAL_SPI_TransmitReceive+0x1d4>
 800289c:	f1b9 0f00 	cmp.w	r9, #0
 80028a0:	f000 80c0 	beq.w	8002a24 <HAL_SPI_TransmitReceive+0x1d4>
 80028a4:	2e00      	cmp	r6, #0
 80028a6:	f000 80bd 	beq.w	8002a24 <HAL_SPI_TransmitReceive+0x1d4>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80028aa:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80028ae:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80028b2:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80028b4:	bf1c      	itt	ne
 80028b6:	2305      	movne	r3, #5
 80028b8:	f884 3051 	strbne.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80028bc:	2300      	movs	r3, #0
 80028be:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->RxISR       = NULL;
 80028c0:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 80028c2:	6463      	str	r3, [r4, #68]	; 0x44
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80028c4:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 80028c6:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 80028c8:	86e6      	strh	r6, [r4, #54]	; 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80028ca:	681a      	ldr	r2, [r3, #0]
  hspi->RxXferSize  = Size;
 80028cc:	87a6      	strh	r6, [r4, #60]	; 0x3c
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80028ce:	0650      	lsls	r0, r2, #25
    __HAL_SPI_ENABLE(hspi);
 80028d0:	bf58      	it	pl
 80028d2:	681a      	ldrpl	r2, [r3, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80028d4:	6325      	str	r5, [r4, #48]	; 0x30
    __HAL_SPI_ENABLE(hspi);
 80028d6:	bf58      	it	pl
 80028d8:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
  hspi->TxXferSize  = Size;
 80028dc:	86a6      	strh	r6, [r4, #52]	; 0x34
    __HAL_SPI_ENABLE(hspi);
 80028de:	bf58      	it	pl
 80028e0:	601a      	strpl	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80028e2:	68e2      	ldr	r2, [r4, #12]
 80028e4:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 80028e8:	d158      	bne.n	800299c <HAL_SPI_TransmitReceive+0x14c>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80028ea:	b109      	cbz	r1, 80028f0 <HAL_SPI_TransmitReceive+0xa0>
 80028ec:	2e01      	cmp	r6, #1
 80028ee:	d107      	bne.n	8002900 <HAL_SPI_TransmitReceive+0xb0>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80028f0:	f835 2b02 	ldrh.w	r2, [r5], #2
 80028f4:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 80028f6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80028f8:	6325      	str	r5, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80028fa:	3b01      	subs	r3, #1
 80028fc:	b29b      	uxth	r3, r3
 80028fe:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8002900:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002902:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002904:	b29b      	uxth	r3, r3
 8002906:	b9ab      	cbnz	r3, 8002934 <HAL_SPI_TransmitReceive+0xe4>
 8002908:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800290a:	b29b      	uxth	r3, r3
 800290c:	b993      	cbnz	r3, 8002934 <HAL_SPI_TransmitReceive+0xe4>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800290e:	4642      	mov	r2, r8
 8002910:	4639      	mov	r1, r7
 8002912:	4620      	mov	r0, r4
 8002914:	f7ff fe8b 	bl	800262e <SPI_EndRxTxTransaction>
 8002918:	2800      	cmp	r0, #0
 800291a:	f040 8081 	bne.w	8002a20 <HAL_SPI_TransmitReceive+0x1d0>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800291e:	68a3      	ldr	r3, [r4, #8]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d132      	bne.n	800298a <HAL_SPI_TransmitReceive+0x13a>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002924:	6823      	ldr	r3, [r4, #0]
 8002926:	9001      	str	r0, [sp, #4]
 8002928:	68da      	ldr	r2, [r3, #12]
 800292a:	9201      	str	r2, [sp, #4]
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	9301      	str	r3, [sp, #4]
 8002930:	9b01      	ldr	r3, [sp, #4]
 8002932:	e02a      	b.n	800298a <HAL_SPI_TransmitReceive+0x13a>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002934:	6822      	ldr	r2, [r4, #0]
 8002936:	6893      	ldr	r3, [r2, #8]
 8002938:	0799      	lsls	r1, r3, #30
 800293a:	d50d      	bpl.n	8002958 <HAL_SPI_TransmitReceive+0x108>
 800293c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800293e:	b29b      	uxth	r3, r3
 8002940:	b153      	cbz	r3, 8002958 <HAL_SPI_TransmitReceive+0x108>
 8002942:	b14d      	cbz	r5, 8002958 <HAL_SPI_TransmitReceive+0x108>
        txallowed = 0U;
 8002944:	2500      	movs	r5, #0
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002946:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002948:	f833 1b02 	ldrh.w	r1, [r3], #2
 800294c:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800294e:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8002950:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002952:	3b01      	subs	r3, #1
 8002954:	b29b      	uxth	r3, r3
 8002956:	86e3      	strh	r3, [r4, #54]	; 0x36
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002958:	6893      	ldr	r3, [r2, #8]
 800295a:	07db      	lsls	r3, r3, #31
 800295c:	d50c      	bpl.n	8002978 <HAL_SPI_TransmitReceive+0x128>
 800295e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002960:	b29b      	uxth	r3, r3
 8002962:	b14b      	cbz	r3, 8002978 <HAL_SPI_TransmitReceive+0x128>
        txallowed = 1U;
 8002964:	2501      	movs	r5, #1
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002966:	68d2      	ldr	r2, [r2, #12]
 8002968:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800296a:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800296e:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8002970:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002972:	3b01      	subs	r3, #1
 8002974:	b29b      	uxth	r3, r3
 8002976:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002978:	f7fd ff1c 	bl	80007b4 <HAL_GetTick>
 800297c:	eba0 0008 	sub.w	r0, r0, r8
 8002980:	4287      	cmp	r7, r0
 8002982:	d8be      	bhi.n	8002902 <HAL_SPI_TransmitReceive+0xb2>
 8002984:	1c7e      	adds	r6, r7, #1
 8002986:	d0bc      	beq.n	8002902 <HAL_SPI_TransmitReceive+0xb2>
        errorcode = HAL_TIMEOUT;
 8002988:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 800298a:	2301      	movs	r3, #1
 800298c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002990:	2300      	movs	r3, #0
 8002992:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8002996:	b003      	add	sp, #12
 8002998:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800299c:	b109      	cbz	r1, 80029a2 <HAL_SPI_TransmitReceive+0x152>
 800299e:	2e01      	cmp	r6, #1
 80029a0:	d108      	bne.n	80029b4 <HAL_SPI_TransmitReceive+0x164>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80029a2:	782a      	ldrb	r2, [r5, #0]
 80029a4:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80029a6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80029a8:	3301      	adds	r3, #1
 80029aa:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80029ac:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80029ae:	3b01      	subs	r3, #1
 80029b0:	b29b      	uxth	r3, r3
 80029b2:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 80029b4:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80029b6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80029b8:	b29b      	uxth	r3, r3
 80029ba:	b91b      	cbnz	r3, 80029c4 <HAL_SPI_TransmitReceive+0x174>
 80029bc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80029be:	b29b      	uxth	r3, r3
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d0a4      	beq.n	800290e <HAL_SPI_TransmitReceive+0xbe>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80029c4:	6822      	ldr	r2, [r4, #0]
 80029c6:	6893      	ldr	r3, [r2, #8]
 80029c8:	0798      	lsls	r0, r3, #30
 80029ca:	d50e      	bpl.n	80029ea <HAL_SPI_TransmitReceive+0x19a>
 80029cc:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80029ce:	b29b      	uxth	r3, r3
 80029d0:	b15b      	cbz	r3, 80029ea <HAL_SPI_TransmitReceive+0x19a>
 80029d2:	b155      	cbz	r5, 80029ea <HAL_SPI_TransmitReceive+0x19a>
        txallowed = 0U;
 80029d4:	2500      	movs	r5, #0
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80029d6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80029d8:	781b      	ldrb	r3, [r3, #0]
 80029da:	7313      	strb	r3, [r2, #12]
        hspi->pTxBuffPtr++;
 80029dc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80029de:	3301      	adds	r3, #1
 80029e0:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80029e2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80029e4:	3b01      	subs	r3, #1
 80029e6:	b29b      	uxth	r3, r3
 80029e8:	86e3      	strh	r3, [r4, #54]	; 0x36
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80029ea:	6822      	ldr	r2, [r4, #0]
 80029ec:	6893      	ldr	r3, [r2, #8]
 80029ee:	07d9      	lsls	r1, r3, #31
 80029f0:	d50d      	bpl.n	8002a0e <HAL_SPI_TransmitReceive+0x1be>
 80029f2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80029f4:	b29b      	uxth	r3, r3
 80029f6:	b153      	cbz	r3, 8002a0e <HAL_SPI_TransmitReceive+0x1be>
        txallowed = 1U;
 80029f8:	2501      	movs	r5, #1
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80029fa:	68d2      	ldr	r2, [r2, #12]
 80029fc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80029fe:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002a00:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002a02:	3301      	adds	r3, #1
 8002a04:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8002a06:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002a08:	3b01      	subs	r3, #1
 8002a0a:	b29b      	uxth	r3, r3
 8002a0c:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002a0e:	f7fd fed1 	bl	80007b4 <HAL_GetTick>
 8002a12:	eba0 0008 	sub.w	r0, r0, r8
 8002a16:	4287      	cmp	r7, r0
 8002a18:	d8cd      	bhi.n	80029b6 <HAL_SPI_TransmitReceive+0x166>
 8002a1a:	1c7b      	adds	r3, r7, #1
 8002a1c:	d0cb      	beq.n	80029b6 <HAL_SPI_TransmitReceive+0x166>
 8002a1e:	e7b3      	b.n	8002988 <HAL_SPI_TransmitReceive+0x138>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002a20:	2320      	movs	r3, #32
 8002a22:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 8002a24:	2001      	movs	r0, #1
 8002a26:	e7b0      	b.n	800298a <HAL_SPI_TransmitReceive+0x13a>
    errorcode = HAL_BUSY;
 8002a28:	2002      	movs	r0, #2
 8002a2a:	e7ae      	b.n	800298a <HAL_SPI_TransmitReceive+0x13a>
  __HAL_LOCK(hspi);
 8002a2c:	2002      	movs	r0, #2
 8002a2e:	e7b2      	b.n	8002996 <HAL_SPI_TransmitReceive+0x146>

08002a30 <HAL_SPI_Receive>:
{
 8002a30:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8002a34:	461d      	mov	r5, r3
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002a36:	6843      	ldr	r3, [r0, #4]
{
 8002a38:	4604      	mov	r4, r0
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002a3a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
{
 8002a3e:	4688      	mov	r8, r1
 8002a40:	4617      	mov	r7, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002a42:	d10c      	bne.n	8002a5e <HAL_SPI_Receive+0x2e>
 8002a44:	6883      	ldr	r3, [r0, #8]
 8002a46:	b953      	cbnz	r3, 8002a5e <HAL_SPI_Receive+0x2e>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002a48:	2304      	movs	r3, #4
 8002a4a:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002a4e:	4613      	mov	r3, r2
 8002a50:	9500      	str	r5, [sp, #0]
 8002a52:	460a      	mov	r2, r1
 8002a54:	f7ff fefc 	bl	8002850 <HAL_SPI_TransmitReceive>
}
 8002a58:	b002      	add	sp, #8
 8002a5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hspi);
 8002a5e:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8002a62:	2b01      	cmp	r3, #1
 8002a64:	d07d      	beq.n	8002b62 <HAL_SPI_Receive+0x132>
 8002a66:	2301      	movs	r3, #1
 8002a68:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  tickstart = HAL_GetTick();
 8002a6c:	f7fd fea2 	bl	80007b4 <HAL_GetTick>
 8002a70:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8002a72:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 8002a76:	b2c0      	uxtb	r0, r0
 8002a78:	2801      	cmp	r0, #1
 8002a7a:	d170      	bne.n	8002b5e <HAL_SPI_Receive+0x12e>
  if ((pData == NULL) || (Size == 0U))
 8002a7c:	f1b8 0f00 	cmp.w	r8, #0
 8002a80:	d05b      	beq.n	8002b3a <HAL_SPI_Receive+0x10a>
 8002a82:	2f00      	cmp	r7, #0
 8002a84:	d059      	beq.n	8002b3a <HAL_SPI_Receive+0x10a>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002a86:	2304      	movs	r3, #4
 8002a88:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002a90:	6323      	str	r3, [r4, #48]	; 0x30
  hspi->RxXferCount = Size;
 8002a92:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->TxXferSize  = 0U;
 8002a94:	86a3      	strh	r3, [r4, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002a96:	86e3      	strh	r3, [r4, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002a98:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002a9a:	6463      	str	r3, [r4, #68]	; 0x44
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a9c:	68a3      	ldr	r3, [r4, #8]
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002a9e:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002aa2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
  hspi->RxXferSize  = Size;
 8002aa6:	87a7      	strh	r7, [r4, #60]	; 0x3c
 8002aa8:	6821      	ldr	r1, [r4, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002aaa:	d107      	bne.n	8002abc <HAL_SPI_Receive+0x8c>
    __HAL_SPI_DISABLE(hspi);
 8002aac:	680b      	ldr	r3, [r1, #0]
 8002aae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ab2:	600b      	str	r3, [r1, #0]
    SPI_1LINE_RX(hspi);
 8002ab4:	680b      	ldr	r3, [r1, #0]
 8002ab6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002aba:	600b      	str	r3, [r1, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002abc:	680b      	ldr	r3, [r1, #0]
 8002abe:	065f      	lsls	r7, r3, #25
    __HAL_SPI_ENABLE(hspi);
 8002ac0:	bf5e      	ittt	pl
 8002ac2:	680b      	ldrpl	r3, [r1, #0]
 8002ac4:	f043 0340 	orrpl.w	r3, r3, #64	; 0x40
 8002ac8:	600b      	strpl	r3, [r1, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002aca:	68e3      	ldr	r3, [r4, #12]
 8002acc:	b1f3      	cbz	r3, 8002b0c <HAL_SPI_Receive+0xdc>
    while (hspi->RxXferCount > 0U)
 8002ace:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002ad0:	b29b      	uxth	r3, r3
 8002ad2:	b1fb      	cbz	r3, 8002b14 <HAL_SPI_Receive+0xe4>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002ad4:	6823      	ldr	r3, [r4, #0]
 8002ad6:	689a      	ldr	r2, [r3, #8]
 8002ad8:	07d2      	lsls	r2, r2, #31
 8002ada:	d535      	bpl.n	8002b48 <HAL_SPI_Receive+0x118>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002adc:	68da      	ldr	r2, [r3, #12]
 8002ade:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002ae0:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002ae4:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8002ae6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002ae8:	3b01      	subs	r3, #1
 8002aea:	b29b      	uxth	r3, r3
 8002aec:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8002aee:	e7ee      	b.n	8002ace <HAL_SPI_Receive+0x9e>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002af0:	6823      	ldr	r3, [r4, #0]
 8002af2:	689a      	ldr	r2, [r3, #8]
 8002af4:	07d0      	lsls	r0, r2, #31
 8002af6:	d518      	bpl.n	8002b2a <HAL_SPI_Receive+0xfa>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002af8:	7b1b      	ldrb	r3, [r3, #12]
 8002afa:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002afc:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002afe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002b00:	3301      	adds	r3, #1
 8002b02:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8002b04:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002b06:	3b01      	subs	r3, #1
 8002b08:	b29b      	uxth	r3, r3
 8002b0a:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->RxXferCount > 0U)
 8002b0c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002b0e:	b29b      	uxth	r3, r3
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d1ed      	bne.n	8002af0 <HAL_SPI_Receive+0xc0>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002b14:	4632      	mov	r2, r6
 8002b16:	4629      	mov	r1, r5
 8002b18:	4620      	mov	r0, r4
 8002b1a:	f7ff fd61 	bl	80025e0 <SPI_EndRxTransaction>
 8002b1e:	b9d8      	cbnz	r0, 8002b58 <HAL_SPI_Receive+0x128>
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002b20:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 8002b22:	3000      	adds	r0, #0
 8002b24:	bf18      	it	ne
 8002b26:	2001      	movne	r0, #1
 8002b28:	e007      	b.n	8002b3a <HAL_SPI_Receive+0x10a>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002b2a:	f7fd fe43 	bl	80007b4 <HAL_GetTick>
 8002b2e:	1b80      	subs	r0, r0, r6
 8002b30:	4285      	cmp	r5, r0
 8002b32:	d8eb      	bhi.n	8002b0c <HAL_SPI_Receive+0xdc>
 8002b34:	1c69      	adds	r1, r5, #1
 8002b36:	d0e9      	beq.n	8002b0c <HAL_SPI_Receive+0xdc>
          errorcode = HAL_TIMEOUT;
 8002b38:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002b40:	2300      	movs	r3, #0
 8002b42:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  return errorcode;
 8002b46:	e787      	b.n	8002a58 <HAL_SPI_Receive+0x28>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002b48:	f7fd fe34 	bl	80007b4 <HAL_GetTick>
 8002b4c:	1b80      	subs	r0, r0, r6
 8002b4e:	4285      	cmp	r5, r0
 8002b50:	d8bd      	bhi.n	8002ace <HAL_SPI_Receive+0x9e>
 8002b52:	1c6b      	adds	r3, r5, #1
 8002b54:	d0bb      	beq.n	8002ace <HAL_SPI_Receive+0x9e>
 8002b56:	e7ef      	b.n	8002b38 <HAL_SPI_Receive+0x108>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002b58:	2320      	movs	r3, #32
 8002b5a:	6563      	str	r3, [r4, #84]	; 0x54
 8002b5c:	e7e0      	b.n	8002b20 <HAL_SPI_Receive+0xf0>
    errorcode = HAL_BUSY;
 8002b5e:	2002      	movs	r0, #2
 8002b60:	e7eb      	b.n	8002b3a <HAL_SPI_Receive+0x10a>
  __HAL_LOCK(hspi);
 8002b62:	2002      	movs	r0, #2
 8002b64:	e778      	b.n	8002a58 <HAL_SPI_Receive+0x28>
	...

08002b68 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002b68:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d128      	bne.n	8002bc2 <HAL_TIM_Base_Start_IT+0x5a>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b70:	2302      	movs	r3, #2
 8002b72:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002b76:	6803      	ldr	r3, [r0, #0]
 8002b78:	68da      	ldr	r2, [r3, #12]
 8002b7a:	f042 0201 	orr.w	r2, r2, #1
 8002b7e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b80:	4a11      	ldr	r2, [pc, #68]	; (8002bc8 <HAL_TIM_Base_Start_IT+0x60>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d012      	beq.n	8002bac <HAL_TIM_Base_Start_IT+0x44>
 8002b86:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d00e      	beq.n	8002bac <HAL_TIM_Base_Start_IT+0x44>
 8002b8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b92:	d00b      	beq.n	8002bac <HAL_TIM_Base_Start_IT+0x44>
 8002b94:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d007      	beq.n	8002bac <HAL_TIM_Base_Start_IT+0x44>
 8002b9c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d003      	beq.n	8002bac <HAL_TIM_Base_Start_IT+0x44>
 8002ba4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d104      	bne.n	8002bb6 <HAL_TIM_Base_Start_IT+0x4e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002bac:	689a      	ldr	r2, [r3, #8]
 8002bae:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bb2:	2a06      	cmp	r2, #6
 8002bb4:	d003      	beq.n	8002bbe <HAL_TIM_Base_Start_IT+0x56>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002bb6:	681a      	ldr	r2, [r3, #0]
 8002bb8:	f042 0201 	orr.w	r2, r2, #1
 8002bbc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002bbe:	2000      	movs	r0, #0
}
 8002bc0:	4770      	bx	lr
    return HAL_ERROR;
 8002bc2:	2001      	movs	r0, #1
 8002bc4:	4770      	bx	lr
 8002bc6:	bf00      	nop
 8002bc8:	40012c00 	.word	0x40012c00

08002bcc <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002bcc:	b530      	push	{r4, r5, lr}
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8002bce:	f890 403e 	ldrb.w	r4, [r0, #62]	; 0x3e
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8002bd2:	f890 203f 	ldrb.w	r2, [r0, #63]	; 0x3f
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8002bd6:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8002bda:	f890 5043 	ldrb.w	r5, [r0, #67]	; 0x43
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8002bde:	b2e4      	uxtb	r4, r4
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8002be0:	b2d2      	uxtb	r2, r2
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8002be2:	b2db      	uxtb	r3, r3
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8002be4:	b2ed      	uxtb	r5, r5

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8002be6:	b9c1      	cbnz	r1, 8002c1a <HAL_TIM_Encoder_Start+0x4e>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002be8:	2c01      	cmp	r4, #1
 8002bea:	d147      	bne.n	8002c7c <HAL_TIM_Encoder_Start+0xb0>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	d145      	bne.n	8002c7c <HAL_TIM_Encoder_Start+0xb0>
    {
      return HAL_ERROR;
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002bf0:	2302      	movs	r3, #2
 8002bf2:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002bf6:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  /* Enable the encoder interface channels */
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002bfa:	6803      	ldr	r3, [r0, #0]
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002bfc:	6a1a      	ldr	r2, [r3, #32]
 8002bfe:	f022 0201 	bic.w	r2, r2, #1
 8002c02:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002c04:	6a1a      	ldr	r2, [r3, #32]
 8002c06:	f042 0201 	orr.w	r2, r2, #1
 8002c0a:	621a      	str	r2, [r3, #32]
  __HAL_TIM_ENABLE(htim);
 8002c0c:	6802      	ldr	r2, [r0, #0]
  return HAL_OK;
 8002c0e:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE(htim);
 8002c10:	6813      	ldr	r3, [r2, #0]
 8002c12:	f043 0301 	orr.w	r3, r3, #1
 8002c16:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8002c18:	bd30      	pop	{r4, r5, pc}
  else if (Channel == TIM_CHANNEL_2)
 8002c1a:	2904      	cmp	r1, #4
 8002c1c:	d111      	bne.n	8002c42 <HAL_TIM_Encoder_Start+0x76>
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002c1e:	2a01      	cmp	r2, #1
 8002c20:	d12c      	bne.n	8002c7c <HAL_TIM_Encoder_Start+0xb0>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002c22:	2d01      	cmp	r5, #1
 8002c24:	d12a      	bne.n	8002c7c <HAL_TIM_Encoder_Start+0xb0>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c26:	2302      	movs	r3, #2
 8002c28:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c2c:	f880 3043 	strb.w	r3, [r0, #67]	; 0x43
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002c30:	6803      	ldr	r3, [r0, #0]
  TIMx->CCER &= ~tmp;
 8002c32:	6a1a      	ldr	r2, [r3, #32]
 8002c34:	f022 0210 	bic.w	r2, r2, #16
 8002c38:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002c3a:	6a1a      	ldr	r2, [r3, #32]
 8002c3c:	f042 0210 	orr.w	r2, r2, #16
 8002c40:	e7e3      	b.n	8002c0a <HAL_TIM_Encoder_Start+0x3e>
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002c42:	2c01      	cmp	r4, #1
 8002c44:	d11a      	bne.n	8002c7c <HAL_TIM_Encoder_Start+0xb0>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002c46:	2a01      	cmp	r2, #1
 8002c48:	d118      	bne.n	8002c7c <HAL_TIM_Encoder_Start+0xb0>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002c4a:	2b01      	cmp	r3, #1
 8002c4c:	d116      	bne.n	8002c7c <HAL_TIM_Encoder_Start+0xb0>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002c4e:	2d01      	cmp	r5, #1
 8002c50:	d114      	bne.n	8002c7c <HAL_TIM_Encoder_Start+0xb0>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c52:	2302      	movs	r3, #2
 8002c54:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c58:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c5c:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c60:	f880 3043 	strb.w	r3, [r0, #67]	; 0x43
  switch (Channel)
 8002c64:	2900      	cmp	r1, #0
 8002c66:	d0c8      	beq.n	8002bfa <HAL_TIM_Encoder_Start+0x2e>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002c68:	6803      	ldr	r3, [r0, #0]
  TIMx->CCER &= ~tmp;
 8002c6a:	6a1a      	ldr	r2, [r3, #32]
 8002c6c:	f022 0201 	bic.w	r2, r2, #1
 8002c70:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002c72:	6a1a      	ldr	r2, [r3, #32]
 8002c74:	f042 0201 	orr.w	r2, r2, #1
 8002c78:	621a      	str	r2, [r3, #32]
 8002c7a:	e7da      	b.n	8002c32 <HAL_TIM_Encoder_Start+0x66>
      return HAL_ERROR;
 8002c7c:	2001      	movs	r0, #1
 8002c7e:	bd30      	pop	{r4, r5, pc}

08002c80 <HAL_TIM_OC_DelayElapsedCallback>:
 8002c80:	4770      	bx	lr

08002c82 <HAL_TIM_IC_CaptureCallback>:
 8002c82:	4770      	bx	lr

08002c84 <HAL_TIM_PWM_PulseFinishedCallback>:
 8002c84:	4770      	bx	lr

08002c86 <HAL_TIM_TriggerCallback>:
 8002c86:	4770      	bx	lr

08002c88 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002c88:	6803      	ldr	r3, [r0, #0]
{
 8002c8a:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002c8c:	691a      	ldr	r2, [r3, #16]
{
 8002c8e:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002c90:	0791      	lsls	r1, r2, #30
 8002c92:	d50e      	bpl.n	8002cb2 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002c94:	68da      	ldr	r2, [r3, #12]
 8002c96:	0792      	lsls	r2, r2, #30
 8002c98:	d50b      	bpl.n	8002cb2 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002c9a:	f06f 0202 	mvn.w	r2, #2
 8002c9e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ca0:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ca2:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ca4:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ca6:	079b      	lsls	r3, r3, #30
 8002ca8:	d077      	beq.n	8002d9a <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 8002caa:	f7ff ffea 	bl	8002c82 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002cb2:	6823      	ldr	r3, [r4, #0]
 8002cb4:	691a      	ldr	r2, [r3, #16]
 8002cb6:	0750      	lsls	r0, r2, #29
 8002cb8:	d510      	bpl.n	8002cdc <HAL_TIM_IRQHandler+0x54>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002cba:	68da      	ldr	r2, [r3, #12]
 8002cbc:	0751      	lsls	r1, r2, #29
 8002cbe:	d50d      	bpl.n	8002cdc <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002cc0:	f06f 0204 	mvn.w	r2, #4
 8002cc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002cc6:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002cc8:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002cca:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ccc:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8002cd0:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002cd2:	d068      	beq.n	8002da6 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8002cd4:	f7ff ffd5 	bl	8002c82 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002cdc:	6823      	ldr	r3, [r4, #0]
 8002cde:	691a      	ldr	r2, [r3, #16]
 8002ce0:	0712      	lsls	r2, r2, #28
 8002ce2:	d50f      	bpl.n	8002d04 <HAL_TIM_IRQHandler+0x7c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002ce4:	68da      	ldr	r2, [r3, #12]
 8002ce6:	0710      	lsls	r0, r2, #28
 8002ce8:	d50c      	bpl.n	8002d04 <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002cea:	f06f 0208 	mvn.w	r2, #8
 8002cee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002cf0:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002cf2:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002cf4:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002cf6:	0799      	lsls	r1, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8002cf8:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002cfa:	d05a      	beq.n	8002db2 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8002cfc:	f7ff ffc1 	bl	8002c82 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d00:	2300      	movs	r3, #0
 8002d02:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002d04:	6823      	ldr	r3, [r4, #0]
 8002d06:	691a      	ldr	r2, [r3, #16]
 8002d08:	06d2      	lsls	r2, r2, #27
 8002d0a:	d510      	bpl.n	8002d2e <HAL_TIM_IRQHandler+0xa6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002d0c:	68da      	ldr	r2, [r3, #12]
 8002d0e:	06d0      	lsls	r0, r2, #27
 8002d10:	d50d      	bpl.n	8002d2e <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002d12:	f06f 0210 	mvn.w	r2, #16
 8002d16:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d18:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002d1a:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d1c:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002d1e:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8002d22:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002d24:	d04b      	beq.n	8002dbe <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8002d26:	f7ff ffac 	bl	8002c82 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002d2e:	6823      	ldr	r3, [r4, #0]
 8002d30:	691a      	ldr	r2, [r3, #16]
 8002d32:	07d1      	lsls	r1, r2, #31
 8002d34:	d508      	bpl.n	8002d48 <HAL_TIM_IRQHandler+0xc0>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002d36:	68da      	ldr	r2, [r3, #12]
 8002d38:	07d2      	lsls	r2, r2, #31
 8002d3a:	d505      	bpl.n	8002d48 <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002d3c:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8002d40:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002d42:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002d44:	f000 ffc6 	bl	8003cd4 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002d48:	6823      	ldr	r3, [r4, #0]
 8002d4a:	691a      	ldr	r2, [r3, #16]
 8002d4c:	0610      	lsls	r0, r2, #24
 8002d4e:	d508      	bpl.n	8002d62 <HAL_TIM_IRQHandler+0xda>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002d50:	68da      	ldr	r2, [r3, #12]
 8002d52:	0611      	lsls	r1, r2, #24
 8002d54:	d505      	bpl.n	8002d62 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002d56:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8002d5a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002d5c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002d5e:	f000 f93e 	bl	8002fde <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002d62:	6823      	ldr	r3, [r4, #0]
 8002d64:	691a      	ldr	r2, [r3, #16]
 8002d66:	0652      	lsls	r2, r2, #25
 8002d68:	d508      	bpl.n	8002d7c <HAL_TIM_IRQHandler+0xf4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002d6a:	68da      	ldr	r2, [r3, #12]
 8002d6c:	0650      	lsls	r0, r2, #25
 8002d6e:	d505      	bpl.n	8002d7c <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002d70:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 8002d74:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002d76:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002d78:	f7ff ff85 	bl	8002c86 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002d7c:	6823      	ldr	r3, [r4, #0]
 8002d7e:	691a      	ldr	r2, [r3, #16]
 8002d80:	0691      	lsls	r1, r2, #26
 8002d82:	d522      	bpl.n	8002dca <HAL_TIM_IRQHandler+0x142>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002d84:	68da      	ldr	r2, [r3, #12]
 8002d86:	0692      	lsls	r2, r2, #26
 8002d88:	d51f      	bpl.n	8002dca <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002d8a:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8002d8e:	4620      	mov	r0, r4
}
 8002d90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002d94:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8002d96:	f000 b921 	b.w	8002fdc <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d9a:	f7ff ff71 	bl	8002c80 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d9e:	4620      	mov	r0, r4
 8002da0:	f7ff ff70 	bl	8002c84 <HAL_TIM_PWM_PulseFinishedCallback>
 8002da4:	e783      	b.n	8002cae <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002da6:	f7ff ff6b 	bl	8002c80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002daa:	4620      	mov	r0, r4
 8002dac:	f7ff ff6a 	bl	8002c84 <HAL_TIM_PWM_PulseFinishedCallback>
 8002db0:	e792      	b.n	8002cd8 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002db2:	f7ff ff65 	bl	8002c80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002db6:	4620      	mov	r0, r4
 8002db8:	f7ff ff64 	bl	8002c84 <HAL_TIM_PWM_PulseFinishedCallback>
 8002dbc:	e7a0      	b.n	8002d00 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dbe:	f7ff ff5f 	bl	8002c80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dc2:	4620      	mov	r0, r4
 8002dc4:	f7ff ff5e 	bl	8002c84 <HAL_TIM_PWM_PulseFinishedCallback>
 8002dc8:	e7af      	b.n	8002d2a <HAL_TIM_IRQHandler+0xa2>
 8002dca:	bd10      	pop	{r4, pc}

08002dcc <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002dcc:	4a24      	ldr	r2, [pc, #144]	; (8002e60 <TIM_Base_SetConfig+0x94>)
  tmpcr1 = TIMx->CR1;
 8002dce:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002dd0:	4290      	cmp	r0, r2
 8002dd2:	d012      	beq.n	8002dfa <TIM_Base_SetConfig+0x2e>
 8002dd4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002dd8:	4290      	cmp	r0, r2
 8002dda:	d00e      	beq.n	8002dfa <TIM_Base_SetConfig+0x2e>
 8002ddc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002de0:	d00b      	beq.n	8002dfa <TIM_Base_SetConfig+0x2e>
 8002de2:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8002de6:	4290      	cmp	r0, r2
 8002de8:	d007      	beq.n	8002dfa <TIM_Base_SetConfig+0x2e>
 8002dea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002dee:	4290      	cmp	r0, r2
 8002df0:	d003      	beq.n	8002dfa <TIM_Base_SetConfig+0x2e>
 8002df2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002df6:	4290      	cmp	r0, r2
 8002df8:	d11d      	bne.n	8002e36 <TIM_Base_SetConfig+0x6a>
    tmpcr1 |= Structure->CounterMode;
 8002dfa:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002dfc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002e00:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e02:	4a17      	ldr	r2, [pc, #92]	; (8002e60 <TIM_Base_SetConfig+0x94>)
 8002e04:	4290      	cmp	r0, r2
 8002e06:	d012      	beq.n	8002e2e <TIM_Base_SetConfig+0x62>
 8002e08:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e0c:	4290      	cmp	r0, r2
 8002e0e:	d00e      	beq.n	8002e2e <TIM_Base_SetConfig+0x62>
 8002e10:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002e14:	d00b      	beq.n	8002e2e <TIM_Base_SetConfig+0x62>
 8002e16:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8002e1a:	4290      	cmp	r0, r2
 8002e1c:	d007      	beq.n	8002e2e <TIM_Base_SetConfig+0x62>
 8002e1e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002e22:	4290      	cmp	r0, r2
 8002e24:	d003      	beq.n	8002e2e <TIM_Base_SetConfig+0x62>
 8002e26:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002e2a:	4290      	cmp	r0, r2
 8002e2c:	d103      	bne.n	8002e36 <TIM_Base_SetConfig+0x6a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e2e:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e34:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e36:	694a      	ldr	r2, [r1, #20]
 8002e38:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e3c:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8002e3e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e40:	688b      	ldr	r3, [r1, #8]
 8002e42:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002e44:	680b      	ldr	r3, [r1, #0]
 8002e46:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e48:	4b05      	ldr	r3, [pc, #20]	; (8002e60 <TIM_Base_SetConfig+0x94>)
 8002e4a:	4298      	cmp	r0, r3
 8002e4c:	d003      	beq.n	8002e56 <TIM_Base_SetConfig+0x8a>
 8002e4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e52:	4298      	cmp	r0, r3
 8002e54:	d101      	bne.n	8002e5a <TIM_Base_SetConfig+0x8e>
    TIMx->RCR = Structure->RepetitionCounter;
 8002e56:	690b      	ldr	r3, [r1, #16]
 8002e58:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	6143      	str	r3, [r0, #20]
 8002e5e:	4770      	bx	lr
 8002e60:	40012c00 	.word	0x40012c00

08002e64 <HAL_TIM_Base_Init>:
{
 8002e64:	b510      	push	{r4, lr}
  if (htim == NULL)
 8002e66:	4604      	mov	r4, r0
 8002e68:	b330      	cbz	r0, 8002eb8 <HAL_TIM_Base_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 8002e6a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002e6e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002e72:	b91b      	cbnz	r3, 8002e7c <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002e74:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002e78:	f002 fc16 	bl	80056a8 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8002e7c:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e7e:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8002e80:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e84:	1d21      	adds	r1, r4, #4
 8002e86:	f7ff ffa1 	bl	8002dcc <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e8a:	2301      	movs	r3, #1
  return HAL_OK;
 8002e8c:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e8e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e92:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8002e96:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8002e9a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8002e9e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ea2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002ea6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002eaa:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8002eae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8002eb2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002eb6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002eb8:	2001      	movs	r0, #1
}
 8002eba:	bd10      	pop	{r4, pc}

08002ebc <HAL_TIM_Encoder_Init>:
{
 8002ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ebe:	460d      	mov	r5, r1
  if (htim == NULL)
 8002ec0:	4604      	mov	r4, r0
 8002ec2:	2800      	cmp	r0, #0
 8002ec4:	d04d      	beq.n	8002f62 <HAL_TIM_Encoder_Init+0xa6>
  if (htim->State == HAL_TIM_STATE_RESET)
 8002ec6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002eca:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002ece:	b91b      	cbnz	r3, 8002ed8 <HAL_TIM_Encoder_Init+0x1c>
    htim->Lock = HAL_UNLOCKED;
 8002ed0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Encoder_MspInit(htim);
 8002ed4:	f002 fbb8 	bl	8005648 <HAL_TIM_Encoder_MspInit>
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002ed8:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 8002eda:	2302      	movs	r3, #2
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002edc:	f851 0b04 	ldr.w	r0, [r1], #4
  htim->State = HAL_TIM_STATE_BUSY;
 8002ee0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002ee4:	6883      	ldr	r3, [r0, #8]
 8002ee6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002eea:	f023 0307 	bic.w	r3, r3, #7
 8002eee:	6083      	str	r3, [r0, #8]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ef0:	f7ff ff6c 	bl	8002dcc <TIM_Base_SetConfig>
  tmpsmcr = htim->Instance->SMCR;
 8002ef4:	6820      	ldr	r0, [r4, #0]
  tmpsmcr |= sConfig->EncoderMode;
 8002ef6:	682b      	ldr	r3, [r5, #0]
  tmpsmcr = htim->Instance->SMCR;
 8002ef8:	6886      	ldr	r6, [r0, #8]
  tmpccmr1 = htim->Instance->CCMR1;
 8002efa:	6982      	ldr	r2, [r0, #24]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002efc:	68a9      	ldr	r1, [r5, #8]
  tmpsmcr |= sConfig->EncoderMode;
 8002efe:	431e      	orrs	r6, r3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002f00:	69ab      	ldr	r3, [r5, #24]
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002f02:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002f06:	f022 0203 	bic.w	r2, r2, #3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002f0a:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
 8002f0e:	4313      	orrs	r3, r2
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002f10:	f423 427c 	bic.w	r2, r3, #64512	; 0xfc00
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002f14:	692b      	ldr	r3, [r5, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002f16:	69e9      	ldr	r1, [r5, #28]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002f18:	011b      	lsls	r3, r3, #4
 8002f1a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002f1e:	68e9      	ldr	r1, [r5, #12]
  tmpccer = htim->Instance->CCER;
 8002f20:	6a07      	ldr	r7, [r0, #32]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002f22:	430b      	orrs	r3, r1
 8002f24:	6a29      	ldr	r1, [r5, #32]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002f26:	f022 02fc 	bic.w	r2, r2, #252	; 0xfc
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002f2a:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
 8002f2e:	4313      	orrs	r3, r2
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002f30:	6969      	ldr	r1, [r5, #20]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002f32:	f027 0222 	bic.w	r2, r7, #34	; 0x22
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002f36:	686f      	ldr	r7, [r5, #4]
  htim->Instance->SMCR = tmpsmcr;
 8002f38:	6086      	str	r6, [r0, #8]
  htim->Instance->CCMR1 = tmpccmr1;
 8002f3a:	6183      	str	r3, [r0, #24]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f3c:	2301      	movs	r3, #1
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002f3e:	ea47 1701 	orr.w	r7, r7, r1, lsl #4
 8002f42:	4317      	orrs	r7, r2
  htim->Instance->CCER = tmpccer;
 8002f44:	6207      	str	r7, [r0, #32]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f46:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  return HAL_OK;
 8002f4a:	2000      	movs	r0, #0
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002f4c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002f50:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002f54:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002f58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  htim->State = HAL_TIM_STATE_READY;
 8002f5c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002f60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8002f62:	2001      	movs	r0, #1
}
 8002f64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002f68 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f68:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8002f6c:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	f04f 0302 	mov.w	r3, #2
 8002f74:	d02d      	beq.n	8002fd2 <HAL_TIMEx_MasterConfigSynchronization+0x6a>
 8002f76:	2201      	movs	r2, #1

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f78:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002f7c:	6803      	ldr	r3, [r0, #0]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002f7e:	680d      	ldr	r5, [r1, #0]
  tmpcr2 = htim->Instance->CR2;
 8002f80:	685c      	ldr	r4, [r3, #4]
  __HAL_LOCK(htim);
 8002f82:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpcr2 &= ~TIM_CR2_MMS;
 8002f86:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002f8a:	432c      	orrs	r4, r5
  tmpsmcr = htim->Instance->SMCR;
 8002f8c:	689a      	ldr	r2, [r3, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002f8e:	605c      	str	r4, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f90:	4c11      	ldr	r4, [pc, #68]	; (8002fd8 <HAL_TIMEx_MasterConfigSynchronization+0x70>)
 8002f92:	42a3      	cmp	r3, r4
 8002f94:	d012      	beq.n	8002fbc <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8002f96:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8002f9a:	42a3      	cmp	r3, r4
 8002f9c:	d00e      	beq.n	8002fbc <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8002f9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fa2:	d00b      	beq.n	8002fbc <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8002fa4:	f5a4 3498 	sub.w	r4, r4, #77824	; 0x13000
 8002fa8:	42a3      	cmp	r3, r4
 8002faa:	d007      	beq.n	8002fbc <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8002fac:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002fb0:	42a3      	cmp	r3, r4
 8002fb2:	d003      	beq.n	8002fbc <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8002fb4:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002fb8:	42a3      	cmp	r3, r4
 8002fba:	d104      	bne.n	8002fc6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002fbc:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002fbe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002fc2:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002fc4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002fcc:	2300      	movs	r3, #0
 8002fce:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8002fd2:	4618      	mov	r0, r3

  return HAL_OK;
}
 8002fd4:	bd30      	pop	{r4, r5, pc}
 8002fd6:	bf00      	nop
 8002fd8:	40012c00 	.word	0x40012c00

08002fdc <HAL_TIMEx_CommutCallback>:
 8002fdc:	4770      	bx	lr

08002fde <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002fde:	4770      	bx	lr

08002fe0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002fe0:	b538      	push	{r3, r4, r5, lr}
 8002fe2:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002fe4:	6803      	ldr	r3, [r0, #0]
 8002fe6:	68c1      	ldr	r1, [r0, #12]
 8002fe8:	691a      	ldr	r2, [r3, #16]
 8002fea:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8002fee:	430a      	orrs	r2, r1
 8002ff0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002ff2:	6882      	ldr	r2, [r0, #8]
 8002ff4:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 8002ff6:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002ff8:	4302      	orrs	r2, r0
 8002ffa:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8002ffc:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 8003000:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003004:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8003006:	430a      	orrs	r2, r1
 8003008:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800300a:	695a      	ldr	r2, [r3, #20]
 800300c:	69a1      	ldr	r1, [r4, #24]
 800300e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003012:	430a      	orrs	r2, r1
 8003014:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003016:	4a0e      	ldr	r2, [pc, #56]	; (8003050 <UART_SetConfig+0x70>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d115      	bne.n	8003048 <UART_SetConfig+0x68>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800301c:	f7ff fa02 	bl	8002424 <HAL_RCC_GetPCLK2Freq>
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003020:	2319      	movs	r3, #25
 8003022:	4358      	muls	r0, r3
 8003024:	6863      	ldr	r3, [r4, #4]
 8003026:	2264      	movs	r2, #100	; 0x64
 8003028:	009b      	lsls	r3, r3, #2
 800302a:	fbb0 f0f3 	udiv	r0, r0, r3
 800302e:	fbb0 f1f2 	udiv	r1, r0, r2
 8003032:	fb02 0311 	mls	r3, r2, r1, r0
 8003036:	011b      	lsls	r3, r3, #4
 8003038:	3332      	adds	r3, #50	; 0x32
 800303a:	fbb3 f3f2 	udiv	r3, r3, r2
 800303e:	6825      	ldr	r5, [r4, #0]
 8003040:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8003044:	60ab      	str	r3, [r5, #8]
 8003046:	bd38      	pop	{r3, r4, r5, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 8003048:	f7ff f9dc 	bl	8002404 <HAL_RCC_GetPCLK1Freq>
 800304c:	e7e8      	b.n	8003020 <UART_SetConfig+0x40>
 800304e:	bf00      	nop
 8003050:	40013800 	.word	0x40013800

08003054 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8003054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003056:	4604      	mov	r4, r0
 8003058:	460e      	mov	r6, r1
 800305a:	4617      	mov	r7, r2
 800305c:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800305e:	6821      	ldr	r1, [r4, #0]
 8003060:	680b      	ldr	r3, [r1, #0]
 8003062:	ea36 0303 	bics.w	r3, r6, r3
 8003066:	d101      	bne.n	800306c <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8003068:	2000      	movs	r0, #0
}
 800306a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (Timeout != HAL_MAX_DELAY)
 800306c:	1c6b      	adds	r3, r5, #1
 800306e:	d0f7      	beq.n	8003060 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003070:	b995      	cbnz	r5, 8003098 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003072:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 8003074:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003076:	68da      	ldr	r2, [r3, #12]
 8003078:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800307c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800307e:	695a      	ldr	r2, [r3, #20]
 8003080:	f022 0201 	bic.w	r2, r2, #1
 8003084:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8003086:	2320      	movs	r3, #32
 8003088:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800308c:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8003090:	2300      	movs	r3, #0
 8003092:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8003096:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003098:	f7fd fb8c 	bl	80007b4 <HAL_GetTick>
 800309c:	1bc0      	subs	r0, r0, r7
 800309e:	4285      	cmp	r5, r0
 80030a0:	d2dd      	bcs.n	800305e <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 80030a2:	e7e6      	b.n	8003072 <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

080030a4 <HAL_UART_Init>:
{
 80030a4:	b510      	push	{r4, lr}
  if (huart == NULL)
 80030a6:	4604      	mov	r4, r0
 80030a8:	b340      	cbz	r0, 80030fc <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 80030aa:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80030ae:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80030b2:	b91b      	cbnz	r3, 80030bc <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80030b4:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80030b8:	f002 fb14 	bl	80056e4 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 80030bc:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 80030be:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80030c0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80030c4:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 80030c6:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 80030c8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80030cc:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80030ce:	f7ff ff87 	bl	8002fe0 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80030d2:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030d4:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80030d6:	691a      	ldr	r2, [r3, #16]
 80030d8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80030dc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80030de:	695a      	ldr	r2, [r3, #20]
 80030e0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80030e4:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80030e6:	68da      	ldr	r2, [r3, #12]
 80030e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80030ec:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 80030ee:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030f0:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80030f2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80030f6:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 80030fa:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80030fc:	2001      	movs	r0, #1
}
 80030fe:	bd10      	pop	{r4, pc}

08003100 <HAL_UART_Transmit>:
{
 8003100:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003104:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8003106:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
{
 800310a:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 800310c:	2b20      	cmp	r3, #32
{
 800310e:	460e      	mov	r6, r1
 8003110:	4691      	mov	r9, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8003112:	d14c      	bne.n	80031ae <HAL_UART_Transmit+0xae>
    if ((pData == NULL) || (Size == 0U))
 8003114:	2900      	cmp	r1, #0
 8003116:	d047      	beq.n	80031a8 <HAL_UART_Transmit+0xa8>
 8003118:	2a00      	cmp	r2, #0
 800311a:	d045      	beq.n	80031a8 <HAL_UART_Transmit+0xa8>
    __HAL_LOCK(huart);
 800311c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8003120:	2b01      	cmp	r3, #1
 8003122:	d044      	beq.n	80031ae <HAL_UART_Transmit+0xae>
 8003124:	2301      	movs	r3, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003126:	2500      	movs	r5, #0
    __HAL_LOCK(huart);
 8003128:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800312c:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800312e:	63c5      	str	r5, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003130:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8003134:	f7fd fb3e 	bl	80007b4 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003138:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 800313a:	4607      	mov	r7, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800313c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferSize = Size;
 8003140:	f8a4 9024 	strh.w	r9, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8003144:	f8a4 9026 	strh.w	r9, [r4, #38]	; 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003148:	d103      	bne.n	8003152 <HAL_UART_Transmit+0x52>
 800314a:	6923      	ldr	r3, [r4, #16]
 800314c:	b90b      	cbnz	r3, 8003152 <HAL_UART_Transmit+0x52>
 800314e:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 8003150:	461e      	mov	r6, r3
    __HAL_UNLOCK(huart);
 8003152:	2300      	movs	r3, #0
 8003154:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    while (huart->TxXferCount > 0U)
 8003158:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800315a:	b29b      	uxth	r3, r3
 800315c:	b95b      	cbnz	r3, 8003176 <HAL_UART_Transmit+0x76>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800315e:	4643      	mov	r3, r8
 8003160:	463a      	mov	r2, r7
 8003162:	2140      	movs	r1, #64	; 0x40
 8003164:	4620      	mov	r0, r4
 8003166:	f7ff ff75 	bl	8003054 <UART_WaitOnFlagUntilTimeout.constprop.3>
 800316a:	b958      	cbnz	r0, 8003184 <HAL_UART_Transmit+0x84>
    huart->gState = HAL_UART_STATE_READY;
 800316c:	2320      	movs	r3, #32
 800316e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 8003172:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003176:	4643      	mov	r3, r8
 8003178:	463a      	mov	r2, r7
 800317a:	2180      	movs	r1, #128	; 0x80
 800317c:	4620      	mov	r0, r4
 800317e:	f7ff ff69 	bl	8003054 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8003182:	b110      	cbz	r0, 800318a <HAL_UART_Transmit+0x8a>
        return HAL_TIMEOUT;
 8003184:	2003      	movs	r0, #3
 8003186:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800318a:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 800318c:	b94e      	cbnz	r6, 80031a2 <HAL_UART_Transmit+0xa2>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800318e:	f835 3b02 	ldrh.w	r3, [r5], #2
 8003192:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003196:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 8003198:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800319a:	3b01      	subs	r3, #1
 800319c:	b29b      	uxth	r3, r3
 800319e:	84e3      	strh	r3, [r4, #38]	; 0x26
 80031a0:	e7da      	b.n	8003158 <HAL_UART_Transmit+0x58>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80031a2:	f816 3b01 	ldrb.w	r3, [r6], #1
 80031a6:	e7f6      	b.n	8003196 <HAL_UART_Transmit+0x96>
      return  HAL_ERROR;
 80031a8:	2001      	movs	r0, #1
 80031aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return HAL_BUSY;
 80031ae:	2002      	movs	r0, #2
}
 80031b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080031b4 <HAL_UART_Receive>:
{
 80031b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80031b8:	4698      	mov	r8, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 80031ba:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
{
 80031be:	4604      	mov	r4, r0
  if (huart->RxState == HAL_UART_STATE_READY)
 80031c0:	2b20      	cmp	r3, #32
{
 80031c2:	460e      	mov	r6, r1
 80031c4:	4691      	mov	r9, r2
  if (huart->RxState == HAL_UART_STATE_READY)
 80031c6:	d14e      	bne.n	8003266 <HAL_UART_Receive+0xb2>
    if ((pData == NULL) || (Size == 0U))
 80031c8:	2900      	cmp	r1, #0
 80031ca:	d049      	beq.n	8003260 <HAL_UART_Receive+0xac>
 80031cc:	2a00      	cmp	r2, #0
 80031ce:	d047      	beq.n	8003260 <HAL_UART_Receive+0xac>
    __HAL_LOCK(huart);
 80031d0:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80031d4:	2b01      	cmp	r3, #1
 80031d6:	d046      	beq.n	8003266 <HAL_UART_Receive+0xb2>
 80031d8:	2301      	movs	r3, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031da:	2500      	movs	r5, #0
    __HAL_LOCK(huart);
 80031dc:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80031e0:	2322      	movs	r3, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031e2:	63c5      	str	r5, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80031e4:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
    tickstart = HAL_GetTick();
 80031e8:	f7fd fae4 	bl	80007b4 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031ec:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 80031ee:	4607      	mov	r7, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->RxXferSize = Size;
 80031f4:	f8a4 902c 	strh.w	r9, [r4, #44]	; 0x2c
    huart->RxXferCount = Size;
 80031f8:	f8a4 902e 	strh.w	r9, [r4, #46]	; 0x2e
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031fc:	d103      	bne.n	8003206 <HAL_UART_Receive+0x52>
 80031fe:	6923      	ldr	r3, [r4, #16]
 8003200:	b90b      	cbnz	r3, 8003206 <HAL_UART_Receive+0x52>
 8003202:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 8003204:	461e      	mov	r6, r3
    __HAL_UNLOCK(huart);
 8003206:	2300      	movs	r3, #0
 8003208:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    while (huart->RxXferCount > 0U)
 800320c:	8de0      	ldrh	r0, [r4, #46]	; 0x2e
 800320e:	b280      	uxth	r0, r0
 8003210:	b920      	cbnz	r0, 800321c <HAL_UART_Receive+0x68>
    huart->RxState = HAL_UART_STATE_READY;
 8003212:	2320      	movs	r3, #32
 8003214:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
    return HAL_OK;
 8003218:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800321c:	4643      	mov	r3, r8
 800321e:	463a      	mov	r2, r7
 8003220:	2120      	movs	r1, #32
 8003222:	4620      	mov	r0, r4
 8003224:	f7ff ff16 	bl	8003054 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8003228:	bb00      	cbnz	r0, 800326c <HAL_UART_Receive+0xb8>
 800322a:	6823      	ldr	r3, [r4, #0]
      if (pdata8bits == NULL)
 800322c:	b94e      	cbnz	r6, 8003242 <HAL_UART_Receive+0x8e>
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003234:	f825 3b02 	strh.w	r3, [r5], #2
      huart->RxXferCount--;
 8003238:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 800323a:	3b01      	subs	r3, #1
 800323c:	b29b      	uxth	r3, r3
 800323e:	85e3      	strh	r3, [r4, #46]	; 0x2e
 8003240:	e7e4      	b.n	800320c <HAL_UART_Receive+0x58>
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003242:	68a2      	ldr	r2, [r4, #8]
 8003244:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8003248:	d002      	beq.n	8003250 <HAL_UART_Receive+0x9c>
 800324a:	b92a      	cbnz	r2, 8003258 <HAL_UART_Receive+0xa4>
 800324c:	6922      	ldr	r2, [r4, #16]
 800324e:	b91a      	cbnz	r2, 8003258 <HAL_UART_Receive+0xa4>
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003250:	685b      	ldr	r3, [r3, #4]
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003252:	7033      	strb	r3, [r6, #0]
        pdata8bits++;
 8003254:	3601      	adds	r6, #1
 8003256:	e7ef      	b.n	8003238 <HAL_UART_Receive+0x84>
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800325e:	e7f8      	b.n	8003252 <HAL_UART_Receive+0x9e>
      return  HAL_ERROR;
 8003260:	2001      	movs	r0, #1
 8003262:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return HAL_BUSY;
 8003266:	2002      	movs	r0, #2
 8003268:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        return HAL_TIMEOUT;
 800326c:	2003      	movs	r0, #3
}
 800326e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

08003274 <bind_event_controler>:

void bind_event_controler() {

	static uint8_t is_bind_key_correct = 0;
	uint8_t retries = 100;
	uint8_t sync_frame_tx = SYNC_VALUE;
 8003274:	23cd      	movs	r3, #205	; 0xcd
void bind_event_controler() {
 8003276:	b513      	push	{r0, r1, r4, lr}
	uint8_t sync_frame_tx = SYNC_VALUE;
 8003278:	f88d 3006 	strb.w	r3, [sp, #6]
	uint8_t sync_frame_rx = 0;
 800327c:	2300      	movs	r3, #0

	//Sync frame
	while (sync_frame_rx != SYNC_VALUE)
	{
		HAL_UART_Transmit(&huart3, &sync_frame_tx, 1, 100);
 800327e:	4c12      	ldr	r4, [pc, #72]	; (80032c8 <bind_event_controler+0x54>)
	uint8_t sync_frame_rx = 0;
 8003280:	f88d 3007 	strb.w	r3, [sp, #7]
	while (sync_frame_rx != SYNC_VALUE)
 8003284:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003288:	2bcd      	cmp	r3, #205	; 0xcd
		HAL_UART_Transmit(&huart3, &sync_frame_tx, 1, 100);
 800328a:	f04f 0364 	mov.w	r3, #100	; 0x64
	while (sync_frame_rx != SYNC_VALUE)
 800328e:	d109      	bne.n	80032a4 <bind_event_controler+0x30>
//	//Sending data for binding if recived correct key
//	if (is_bind_key_correct)
//	{
	//1. Sending  tx-pipe adress

	HAL_UART_Transmit(&huart3, tx_pipe_adress.frame, SIZE(tx_pipe_adress.frame), 100);
 8003290:	2208      	movs	r2, #8
 8003292:	490e      	ldr	r1, [pc, #56]	; (80032cc <bind_event_controler+0x58>)
 8003294:	480c      	ldr	r0, [pc, #48]	; (80032c8 <bind_event_controler+0x54>)
 8003296:	f7ff ff33 	bl	8003100 <HAL_UART_Transmit>
	HAL_Delay(1);
 800329a:	2001      	movs	r0, #1
 800329c:	f7fd fa90 	bl	80007c0 <HAL_Delay>

	//3. Sending channel number
	//			HAL_UART_Transmit(&huart2, rx_pipe_adress.frame, SIZE(rx_pipe_adress.frame),100);
	//			HAL_Delay(1);

}
 80032a0:	b002      	add	sp, #8
 80032a2:	bd10      	pop	{r4, pc}
		HAL_UART_Transmit(&huart3, &sync_frame_tx, 1, 100);
 80032a4:	f10d 0106 	add.w	r1, sp, #6
 80032a8:	2201      	movs	r2, #1
 80032aa:	4620      	mov	r0, r4
 80032ac:	f7ff ff28 	bl	8003100 <HAL_UART_Transmit>
		HAL_Delay(50);
 80032b0:	2032      	movs	r0, #50	; 0x32
 80032b2:	f7fd fa85 	bl	80007c0 <HAL_Delay>
		HAL_UART_Receive(&huart3, &sync_frame_rx, 1, 100);
 80032b6:	2364      	movs	r3, #100	; 0x64
 80032b8:	2201      	movs	r2, #1
 80032ba:	f10d 0107 	add.w	r1, sp, #7
 80032be:	4620      	mov	r0, r4
 80032c0:	f7ff ff78 	bl	80031b4 <HAL_UART_Receive>
 80032c4:	e7de      	b.n	8003284 <bind_event_controler+0x10>
 80032c6:	bf00      	nop
 80032c8:	200005fc 	.word	0x200005fc
 80032cc:	20000018 	.word	0x20000018

080032d0 <clear_buttons_event>:

//extern uint8_t buttons_states[NUM_OF_BUTTONS];
const uint16_t long_press_debounce_ms = 200; //ms

void clear_buttons_event(uint8_t button_number) {
	buttons_state[button_number].long_press =0;
 80032d0:	4b04      	ldr	r3, [pc, #16]	; (80032e4 <clear_buttons_event+0x14>)
 80032d2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80032d6:	7843      	ldrb	r3, [r0, #1]
	buttons_state[button_number].medium_press =0;
	buttons_state[button_number].short_press =0;
 80032d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80032dc:	f36f 1345 	bfc	r3, #5, #1
 80032e0:	7043      	strb	r3, [r0, #1]
 80032e2:	4770      	bx	lr
 80032e4:	20000588 	.word	0x20000588

080032e8 <read_buttons_state>:


}

void read_buttons_state() {
 80032e8:	b538      	push	{r3, r4, r5, lr}
	buttons_state[ENCODER].actual_state = !HAL_GPIO_ReadPin(ENC_PB_GPIO_Port,
 80032ea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80032ee:	4811      	ldr	r0, [pc, #68]	; (8003334 <read_buttons_state+0x4c>)
 80032f0:	f7fd ff5a 	bl	80011a8 <HAL_GPIO_ReadPin>
 80032f4:	fab0 f080 	clz	r0, r0
 80032f8:	4c0f      	ldr	r4, [pc, #60]	; (8003338 <read_buttons_state+0x50>)
 80032fa:	0940      	lsrs	r0, r0, #5
 80032fc:	7863      	ldrb	r3, [r4, #1]
			ENC_PB_Pin);
	buttons_state[JOY1].actual_state = !HAL_GPIO_ReadPin(JOY1_PB_GPIO_Port,
 80032fe:	4d0f      	ldr	r5, [pc, #60]	; (800333c <read_buttons_state+0x54>)
	buttons_state[ENCODER].actual_state = !HAL_GPIO_ReadPin(ENC_PB_GPIO_Port,
 8003300:	f360 03c3 	bfi	r3, r0, #3, #1
 8003304:	7063      	strb	r3, [r4, #1]
	buttons_state[JOY1].actual_state = !HAL_GPIO_ReadPin(JOY1_PB_GPIO_Port,
 8003306:	2102      	movs	r1, #2
 8003308:	4628      	mov	r0, r5
 800330a:	f7fd ff4d 	bl	80011a8 <HAL_GPIO_ReadPin>
 800330e:	fab0 f080 	clz	r0, r0
 8003312:	7963      	ldrb	r3, [r4, #5]
 8003314:	0940      	lsrs	r0, r0, #5
 8003316:	f360 03c3 	bfi	r3, r0, #3, #1
 800331a:	7163      	strb	r3, [r4, #5]
			JOY1_PB_Pin);
	buttons_state[JOY2].actual_state = !HAL_GPIO_ReadPin(JOY2_PB_GPIO_Port,
 800331c:	2104      	movs	r1, #4
 800331e:	4628      	mov	r0, r5
 8003320:	f7fd ff42 	bl	80011a8 <HAL_GPIO_ReadPin>
 8003324:	fab0 f080 	clz	r0, r0
 8003328:	7a63      	ldrb	r3, [r4, #9]
 800332a:	0940      	lsrs	r0, r0, #5
 800332c:	f360 03c3 	bfi	r3, r0, #3, #1
 8003330:	7263      	strb	r3, [r4, #9]
 8003332:	bd38      	pop	{r3, r4, r5, pc}
 8003334:	40010800 	.word	0x40010800
 8003338:	20000588 	.word	0x20000588
 800333c:	40010c00 	.word	0x40010c00

08003340 <process_buttons>:
			JOY2_PB_Pin);

}

void process_buttons() {
 8003340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003344:	4f32      	ldr	r7, [pc, #200]	; (8003410 <process_buttons+0xd0>)

	read_buttons_state();
 8003346:	f7ff ffcf 	bl	80032e8 <read_buttons_state>

	for (int i = 0; i < NUM_OF_BUTTONS; i++) {
 800334a:	2400      	movs	r4, #0
 800334c:	463d      	mov	r5, r7

					//LONG PRESS ACTION
					buttons_state[i].long_press_debounce = long_press_debounce_ms;
					buttons_state[i].long_press = 1;

					printf("Long press  %d\r\n", i);
 800334e:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 8003414 <process_buttons+0xd4>
					printf("Medium press %d \r\n", i);
 8003352:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 8003418 <process_buttons+0xd8>
					printf("Short press button %d\r\n", i);
 8003356:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800341c <process_buttons+0xdc>
		if (buttons_state[i].long_press_debounce)
 800335a:	78bb      	ldrb	r3, [r7, #2]
 800335c:	b10b      	cbz	r3, 8003362 <process_buttons+0x22>
			buttons_state[i].long_press_debounce -= 5;
 800335e:	3b05      	subs	r3, #5
 8003360:	70bb      	strb	r3, [r7, #2]
		if (buttons_state[i].last_state) {
 8003362:	00a6      	lsls	r6, r4, #2
 8003364:	19a9      	adds	r1, r5, r6
 8003366:	784b      	ldrb	r3, [r1, #1]
 8003368:	06d8      	lsls	r0, r3, #27
 800336a:	d526      	bpl.n	80033ba <process_buttons+0x7a>
			buttons_state[i].tick_ms += 5;
 800336c:	f835 2024 	ldrh.w	r2, [r5, r4, lsl #2]
 8003370:	1d53      	adds	r3, r2, #5
 8003372:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003376:	f363 020a 	bfi	r2, r3, #0, #11
 800337a:	f825 2024 	strh.w	r2, [r5, r4, lsl #2]
			if (!(buttons_state[i].actual_state)
 800337e:	784a      	ldrb	r2, [r1, #1]
 8003380:	0712      	lsls	r2, r2, #28
 8003382:	d502      	bpl.n	800338a <process_buttons+0x4a>
					|| (buttons_state[i].tick_ms > LONG_PRESS)) {
 8003384:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003388:	d917      	bls.n	80033ba <process_buttons+0x7a>
						&& buttons_state[i].tick_ms < MEDIUM_PRESS
 800338a:	f203 72eb 	addw	r2, r3, #2027	; 0x7eb
				if (buttons_state[i].tick_ms > SHORT_PRESS
 800338e:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8003392:	f5b2 7fef 	cmp.w	r2, #478	; 0x1de
 8003396:	d81e      	bhi.n	80033d6 <process_buttons+0x96>
						&& (!buttons_state[i].long_press_debounce)) {
 8003398:	78ba      	ldrb	r2, [r7, #2]
 800339a:	b9e2      	cbnz	r2, 80033d6 <process_buttons+0x96>
					printf("Short press button %d\r\n", i);
 800339c:	4621      	mov	r1, r4
 800339e:	4650      	mov	r0, sl
					buttons_state[i].short_press = 1;
 80033a0:	19aa      	adds	r2, r5, r6
 80033a2:	7853      	ldrb	r3, [r2, #1]
 80033a4:	f043 0320 	orr.w	r3, r3, #32
 80033a8:	7053      	strb	r3, [r2, #1]
					printf("Long press  %d\r\n", i);
 80033aa:	f002 fae9 	bl	8005980 <iprintf>

				}

				buttons_state[i].tick_ms = 0;
 80033ae:	f835 3024 	ldrh.w	r3, [r5, r4, lsl #2]
 80033b2:	f36f 030a 	bfc	r3, #0, #11
 80033b6:	f825 3024 	strh.w	r3, [r5, r4, lsl #2]
			}
		}
		buttons_state[i].last_state = buttons_state[i].actual_state;
 80033ba:	442e      	add	r6, r5
 80033bc:	7873      	ldrb	r3, [r6, #1]
	for (int i = 0; i < NUM_OF_BUTTONS; i++) {
 80033be:	3401      	adds	r4, #1
		buttons_state[i].last_state = buttons_state[i].actual_state;
 80033c0:	f3c3 02c0 	ubfx	r2, r3, #3, #1
 80033c4:	f362 1304 	bfi	r3, r2, #4, #1
	for (int i = 0; i < NUM_OF_BUTTONS; i++) {
 80033c8:	2c03      	cmp	r4, #3
		buttons_state[i].last_state = buttons_state[i].actual_state;
 80033ca:	7073      	strb	r3, [r6, #1]
 80033cc:	f107 0704 	add.w	r7, r7, #4
	for (int i = 0; i < NUM_OF_BUTTONS; i++) {
 80033d0:	d1c3      	bne.n	800335a <process_buttons+0x1a>
	}
}
 80033d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				} else if (buttons_state[i].tick_ms > MEDIUM_PRESS
 80033d6:	f240 51da 	movw	r1, #1498	; 0x5da
						&& buttons_state[i].tick_ms < LONG_PRESS) {
 80033da:	f203 620b 	addw	r2, r3, #1547	; 0x60b
				} else if (buttons_state[i].tick_ms > MEDIUM_PRESS
 80033de:	f3c2 020a 	ubfx	r2, r2, #0, #11
 80033e2:	428a      	cmp	r2, r1
 80033e4:	d807      	bhi.n	80033f6 <process_buttons+0xb6>
					buttons_state[i].medium_press = 1;
 80033e6:	19aa      	adds	r2, r5, r6
 80033e8:	7853      	ldrb	r3, [r2, #1]
					printf("Medium press %d \r\n", i);
 80033ea:	4621      	mov	r1, r4
					buttons_state[i].medium_press = 1;
 80033ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80033f0:	7053      	strb	r3, [r2, #1]
					printf("Medium press %d \r\n", i);
 80033f2:	4648      	mov	r0, r9
 80033f4:	e7d9      	b.n	80033aa <process_buttons+0x6a>
				else if (buttons_state[i].tick_ms > LONG_PRESS) {
 80033f6:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80033fa:	ddd8      	ble.n	80033ae <process_buttons+0x6e>
					buttons_state[i].long_press_debounce = long_press_debounce_ms;
 80033fc:	23c8      	movs	r3, #200	; 0xc8
					buttons_state[i].long_press = 1;
 80033fe:	19aa      	adds	r2, r5, r6
					buttons_state[i].long_press_debounce = long_press_debounce_ms;
 8003400:	70bb      	strb	r3, [r7, #2]
					buttons_state[i].long_press = 1;
 8003402:	7853      	ldrb	r3, [r2, #1]
					printf("Long press  %d\r\n", i);
 8003404:	4621      	mov	r1, r4
					buttons_state[i].long_press = 1;
 8003406:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800340a:	7053      	strb	r3, [r2, #1]
					printf("Long press  %d\r\n", i);
 800340c:	4640      	mov	r0, r8
 800340e:	e7cc      	b.n	80033aa <process_buttons+0x6a>
 8003410:	20000588 	.word	0x20000588
 8003414:	08006c2f 	.word	0x08006c2f
 8003418:	08006c1c 	.word	0x08006c1c
 800341c:	08006c04 	.word	0x08006c04

08003420 <read_initial_store>:

const uint16_t EEPROM_ADDRESS = 0xA0;

Calib_Data calibration_values;

void read_initial_store() {
 8003420:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	//EEPROM  - TO DO as lib

	//reading   channel calibration calibration values
	HAL_I2C_Mem_Read(&hi2c1, EEPROM_ADDRESS, 0, 0xFF,calibration_values.calib_raw_data, 44, 10);
 8003422:	230a      	movs	r3, #10
 8003424:	9302      	str	r3, [sp, #8]
 8003426:	232c      	movs	r3, #44	; 0x2c
 8003428:	4c09      	ldr	r4, [pc, #36]	; (8003450 <read_initial_store+0x30>)
 800342a:	9301      	str	r3, [sp, #4]
 800342c:	9400      	str	r4, [sp, #0]
 800342e:	23ff      	movs	r3, #255	; 0xff
 8003430:	2200      	movs	r2, #0
 8003432:	21a0      	movs	r1, #160	; 0xa0
 8003434:	4807      	ldr	r0, [pc, #28]	; (8003454 <read_initial_store+0x34>)
 8003436:	f7fe fb7f 	bl	8001b38 <HAL_I2C_Mem_Read>
 800343a:	2300      	movs	r3, #0

	for (int i = 0; i < 11; i++)
	{
		rc_channels.calibration_values[i] = calibration_values.calibration_values_min_max[i];
 800343c:	4806      	ldr	r0, [pc, #24]	; (8003458 <read_initial_store+0x38>)
 800343e:	181a      	adds	r2, r3, r0
 8003440:	58e1      	ldr	r1, [r4, r3]
 8003442:	3304      	adds	r3, #4
	for (int i = 0; i < 11; i++)
 8003444:	2b2c      	cmp	r3, #44	; 0x2c
		rc_channels.calibration_values[i] = calibration_values.calibration_values_min_max[i];
 8003446:	62d1      	str	r1, [r2, #44]	; 0x2c
	for (int i = 0; i < 11; i++)
 8003448:	d1f9      	bne.n	800343e <read_initial_store+0x1e>
	}
}
 800344a:	b004      	add	sp, #16
 800344c:	bd10      	pop	{r4, pc}
 800344e:	bf00      	nop
 8003450:	20000594 	.word	0x20000594
 8003454:	2000063c 	.word	0x2000063c
 8003458:	200008ca 	.word	0x200008ca

0800345c <MPU6050_SetDataRate>:
	/* Return OK */
	return MPU6050_Result_Ok;
}

MPU6050_Result MPU6050_SetDataRate(I2C_HandleTypeDef* I2Cx,MPU6050* DataStruct, uint8_t rate)
{
 800345c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint8_t d[2];
	I2C_HandleTypeDef* Handle = I2Cx;
	uint8_t address = DataStruct->Address;
	/* Format array to send */
	d[0] = MPU6050_SMPLRT_DIV;
 800345e:	2319      	movs	r3, #25
{
 8003460:	4605      	mov	r5, r0
	d[1] = rate;

	/* Set data sample rate */
	while(HAL_I2C_Master_Transmit(Handle,(uint16_t)address,(uint8_t *)d,2,1000)!=HAL_OK);
 8003462:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
	uint8_t address = DataStruct->Address;
 8003466:	780c      	ldrb	r4, [r1, #0]
	d[0] = MPU6050_SMPLRT_DIV;
 8003468:	f88d 300c 	strb.w	r3, [sp, #12]
	d[1] = rate;
 800346c:	f88d 200d 	strb.w	r2, [sp, #13]
	while(HAL_I2C_Master_Transmit(Handle,(uint16_t)address,(uint8_t *)d,2,1000)!=HAL_OK);
 8003470:	b2a4      	uxth	r4, r4
 8003472:	9600      	str	r6, [sp, #0]
 8003474:	2302      	movs	r3, #2
 8003476:	aa03      	add	r2, sp, #12
 8003478:	4621      	mov	r1, r4
 800347a:	4628      	mov	r0, r5
 800347c:	f7fe f8ea 	bl	8001654 <HAL_I2C_Master_Transmit>
 8003480:	2800      	cmp	r0, #0
 8003482:	d1f6      	bne.n	8003472 <MPU6050_SetDataRate+0x16>
				return MPU6050_Result_Error;
	}*/

	/* Return OK */
	return MPU6050_Result_Ok;
}
 8003484:	b004      	add	sp, #16
 8003486:	bd70      	pop	{r4, r5, r6, pc}

08003488 <MPU6050_SetAccelerometer>:
MPU6050_Result MPU6050_SetAccelerometer(I2C_HandleTypeDef* I2Cx,MPU6050* DataStruct, MPU6050_Accelerometer AccelerometerSensitivity)
{
	uint8_t temp;
	I2C_HandleTypeDef* Handle = I2Cx;
	uint8_t address = DataStruct->Address;
	uint8_t regAdd =(uint8_t )MPU6050_ACCEL_CONFIG;
 8003488:	231c      	movs	r3, #28
{
 800348a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800348e:	4607      	mov	r7, r0
 8003490:	460c      	mov	r4, r1
 8003492:	4616      	mov	r6, r2

	/* Config accelerometer */
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address,&regAdd, 1, 1000) != HAL_OK);
 8003494:	f44f 797a 	mov.w	r9, #1000	; 0x3e8
{
 8003498:	b085      	sub	sp, #20
	uint8_t address = DataStruct->Address;
 800349a:	780d      	ldrb	r5, [r1, #0]
	uint8_t regAdd =(uint8_t )MPU6050_ACCEL_CONFIG;
 800349c:	f10d 0810 	add.w	r8, sp, #16
 80034a0:	f808 3d01 	strb.w	r3, [r8, #-1]!
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address,&regAdd, 1, 1000) != HAL_OK);
 80034a4:	b2ad      	uxth	r5, r5
 80034a6:	f8cd 9000 	str.w	r9, [sp]
 80034aa:	2301      	movs	r3, #1
 80034ac:	4642      	mov	r2, r8
 80034ae:	4629      	mov	r1, r5
 80034b0:	4638      	mov	r0, r7
 80034b2:	f7fe f8cf 	bl	8001654 <HAL_I2C_Master_Transmit>
 80034b6:	2800      	cmp	r0, #0
 80034b8:	d1f5      	bne.n	80034a6 <MPU6050_SetAccelerometer+0x1e>
	/*{
				return MPU6050_Result_Error;
	}*/
	while(HAL_I2C_Master_Receive(Handle, (uint16_t)address, &temp, 1, 1000) != HAL_OK);
 80034ba:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
 80034be:	f8cd 8000 	str.w	r8, [sp]
 80034c2:	2301      	movs	r3, #1
 80034c4:	f10d 020e 	add.w	r2, sp, #14
 80034c8:	4629      	mov	r1, r5
 80034ca:	4638      	mov	r0, r7
 80034cc:	f7fe f996 	bl	80017fc <HAL_I2C_Master_Receive>
 80034d0:	2800      	cmp	r0, #0
 80034d2:	d1f4      	bne.n	80034be <MPU6050_SetAccelerometer+0x36>
	/*{
				return MPU6050_Result_Error;
	}*/
	temp = (temp & 0xE7) | (uint8_t)AccelerometerSensitivity << 3;
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address,&temp, 1, 1000) != HAL_OK);
 80034d4:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
	temp = (temp & 0xE7) | (uint8_t)AccelerometerSensitivity << 3;
 80034d8:	f89d 300e 	ldrb.w	r3, [sp, #14]
 80034dc:	f023 0318 	bic.w	r3, r3, #24
 80034e0:	ea43 03c6 	orr.w	r3, r3, r6, lsl #3
 80034e4:	f88d 300e 	strb.w	r3, [sp, #14]
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address,&temp, 1, 1000) != HAL_OK);
 80034e8:	f8cd 8000 	str.w	r8, [sp]
 80034ec:	2301      	movs	r3, #1
 80034ee:	f10d 020e 	add.w	r2, sp, #14
 80034f2:	4629      	mov	r1, r5
 80034f4:	4638      	mov	r0, r7
 80034f6:	f7fe f8ad 	bl	8001654 <HAL_I2C_Master_Transmit>
 80034fa:	2800      	cmp	r0, #0
 80034fc:	d1f4      	bne.n	80034e8 <MPU6050_SetAccelerometer+0x60>
	/*{
				return MPU6050_Result_Error;
	}*/

	/* Set sensitivities for multiplying gyro and accelerometer data */
	switch (AccelerometerSensitivity) {
 80034fe:	2e03      	cmp	r6, #3
 8003500:	d806      	bhi.n	8003510 <MPU6050_SetAccelerometer+0x88>
 8003502:	e8df f006 	tbb	[pc, r6]
 8003506:	0902      	.short	0x0902
 8003508:	0f0c      	.short	0x0f0c
		case MPU6050_Accelerometer_2G:
			DataStruct->Acce_Mult = (float)1 / MPU6050_ACCE_SENS_2;
 800350a:	f04f 5362 	mov.w	r3, #947912704	; 0x38800000
			break;
		case MPU6050_Accelerometer_8G:
			DataStruct->Acce_Mult = (float)1 / MPU6050_ACCE_SENS_8;
			break;
		case MPU6050_Accelerometer_16G:
			DataStruct->Acce_Mult = (float)1 / MPU6050_ACCE_SENS_16;
 800350e:	60a3      	str	r3, [r4, #8]
			break;
		}

	/* Return OK */
	return MPU6050_Result_Ok;
}
 8003510:	2000      	movs	r0, #0
 8003512:	b005      	add	sp, #20
 8003514:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			DataStruct->Acce_Mult = (float)1 / MPU6050_ACCE_SENS_4;
 8003518:	f04f 5364 	mov.w	r3, #956301312	; 0x39000000
 800351c:	e7f7      	b.n	800350e <MPU6050_SetAccelerometer+0x86>
			DataStruct->Acce_Mult = (float)1 / MPU6050_ACCE_SENS_8;
 800351e:	f04f 5366 	mov.w	r3, #964689920	; 0x39800000
 8003522:	e7f4      	b.n	800350e <MPU6050_SetAccelerometer+0x86>
			DataStruct->Acce_Mult = (float)1 / MPU6050_ACCE_SENS_16;
 8003524:	f04f 5368 	mov.w	r3, #973078528	; 0x3a000000
 8003528:	e7f1      	b.n	800350e <MPU6050_SetAccelerometer+0x86>
	...

0800352c <MPU6050_SetGyroscope>:
MPU6050_Result MPU6050_SetGyroscope(I2C_HandleTypeDef* I2Cx,MPU6050* DataStruct, MPU6050_Gyroscope GyroscopeSensitivity)
{
	uint8_t temp;
	I2C_HandleTypeDef* Handle = I2Cx;
	uint8_t address = DataStruct->Address;
	uint8_t regAdd =(uint8_t )MPU6050_GYRO_CONFIG;
 800352c:	231b      	movs	r3, #27
{
 800352e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003532:	4607      	mov	r7, r0
 8003534:	460c      	mov	r4, r1
 8003536:	4616      	mov	r6, r2

	/* Config gyroscope */
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address,&regAdd, 1, 1000) != HAL_OK);
 8003538:	f44f 797a 	mov.w	r9, #1000	; 0x3e8
{
 800353c:	b085      	sub	sp, #20
	uint8_t address = DataStruct->Address;
 800353e:	780d      	ldrb	r5, [r1, #0]
	uint8_t regAdd =(uint8_t )MPU6050_GYRO_CONFIG;
 8003540:	f10d 0810 	add.w	r8, sp, #16
 8003544:	f808 3d01 	strb.w	r3, [r8, #-1]!
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address,&regAdd, 1, 1000) != HAL_OK);
 8003548:	b2ad      	uxth	r5, r5
 800354a:	f8cd 9000 	str.w	r9, [sp]
 800354e:	2301      	movs	r3, #1
 8003550:	4642      	mov	r2, r8
 8003552:	4629      	mov	r1, r5
 8003554:	4638      	mov	r0, r7
 8003556:	f7fe f87d 	bl	8001654 <HAL_I2C_Master_Transmit>
 800355a:	2800      	cmp	r0, #0
 800355c:	d1f5      	bne.n	800354a <MPU6050_SetGyroscope+0x1e>
	/*{
				return MPU6050_Result_Error;
	}*/
	while(HAL_I2C_Master_Receive(Handle, (uint16_t)address, &temp, 1, 1000) != HAL_OK);
 800355e:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
 8003562:	f8cd 8000 	str.w	r8, [sp]
 8003566:	2301      	movs	r3, #1
 8003568:	f10d 020e 	add.w	r2, sp, #14
 800356c:	4629      	mov	r1, r5
 800356e:	4638      	mov	r0, r7
 8003570:	f7fe f944 	bl	80017fc <HAL_I2C_Master_Receive>
 8003574:	2800      	cmp	r0, #0
 8003576:	d1f4      	bne.n	8003562 <MPU6050_SetGyroscope+0x36>
	/*{
				return MPU6050_Result_Error;
	}*/
	temp = (temp & 0xE7) | (uint8_t)GyroscopeSensitivity << 3;
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address,&temp, 1, 1000) != HAL_OK);
 8003578:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
	temp = (temp & 0xE7) | (uint8_t)GyroscopeSensitivity << 3;
 800357c:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8003580:	f023 0318 	bic.w	r3, r3, #24
 8003584:	ea43 03c6 	orr.w	r3, r3, r6, lsl #3
 8003588:	f88d 300e 	strb.w	r3, [sp, #14]
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address,&temp, 1, 1000) != HAL_OK);
 800358c:	f8cd 8000 	str.w	r8, [sp]
 8003590:	2301      	movs	r3, #1
 8003592:	f10d 020e 	add.w	r2, sp, #14
 8003596:	4629      	mov	r1, r5
 8003598:	4638      	mov	r0, r7
 800359a:	f7fe f85b 	bl	8001654 <HAL_I2C_Master_Transmit>
 800359e:	2800      	cmp	r0, #0
 80035a0:	d1f4      	bne.n	800358c <MPU6050_SetGyroscope+0x60>
	/*{
				return MPU6050_Result_Error;
	}*/

	switch (GyroscopeSensitivity) {
 80035a2:	2e03      	cmp	r6, #3
 80035a4:	d805      	bhi.n	80035b2 <MPU6050_SetGyroscope+0x86>
 80035a6:	e8df f006 	tbb	[pc, r6]
 80035aa:	0802      	.short	0x0802
 80035ac:	0c0a      	.short	0x0c0a
			case MPU6050_Gyroscope_250s:
				DataStruct->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_250;
 80035ae:	4b06      	ldr	r3, [pc, #24]	; (80035c8 <MPU6050_SetGyroscope+0x9c>)
				break;
			case MPU6050_Gyroscope_1000s:
				DataStruct->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_1000;
				break;
			case MPU6050_Gyroscope_2000s:
				DataStruct->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_2000;
 80035b0:	6063      	str	r3, [r4, #4]
			default:
				break;
		}
	/* Return OK */
	return MPU6050_Result_Ok;
}
 80035b2:	2000      	movs	r0, #0
 80035b4:	b005      	add	sp, #20
 80035b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				DataStruct->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_500;
 80035ba:	4b04      	ldr	r3, [pc, #16]	; (80035cc <MPU6050_SetGyroscope+0xa0>)
 80035bc:	e7f8      	b.n	80035b0 <MPU6050_SetGyroscope+0x84>
				DataStruct->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_1000;
 80035be:	4b04      	ldr	r3, [pc, #16]	; (80035d0 <MPU6050_SetGyroscope+0xa4>)
 80035c0:	e7f6      	b.n	80035b0 <MPU6050_SetGyroscope+0x84>
				DataStruct->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_2000;
 80035c2:	4b04      	ldr	r3, [pc, #16]	; (80035d4 <MPU6050_SetGyroscope+0xa8>)
 80035c4:	e7f4      	b.n	80035b0 <MPU6050_SetGyroscope+0x84>
 80035c6:	bf00      	nop
 80035c8:	3bfa232d 	.word	0x3bfa232d
 80035cc:	3c7a232d 	.word	0x3c7a232d
 80035d0:	3cf9c190 	.word	0x3cf9c190
 80035d4:	3d79c190 	.word	0x3d79c190

080035d8 <MPU6050_Init>:
{
 80035d8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80035dc:	4698      	mov	r8, r3
	uint8_t WHO_AM_I = (uint8_t)MPU6050_WHO_AM_I;
 80035de:	2375      	movs	r3, #117	; 0x75
	DataStruct->Address = MPU6050_I2C_ADDR | (uint8_t)DeviceNumber;
 80035e0:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
	if(HAL_I2C_IsDeviceReady(Handle,address,2,5)!=HAL_OK)
 80035e4:	b294      	uxth	r4, r2
	DataStruct->Address = MPU6050_I2C_ADDR | (uint8_t)DeviceNumber;
 80035e6:	700a      	strb	r2, [r1, #0]
{
 80035e8:	460e      	mov	r6, r1
	uint8_t WHO_AM_I = (uint8_t)MPU6050_WHO_AM_I;
 80035ea:	f88d 300a 	strb.w	r3, [sp, #10]
	if(HAL_I2C_IsDeviceReady(Handle,address,2,5)!=HAL_OK)
 80035ee:	2202      	movs	r2, #2
 80035f0:	2305      	movs	r3, #5
 80035f2:	4621      	mov	r1, r4
{
 80035f4:	4605      	mov	r5, r0
	if(HAL_I2C_IsDeviceReady(Handle,address,2,5)!=HAL_OK)
 80035f6:	f7fe fbdd 	bl	8001db4 <HAL_I2C_IsDeviceReady>
 80035fa:	b118      	cbz	r0, 8003604 <MPU6050_Init+0x2c>
				return MPU6050_Result_Error;
 80035fc:	2001      	movs	r0, #1
}
 80035fe:	b004      	add	sp, #16
 8003600:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if(HAL_I2C_Master_Transmit(Handle, address, &WHO_AM_I, 1, 1000) != HAL_OK)
 8003604:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
 8003608:	2301      	movs	r3, #1
 800360a:	9700      	str	r7, [sp, #0]
 800360c:	f10d 020a 	add.w	r2, sp, #10
 8003610:	4621      	mov	r1, r4
 8003612:	4628      	mov	r0, r5
 8003614:	f7fe f81e 	bl	8001654 <HAL_I2C_Master_Transmit>
 8003618:	2800      	cmp	r0, #0
 800361a:	d1ef      	bne.n	80035fc <MPU6050_Init+0x24>
		if(HAL_I2C_Master_Receive(Handle, address, &temp, 1, 1000) != HAL_OK)
 800361c:	9700      	str	r7, [sp, #0]
 800361e:	2301      	movs	r3, #1
 8003620:	f10d 020b 	add.w	r2, sp, #11
 8003624:	4621      	mov	r1, r4
 8003626:	4628      	mov	r0, r5
 8003628:	f7fe f8e8 	bl	80017fc <HAL_I2C_Master_Receive>
 800362c:	2800      	cmp	r0, #0
 800362e:	d1e5      	bne.n	80035fc <MPU6050_Init+0x24>
		while(temp != MPU6050_I_AM)
 8003630:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8003634:	2b68      	cmp	r3, #104	; 0x68
 8003636:	d120      	bne.n	800367a <MPU6050_Init+0xa2>
		d[0] = MPU6050_PWR_MGMT_1;
 8003638:	236b      	movs	r3, #107	; 0x6b
		d[1] = 0x00;
 800363a:	f88d 000d 	strb.w	r0, [sp, #13]
		d[0] = MPU6050_PWR_MGMT_1;
 800363e:	f88d 300c 	strb.w	r3, [sp, #12]
		if(HAL_I2C_Master_Transmit(Handle,(uint16_t)address , (uint8_t *)d, 2, 1000) != HAL_OK)
 8003642:	4621      	mov	r1, r4
 8003644:	9700      	str	r7, [sp, #0]
 8003646:	2302      	movs	r3, #2
 8003648:	aa03      	add	r2, sp, #12
 800364a:	4628      	mov	r0, r5
 800364c:	f7fe f802 	bl	8001654 <HAL_I2C_Master_Transmit>
 8003650:	4604      	mov	r4, r0
 8003652:	2800      	cmp	r0, #0
 8003654:	d1d2      	bne.n	80035fc <MPU6050_Init+0x24>
	MPU6050_SetDataRate(I2Cx,DataStruct, MPU6050_DataRate_1KHz);
 8003656:	2207      	movs	r2, #7
 8003658:	4631      	mov	r1, r6
 800365a:	4628      	mov	r0, r5
 800365c:	f7ff fefe 	bl	800345c <MPU6050_SetDataRate>
	MPU6050_SetAccelerometer(I2Cx,DataStruct, AccelerometerSensitivity);
 8003660:	4642      	mov	r2, r8
 8003662:	4631      	mov	r1, r6
 8003664:	4628      	mov	r0, r5
 8003666:	f7ff ff0f 	bl	8003488 <MPU6050_SetAccelerometer>
	MPU6050_SetGyroscope(I2Cx,DataStruct, GyroscopeSensitivity);
 800366a:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
 800366e:	4631      	mov	r1, r6
 8003670:	4628      	mov	r0, r5
 8003672:	f7ff ff5b 	bl	800352c <MPU6050_SetGyroscope>
	return MPU6050_Result_Ok;
 8003676:	4620      	mov	r0, r4
 8003678:	e7c1      	b.n	80035fe <MPU6050_Init+0x26>
				return MPU6050_Result_DeviceInvalid;
 800367a:	2003      	movs	r0, #3
 800367c:	e7bf      	b.n	80035fe <MPU6050_Init+0x26>
	...

08003680 <updateRcChannels>:

}

void updateRcChannels() {

	update_rc_channels(adc_values);
 8003680:	4801      	ldr	r0, [pc, #4]	; (8003688 <updateRcChannels+0x8>)
 8003682:	f001 bb4f 	b.w	8004d24 <update_rc_channels>
 8003686:	bf00      	nop
 8003688:	200008b4 	.word	0x200008b4

0800368c <process_events>:
void process_events() {
 800368c:	b508      	push	{r3, lr}
	if (buttons_state[ENCODER].long_press)
 800368e:	4b07      	ldr	r3, [pc, #28]	; (80036ac <process_events+0x20>)
 8003690:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8003694:	2b00      	cmp	r3, #0
 8003696:	da08      	bge.n	80036aa <process_events+0x1e>
		printf("Entering binding mode \r\n");
 8003698:	4805      	ldr	r0, [pc, #20]	; (80036b0 <process_events+0x24>)
 800369a:	f002 f9e5 	bl	8005a68 <puts>
		clear_buttons_event(ENCODER);
 800369e:	2000      	movs	r0, #0
 80036a0:	f7ff fe16 	bl	80032d0 <clear_buttons_event>
		rc_status.mode = BIND_MODE;
 80036a4:	2201      	movs	r2, #1
 80036a6:	4b03      	ldr	r3, [pc, #12]	; (80036b4 <process_events+0x28>)
 80036a8:	779a      	strb	r2, [r3, #30]
 80036aa:	bd08      	pop	{r3, pc}
 80036ac:	20000588 	.word	0x20000588
 80036b0:	080073ea 	.word	0x080073ea
 80036b4:	20000150 	.word	0x20000150

080036b8 <radioTransmit>:
void radioTransmit() {
 80036b8:	b508      	push	{r3, lr}
	if (NRF24_write(txValues, 32))
 80036ba:	2120      	movs	r1, #32
 80036bc:	480e      	ldr	r0, [pc, #56]	; (80036f8 <radioTransmit+0x40>)
 80036be:	f000 fcfd 	bl	80040bc <NRF24_write>
 80036c2:	b1a0      	cbz	r0, 80036ee <radioTransmit+0x36>
		memcpy(txValues, rc_channels.scaled_values, 22);
 80036c4:	4b0d      	ldr	r3, [pc, #52]	; (80036fc <radioTransmit+0x44>)
 80036c6:	4a0c      	ldr	r2, [pc, #48]	; (80036f8 <radioTransmit+0x40>)
 80036c8:	f103 0114 	add.w	r1, r3, #20
 80036cc:	f853 0b04 	ldr.w	r0, [r3], #4
 80036d0:	428b      	cmp	r3, r1
 80036d2:	f842 0b04 	str.w	r0, [r2], #4
 80036d6:	d1f9      	bne.n	80036cc <radioTransmit+0x14>
 80036d8:	881b      	ldrh	r3, [r3, #0]
		HAL_GPIO_TogglePin(LED_BAT_GPIO_Port, LED_BAT_Pin);
 80036da:	2180      	movs	r1, #128	; 0x80
		memcpy(txValues, rc_channels.scaled_values, 22);
 80036dc:	8013      	strh	r3, [r2, #0]
		HAL_GPIO_TogglePin(LED_BAT_GPIO_Port, LED_BAT_Pin);
 80036de:	4808      	ldr	r0, [pc, #32]	; (8003700 <radioTransmit+0x48>)
 80036e0:	f7fd fd6d 	bl	80011be <HAL_GPIO_TogglePin>
		rc_status.frames_sent++;
 80036e4:	4a07      	ldr	r2, [pc, #28]	; (8003704 <radioTransmit+0x4c>)
 80036e6:	6813      	ldr	r3, [r2, #0]
 80036e8:	3301      	adds	r3, #1
 80036ea:	6013      	str	r3, [r2, #0]
 80036ec:	bd08      	pop	{r3, pc}
		printf("FAILED! \n");
 80036ee:	4806      	ldr	r0, [pc, #24]	; (8003708 <radioTransmit+0x50>)
}
 80036f0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		printf("FAILED! \n");
 80036f4:	f002 b9b8 	b.w	8005a68 <puts>
 80036f8:	20000724 	.word	0x20000724
 80036fc:	200008ca 	.word	0x200008ca
 8003700:	40011000 	.word	0x40011000
 8003704:	20000150 	.word	0x20000150
 8003708:	08007402 	.word	0x08007402

0800370c <updateScreen>:

}
void updateScreen() {
 800370c:	b513      	push	{r0, r1, r4, lr}

	switch (enc_rotation) {
 800370e:	4b19      	ldr	r3, [pc, #100]	; (8003774 <updateScreen+0x68>)
 8003710:	7818      	ldrb	r0, [r3, #0]
 8003712:	2804      	cmp	r0, #4
 8003714:	d82b      	bhi.n	800376e <updateScreen+0x62>
 8003716:	e8df f000 	tbb	[pc, r0]
 800371a:	0903      	.short	0x0903
 800371c:	1b14      	.short	0x1b14
 800371e:	22          	.byte	0x22
 800371f:	00          	.byte	0x00
	case 0:
		oledPrintMainScreen(&rc_status);
 8003720:	4815      	ldr	r0, [pc, #84]	; (8003778 <updateScreen+0x6c>)
		oledPrintEncValues(enc_rotation, enc_clicks);
		break;
		// default statements
	}

}
 8003722:	b002      	add	sp, #8
 8003724:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		oledPrintMainScreen(&rc_status);
 8003728:	f001 b9e4 	b.w	8004af4 <oledPrintMainScreen>
		oledDrawValueBars(rc_channels.low_pass_values[0], rc_channels.low_pass_values[1],
 800372c:	2401      	movs	r4, #1
 800372e:	4813      	ldr	r0, [pc, #76]	; (800377c <updateScreen+0x70>)
 8003730:	8b83      	ldrh	r3, [r0, #28]
 8003732:	8b42      	ldrh	r2, [r0, #26]
 8003734:	8b01      	ldrh	r1, [r0, #24]
 8003736:	8ac0      	ldrh	r0, [r0, #22]
		oledDrawValueBars(rc_channels.scaled_values[4], rc_channels.scaled_values[5],
 8003738:	9400      	str	r4, [sp, #0]
 800373a:	f001 f91b 	bl	8004974 <oledDrawValueBars>
}
 800373e:	b002      	add	sp, #8
 8003740:	bd10      	pop	{r4, pc}
		oledDrawValueBars(rc_channels.scaled_values[4], rc_channels.scaled_values[5],
 8003742:	480e      	ldr	r0, [pc, #56]	; (800377c <updateScreen+0x70>)
 8003744:	2405      	movs	r4, #5
 8003746:	89c3      	ldrh	r3, [r0, #14]
 8003748:	8982      	ldrh	r2, [r0, #12]
 800374a:	8941      	ldrh	r1, [r0, #10]
 800374c:	8900      	ldrh	r0, [r0, #8]
 800374e:	e7f3      	b.n	8003738 <updateScreen+0x2c>
		oledPrintCalibMenu(2, 2);
 8003750:	2102      	movs	r1, #2
 8003752:	4608      	mov	r0, r1
}
 8003754:	b002      	add	sp, #8
 8003756:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		oledPrintCalibMenu(2, 2);
 800375a:	f001 ba21 	b.w	8004ba0 <oledPrintCalibMenu>
		oledPrintEncValues(enc_rotation, enc_clicks);
 800375e:	2004      	movs	r0, #4
 8003760:	4b07      	ldr	r3, [pc, #28]	; (8003780 <updateScreen+0x74>)
 8003762:	7819      	ldrb	r1, [r3, #0]
}
 8003764:	b002      	add	sp, #8
 8003766:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		oledPrintEncValues(enc_rotation, enc_clicks);
 800376a:	f001 b98d 	b.w	8004a88 <oledPrintEncValues>
 800376e:	4b04      	ldr	r3, [pc, #16]	; (8003780 <updateScreen+0x74>)
 8003770:	7819      	ldrb	r1, [r3, #0]
 8003772:	e7f7      	b.n	8003764 <updateScreen+0x58>
 8003774:	200000a5 	.word	0x200000a5
 8003778:	20000150 	.word	0x20000150
 800377c:	200008ca 	.word	0x200008ca
 8003780:	200000a4 	.word	0x200000a4

08003784 <SystemClock_Config>:
{
 8003784:	b510      	push	{r4, lr}
 8003786:	b096      	sub	sp, #88	; 0x58
	RCC_OscInitTypeDef RCC_OscInitStruct =
 8003788:	2228      	movs	r2, #40	; 0x28
 800378a:	2100      	movs	r1, #0
 800378c:	a80c      	add	r0, sp, #48	; 0x30
 800378e:	f002 f8ee 	bl	800596e <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct =
 8003792:	2214      	movs	r2, #20
 8003794:	2100      	movs	r1, #0
 8003796:	a801      	add	r0, sp, #4
 8003798:	f002 f8e9 	bl	800596e <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit =
 800379c:	2218      	movs	r2, #24
 800379e:	2100      	movs	r1, #0
 80037a0:	eb0d 0002 	add.w	r0, sp, r2
 80037a4:	f002 f8e3 	bl	800596e <memset>
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80037a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80037ac:	2201      	movs	r2, #1
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80037ae:	2402      	movs	r4, #2
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80037b0:	930d      	str	r3, [sp, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80037b2:	9314      	str	r3, [sp, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80037b4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80037b8:	a80c      	add	r0, sp, #48	; 0x30
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80037ba:	920c      	str	r2, [sp, #48]	; 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80037bc:	9210      	str	r2, [sp, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80037be:	9315      	str	r3, [sp, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80037c0:	9413      	str	r4, [sp, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80037c2:	f7fe fba7 	bl	8001f14 <HAL_RCC_OscConfig>
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80037c6:	230f      	movs	r3, #15
 80037c8:	9301      	str	r3, [sp, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80037ca:	2300      	movs	r3, #0
 80037cc:	9303      	str	r3, [sp, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80037ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80037d2:	4621      	mov	r1, r4
 80037d4:	a801      	add	r0, sp, #4
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80037d6:	9304      	str	r3, [sp, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80037d8:	9305      	str	r3, [sp, #20]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80037da:	9402      	str	r4, [sp, #8]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80037dc:	f7fe fd74 	bl	80022c8 <HAL_RCC_ClockConfig>
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80037e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80037e4:	a806      	add	r0, sp, #24
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80037e6:	9406      	str	r4, [sp, #24]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80037e8:	9308      	str	r3, [sp, #32]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80037ea:	f7fe fe2b 	bl	8002444 <HAL_RCCEx_PeriphCLKConfig>
}
 80037ee:	b016      	add	sp, #88	; 0x58
 80037f0:	bd10      	pop	{r4, pc}
	...

080037f4 <main>:
{
 80037f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	__HAL_RCC_GPIOD_CLK_ENABLE()
 80037f8:	4db0      	ldr	r5, [pc, #704]	; (8003abc <main+0x2c8>)
{
 80037fa:	b097      	sub	sp, #92	; 0x5c
	HAL_Init();
 80037fc:	f7fc ffbc 	bl	8000778 <HAL_Init>
	SystemClock_Config();
 8003800:	f7ff ffc0 	bl	8003784 <SystemClock_Config>
	GPIO_InitTypeDef GPIO_InitStruct =
 8003804:	2210      	movs	r2, #16
 8003806:	2100      	movs	r1, #0
 8003808:	a80d      	add	r0, sp, #52	; 0x34
 800380a:	f002 f8b0 	bl	800596e <memset>
	__HAL_RCC_GPIOD_CLK_ENABLE()
 800380e:	69ab      	ldr	r3, [r5, #24]
	HAL_GPIO_WritePin(GPIOA, CSN_Pin | CE_Pin, GPIO_PIN_RESET);
 8003810:	2200      	movs	r2, #0
	__HAL_RCC_GPIOD_CLK_ENABLE()
 8003812:	f043 0320 	orr.w	r3, r3, #32
 8003816:	61ab      	str	r3, [r5, #24]
 8003818:	69ab      	ldr	r3, [r5, #24]
	HAL_GPIO_WritePin(GPIOA, CSN_Pin | CE_Pin, GPIO_PIN_RESET);
 800381a:	2112      	movs	r1, #18
	__HAL_RCC_GPIOD_CLK_ENABLE()
 800381c:	f003 0320 	and.w	r3, r3, #32
 8003820:	9307      	str	r3, [sp, #28]
 8003822:	9b07      	ldr	r3, [sp, #28]
	__HAL_RCC_GPIOC_CLK_ENABLE()
 8003824:	69ab      	ldr	r3, [r5, #24]
	HAL_GPIO_WritePin(GPIOA, CSN_Pin | CE_Pin, GPIO_PIN_RESET);
 8003826:	48a6      	ldr	r0, [pc, #664]	; (8003ac0 <main+0x2cc>)
	__HAL_RCC_GPIOC_CLK_ENABLE()
 8003828:	f043 0310 	orr.w	r3, r3, #16
 800382c:	61ab      	str	r3, [r5, #24]
 800382e:	69ab      	ldr	r3, [r5, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003830:	2400      	movs	r4, #0
	__HAL_RCC_GPIOC_CLK_ENABLE()
 8003832:	f003 0310 	and.w	r3, r3, #16
 8003836:	9308      	str	r3, [sp, #32]
 8003838:	9b08      	ldr	r3, [sp, #32]
	__HAL_RCC_GPIOA_CLK_ENABLE()
 800383a:	69ab      	ldr	r3, [r5, #24]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800383c:	2601      	movs	r6, #1
	__HAL_RCC_GPIOA_CLK_ENABLE()
 800383e:	f043 0304 	orr.w	r3, r3, #4
 8003842:	61ab      	str	r3, [r5, #24]
 8003844:	69ab      	ldr	r3, [r5, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003846:	2702      	movs	r7, #2
	__HAL_RCC_GPIOA_CLK_ENABLE()
 8003848:	f003 0304 	and.w	r3, r3, #4
 800384c:	9309      	str	r3, [sp, #36]	; 0x24
 800384e:	9b09      	ldr	r3, [sp, #36]	; 0x24
	__HAL_RCC_GPIOB_CLK_ENABLE()
 8003850:	69ab      	ldr	r3, [r5, #24]
	GPIO_InitStruct.Pin = JOY1_PB_Pin | JOY2_PB_Pin;
 8003852:	f04f 0b06 	mov.w	fp, #6
	__HAL_RCC_GPIOB_CLK_ENABLE()
 8003856:	f043 0308 	orr.w	r3, r3, #8
 800385a:	61ab      	str	r3, [r5, #24]
 800385c:	69ab      	ldr	r3, [r5, #24]
	GPIO_InitStruct.Pin = ENC_PB_Pin;
 800385e:	f44f 6a80 	mov.w	sl, #1024	; 0x400
	__HAL_RCC_GPIOB_CLK_ENABLE()
 8003862:	f003 0308 	and.w	r3, r3, #8
 8003866:	930a      	str	r3, [sp, #40]	; 0x28
 8003868:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	HAL_GPIO_WritePin(GPIOA, CSN_Pin | CE_Pin, GPIO_PIN_RESET);
 800386a:	f7fd fca3 	bl	80011b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, MPU_PWR_Pin | RC_PWR_Pin | OLED_PWR_Pin | BUZZ_Pin, GPIO_PIN_RESET);
 800386e:	2200      	movs	r2, #0
 8003870:	f44f 4143 	mov.w	r1, #49920	; 0xc300
 8003874:	4893      	ldr	r0, [pc, #588]	; (8003ac4 <main+0x2d0>)
 8003876:	f7fd fc9d 	bl	80011b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, LED_BAT_Pin | LED_EXT_Pin | LED_MODE_Pin, GPIO_PIN_RESET);
 800387a:	2200      	movs	r2, #0
 800387c:	f44f 7160 	mov.w	r1, #896	; 0x380
 8003880:	4891      	ldr	r0, [pc, #580]	; (8003ac8 <main+0x2d4>)
 8003882:	f7fd fc97 	bl	80011b4 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = CSN_Pin | CE_Pin;
 8003886:	2312      	movs	r3, #18
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003888:	a90d      	add	r1, sp, #52	; 0x34
 800388a:	488d      	ldr	r0, [pc, #564]	; (8003ac0 <main+0x2cc>)
	GPIO_InitStruct.Pin = CSN_Pin | CE_Pin;
 800388c:	930d      	str	r3, [sp, #52]	; 0x34
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800388e:	940f      	str	r4, [sp, #60]	; 0x3c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003890:	9710      	str	r7, [sp, #64]	; 0x40
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003892:	960e      	str	r6, [sp, #56]	; 0x38
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003894:	f7fd fb9c 	bl	8000fd0 <HAL_GPIO_Init>
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003898:	a90d      	add	r1, sp, #52	; 0x34
 800389a:	488a      	ldr	r0, [pc, #552]	; (8003ac4 <main+0x2d0>)
	GPIO_InitStruct.Pin = JOY1_PB_Pin | JOY2_PB_Pin;
 800389c:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80038a0:	940e      	str	r4, [sp, #56]	; 0x38
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038a2:	940f      	str	r4, [sp, #60]	; 0x3c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038a4:	f7fd fb94 	bl	8000fd0 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = MPU_PWR_Pin | RC_PWR_Pin | OLED_PWR_Pin | BUZZ_Pin;
 80038a8:	f44f 4343 	mov.w	r3, #49920	; 0xc300
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038ac:	a90d      	add	r1, sp, #52	; 0x34
 80038ae:	4885      	ldr	r0, [pc, #532]	; (8003ac4 <main+0x2d0>)
	GPIO_InitStruct.Pin = MPU_PWR_Pin | RC_PWR_Pin | OLED_PWR_Pin | BUZZ_Pin;
 80038b0:	930d      	str	r3, [sp, #52]	; 0x34
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038b2:	940f      	str	r4, [sp, #60]	; 0x3c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038b4:	9710      	str	r7, [sp, #64]	; 0x40
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80038b6:	960e      	str	r6, [sp, #56]	; 0x38
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038b8:	f7fd fb8a 	bl	8000fd0 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = MPU_INT_Pin;
 80038bc:	2340      	movs	r3, #64	; 0x40
	HAL_GPIO_Init(MPU_INT_GPIO_Port, &GPIO_InitStruct);
 80038be:	a90d      	add	r1, sp, #52	; 0x34
 80038c0:	4881      	ldr	r0, [pc, #516]	; (8003ac8 <main+0x2d4>)
	GPIO_InitStruct.Pin = MPU_INT_Pin;
 80038c2:	930d      	str	r3, [sp, #52]	; 0x34
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80038c4:	940e      	str	r4, [sp, #56]	; 0x38
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038c6:	940f      	str	r4, [sp, #60]	; 0x3c
	HAL_GPIO_Init(MPU_INT_GPIO_Port, &GPIO_InitStruct);
 80038c8:	f7fd fb82 	bl	8000fd0 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = LED_BAT_Pin | LED_EXT_Pin | LED_MODE_Pin;
 80038cc:	f44f 7360 	mov.w	r3, #896	; 0x380
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80038d0:	a90d      	add	r1, sp, #52	; 0x34
 80038d2:	487d      	ldr	r0, [pc, #500]	; (8003ac8 <main+0x2d4>)
	GPIO_InitStruct.Pin = LED_BAT_Pin | LED_EXT_Pin | LED_MODE_Pin;
 80038d4:	930d      	str	r3, [sp, #52]	; 0x34
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038d6:	940f      	str	r4, [sp, #60]	; 0x3c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038d8:	9710      	str	r7, [sp, #64]	; 0x40
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80038da:	960e      	str	r6, [sp, #56]	; 0x38
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80038dc:	f7fd fb78 	bl	8000fd0 <HAL_GPIO_Init>
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80038e0:	4b7a      	ldr	r3, [pc, #488]	; (8003acc <main+0x2d8>)
	HAL_GPIO_Init(ENC_PB_GPIO_Port, &GPIO_InitStruct);
 80038e2:	a90d      	add	r1, sp, #52	; 0x34
 80038e4:	4876      	ldr	r0, [pc, #472]	; (8003ac0 <main+0x2cc>)
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80038e6:	930e      	str	r3, [sp, #56]	; 0x38
	GPIO_InitStruct.Pin = ENC_PB_Pin;
 80038e8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038ec:	940f      	str	r4, [sp, #60]	; 0x3c
	HAL_GPIO_Init(ENC_PB_GPIO_Port, &GPIO_InitStruct);
 80038ee:	f7fd fb6f 	bl	8000fd0 <HAL_GPIO_Init>
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80038f2:	4622      	mov	r2, r4
 80038f4:	4621      	mov	r1, r4
 80038f6:	2028      	movs	r0, #40	; 0x28
 80038f8:	f7fd f9b8 	bl	8000c6c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80038fc:	2028      	movs	r0, #40	; 0x28
 80038fe:	f7fd f9e9 	bl	8000cd4 <HAL_NVIC_EnableIRQ>
	__HAL_RCC_DMA1_CLK_ENABLE()
 8003902:	696b      	ldr	r3, [r5, #20]
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8003904:	4622      	mov	r2, r4
	__HAL_RCC_DMA1_CLK_ENABLE()
 8003906:	4333      	orrs	r3, r6
 8003908:	616b      	str	r3, [r5, #20]
 800390a:	696b      	ldr	r3, [r5, #20]
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800390c:	4621      	mov	r1, r4
	__HAL_RCC_DMA1_CLK_ENABLE()
 800390e:	4033      	ands	r3, r6
 8003910:	9306      	str	r3, [sp, #24]
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8003912:	200b      	movs	r0, #11
	__HAL_RCC_DMA1_CLK_ENABLE()
 8003914:	9b06      	ldr	r3, [sp, #24]
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8003916:	f7fd f9a9 	bl	8000c6c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800391a:	200b      	movs	r0, #11
	hadc1.Instance = ADC1;
 800391c:	4d6c      	ldr	r5, [pc, #432]	; (8003ad0 <main+0x2dc>)
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800391e:	f7fd f9d9 	bl	8000cd4 <HAL_NVIC_EnableIRQ>
	hadc1.Instance = ADC1;
 8003922:	4b6c      	ldr	r3, [pc, #432]	; (8003ad4 <main+0x2e0>)
	hadc1.Init.NbrOfConversion = 11;
 8003924:	f04f 080b 	mov.w	r8, #11
	hadc1.Instance = ADC1;
 8003928:	602b      	str	r3, [r5, #0]
	hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800392a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800392e:	60ab      	str	r3, [r5, #8]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003930:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
	sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8003934:	f04f 0907 	mov.w	r9, #7
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003938:	4628      	mov	r0, r5
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800393a:	61eb      	str	r3, [r5, #28]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 800393c:	752c      	strb	r4, [r5, #20]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800393e:	606c      	str	r4, [r5, #4]
	hadc1.Init.NbrOfConversion = 11;
 8003940:	f8c5 8010 	str.w	r8, [r5, #16]
	ADC_ChannelConfTypeDef sConfig =
 8003944:	940d      	str	r4, [sp, #52]	; 0x34
 8003946:	940e      	str	r4, [sp, #56]	; 0x38
 8003948:	940f      	str	r4, [sp, #60]	; 0x3c
	hadc1.Init.ContinuousConvMode = ENABLE;
 800394a:	732e      	strb	r6, [r5, #12]
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800394c:	f7fd f8f2 	bl	8000b34 <HAL_ADC_Init>
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003950:	a90d      	add	r1, sp, #52	; 0x34
 8003952:	4628      	mov	r0, r5
	sConfig.Channel = ADC_CHANNEL_0;
 8003954:	940d      	str	r4, [sp, #52]	; 0x34
	sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8003956:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
	sConfig.Rank = ADC_REGULAR_RANK_1;
 800395a:	960e      	str	r6, [sp, #56]	; 0x38
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800395c:	f7fc ff7e 	bl	800085c <HAL_ADC_ConfigChannel>
	sConfig.Channel = ADC_CHANNEL_5;
 8003960:	2205      	movs	r2, #5
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003962:	a90d      	add	r1, sp, #52	; 0x34
 8003964:	4628      	mov	r0, r5
	sConfig.Channel = ADC_CHANNEL_5;
 8003966:	920d      	str	r2, [sp, #52]	; 0x34
 8003968:	9204      	str	r2, [sp, #16]
	sConfig.Rank = ADC_REGULAR_RANK_2;
 800396a:	970e      	str	r7, [sp, #56]	; 0x38
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800396c:	f7fc ff76 	bl	800085c <HAL_ADC_ConfigChannel>
	sConfig.Rank = ADC_REGULAR_RANK_3;
 8003970:	2303      	movs	r3, #3
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003972:	a90d      	add	r1, sp, #52	; 0x34
 8003974:	4628      	mov	r0, r5
	sConfig.Channel = ADC_CHANNEL_6;
 8003976:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
	sConfig.Rank = ADC_REGULAR_RANK_3;
 800397a:	930e      	str	r3, [sp, #56]	; 0x38
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800397c:	f7fc ff6e 	bl	800085c <HAL_ADC_ConfigChannel>
	sConfig.Rank = ADC_REGULAR_RANK_4;
 8003980:	2304      	movs	r3, #4
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003982:	a90d      	add	r1, sp, #52	; 0x34
 8003984:	4628      	mov	r0, r5
	sConfig.Channel = ADC_CHANNEL_7;
 8003986:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
	sConfig.Rank = ADC_REGULAR_RANK_4;
 800398a:	930e      	str	r3, [sp, #56]	; 0x38
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800398c:	f7fc ff66 	bl	800085c <HAL_ADC_ConfigChannel>
	sConfig.Channel = ADC_CHANNEL_8;
 8003990:	2308      	movs	r3, #8
	sConfig.Channel = ADC_CHANNEL_10;
 8003992:	270a      	movs	r7, #10
	sConfig.Rank = ADC_REGULAR_RANK_5;
 8003994:	9a04      	ldr	r2, [sp, #16]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003996:	a90d      	add	r1, sp, #52	; 0x34
 8003998:	4628      	mov	r0, r5
	sConfig.Rank = ADC_REGULAR_RANK_5;
 800399a:	920e      	str	r2, [sp, #56]	; 0x38
	sConfig.Channel = ADC_CHANNEL_8;
 800399c:	930d      	str	r3, [sp, #52]	; 0x34
 800399e:	9303      	str	r3, [sp, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80039a0:	f7fc ff5c 	bl	800085c <HAL_ADC_ConfigChannel>
	sConfig.Rank = ADC_REGULAR_RANK_6;
 80039a4:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
	sConfig.Channel = ADC_CHANNEL_12;
 80039a8:	f04f 0b0c 	mov.w	fp, #12
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80039ac:	a90d      	add	r1, sp, #52	; 0x34
 80039ae:	4628      	mov	r0, r5
	sConfig.Channel = ADC_CHANNEL_10;
 80039b0:	970d      	str	r7, [sp, #52]	; 0x34
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80039b2:	f7fc ff53 	bl	800085c <HAL_ADC_ConfigChannel>
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80039b6:	a90d      	add	r1, sp, #52	; 0x34
 80039b8:	4628      	mov	r0, r5
	sConfig.Channel = ADC_CHANNEL_11;
 80039ba:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
	sConfig.Rank = ADC_REGULAR_RANK_7;
 80039be:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80039c2:	f7fc ff4b 	bl	800085c <HAL_ADC_ConfigChannel>
	sConfig.Rank = ADC_REGULAR_RANK_8;
 80039c6:	9b03      	ldr	r3, [sp, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80039c8:	a90d      	add	r1, sp, #52	; 0x34
 80039ca:	4628      	mov	r0, r5
	sConfig.Rank = ADC_REGULAR_RANK_8;
 80039cc:	930e      	str	r3, [sp, #56]	; 0x38
	sConfig.Channel = ADC_CHANNEL_12;
 80039ce:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80039d2:	f7fc ff43 	bl	800085c <HAL_ADC_ConfigChannel>
	sConfig.Channel = ADC_CHANNEL_13;
 80039d6:	230d      	movs	r3, #13
 80039d8:	930d      	str	r3, [sp, #52]	; 0x34
	sConfig.Rank = ADC_REGULAR_RANK_9;
 80039da:	2309      	movs	r3, #9
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80039dc:	a90d      	add	r1, sp, #52	; 0x34
 80039de:	4628      	mov	r0, r5
	sConfig.Rank = ADC_REGULAR_RANK_9;
 80039e0:	930e      	str	r3, [sp, #56]	; 0x38
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80039e2:	f7fc ff3b 	bl	800085c <HAL_ADC_ConfigChannel>
	sConfig.Channel = ADC_CHANNEL_14;
 80039e6:	230e      	movs	r3, #14
	sConfig.Channel = ADC_CHANNEL_15;
 80039e8:	f04f 090f 	mov.w	r9, #15
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80039ec:	a90d      	add	r1, sp, #52	; 0x34
 80039ee:	4628      	mov	r0, r5
	sConfig.Channel = ADC_CHANNEL_14;
 80039f0:	930d      	str	r3, [sp, #52]	; 0x34
	sConfig.Rank = ADC_REGULAR_RANK_10;
 80039f2:	970e      	str	r7, [sp, #56]	; 0x38
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80039f4:	f7fc ff32 	bl	800085c <HAL_ADC_ConfigChannel>
	sConfig.Rank = ADC_REGULAR_RANK_11;
 80039f8:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80039fc:	f44f 4880 	mov.w	r8, #16384	; 0x4000
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003a00:	a90d      	add	r1, sp, #52	; 0x34
 8003a02:	4628      	mov	r0, r5
	sConfig.Channel = ADC_CHANNEL_15;
 8003a04:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003a08:	f7fc ff28 	bl	800085c <HAL_ADC_ConfigChannel>
	hi2c1.Instance = I2C1;
 8003a0c:	4832      	ldr	r0, [pc, #200]	; (8003ad8 <main+0x2e4>)
 8003a0e:	4b33      	ldr	r3, [pc, #204]	; (8003adc <main+0x2e8>)
	hi2c2.Instance = I2C2;
 8003a10:	4d33      	ldr	r5, [pc, #204]	; (8003ae0 <main+0x2ec>)
	hi2c1.Instance = I2C1;
 8003a12:	6003      	str	r3, [r0, #0]
	hi2c1.Init.ClockSpeed = 400000;
 8003a14:	4b33      	ldr	r3, [pc, #204]	; (8003ae4 <main+0x2f0>)
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003a16:	6084      	str	r4, [r0, #8]
	hi2c1.Init.ClockSpeed = 400000;
 8003a18:	6043      	str	r3, [r0, #4]
 8003a1a:	9303      	str	r3, [sp, #12]
	hi2c1.Init.OwnAddress1 = 0;
 8003a1c:	60c4      	str	r4, [r0, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003a1e:	6144      	str	r4, [r0, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8003a20:	6184      	str	r4, [r0, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003a22:	61c4      	str	r4, [r0, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003a24:	6204      	str	r4, [r0, #32]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003a26:	f8c0 8010 	str.w	r8, [r0, #16]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003a2a:	f7fd fd67 	bl	80014fc <HAL_I2C_Init>
	hi2c2.Instance = I2C2;
 8003a2e:	4a2e      	ldr	r2, [pc, #184]	; (8003ae8 <main+0x2f4>)
	hi2c2.Init.ClockSpeed = 400000;
 8003a30:	9b03      	ldr	r3, [sp, #12]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8003a32:	4628      	mov	r0, r5
	hi2c2.Instance = I2C2;
 8003a34:	602a      	str	r2, [r5, #0]
	hi2c2.Init.ClockSpeed = 400000;
 8003a36:	606b      	str	r3, [r5, #4]
	hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003a38:	60ac      	str	r4, [r5, #8]
	hi2c2.Init.OwnAddress1 = 0;
 8003a3a:	60ec      	str	r4, [r5, #12]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003a3c:	616c      	str	r4, [r5, #20]
	hi2c2.Init.OwnAddress2 = 0;
 8003a3e:	61ac      	str	r4, [r5, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003a40:	61ec      	str	r4, [r5, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003a42:	622c      	str	r4, [r5, #32]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003a44:	f8c5 8010 	str.w	r8, [r5, #16]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8003a48:	f7fd fd58 	bl	80014fc <HAL_I2C_Init>
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8003a4c:	f44f 7382 	mov.w	r3, #260	; 0x104
	hspi1.Instance = SPI1;
 8003a50:	4826      	ldr	r0, [pc, #152]	; (8003aec <main+0x2f8>)
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8003a52:	4927      	ldr	r1, [pc, #156]	; (8003af0 <main+0x2fc>)
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003a54:	6084      	str	r4, [r0, #8]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8003a56:	e880 000a 	stmia.w	r0, {r1, r3}
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8003a5a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003a5e:	6183      	str	r3, [r0, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8003a60:	2320      	movs	r3, #32
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003a62:	60c4      	str	r4, [r0, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003a64:	6104      	str	r4, [r0, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003a66:	6144      	str	r4, [r0, #20]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8003a68:	61c3      	str	r3, [r0, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003a6a:	6204      	str	r4, [r0, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003a6c:	6244      	str	r4, [r0, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a6e:	6284      	str	r4, [r0, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 8003a70:	62c7      	str	r7, [r0, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003a72:	f7fe fdea 	bl	800264a <HAL_SPI_Init>
	htim6.Init.Prescaler = 73;
 8003a76:	2249      	movs	r2, #73	; 0x49
	htim6.Instance = TIM6;
 8003a78:	4b1e      	ldr	r3, [pc, #120]	; (8003af4 <main+0x300>)
	htim6.Init.Prescaler = 73;
 8003a7a:	481f      	ldr	r0, [pc, #124]	; (8003af8 <main+0x304>)
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a7c:	609c      	str	r4, [r3, #8]
	htim6.Init.Prescaler = 73;
 8003a7e:	e883 0005 	stmia.w	r3, {r0, r2}
	htim6.Init.Period = 999;
 8003a82:	f240 32e7 	movw	r2, #999	; 0x3e7
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003a86:	4618      	mov	r0, r3
	htim6.Init.Period = 999;
 8003a88:	60da      	str	r2, [r3, #12]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a8a:	619c      	str	r4, [r3, #24]
	TIM_MasterConfigTypeDef sMasterConfig =
 8003a8c:	940d      	str	r4, [sp, #52]	; 0x34
 8003a8e:	940e      	str	r4, [sp, #56]	; 0x38
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003a90:	9303      	str	r3, [sp, #12]
 8003a92:	f7ff f9e7 	bl	8002e64 <HAL_TIM_Base_Init>
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003a96:	9b03      	ldr	r3, [sp, #12]
 8003a98:	a90d      	add	r1, sp, #52	; 0x34
 8003a9a:	4618      	mov	r0, r3
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003a9c:	940d      	str	r4, [sp, #52]	; 0x34
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a9e:	940e      	str	r4, [sp, #56]	; 0x38
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003aa0:	f7ff fa62 	bl	8002f68 <HAL_TIMEx_MasterConfigSynchronization>
	huart2.Instance = USART2;
 8003aa4:	4815      	ldr	r0, [pc, #84]	; (8003afc <main+0x308>)
 8003aa6:	4b16      	ldr	r3, [pc, #88]	; (8003b00 <main+0x30c>)
	huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8003aa8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
	huart2.Instance = USART2;
 8003aac:	6003      	str	r3, [r0, #0]
	huart2.Init.StopBits = UART_STOPBITS_2;
 8003aae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	huart2.Init.BaudRate = 100000;
 8003ab2:	4914      	ldr	r1, [pc, #80]	; (8003b04 <main+0x310>)
	huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8003ab4:	6082      	str	r2, [r0, #8]
	huart2.Init.BaudRate = 100000;
 8003ab6:	6041      	str	r1, [r0, #4]
 8003ab8:	9105      	str	r1, [sp, #20]
 8003aba:	e025      	b.n	8003b08 <main+0x314>
 8003abc:	40021000 	.word	0x40021000
 8003ac0:	40010800 	.word	0x40010800
 8003ac4:	40010c00 	.word	0x40010c00
 8003ac8:	40011000 	.word	0x40011000
 8003acc:	10110000 	.word	0x10110000
 8003ad0:	200006f4 	.word	0x200006f4
 8003ad4:	40012400 	.word	0x40012400
 8003ad8:	2000063c 	.word	0x2000063c
 8003adc:	40005400 	.word	0x40005400
 8003ae0:	20000690 	.word	0x20000690
 8003ae4:	00061a80 	.word	0x00061a80
 8003ae8:	40005800 	.word	0x40005800
 8003aec:	20000818 	.word	0x20000818
 8003af0:	40013000 	.word	0x40013000
 8003af4:	20000788 	.word	0x20000788
 8003af8:	40001000 	.word	0x40001000
 8003afc:	20000874 	.word	0x20000874
 8003b00:	40004400 	.word	0x40004400
 8003b04:	000186a0 	.word	0x000186a0
	huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8003b08:	9204      	str	r2, [sp, #16]
	huart2.Init.StopBits = UART_STOPBITS_2;
 8003b0a:	60c3      	str	r3, [r0, #12]
 8003b0c:	9303      	str	r3, [sp, #12]
	huart2.Init.Parity = UART_PARITY_EVEN;
 8003b0e:	f8c0 a010 	str.w	sl, [r0, #16]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003b12:	6184      	str	r4, [r0, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003b14:	61c4      	str	r4, [r0, #28]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8003b16:	f8c0 b014 	str.w	fp, [r0, #20]
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8003b1a:	f7ff fac3 	bl	80030a4 <HAL_UART_Init>
	huart3.Instance = USART3;
 8003b1e:	f8df e194 	ldr.w	lr, [pc, #404]	; 8003cb4 <main+0x4c0>
 8003b22:	4856      	ldr	r0, [pc, #344]	; (8003c7c <main+0x488>)
	huart3.Init.StopBits = UART_STOPBITS_2;
 8003b24:	9b03      	ldr	r3, [sp, #12]
	huart3.Init.BaudRate = 100000;
 8003b26:	9905      	ldr	r1, [sp, #20]
	huart3.Init.WordLength = UART_WORDLENGTH_9B;
 8003b28:	9a04      	ldr	r2, [sp, #16]
	huart3.Instance = USART3;
 8003b2a:	f8c0 e000 	str.w	lr, [r0]
	huart3.Init.StopBits = UART_STOPBITS_2;
 8003b2e:	60c3      	str	r3, [r0, #12]
	huart3.Init.BaudRate = 100000;
 8003b30:	6041      	str	r1, [r0, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_9B;
 8003b32:	6082      	str	r2, [r0, #8]
	huart3.Init.Parity = UART_PARITY_EVEN;
 8003b34:	f8c0 a010 	str.w	sl, [r0, #16]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003b38:	6184      	str	r4, [r0, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003b3a:	61c4      	str	r4, [r0, #28]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8003b3c:	f8c0 b014 	str.w	fp, [r0, #20]
	if (HAL_UART_Init(&huart3) != HAL_OK)
 8003b40:	f7ff fab0 	bl	80030a4 <HAL_UART_Init>
	TIM_Encoder_InitTypeDef sConfig =
 8003b44:	2224      	movs	r2, #36	; 0x24
 8003b46:	4621      	mov	r1, r4
 8003b48:	a80d      	add	r0, sp, #52	; 0x34
 8003b4a:	f001 ff10 	bl	800596e <memset>
	htim1.Instance = TIM1;
 8003b4e:	f8df a154 	ldr.w	sl, [pc, #340]	; 8003ca4 <main+0x4b0>
 8003b52:	4b4b      	ldr	r3, [pc, #300]	; (8003c80 <main+0x48c>)
	if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8003b54:	a90d      	add	r1, sp, #52	; 0x34
	htim1.Init.Prescaler = 0;
 8003b56:	e88a 0018 	stmia.w	sl, {r3, r4}
	htim1.Init.Period = 23;
 8003b5a:	2317      	movs	r3, #23
 8003b5c:	f8ca 300c 	str.w	r3, [sl, #12]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003b60:	2303      	movs	r3, #3
	if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8003b62:	4650      	mov	r0, sl
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003b64:	930d      	str	r3, [sp, #52]	; 0x34
	TIM_MasterConfigTypeDef sMasterConfig =
 8003b66:	940b      	str	r4, [sp, #44]	; 0x2c
 8003b68:	940c      	str	r4, [sp, #48]	; 0x30
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b6a:	f8ca 4008 	str.w	r4, [sl, #8]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003b6e:	f8ca 4010 	str.w	r4, [sl, #16]
	htim1.Init.RepetitionCounter = 0;
 8003b72:	f8ca 4014 	str.w	r4, [sl, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003b76:	f8ca 4018 	str.w	r4, [sl, #24]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003b7a:	960f      	str	r6, [sp, #60]	; 0x3c
	sConfig.IC1Filter = 15;
 8003b7c:	f8cd 9044 	str.w	r9, [sp, #68]	; 0x44
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003b80:	9613      	str	r6, [sp, #76]	; 0x4c
	sConfig.IC2Filter = 15;
 8003b82:	f8cd 9054 	str.w	r9, [sp, #84]	; 0x54
	if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8003b86:	f7ff f999 	bl	8002ebc <HAL_TIM_Encoder_Init>
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003b8a:	a90b      	add	r1, sp, #44	; 0x2c
 8003b8c:	4650      	mov	r0, sl
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003b8e:	940b      	str	r4, [sp, #44]	; 0x2c
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003b90:	940c      	str	r4, [sp, #48]	; 0x30
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003b92:	f7ff f9e9 	bl	8002f68 <HAL_TIMEx_MasterConfigSynchronization>
	oledInit();
 8003b96:	f000 fe7d 	bl	8004894 <oledInit>
	oledPrintInitScreen();
 8003b9a:	f000 fe8b 	bl	80048b4 <oledPrintInitScreen>
	initNRF24andPrintStatus();
 8003b9e:	f000 fe35 	bl	800480c <initNRF24andPrintStatus>
	HAL_GPIO_WritePin(MPU_PWR_GPIO_Port, MPU_PWR_Pin, SET); //wlacz zasilanie do MPU
 8003ba2:	4632      	mov	r2, r6
 8003ba4:	4641      	mov	r1, r8
 8003ba6:	4837      	ldr	r0, [pc, #220]	; (8003c84 <main+0x490>)
 8003ba8:	f7fd fb04 	bl	80011b4 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8003bac:	4638      	mov	r0, r7
 8003bae:	f7fc fe07 	bl	80007c0 <HAL_Delay>
	rc_status.mpu_init_succes = MPU6050_Init(&hi2c2, &imu, MPU6050_Device_0,
 8003bb2:	4623      	mov	r3, r4
 8003bb4:	4622      	mov	r2, r4
 8003bb6:	9400      	str	r4, [sp, #0]
 8003bb8:	4933      	ldr	r1, [pc, #204]	; (8003c88 <main+0x494>)
 8003bba:	4628      	mov	r0, r5
 8003bbc:	f7ff fd0c 	bl	80035d8 <MPU6050_Init>
 8003bc0:	4c32      	ldr	r4, [pc, #200]	; (8003c8c <main+0x498>)
 8003bc2:	7320      	strb	r0, [r4, #12]
	HAL_Delay(10);
 8003bc4:	4638      	mov	r0, r7
 8003bc6:	f7fc fdfb 	bl	80007c0 <HAL_Delay>
	if (mpu_result == MPU6050_Result_Ok)
 8003bca:	4b31      	ldr	r3, [pc, #196]	; (8003c90 <main+0x49c>)
 8003bcc:	781b      	ldrb	r3, [r3, #0]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d135      	bne.n	8003c3e <main+0x44a>
		printf("MPU6050  initialization SUCCESS!\n");
 8003bd2:	4830      	ldr	r0, [pc, #192]	; (8003c94 <main+0x4a0>)
		printf("MPU6050 initialization FAIL!\n");
 8003bd4:	f001 ff48 	bl	8005a68 <puts>
	update_rc_mode(RC_SIMPLE_JOYSTICK);
 8003bd8:	2001      	movs	r0, #1
 8003bda:	f001 f89b 	bl	8004d14 <update_rc_mode>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adc_values, 11);
 8003bde:	220b      	movs	r2, #11
 8003be0:	492d      	ldr	r1, [pc, #180]	; (8003c98 <main+0x4a4>)
 8003be2:	482e      	ldr	r0, [pc, #184]	; (8003c9c <main+0x4a8>)
 8003be4:	f7fc fef6 	bl	80009d4 <HAL_ADC_Start_DMA>
	HAL_TIM_Base_Start_IT(&htim6);
 8003be8:	482d      	ldr	r0, [pc, #180]	; (8003ca0 <main+0x4ac>)
 8003bea:	f7fe ffbd 	bl	8002b68 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8003bee:	213c      	movs	r1, #60	; 0x3c
 8003bf0:	482c      	ldr	r0, [pc, #176]	; (8003ca4 <main+0x4b0>)
 8003bf2:	f7fe ffeb 	bl	8002bcc <HAL_TIM_Encoder_Start>
	read_initial_store();
 8003bf6:	f7ff fc13 	bl	8003420 <read_initial_store>
	volatile uint16_t main_tick = 0;
 8003bfa:	2300      	movs	r3, #0
			HAL_GPIO_WritePin(LED_BAT_GPIO_Port, LED_BAT_Pin, SET);
 8003bfc:	2601      	movs	r6, #1
		if (tick_ms && rc_status.mode == NORMAL_MODE)
 8003bfe:	4f2a      	ldr	r7, [pc, #168]	; (8003ca8 <main+0x4b4>)
			HAL_GPIO_WritePin(LED_BAT_GPIO_Port, LED_BAT_Pin, SET);
 8003c00:	4d2a      	ldr	r5, [pc, #168]	; (8003cac <main+0x4b8>)
	volatile uint16_t main_tick = 0;
 8003c02:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
		if (tick_ms && rc_status.mode == NORMAL_MODE)
 8003c06:	783b      	ldrb	r3, [r7, #0]
 8003c08:	b343      	cbz	r3, 8003c5c <main+0x468>
 8003c0a:	7fa3      	ldrb	r3, [r4, #30]
 8003c0c:	bb33      	cbnz	r3, 8003c5c <main+0x468>
			tick_ms--;
 8003c0e:	783b      	ldrb	r3, [r7, #0]
 8003c10:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8003cb8 <main+0x4c4>
 8003c14:	3b01      	subs	r3, #1
 8003c16:	b2db      	uxtb	r3, r3
 8003c18:	703b      	strb	r3, [r7, #0]
			main_tick++;
 8003c1a:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 8003c1e:	3301      	adds	r3, #1
 8003c20:	b29b      	uxth	r3, r3
 8003c22:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
			for (pointer_to_task = timed_task; pointer_to_task->interval != 0; pointer_to_task++)
 8003c26:	f838 1c08 	ldrh.w	r1, [r8, #-8]
				if (!(main_tick % pointer_to_task->interval))
 8003c2a:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
			for (pointer_to_task = timed_task; pointer_to_task->interval != 0; pointer_to_task++)
 8003c2e:	b941      	cbnz	r1, 8003c42 <main+0x44e>
			if (main_tick > 1000)
 8003c30:	b29b      	uxth	r3, r3
 8003c32:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003c36:	d9e6      	bls.n	8003c06 <main+0x412>
				main_tick = 1;
 8003c38:	f8ad 6034 	strh.w	r6, [sp, #52]	; 0x34
 8003c3c:	e7e3      	b.n	8003c06 <main+0x412>
		printf("MPU6050 initialization FAIL!\n");
 8003c3e:	481c      	ldr	r0, [pc, #112]	; (8003cb0 <main+0x4bc>)
 8003c40:	e7c8      	b.n	8003bd4 <main+0x3e0>
				if (!(main_tick % pointer_to_task->interval))
 8003c42:	b29a      	uxth	r2, r3
 8003c44:	fbb2 f3f1 	udiv	r3, r2, r1
 8003c48:	fb01 2313 	mls	r3, r1, r3, r2
 8003c4c:	b29b      	uxth	r3, r3
 8003c4e:	b913      	cbnz	r3, 8003c56 <main+0x462>
					(pointer_to_task->proc)();
 8003c50:	f858 3c04 	ldr.w	r3, [r8, #-4]
 8003c54:	4798      	blx	r3
 8003c56:	f108 0808 	add.w	r8, r8, #8
 8003c5a:	e7e4      	b.n	8003c26 <main+0x432>
		else if (rc_status.mode == BIND_MODE)
 8003c5c:	f894 801e 	ldrb.w	r8, [r4, #30]
 8003c60:	f1b8 0f01 	cmp.w	r8, #1
 8003c64:	d1cf      	bne.n	8003c06 <main+0x412>
			oledPrintBindScren();
 8003c66:	f001 f805 	bl	8004c74 <oledPrintBindScren>
			HAL_GPIO_WritePin(LED_BAT_GPIO_Port, LED_BAT_Pin, SET);
 8003c6a:	4642      	mov	r2, r8
 8003c6c:	2180      	movs	r1, #128	; 0x80
 8003c6e:	4628      	mov	r0, r5
 8003c70:	f7fd faa0 	bl	80011b4 <HAL_GPIO_WritePin>
			bind_event_controler();
 8003c74:	f7ff fafe 	bl	8003274 <bind_event_controler>
 8003c78:	e7c5      	b.n	8003c06 <main+0x412>
 8003c7a:	bf00      	nop
 8003c7c:	200005fc 	.word	0x200005fc
 8003c80:	40012c00 	.word	0x40012c00
 8003c84:	40010c00 	.word	0x40010c00
 8003c88:	200005e0 	.word	0x200005e0
 8003c8c:	20000150 	.word	0x20000150
 8003c90:	20000870 	.word	0x20000870
 8003c94:	080073ac 	.word	0x080073ac
 8003c98:	200008b4 	.word	0x200008b4
 8003c9c:	200006f4 	.word	0x200006f4
 8003ca0:	20000788 	.word	0x20000788
 8003ca4:	200007d0 	.word	0x200007d0
 8003ca8:	200000a6 	.word	0x200000a6
 8003cac:	40011000 	.word	0x40011000
 8003cb0:	080073cd 	.word	0x080073cd
 8003cb4:	40004800 	.word	0x40004800
 8003cb8:	08007414 	.word	0x08007414

08003cbc <_write>:
int _write(int fd, char *str, int len) {
 8003cbc:	b510      	push	{r4, lr}
 8003cbe:	4614      	mov	r4, r2
	HAL_UART_Transmit(&DEBUG_UART, (uint8_t *) str, len, 10);
 8003cc0:	230a      	movs	r3, #10
 8003cc2:	b292      	uxth	r2, r2
 8003cc4:	4802      	ldr	r0, [pc, #8]	; (8003cd0 <_write+0x14>)
 8003cc6:	f7ff fa1b 	bl	8003100 <HAL_UART_Transmit>
}
 8003cca:	4620      	mov	r0, r4
 8003ccc:	bd10      	pop	{r4, pc}
 8003cce:	bf00      	nop
 8003cd0:	200005fc 	.word	0x200005fc

08003cd4 <HAL_TIM_PeriodElapsedCallback>:

/// HAL CALLBACK OVERRIDE
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
	static uint8_t mig = 10;
	tick_ms = 1;
 8003cd4:	2201      	movs	r2, #1
 8003cd6:	4b08      	ldr	r3, [pc, #32]	; (8003cf8 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8003cd8:	701a      	strb	r2, [r3, #0]

	mig--;
 8003cda:	4a08      	ldr	r2, [pc, #32]	; (8003cfc <HAL_TIM_PeriodElapsedCallback+0x28>)
 8003cdc:	7813      	ldrb	r3, [r2, #0]
 8003cde:	3b01      	subs	r3, #1
	if (!mig)
 8003ce0:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
	{
		mig = 10;
 8003ce4:	bf01      	itttt	eq
 8003ce6:	230a      	moveq	r3, #10
 8003ce8:	7013      	strbeq	r3, [r2, #0]
		enc_rotation = TIM1->CNT / 4;
 8003cea:	4b05      	ldreq	r3, [pc, #20]	; (8003d00 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8003cec:	4a05      	ldreq	r2, [pc, #20]	; (8003d04 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8003cee:	bf04      	itt	eq
 8003cf0:	6a5b      	ldreq	r3, [r3, #36]	; 0x24
 8003cf2:	089b      	lsreq	r3, r3, #2
 8003cf4:	7013      	strb	r3, [r2, #0]
 8003cf6:	4770      	bx	lr
 8003cf8:	200000a6 	.word	0x200000a6
 8003cfc:	20000010 	.word	0x20000010
 8003d00:	40012c00 	.word	0x40012c00
 8003d04:	200000a5 	.word	0x200000a5

08003d08 <HAL_GPIO_EXTI_Callback>:

}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {

	if (GPIO_Pin == ENC_PB_Pin)
 8003d08:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8003d0c:	b508      	push	{r3, lr}
	if (GPIO_Pin == ENC_PB_Pin)
 8003d0e:	d10f      	bne.n	8003d30 <HAL_GPIO_EXTI_Callback+0x28>
	{
		HAL_GPIO_TogglePin(LED_MODE_GPIO_Port, LED_MODE_Pin);
 8003d10:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8003d14:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003d18:	f500 3086 	add.w	r0, r0, #68608	; 0x10c00
 8003d1c:	f7fd fa4f 	bl	80011be <HAL_GPIO_TogglePin>

		enc_clicks++;
 8003d20:	4a04      	ldr	r2, [pc, #16]	; (8003d34 <HAL_GPIO_EXTI_Callback+0x2c>)
 8003d22:	7813      	ldrb	r3, [r2, #0]
 8003d24:	3301      	adds	r3, #1
 8003d26:	b2db      	uxtb	r3, r3
		if (enc_clicks > 3)
 8003d28:	2b03      	cmp	r3, #3
		{

			enc_clicks = 0;
 8003d2a:	bf88      	it	hi
 8003d2c:	2300      	movhi	r3, #0
 8003d2e:	7013      	strb	r3, [r2, #0]
 8003d30:	bd08      	pop	{r3, pc}
 8003d32:	bf00      	nop
 8003d34:	200000a4 	.word	0x200000a4

08003d38 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8003d38:	4770      	bx	lr
	...

08003d3c <NRF24_csn.part.0>:
}

//1. Chip Select function
void NRF24_csn(int state) {
	if (state)
		HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 8003d3c:	4b03      	ldr	r3, [pc, #12]	; (8003d4c <NRF24_csn.part.0+0x10>)
 8003d3e:	2201      	movs	r2, #1
 8003d40:	8819      	ldrh	r1, [r3, #0]
 8003d42:	4b03      	ldr	r3, [pc, #12]	; (8003d50 <NRF24_csn.part.0+0x14>)
 8003d44:	6818      	ldr	r0, [r3, #0]
 8003d46:	f7fd ba35 	b.w	80011b4 <HAL_GPIO_WritePin>
 8003d4a:	bf00      	nop
 8003d4c:	200000ac 	.word	0x200000ac
 8003d50:	200000b0 	.word	0x200000b0

08003d54 <NRF24_ce.part.1>:
		HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
}
//2. Chip Enable
void NRF24_ce(int state) {
	if (state)
		HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 8003d54:	4b03      	ldr	r3, [pc, #12]	; (8003d64 <NRF24_ce.part.1+0x10>)
 8003d56:	2201      	movs	r2, #1
 8003d58:	8819      	ldrh	r1, [r3, #0]
 8003d5a:	4b03      	ldr	r3, [pc, #12]	; (8003d68 <NRF24_ce.part.1+0x14>)
 8003d5c:	6818      	ldr	r0, [r3, #0]
 8003d5e:	f7fd ba29 	b.w	80011b4 <HAL_GPIO_WritePin>
 8003d62:	bf00      	nop
 8003d64:	200000aa 	.word	0x200000aa
 8003d68:	200000b0 	.word	0x200000b0

08003d6c <NRF24_csn>:
	if (state)
 8003d6c:	4602      	mov	r2, r0
 8003d6e:	b108      	cbz	r0, 8003d74 <NRF24_csn+0x8>
 8003d70:	f7ff bfe4 	b.w	8003d3c <NRF24_csn.part.0>
		HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 8003d74:	4b02      	ldr	r3, [pc, #8]	; (8003d80 <NRF24_csn+0x14>)
 8003d76:	8819      	ldrh	r1, [r3, #0]
 8003d78:	4b02      	ldr	r3, [pc, #8]	; (8003d84 <NRF24_csn+0x18>)
 8003d7a:	6818      	ldr	r0, [r3, #0]
 8003d7c:	f7fd ba1a 	b.w	80011b4 <HAL_GPIO_WritePin>
 8003d80:	200000ac 	.word	0x200000ac
 8003d84:	200000b0 	.word	0x200000b0

08003d88 <NRF24_ce>:
	if (state)
 8003d88:	4602      	mov	r2, r0
 8003d8a:	b108      	cbz	r0, 8003d90 <NRF24_ce+0x8>
 8003d8c:	f7ff bfe2 	b.w	8003d54 <NRF24_ce.part.1>
	else
		HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
 8003d90:	4b02      	ldr	r3, [pc, #8]	; (8003d9c <NRF24_ce+0x14>)
 8003d92:	8819      	ldrh	r1, [r3, #0]
 8003d94:	4b02      	ldr	r3, [pc, #8]	; (8003da0 <NRF24_ce+0x18>)
 8003d96:	6818      	ldr	r0, [r3, #0]
 8003d98:	f7fd ba0c 	b.w	80011b4 <HAL_GPIO_WritePin>
 8003d9c:	200000aa 	.word	0x200000aa
 8003da0:	200000b0 	.word	0x200000b0

08003da4 <NRF24_read_register>:
}
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg) {
 8003da4:	b513      	push	{r0, r1, r4, lr}
 8003da6:	4604      	mov	r4, r0
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(0);
 8003da8:	2000      	movs	r0, #0
 8003daa:	f7ff ffdf 	bl	8003d6c <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg & 0x1F;
 8003dae:	f004 041f 	and.w	r4, r4, #31
 8003db2:	a902      	add	r1, sp, #8
 8003db4:	f801 4d04 	strb.w	r4, [r1, #-4]!
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8003db8:	4c09      	ldr	r4, [pc, #36]	; (8003de0 <NRF24_read_register+0x3c>)
 8003dba:	2364      	movs	r3, #100	; 0x64
 8003dbc:	2201      	movs	r2, #1
 8003dbe:	4620      	mov	r0, r4
 8003dc0:	f7fe fc9b 	bl	80026fa <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, &spiBuf[1], 1, 100);
 8003dc4:	2364      	movs	r3, #100	; 0x64
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	f10d 0105 	add.w	r1, sp, #5
 8003dcc:	4620      	mov	r0, r4
 8003dce:	f7fe fe2f 	bl	8002a30 <HAL_SPI_Receive>
	retData = spiBuf[1];
 8003dd2:	f89d 4005 	ldrb.w	r4, [sp, #5]
 8003dd6:	f7ff ffb1 	bl	8003d3c <NRF24_csn.part.0>
	//Bring CSN high
	NRF24_csn(1);
	return retData;
}
 8003dda:	4620      	mov	r0, r4
 8003ddc:	b002      	add	sp, #8
 8003dde:	bd10      	pop	{r4, pc}
 8003de0:	200000b4 	.word	0x200000b4

08003de4 <NRF24_read_registerN>:
//4. Read multiple bytes register
void NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len) {
 8003de4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003de6:	4604      	mov	r4, r0
 8003de8:	460d      	mov	r5, r1
 8003dea:	4616      	mov	r6, r2
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8003dec:	2000      	movs	r0, #0
 8003dee:	f7ff ffbd 	bl	8003d6c <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg & 0x1F;
 8003df2:	f004 041f 	and.w	r4, r4, #31
 8003df6:	a902      	add	r1, sp, #8
 8003df8:	f801 4d04 	strb.w	r4, [r1, #-4]!
	//spiStatus = NRF24_SPI_Write(spiBuf, 1);
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8003dfc:	4c07      	ldr	r4, [pc, #28]	; (8003e1c <NRF24_read_registerN+0x38>)
 8003dfe:	2364      	movs	r3, #100	; 0x64
 8003e00:	2201      	movs	r2, #1
 8003e02:	4620      	mov	r0, r4
 8003e04:	f7fe fc79 	bl	80026fa <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, buf, len, 100);
 8003e08:	2364      	movs	r3, #100	; 0x64
 8003e0a:	4632      	mov	r2, r6
 8003e0c:	4629      	mov	r1, r5
 8003e0e:	4620      	mov	r0, r4
 8003e10:	f7fe fe0e 	bl	8002a30 <HAL_SPI_Receive>
 8003e14:	f7ff ff92 	bl	8003d3c <NRF24_csn.part.0>
	//Bring CSN high
	NRF24_csn(1);
}
 8003e18:	b002      	add	sp, #8
 8003e1a:	bd70      	pop	{r4, r5, r6, pc}
 8003e1c:	200000b4 	.word	0x200000b4

08003e20 <NRF24_write_register>:
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value) {
 8003e20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003e22:	4604      	mov	r4, r0
 8003e24:	460d      	mov	r5, r1
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8003e26:	2000      	movs	r0, #0
 8003e28:	f7ff ffa0 	bl	8003d6c <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg | 0x20;
 8003e2c:	f044 0420 	orr.w	r4, r4, #32
	spiBuf[1] = value;
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2, 100);
 8003e30:	2364      	movs	r3, #100	; 0x64
 8003e32:	2202      	movs	r2, #2
 8003e34:	a901      	add	r1, sp, #4
 8003e36:	4805      	ldr	r0, [pc, #20]	; (8003e4c <NRF24_write_register+0x2c>)
	spiBuf[0] = reg | 0x20;
 8003e38:	f88d 4004 	strb.w	r4, [sp, #4]
	spiBuf[1] = value;
 8003e3c:	f88d 5005 	strb.w	r5, [sp, #5]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2, 100);
 8003e40:	f7fe fc5b 	bl	80026fa <HAL_SPI_Transmit>
 8003e44:	f7ff ff7a 	bl	8003d3c <NRF24_csn.part.0>
	//Bring CSN high
	NRF24_csn(1);
}
 8003e48:	b003      	add	sp, #12
 8003e4a:	bd30      	pop	{r4, r5, pc}
 8003e4c:	200000b4 	.word	0x200000b4

08003e50 <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len) {
 8003e50:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003e52:	4604      	mov	r4, r0
 8003e54:	460d      	mov	r5, r1
 8003e56:	4616      	mov	r6, r2
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8003e58:	2000      	movs	r0, #0
 8003e5a:	f7ff ff87 	bl	8003d6c <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg | 0x20;
 8003e5e:	f044 0420 	orr.w	r4, r4, #32
 8003e62:	a902      	add	r1, sp, #8
 8003e64:	f801 4d04 	strb.w	r4, [r1, #-4]!
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8003e68:	4c07      	ldr	r4, [pc, #28]	; (8003e88 <NRF24_write_registerN+0x38>)
 8003e6a:	2364      	movs	r3, #100	; 0x64
 8003e6c:	2201      	movs	r2, #1
 8003e6e:	4620      	mov	r0, r4
 8003e70:	f7fe fc43 	bl	80026fa <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*) buf, len, 100);
 8003e74:	2364      	movs	r3, #100	; 0x64
 8003e76:	4632      	mov	r2, r6
 8003e78:	4629      	mov	r1, r5
 8003e7a:	4620      	mov	r0, r4
 8003e7c:	f7fe fc3d 	bl	80026fa <HAL_SPI_Transmit>
 8003e80:	f7ff ff5c 	bl	8003d3c <NRF24_csn.part.0>
	//Bring CSN high
	NRF24_csn(1);
}
 8003e84:	b002      	add	sp, #8
 8003e86:	bd70      	pop	{r4, r5, r6, pc}
 8003e88:	200000b4 	.word	0x200000b4

08003e8c <NRF24_write_payload>:
//7. Write transmit payload
void NRF24_write_payload(const void* buf, uint8_t len) {
 8003e8c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003e8e:	4605      	mov	r5, r0
	uint8_t wrPayloadCmd;
	//Bring CSN low
	NRF24_csn(0);
 8003e90:	2000      	movs	r0, #0
void NRF24_write_payload(const void* buf, uint8_t len) {
 8003e92:	460e      	mov	r6, r1
	NRF24_csn(0);
 8003e94:	f7ff ff6a 	bl	8003d6c <NRF24_csn>
	//Send Write Tx payload command followed by pbuf data
	wrPayloadCmd = CMD_W_TX_PAYLOAD;
 8003e98:	23a0      	movs	r3, #160	; 0xa0
	HAL_SPI_Transmit(&nrf24_hspi, &wrPayloadCmd, 1, 100);
 8003e9a:	4c09      	ldr	r4, [pc, #36]	; (8003ec0 <NRF24_write_payload+0x34>)
	wrPayloadCmd = CMD_W_TX_PAYLOAD;
 8003e9c:	a902      	add	r1, sp, #8
 8003e9e:	f801 3d01 	strb.w	r3, [r1, #-1]!
	HAL_SPI_Transmit(&nrf24_hspi, &wrPayloadCmd, 1, 100);
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	2364      	movs	r3, #100	; 0x64
 8003ea6:	4620      	mov	r0, r4
 8003ea8:	f7fe fc27 	bl	80026fa <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t *) buf, len, 100);
 8003eac:	2364      	movs	r3, #100	; 0x64
 8003eae:	4632      	mov	r2, r6
 8003eb0:	4629      	mov	r1, r5
 8003eb2:	4620      	mov	r0, r4
 8003eb4:	f7fe fc21 	bl	80026fa <HAL_SPI_Transmit>
 8003eb8:	f7ff ff40 	bl	8003d3c <NRF24_csn.part.0>
	//Bring CSN high
	NRF24_csn(1);
}
 8003ebc:	b002      	add	sp, #8
 8003ebe:	bd70      	pop	{r4, r5, r6, pc}
 8003ec0:	200000b4 	.word	0x200000b4

08003ec4 <NRF24_flush_tx>:
	NRF24_csn(1);
}

//9. Flush Tx buffer
void NRF24_flush_tx(void) {
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 8003ec4:	21ff      	movs	r1, #255	; 0xff
 8003ec6:	20e1      	movs	r0, #225	; 0xe1
 8003ec8:	f7ff bfaa 	b.w	8003e20 <NRF24_write_register>

08003ecc <NRF24_flush_rx>:
}
//10. Flush Rx buffer
void NRF24_flush_rx(void) {
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 8003ecc:	21ff      	movs	r1, #255	; 0xff
 8003ece:	20e2      	movs	r0, #226	; 0xe2
 8003ed0:	f7ff bfa6 	b.w	8003e20 <NRF24_write_register>

08003ed4 <NRF24_get_status>:
}
//11. Get status register value
uint8_t NRF24_get_status(void) {
	uint8_t statReg;
	statReg = NRF24_read_register(REG_STATUS);
 8003ed4:	2007      	movs	r0, #7
 8003ed6:	f7ff bf65 	b.w	8003da4 <NRF24_read_register>

08003eda <NRF24_stopListening>:
	NRF24_ce(1);
	//Wait for 130 uSec for the radio to come on
	NRF24_DelayMicroSeconds(150);
}
//14. Stop listening (essential before any write operation)
void NRF24_stopListening(void) {
 8003eda:	b508      	push	{r3, lr}
	NRF24_ce(0);
 8003edc:	2000      	movs	r0, #0
 8003ede:	f7ff ff53 	bl	8003d88 <NRF24_ce>
	NRF24_flush_tx();
 8003ee2:	f7ff ffef 	bl	8003ec4 <NRF24_flush_tx>
	NRF24_flush_rx();
}
 8003ee6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	NRF24_flush_rx();
 8003eea:	f7ff bfef 	b.w	8003ecc <NRF24_flush_rx>
	...

08003ef0 <NRF24_openWritingPipe>:
	NRF24_flush_rx();
	NRF24_getDynamicPayloadSize();
	return rxStatus;
}
//18. Open Tx pipe for writing (Cannot perform this while Listenning, has to call NRF24_stopListening)
void NRF24_openWritingPipe(uint64_t address) {
 8003ef0:	b513      	push	{r0, r1, r4, lr}
 8003ef2:	ac02      	add	r4, sp, #8
 8003ef4:	e964 0102 	strd	r0, r1, [r4, #-8]!
	NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *) (&address), 5);
 8003ef8:	2205      	movs	r2, #5
 8003efa:	4621      	mov	r1, r4
 8003efc:	200a      	movs	r0, #10
 8003efe:	f7ff ffa7 	bl	8003e50 <NRF24_write_registerN>
	NRF24_write_registerN(REG_TX_ADDR, (uint8_t *) (&address), 5);
 8003f02:	2205      	movs	r2, #5
 8003f04:	4621      	mov	r1, r4
 8003f06:	2010      	movs	r0, #16
 8003f08:	f7ff ffa2 	bl	8003e50 <NRF24_write_registerN>

	const uint8_t max_payload_size = 32;
	NRF24_write_register(REG_RX_PW_P0, MIN(payload_size, max_payload_size));
 8003f0c:	4b04      	ldr	r3, [pc, #16]	; (8003f20 <NRF24_openWritingPipe+0x30>)
 8003f0e:	2011      	movs	r0, #17
 8003f10:	7819      	ldrb	r1, [r3, #0]
 8003f12:	2920      	cmp	r1, #32
 8003f14:	bf28      	it	cs
 8003f16:	2120      	movcs	r1, #32
 8003f18:	f7ff ff82 	bl	8003e20 <NRF24_write_register>
}
 8003f1c:	b002      	add	sp, #8
 8003f1e:	bd10      	pop	{r4, pc}
 8003f20:	2000014c 	.word	0x2000014c

08003f24 <NRF24_setChannel>:
}

//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel) {
	const uint8_t max_channel = 127;
	NRF24_write_register(REG_RF_CH, MIN(channel, max_channel));
 8003f24:	287f      	cmp	r0, #127	; 0x7f
 8003f26:	4601      	mov	r1, r0
 8003f28:	bf28      	it	cs
 8003f2a:	217f      	movcs	r1, #127	; 0x7f
 8003f2c:	2005      	movs	r0, #5
 8003f2e:	f7ff bf77 	b.w	8003e20 <NRF24_write_register>

08003f32 <NRF24_getDynamicPayloadSize>:
uint8_t NRF24_getPayloadSize(void) {
	return payload_size;
}
//24. Get dynamic payload size, of latest packet received
uint8_t NRF24_getDynamicPayloadSize(void) {
	return NRF24_read_register(CMD_R_RX_PL_WID);
 8003f32:	2060      	movs	r0, #96	; 0x60
 8003f34:	f7ff bf36 	b.w	8003da4 <NRF24_read_register>

08003f38 <NRF24_disableDynamicPayloads>:
			NRF24_read_register(
					REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
	dynamic_payloads_enabled = true;

}
void NRF24_disableDynamicPayloads(void) {
 8003f38:	b508      	push	{r3, lr}
	NRF24_write_register(REG_FEATURE,
			NRF24_read_register(REG_FEATURE) & ~(_BV(BIT_EN_DPL)));
 8003f3a:	201d      	movs	r0, #29
 8003f3c:	f7ff ff32 	bl	8003da4 <NRF24_read_register>
	NRF24_write_register(REG_FEATURE,
 8003f40:	f000 01fb 	and.w	r1, r0, #251	; 0xfb
 8003f44:	201d      	movs	r0, #29
 8003f46:	f7ff ff6b 	bl	8003e20 <NRF24_write_register>
	//Disable for all pipes
	NRF24_write_register(REG_DYNPD, 0);
	dynamic_payloads_enabled = false;
}
 8003f4a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	NRF24_write_register(REG_DYNPD, 0);
 8003f4e:	2100      	movs	r1, #0
 8003f50:	201c      	movs	r0, #28
 8003f52:	f7ff bf65 	b.w	8003e20 <NRF24_write_register>

08003f56 <NRF24_setAutoAck>:
bool NRF24_isNRF_Plus(void) {
	return p_variant;
}
//28. Set Auto Ack for all
void NRF24_setAutoAck(bool enable) {
	if (enable)
 8003f56:	4601      	mov	r1, r0
 8003f58:	b100      	cbz	r0, 8003f5c <NRF24_setAutoAck+0x6>
		NRF24_write_register(REG_EN_AA, 0x3F);
 8003f5a:	213f      	movs	r1, #63	; 0x3f
	else
		NRF24_write_register(REG_EN_AA, 0x00);
 8003f5c:	2001      	movs	r0, #1
 8003f5e:	f7ff bf5f 	b.w	8003e20 <NRF24_write_register>

08003f62 <NRF24_setPALevel>:
		}
		NRF24_write_register( REG_EN_AA, en_aa);
	}
}
//30. Set transmit power level
void NRF24_setPALevel(rf24_pa_dbm_e level) {
 8003f62:	b510      	push	{r4, lr}
 8003f64:	4604      	mov	r4, r0
	uint8_t setup = NRF24_read_register(REG_RF_SETUP);
 8003f66:	2006      	movs	r0, #6
 8003f68:	f7ff ff1c 	bl	8003da4 <NRF24_read_register>
	setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH));

	// switch uses RAM (evil!)
	if (level == RF24_PA_0dB) {
 8003f6c:	2c03      	cmp	r4, #3
	setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH));
 8003f6e:	f000 01f9 	and.w	r1, r0, #249	; 0xf9
	if (level == RF24_PA_0dB) {
 8003f72:	d102      	bne.n	8003f7a <NRF24_setPALevel+0x18>
		setup |= _BV(RF_PWR_LOW);
	} else if (level == RF24_PA_m18dB) {
		// nothing
	} else if (level == RF24_PA_ERROR) {
		// On error, go to maximum PA
		setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH));
 8003f74:	f041 0106 	orr.w	r1, r1, #6
 8003f78:	e003      	b.n	8003f82 <NRF24_setPALevel+0x20>
	} else if (level == RF24_PA_m6dB) {
 8003f7a:	2c02      	cmp	r4, #2
 8003f7c:	d106      	bne.n	8003f8c <NRF24_setPALevel+0x2a>
		setup |= _BV(RF_PWR_HIGH);
 8003f7e:	f041 0104 	orr.w	r1, r1, #4
	}

	NRF24_write_register( REG_RF_SETUP, setup);
 8003f82:	2006      	movs	r0, #6
}
 8003f84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	NRF24_write_register( REG_RF_SETUP, setup);
 8003f88:	f7ff bf4a 	b.w	8003e20 <NRF24_write_register>
	} else if (level == RF24_PA_m12dB) {
 8003f8c:	2c01      	cmp	r4, #1
 8003f8e:	d102      	bne.n	8003f96 <NRF24_setPALevel+0x34>
		setup |= _BV(RF_PWR_LOW);
 8003f90:	f041 0102 	orr.w	r1, r1, #2
 8003f94:	e7f5      	b.n	8003f82 <NRF24_setPALevel+0x20>
	} else if (level == RF24_PA_ERROR) {
 8003f96:	2c04      	cmp	r4, #4
 8003f98:	d1f3      	bne.n	8003f82 <NRF24_setPALevel+0x20>
 8003f9a:	e7eb      	b.n	8003f74 <NRF24_setPALevel+0x12>

08003f9c <NRF24_setDataRate>:
	}

	return result;
}
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed) {
 8003f9c:	b538      	push	{r3, r4, r5, lr}
 8003f9e:	4605      	mov	r5, r0
	bool result = false;
	uint8_t setup = NRF24_read_register(REG_RF_SETUP);
 8003fa0:	2006      	movs	r0, #6
 8003fa2:	f7ff feff 	bl	8003da4 <NRF24_read_register>

	// HIGH and LOW '00' is 1Mbs - our default
	wide_band = false;
	setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH));
	if (speed == RF24_250KBPS) {
 8003fa6:	2d02      	cmp	r5, #2
	setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH));
 8003fa8:	f000 04d7 	and.w	r4, r0, #215	; 0xd7
	if (speed == RF24_250KBPS) {
 8003fac:	d10c      	bne.n	8003fc8 <NRF24_setDataRate+0x2c>
		// Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
		// Making it '10'.
		wide_band = false;
		setup |= _BV(RF_DR_LOW);
 8003fae:	f044 0420 	orr.w	r4, r4, #32
		} else {
			// 1Mbs
			wide_band = false;
		}
	}
	NRF24_write_register(REG_RF_SETUP, setup);
 8003fb2:	4621      	mov	r1, r4
 8003fb4:	2006      	movs	r0, #6
 8003fb6:	f7ff ff33 	bl	8003e20 <NRF24_write_register>

	// Verify our result
	if (NRF24_read_register(REG_RF_SETUP) == setup) {
 8003fba:	2006      	movs	r0, #6
 8003fbc:	f7ff fef2 	bl	8003da4 <NRF24_read_register>
	} else {
		wide_band = false;
	}

	return result;
}
 8003fc0:	1a23      	subs	r3, r4, r0
 8003fc2:	4258      	negs	r0, r3
 8003fc4:	4158      	adcs	r0, r3
 8003fc6:	bd38      	pop	{r3, r4, r5, pc}
		if (speed == RF24_2MBPS) {
 8003fc8:	2d01      	cmp	r5, #1
			setup |= _BV(RF_DR_HIGH);
 8003fca:	bf08      	it	eq
 8003fcc:	f044 0408 	orreq.w	r4, r4, #8
 8003fd0:	e7ef      	b.n	8003fb2 <NRF24_setDataRate+0x16>

08003fd2 <NRF24_setCRCLength>:
		result = RF24_1MBPS;
	}
	return result;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length) {
 8003fd2:	b510      	push	{r4, lr}
 8003fd4:	4604      	mov	r4, r0
	uint8_t config = NRF24_read_register(REG_CONFIG)
 8003fd6:	2000      	movs	r0, #0
 8003fd8:	f7ff fee4 	bl	8003da4 <NRF24_read_register>
 8003fdc:	f000 01f3 	and.w	r1, r0, #243	; 0xf3
			& ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC));

	// switch uses RAM
	if (length == RF24_CRC_DISABLED) {
 8003fe0:	b12c      	cbz	r4, 8003fee <NRF24_setCRCLength+0x1c>
		// Do nothing, we turned it off above.
	} else if (length == RF24_CRC_8) {
 8003fe2:	2c01      	cmp	r4, #1
		config |= _BV(BIT_EN_CRC);
 8003fe4:	bf0c      	ite	eq
 8003fe6:	f041 0108 	orreq.w	r1, r1, #8
	} else {
		config |= _BV(BIT_EN_CRC);
		config |= _BV(BIT_CRCO);
 8003fea:	f041 010c 	orrne.w	r1, r1, #12
	}
	NRF24_write_register( REG_CONFIG, config);
 8003fee:	2000      	movs	r0, #0
}
 8003ff0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	NRF24_write_register( REG_CONFIG, config);
 8003ff4:	f7ff bf14 	b.w	8003e20 <NRF24_write_register>

08003ff8 <NRF24_powerDown>:
void NRF24_powerUp(void) {
	NRF24_write_register(REG_CONFIG,
			NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void) {
 8003ff8:	b508      	push	{r3, lr}
	NRF24_write_register(REG_CONFIG,
			NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 8003ffa:	2000      	movs	r0, #0
 8003ffc:	f7ff fed2 	bl	8003da4 <NRF24_read_register>
}
 8004000:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	NRF24_write_register(REG_CONFIG,
 8004004:	f000 01fd 	and.w	r1, r0, #253	; 0xfd
 8004008:	2000      	movs	r0, #0
 800400a:	f7ff bf09 	b.w	8003e20 <NRF24_write_register>

0800400e <NRF24_availablePipe>:
//39. Check if data are available and on which pipe (Use this for multiple rx pipes)
bool NRF24_availablePipe(uint8_t* pipe_num) {
 800400e:	b570      	push	{r4, r5, r6, lr}
 8004010:	4605      	mov	r5, r0
	uint8_t status = NRF24_get_status();
 8004012:	f7ff ff5f 	bl	8003ed4 <NRF24_get_status>
 8004016:	f000 0340 	and.w	r3, r0, #64	; 0x40

	bool result = (status & _BV(BIT_RX_DR));
 800401a:	2b00      	cmp	r3, #0
	uint8_t status = NRF24_get_status();
 800401c:	4604      	mov	r4, r0
	bool result = (status & _BV(BIT_RX_DR));
 800401e:	bf14      	ite	ne
 8004020:	2601      	movne	r6, #1
 8004022:	2600      	moveq	r6, #0

	if (result) {
 8004024:	d00d      	beq.n	8004042 <NRF24_availablePipe+0x34>
		// If the caller wants the pipe number, include that
		if (pipe_num)
 8004026:	b115      	cbz	r5, 800402e <NRF24_availablePipe+0x20>
			*pipe_num = (status >> BIT_RX_P_NO) & 0x7;
 8004028:	f3c0 0342 	ubfx	r3, r0, #1, #3
 800402c:	702b      	strb	r3, [r5, #0]

		// Clear the status bit
		NRF24_write_register(REG_STATUS, _BV(BIT_RX_DR));
 800402e:	2140      	movs	r1, #64	; 0x40
 8004030:	2007      	movs	r0, #7
 8004032:	f7ff fef5 	bl	8003e20 <NRF24_write_register>

		// Handle ack payload receipt
		if (status & _BV(BIT_TX_DS)) {
 8004036:	06a3      	lsls	r3, r4, #26
 8004038:	d503      	bpl.n	8004042 <NRF24_availablePipe+0x34>
			NRF24_write_register(REG_STATUS, _BV(BIT_TX_DS));
 800403a:	2120      	movs	r1, #32
 800403c:	2007      	movs	r0, #7
 800403e:	f7ff feef 	bl	8003e20 <NRF24_write_register>
		}
	}
	return result;
}
 8004042:	4630      	mov	r0, r6
 8004044:	bd70      	pop	{r4, r5, r6, pc}

08004046 <NRF24_available>:
	return NRF24_availablePipe(NULL);
 8004046:	2000      	movs	r0, #0
 8004048:	f7ff bfe1 	b.w	800400e <NRF24_availablePipe>

0800404c <NRF24_startWrite>:
//40. Start write (for IRQ mode)
void NRF24_startWrite(const void* buf, uint8_t len) {
 800404c:	b538      	push	{r3, r4, r5, lr}
 800404e:	4604      	mov	r4, r0
	// Transmitter power-up
	NRF24_ce(0);
 8004050:	2000      	movs	r0, #0
void NRF24_startWrite(const void* buf, uint8_t len) {
 8004052:	460d      	mov	r5, r1
	NRF24_ce(0);
 8004054:	f7ff fe98 	bl	8003d88 <NRF24_ce>
	NRF24_write_register(REG_CONFIG,
			(NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP))
 8004058:	2000      	movs	r0, #0
 800405a:	f7ff fea3 	bl	8003da4 <NRF24_read_register>
	NRF24_write_register(REG_CONFIG,
 800405e:	f000 01fc 	and.w	r1, r0, #252	; 0xfc
 8004062:	f041 0102 	orr.w	r1, r1, #2
 8004066:	2000      	movs	r0, #0
 8004068:	f7ff feda 	bl	8003e20 <NRF24_write_register>
 800406c:	f7ff fe72 	bl	8003d54 <NRF24_ce.part.1>
					& ~_BV(BIT_PRIM_RX));
	NRF24_ce(1);
	NRF24_DelayMicroSeconds(150);

	// Send the payload
	NRF24_write_payload(buf, len);
 8004070:	4620      	mov	r0, r4
 8004072:	4629      	mov	r1, r5
 8004074:	f7ff ff0a 	bl	8003e8c <NRF24_write_payload>
 8004078:	f7ff fe6c 	bl	8003d54 <NRF24_ce.part.1>

	// Enable Tx for 15usec
	NRF24_ce(1);
	NRF24_DelayMicroSeconds(15);
	NRF24_ce(0);
}
 800407c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	NRF24_ce(0);
 8004080:	2000      	movs	r0, #0
 8004082:	f7ff be81 	b.w	8003d88 <NRF24_ce>

08004086 <NRF24_whatHappened>:
	bool result = ack_payload_available;
	ack_payload_available = false;
	return result;
}
//43. Check interrupt flags
void NRF24_whatHappened(bool *tx_ok, bool *tx_fail, bool *rx_ready) {
 8004086:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004088:	4605      	mov	r5, r0
 800408a:	460f      	mov	r7, r1
 800408c:	4616      	mov	r6, r2
	uint8_t status = NRF24_get_status();
 800408e:	f7ff ff21 	bl	8003ed4 <NRF24_get_status>
	*tx_ok = 0;
 8004092:	2300      	movs	r3, #0
	uint8_t status = NRF24_get_status();
 8004094:	4604      	mov	r4, r0
	*tx_ok = 0;
 8004096:	702b      	strb	r3, [r5, #0]
	NRF24_write_register(REG_STATUS,
 8004098:	2170      	movs	r1, #112	; 0x70
 800409a:	2007      	movs	r0, #7
 800409c:	f7ff fec0 	bl	8003e20 <NRF24_write_register>
	_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT));
	// Report to the user what happened
	*tx_ok = status & _BV(BIT_TX_DS);
 80040a0:	f3c4 1340 	ubfx	r3, r4, #5, #1
 80040a4:	702b      	strb	r3, [r5, #0]
	*tx_fail = status & _BV(BIT_MAX_RT);
 80040a6:	f3c4 1300 	ubfx	r3, r4, #4, #1
	*rx_ready = status & _BV(BIT_RX_DR);
 80040aa:	f3c4 1480 	ubfx	r4, r4, #6, #1
	*tx_fail = status & _BV(BIT_MAX_RT);
 80040ae:	703b      	strb	r3, [r7, #0]
	*rx_ready = status & _BV(BIT_RX_DR);
 80040b0:	7034      	strb	r4, [r6, #0]
 80040b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080040b4 <NRF24_resetStatus>:
	return NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void NRF24_resetStatus(void) {
	NRF24_write_register(REG_STATUS,
 80040b4:	2170      	movs	r1, #112	; 0x70
 80040b6:	2007      	movs	r0, #7
 80040b8:	f7ff beb2 	b.w	8003e20 <NRF24_write_register>

080040bc <NRF24_write>:
bool NRF24_write(const void* buf, uint8_t len) {
 80040bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80040be:	4604      	mov	r4, r0
 80040c0:	460d      	mov	r5, r1
	NRF24_resetStatus();
 80040c2:	f7ff fff7 	bl	80040b4 <NRF24_resetStatus>
	NRF24_startWrite(buf, len);
 80040c6:	4620      	mov	r0, r4
 80040c8:	4629      	mov	r1, r5
 80040ca:	f7ff ffbf 	bl	800404c <NRF24_startWrite>
	uint32_t sent_at = HAL_GetTick();
 80040ce:	f7fc fb71 	bl	80007b4 <HAL_GetTick>
 80040d2:	4604      	mov	r4, r0
		NRF24_read_registerN(REG_OBSERVE_TX, &observe_tx, 1);
 80040d4:	2201      	movs	r2, #1
 80040d6:	f10d 0105 	add.w	r1, sp, #5
 80040da:	2008      	movs	r0, #8
 80040dc:	f7ff fe82 	bl	8003de4 <NRF24_read_registerN>
		status = NRF24_get_status();
 80040e0:	f7ff fef8 	bl	8003ed4 <NRF24_get_status>
			&& (HAL_GetTick() - sent_at < timeout));
 80040e4:	f010 0f30 	tst.w	r0, #48	; 0x30
 80040e8:	d016      	beq.n	8004118 <NRF24_write+0x5c>
	NRF24_whatHappened(&tx_ok, &tx_fail, &ack_payload_available);
 80040ea:	4c0e      	ldr	r4, [pc, #56]	; (8004124 <NRF24_write+0x68>)
 80040ec:	f10d 0107 	add.w	r1, sp, #7
 80040f0:	4622      	mov	r2, r4
 80040f2:	f10d 0006 	add.w	r0, sp, #6
 80040f6:	f7ff ffc6 	bl	8004086 <NRF24_whatHappened>
	if (ack_payload_available) {
 80040fa:	7823      	ldrb	r3, [r4, #0]
	retStatus = tx_ok;
 80040fc:	f89d 5006 	ldrb.w	r5, [sp, #6]
	if (ack_payload_available) {
 8004100:	b11b      	cbz	r3, 800410a <NRF24_write+0x4e>
		ack_payload_length = NRF24_getDynamicPayloadSize();
 8004102:	f7ff ff16 	bl	8003f32 <NRF24_getDynamicPayloadSize>
 8004106:	4b08      	ldr	r3, [pc, #32]	; (8004128 <NRF24_write+0x6c>)
 8004108:	7018      	strb	r0, [r3, #0]
	NRF24_available();
 800410a:	f7ff ff9c 	bl	8004046 <NRF24_available>
	NRF24_flush_tx();
 800410e:	f7ff fed9 	bl	8003ec4 <NRF24_flush_tx>
}
 8004112:	4628      	mov	r0, r5
 8004114:	b003      	add	sp, #12
 8004116:	bd30      	pop	{r4, r5, pc}
			&& (HAL_GetTick() - sent_at < timeout));
 8004118:	f7fc fb4c 	bl	80007b4 <HAL_GetTick>
 800411c:	1b00      	subs	r0, r0, r4
 800411e:	2809      	cmp	r0, #9
 8004120:	d9d8      	bls.n	80040d4 <NRF24_write+0x18>
 8004122:	e7e2      	b.n	80040ea <NRF24_write+0x2e>
 8004124:	200000a7 	.word	0x200000a7
 8004128:	200000a8 	.word	0x200000a8

0800412c <NRF24_ACTIVATE_cmd>:
	_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT));
}

//47. ACTIVATE cmd
void NRF24_ACTIVATE_cmd(void) {
 800412c:	b507      	push	{r0, r1, r2, lr}
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(0);
 800412e:	2000      	movs	r0, #0
 8004130:	f7ff fe1c 	bl	8003d6c <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 8004134:	2350      	movs	r3, #80	; 0x50
 8004136:	f88d 3004 	strb.w	r3, [sp, #4]
	cmdRxBuf[1] = 0x73;
 800413a:	2373      	movs	r3, #115	; 0x73
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2, 100);
 800413c:	2202      	movs	r2, #2
	cmdRxBuf[1] = 0x73;
 800413e:	f88d 3005 	strb.w	r3, [sp, #5]
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2, 100);
 8004142:	a901      	add	r1, sp, #4
 8004144:	2364      	movs	r3, #100	; 0x64
 8004146:	4804      	ldr	r0, [pc, #16]	; (8004158 <NRF24_ACTIVATE_cmd+0x2c>)
 8004148:	f7fe fad7 	bl	80026fa <HAL_SPI_Transmit>
 800414c:	f7ff fdf6 	bl	8003d3c <NRF24_csn.part.0>
	NRF24_csn(1);
}
 8004150:	b003      	add	sp, #12
 8004152:	f85d fb04 	ldr.w	pc, [sp], #4
 8004156:	bf00      	nop
 8004158:	200000b4 	.word	0x200000b4

0800415c <printRadioSettings>:
//48. Get AckPayload Size
uint8_t NRF24_GetAckPayloadSize(void) {
	return ack_payload_length;
}

void printRadioSettings(void) {
 800415c:	b510      	push	{r4, lr}
 800415e:	b0a0      	sub	sp, #128	; 0x80
	uint8_t reg8Val;
	char uartTxBuf[100];
	sprintf(uartTxBuf,
 8004160:	49bc      	ldr	r1, [pc, #752]	; (8004454 <printRadioSettings+0x2f8>)
 8004162:	a807      	add	r0, sp, #28
 8004164:	f001 fcac 	bl	8005ac0 <strcpy>
			"\r\n**********************************************\r\n");
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *) uartTxBuf, strlen(uartTxBuf),
 8004168:	a807      	add	r0, sp, #28
 800416a:	f7fc f85b 	bl	8000224 <strlen>
 800416e:	230a      	movs	r3, #10
 8004170:	b282      	uxth	r2, r0
 8004172:	a907      	add	r1, sp, #28
 8004174:	48b8      	ldr	r0, [pc, #736]	; (8004458 <printRadioSettings+0x2fc>)
 8004176:	f7fe ffc3 	bl	8003100 <HAL_UART_Transmit>
			10);
	//a) Get CRC settings - Config Register
	reg8Val = NRF24_read_register(0x00);
 800417a:	2000      	movs	r0, #0
 800417c:	f7ff fe12 	bl	8003da4 <NRF24_read_register>
	if (reg8Val & (1 << 3)) {
 8004180:	0704      	lsls	r4, r0, #28
 8004182:	f140 8230 	bpl.w	80045e6 <printRadioSettings+0x48a>
		if (reg8Val & (1 << 2))
 8004186:	0740      	lsls	r0, r0, #29
			sprintf(uartTxBuf, "CRC:\r\n		Enabled, 2 Bytes \r\n");
 8004188:	bf4c      	ite	mi
 800418a:	49b4      	ldrmi	r1, [pc, #720]	; (800445c <printRadioSettings+0x300>)
		else
			sprintf(uartTxBuf, "CRC:\r\n		Enabled, 1 Byte \r\n");
 800418c:	49b4      	ldrpl	r1, [pc, #720]	; (8004460 <printRadioSettings+0x304>)
	} else {
		sprintf(uartTxBuf, "CRC:\r\n		Disabled \r\n");
 800418e:	a807      	add	r0, sp, #28
 8004190:	f001 fc96 	bl	8005ac0 <strcpy>
	}
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *) uartTxBuf, strlen(uartTxBuf),
 8004194:	a807      	add	r0, sp, #28
 8004196:	f7fc f845 	bl	8000224 <strlen>
 800419a:	230a      	movs	r3, #10
 800419c:	b282      	uxth	r2, r0
 800419e:	a907      	add	r1, sp, #28
 80041a0:	48ad      	ldr	r0, [pc, #692]	; (8004458 <printRadioSettings+0x2fc>)
 80041a2:	f7fe ffad 	bl	8003100 <HAL_UART_Transmit>
			10);
	//b) AutoAck on pipes
	reg8Val = NRF24_read_register(0x01);
 80041a6:	2001      	movs	r0, #1
 80041a8:	f7ff fdfc 	bl	8003da4 <NRF24_read_register>
	sprintf(uartTxBuf,
 80041ac:	f3c0 1340 	ubfx	r3, r0, #5, #1
 80041b0:	9303      	str	r3, [sp, #12]
 80041b2:	f3c0 1300 	ubfx	r3, r0, #4, #1
 80041b6:	9302      	str	r3, [sp, #8]
 80041b8:	f3c0 03c0 	ubfx	r3, r0, #3, #1
 80041bc:	9301      	str	r3, [sp, #4]
 80041be:	f3c0 0380 	ubfx	r3, r0, #2, #1
 80041c2:	f000 0201 	and.w	r2, r0, #1
 80041c6:	49a7      	ldr	r1, [pc, #668]	; (8004464 <printRadioSettings+0x308>)
 80041c8:	9300      	str	r3, [sp, #0]
 80041ca:	f3c0 0340 	ubfx	r3, r0, #1, #1
 80041ce:	a807      	add	r0, sp, #28
 80041d0:	f001 fc52 	bl	8005a78 <siprintf>
			"ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
			_BOOL(reg8Val & (1 << 0)), _BOOL(reg8Val & (1 << 1)),
			_BOOL(reg8Val & (1 << 2)), _BOOL(reg8Val & (1 << 3)),
			_BOOL(reg8Val & (1 << 4)), _BOOL(reg8Val & (1 << 5)));
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *) uartTxBuf, strlen(uartTxBuf),
 80041d4:	a807      	add	r0, sp, #28
 80041d6:	f7fc f825 	bl	8000224 <strlen>
 80041da:	230a      	movs	r3, #10
 80041dc:	b282      	uxth	r2, r0
 80041de:	a907      	add	r1, sp, #28
 80041e0:	489d      	ldr	r0, [pc, #628]	; (8004458 <printRadioSettings+0x2fc>)
 80041e2:	f7fe ff8d 	bl	8003100 <HAL_UART_Transmit>
			10);
	//c) Enabled Rx addresses
	reg8Val = NRF24_read_register(0x02);
 80041e6:	2002      	movs	r0, #2
 80041e8:	f7ff fddc 	bl	8003da4 <NRF24_read_register>
	sprintf(uartTxBuf,
 80041ec:	f3c0 1340 	ubfx	r3, r0, #5, #1
 80041f0:	9303      	str	r3, [sp, #12]
 80041f2:	f3c0 1300 	ubfx	r3, r0, #4, #1
 80041f6:	9302      	str	r3, [sp, #8]
 80041f8:	f3c0 03c0 	ubfx	r3, r0, #3, #1
 80041fc:	9301      	str	r3, [sp, #4]
 80041fe:	f3c0 0380 	ubfx	r3, r0, #2, #1
 8004202:	f000 0201 	and.w	r2, r0, #1
 8004206:	4998      	ldr	r1, [pc, #608]	; (8004468 <printRadioSettings+0x30c>)
 8004208:	9300      	str	r3, [sp, #0]
 800420a:	f3c0 0340 	ubfx	r3, r0, #1, #1
 800420e:	a807      	add	r0, sp, #28
 8004210:	f001 fc32 	bl	8005a78 <siprintf>
			"EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
			_BOOL(reg8Val & (1 << 0)), _BOOL(reg8Val & (1 << 1)),
			_BOOL(reg8Val & (1 << 2)), _BOOL(reg8Val & (1 << 3)),
			_BOOL(reg8Val & (1 << 4)), _BOOL(reg8Val & (1 << 5)));
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *) uartTxBuf, strlen(uartTxBuf),
 8004214:	a807      	add	r0, sp, #28
 8004216:	f7fc f805 	bl	8000224 <strlen>
 800421a:	230a      	movs	r3, #10
 800421c:	b282      	uxth	r2, r0
 800421e:	a907      	add	r1, sp, #28
 8004220:	488d      	ldr	r0, [pc, #564]	; (8004458 <printRadioSettings+0x2fc>)
 8004222:	f7fe ff6d 	bl	8003100 <HAL_UART_Transmit>
			10);
	//d) Address width
	reg8Val = NRF24_read_register(0x03) & 0x03;
 8004226:	2003      	movs	r0, #3
 8004228:	f7ff fdbc 	bl	8003da4 <NRF24_read_register>
 800422c:	f000 0203 	and.w	r2, r0, #3
	reg8Val += 2;
	sprintf(uartTxBuf, "SETUP_AW:\r\n		%d bytes \r\n", reg8Val);
 8004230:	3202      	adds	r2, #2
 8004232:	498e      	ldr	r1, [pc, #568]	; (800446c <printRadioSettings+0x310>)
 8004234:	a807      	add	r0, sp, #28
 8004236:	f001 fc1f 	bl	8005a78 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *) uartTxBuf, strlen(uartTxBuf),
 800423a:	a807      	add	r0, sp, #28
 800423c:	f7fb fff2 	bl	8000224 <strlen>
 8004240:	230a      	movs	r3, #10
 8004242:	b282      	uxth	r2, r0
 8004244:	a907      	add	r1, sp, #28
 8004246:	4884      	ldr	r0, [pc, #528]	; (8004458 <printRadioSettings+0x2fc>)
 8004248:	f7fe ff5a 	bl	8003100 <HAL_UART_Transmit>
			10);
	//e) RF channel
	reg8Val = NRF24_read_register(0x05);
 800424c:	2005      	movs	r0, #5
 800424e:	f7ff fda9 	bl	8003da4 <NRF24_read_register>
	sprintf(uartTxBuf, "RF_CH:\r\n		%d CH \r\n", reg8Val & 0x7F);
 8004252:	4987      	ldr	r1, [pc, #540]	; (8004470 <printRadioSettings+0x314>)
 8004254:	f000 027f 	and.w	r2, r0, #127	; 0x7f
 8004258:	a807      	add	r0, sp, #28
 800425a:	f001 fc0d 	bl	8005a78 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *) uartTxBuf, strlen(uartTxBuf),
 800425e:	a807      	add	r0, sp, #28
 8004260:	f7fb ffe0 	bl	8000224 <strlen>
 8004264:	a907      	add	r1, sp, #28
 8004266:	b282      	uxth	r2, r0
 8004268:	230a      	movs	r3, #10
 800426a:	487b      	ldr	r0, [pc, #492]	; (8004458 <printRadioSettings+0x2fc>)
 800426c:	f7fe ff48 	bl	8003100 <HAL_UART_Transmit>
			10);
	//f) Data rate & RF_PWR
	reg8Val = NRF24_read_register(0x06);
 8004270:	2006      	movs	r0, #6
 8004272:	f7ff fd97 	bl	8003da4 <NRF24_read_register>
	if (reg8Val & (1 << 3))
 8004276:	0701      	lsls	r1, r0, #28
		sprintf(uartTxBuf, "Data Rate:\r\n		2Mbps \r\n");
 8004278:	bf4c      	ite	mi
 800427a:	497e      	ldrmi	r1, [pc, #504]	; (8004474 <printRadioSettings+0x318>)
	else
		sprintf(uartTxBuf, "Data Rate:\r\n		1Mbps \r\n");
 800427c:	497e      	ldrpl	r1, [pc, #504]	; (8004478 <printRadioSettings+0x31c>)
	reg8Val = NRF24_read_register(0x06);
 800427e:	4604      	mov	r4, r0
		sprintf(uartTxBuf, "Data Rate:\r\n		1Mbps \r\n");
 8004280:	a807      	add	r0, sp, #28
 8004282:	f001 fc1d 	bl	8005ac0 <strcpy>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *) uartTxBuf, strlen(uartTxBuf),
 8004286:	a807      	add	r0, sp, #28
 8004288:	f7fb ffcc 	bl	8000224 <strlen>
			10);
	reg8Val &= (3 << 1);
	reg8Val = (reg8Val >> 1);
 800428c:	f3c4 0441 	ubfx	r4, r4, #1, #2
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *) uartTxBuf, strlen(uartTxBuf),
 8004290:	b282      	uxth	r2, r0
 8004292:	230a      	movs	r3, #10
 8004294:	a907      	add	r1, sp, #28
 8004296:	4870      	ldr	r0, [pc, #448]	; (8004458 <printRadioSettings+0x2fc>)
 8004298:	f7fe ff32 	bl	8003100 <HAL_UART_Transmit>
	if (reg8Val == 0)
 800429c:	2c00      	cmp	r4, #0
 800429e:	f040 81a4 	bne.w	80045ea <printRadioSettings+0x48e>
		sprintf(uartTxBuf, "RF_PWR:\r\n		-18dB \r\n");
 80042a2:	4976      	ldr	r1, [pc, #472]	; (800447c <printRadioSettings+0x320>)
	else if (reg8Val == 1)
		sprintf(uartTxBuf, "RF_PWR:\r\n		-12dB \r\n");
	else if (reg8Val == 2)
		sprintf(uartTxBuf, "RF_PWR:\r\n		-6dB \r\n");
	else if (reg8Val == 3)
		sprintf(uartTxBuf, "RF_PWR:\r\n		0dB \r\n");
 80042a4:	a807      	add	r0, sp, #28
 80042a6:	f001 fc0b 	bl	8005ac0 <strcpy>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *) uartTxBuf, strlen(uartTxBuf),
 80042aa:	a807      	add	r0, sp, #28
 80042ac:	f7fb ffba 	bl	8000224 <strlen>
 80042b0:	230a      	movs	r3, #10
 80042b2:	b282      	uxth	r2, r0
 80042b4:	a907      	add	r1, sp, #28
 80042b6:	4868      	ldr	r0, [pc, #416]	; (8004458 <printRadioSettings+0x2fc>)
 80042b8:	f7fe ff22 	bl	8003100 <HAL_UART_Transmit>
			10);
	//g) RX pipes addresses
	uint8_t pipeAddrs[6];
	NRF24_read_registerN(0x0A, pipeAddrs, 5);
 80042bc:	a905      	add	r1, sp, #20
 80042be:	2205      	movs	r2, #5
 80042c0:	200a      	movs	r0, #10
 80042c2:	f7ff fd8f 	bl	8003de4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe0 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n",
 80042c6:	f89d 1014 	ldrb.w	r1, [sp, #20]
 80042ca:	f89d 3017 	ldrb.w	r3, [sp, #23]
 80042ce:	9102      	str	r1, [sp, #8]
 80042d0:	f89d 1015 	ldrb.w	r1, [sp, #21]
 80042d4:	f89d 2018 	ldrb.w	r2, [sp, #24]
 80042d8:	9101      	str	r1, [sp, #4]
 80042da:	f89d 1016 	ldrb.w	r1, [sp, #22]
 80042de:	a807      	add	r0, sp, #28
 80042e0:	9100      	str	r1, [sp, #0]
 80042e2:	4967      	ldr	r1, [pc, #412]	; (8004480 <printRadioSettings+0x324>)
 80042e4:	f001 fbc8 	bl	8005a78 <siprintf>
			pipeAddrs[4], pipeAddrs[3], pipeAddrs[2], pipeAddrs[1],
			pipeAddrs[0]);
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *) uartTxBuf, strlen(uartTxBuf),
 80042e8:	a807      	add	r0, sp, #28
 80042ea:	f7fb ff9b 	bl	8000224 <strlen>
 80042ee:	230a      	movs	r3, #10
 80042f0:	b282      	uxth	r2, r0
 80042f2:	a907      	add	r1, sp, #28
 80042f4:	4858      	ldr	r0, [pc, #352]	; (8004458 <printRadioSettings+0x2fc>)
 80042f6:	f7fe ff03 	bl	8003100 <HAL_UART_Transmit>
			10);

	NRF24_read_registerN(0x0A + 1, pipeAddrs, 5);
 80042fa:	a905      	add	r1, sp, #20
 80042fc:	2205      	movs	r2, #5
 80042fe:	200b      	movs	r0, #11
 8004300:	f7ff fd70 	bl	8003de4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe1 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n",
 8004304:	f89d 1014 	ldrb.w	r1, [sp, #20]
 8004308:	f89d 3017 	ldrb.w	r3, [sp, #23]
 800430c:	9102      	str	r1, [sp, #8]
 800430e:	f89d 1015 	ldrb.w	r1, [sp, #21]
 8004312:	f89d 2018 	ldrb.w	r2, [sp, #24]
 8004316:	9101      	str	r1, [sp, #4]
 8004318:	f89d 1016 	ldrb.w	r1, [sp, #22]
 800431c:	a807      	add	r0, sp, #28
 800431e:	9100      	str	r1, [sp, #0]
 8004320:	4958      	ldr	r1, [pc, #352]	; (8004484 <printRadioSettings+0x328>)
 8004322:	f001 fba9 	bl	8005a78 <siprintf>
			pipeAddrs[4], pipeAddrs[3], pipeAddrs[2], pipeAddrs[1],
			pipeAddrs[0]);
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *) uartTxBuf, strlen(uartTxBuf),
 8004326:	a807      	add	r0, sp, #28
 8004328:	f7fb ff7c 	bl	8000224 <strlen>
 800432c:	230a      	movs	r3, #10
 800432e:	b282      	uxth	r2, r0
 8004330:	a907      	add	r1, sp, #28
 8004332:	4849      	ldr	r0, [pc, #292]	; (8004458 <printRadioSettings+0x2fc>)
 8004334:	f7fe fee4 	bl	8003100 <HAL_UART_Transmit>
			10);

	NRF24_read_registerN(0x0A + 2, pipeAddrs, 1);
 8004338:	a905      	add	r1, sp, #20
 800433a:	2201      	movs	r2, #1
 800433c:	200c      	movs	r0, #12
 800433e:	f7ff fd51 	bl	8003de4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe2 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n",
 8004342:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8004346:	4950      	ldr	r1, [pc, #320]	; (8004488 <printRadioSettings+0x32c>)
 8004348:	a807      	add	r0, sp, #28
 800434a:	f001 fb95 	bl	8005a78 <siprintf>
			pipeAddrs[0]);
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *) uartTxBuf, strlen(uartTxBuf),
 800434e:	a807      	add	r0, sp, #28
 8004350:	f7fb ff68 	bl	8000224 <strlen>
 8004354:	230a      	movs	r3, #10
 8004356:	b282      	uxth	r2, r0
 8004358:	a907      	add	r1, sp, #28
 800435a:	483f      	ldr	r0, [pc, #252]	; (8004458 <printRadioSettings+0x2fc>)
 800435c:	f7fe fed0 	bl	8003100 <HAL_UART_Transmit>
			10);

	NRF24_read_registerN(0x0A + 3, pipeAddrs, 1);
 8004360:	a905      	add	r1, sp, #20
 8004362:	2201      	movs	r2, #1
 8004364:	200d      	movs	r0, #13
 8004366:	f7ff fd3d 	bl	8003de4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe3 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n",
 800436a:	f89d 2014 	ldrb.w	r2, [sp, #20]
 800436e:	4947      	ldr	r1, [pc, #284]	; (800448c <printRadioSettings+0x330>)
 8004370:	a807      	add	r0, sp, #28
 8004372:	f001 fb81 	bl	8005a78 <siprintf>
			pipeAddrs[0]);
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *) uartTxBuf, strlen(uartTxBuf),
 8004376:	a807      	add	r0, sp, #28
 8004378:	f7fb ff54 	bl	8000224 <strlen>
 800437c:	230a      	movs	r3, #10
 800437e:	b282      	uxth	r2, r0
 8004380:	a907      	add	r1, sp, #28
 8004382:	4835      	ldr	r0, [pc, #212]	; (8004458 <printRadioSettings+0x2fc>)
 8004384:	f7fe febc 	bl	8003100 <HAL_UART_Transmit>
			10);

	NRF24_read_registerN(0x0A + 4, pipeAddrs, 1);
 8004388:	a905      	add	r1, sp, #20
 800438a:	2201      	movs	r2, #1
 800438c:	200e      	movs	r0, #14
 800438e:	f7ff fd29 	bl	8003de4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe4 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n",
 8004392:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8004396:	493e      	ldr	r1, [pc, #248]	; (8004490 <printRadioSettings+0x334>)
 8004398:	a807      	add	r0, sp, #28
 800439a:	f001 fb6d 	bl	8005a78 <siprintf>
			pipeAddrs[0]);
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *) uartTxBuf, strlen(uartTxBuf),
 800439e:	a807      	add	r0, sp, #28
 80043a0:	f7fb ff40 	bl	8000224 <strlen>
 80043a4:	230a      	movs	r3, #10
 80043a6:	b282      	uxth	r2, r0
 80043a8:	a907      	add	r1, sp, #28
 80043aa:	482b      	ldr	r0, [pc, #172]	; (8004458 <printRadioSettings+0x2fc>)
 80043ac:	f7fe fea8 	bl	8003100 <HAL_UART_Transmit>
			10);

	NRF24_read_registerN(0x0A + 5, pipeAddrs, 1);
 80043b0:	a905      	add	r1, sp, #20
 80043b2:	2201      	movs	r2, #1
 80043b4:	200f      	movs	r0, #15
 80043b6:	f7ff fd15 	bl	8003de4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe5 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n",
 80043ba:	f89d 2014 	ldrb.w	r2, [sp, #20]
 80043be:	4935      	ldr	r1, [pc, #212]	; (8004494 <printRadioSettings+0x338>)
 80043c0:	a807      	add	r0, sp, #28
 80043c2:	f001 fb59 	bl	8005a78 <siprintf>
			pipeAddrs[0]);
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *) uartTxBuf, strlen(uartTxBuf),
 80043c6:	a807      	add	r0, sp, #28
 80043c8:	f7fb ff2c 	bl	8000224 <strlen>
 80043cc:	230a      	movs	r3, #10
 80043ce:	b282      	uxth	r2, r0
 80043d0:	a907      	add	r1, sp, #28
 80043d2:	4821      	ldr	r0, [pc, #132]	; (8004458 <printRadioSettings+0x2fc>)
 80043d4:	f7fe fe94 	bl	8003100 <HAL_UART_Transmit>
			10);

	NRF24_read_registerN(0x0A + 6, pipeAddrs, 5);
 80043d8:	a905      	add	r1, sp, #20
 80043da:	2205      	movs	r2, #5
 80043dc:	2010      	movs	r0, #16
 80043de:	f7ff fd01 	bl	8003de4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "TX Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n",
 80043e2:	f89d 1014 	ldrb.w	r1, [sp, #20]
 80043e6:	f89d 3017 	ldrb.w	r3, [sp, #23]
 80043ea:	9102      	str	r1, [sp, #8]
 80043ec:	f89d 1015 	ldrb.w	r1, [sp, #21]
 80043f0:	f89d 2018 	ldrb.w	r2, [sp, #24]
 80043f4:	9101      	str	r1, [sp, #4]
 80043f6:	f89d 1016 	ldrb.w	r1, [sp, #22]
 80043fa:	a807      	add	r0, sp, #28
 80043fc:	9100      	str	r1, [sp, #0]
 80043fe:	4926      	ldr	r1, [pc, #152]	; (8004498 <printRadioSettings+0x33c>)
 8004400:	f001 fb3a 	bl	8005a78 <siprintf>
			pipeAddrs[4], pipeAddrs[3], pipeAddrs[2], pipeAddrs[1],
			pipeAddrs[0]);
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *) uartTxBuf, strlen(uartTxBuf),
 8004404:	a807      	add	r0, sp, #28
 8004406:	f7fb ff0d 	bl	8000224 <strlen>
 800440a:	230a      	movs	r3, #10
 800440c:	b282      	uxth	r2, r0
 800440e:	a907      	add	r1, sp, #28
 8004410:	4811      	ldr	r0, [pc, #68]	; (8004458 <printRadioSettings+0x2fc>)
 8004412:	f7fe fe75 	bl	8003100 <HAL_UART_Transmit>
			10);

	//h) RX PW (Payload Width 0 - 32)
	reg8Val = NRF24_read_register(0x11);
 8004416:	2011      	movs	r0, #17
 8004418:	f7ff fcc4 	bl	8003da4 <NRF24_read_register>
	sprintf(uartTxBuf, "RX_PW_P0:\r\n		%d bytes \r\n", reg8Val & 0x3F);
 800441c:	491f      	ldr	r1, [pc, #124]	; (800449c <printRadioSettings+0x340>)
 800441e:	f000 023f 	and.w	r2, r0, #63	; 0x3f
 8004422:	a807      	add	r0, sp, #28
 8004424:	f001 fb28 	bl	8005a78 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *) uartTxBuf, strlen(uartTxBuf),
 8004428:	a807      	add	r0, sp, #28
 800442a:	f7fb fefb 	bl	8000224 <strlen>
 800442e:	230a      	movs	r3, #10
 8004430:	b282      	uxth	r2, r0
 8004432:	a907      	add	r1, sp, #28
 8004434:	4808      	ldr	r0, [pc, #32]	; (8004458 <printRadioSettings+0x2fc>)
 8004436:	f7fe fe63 	bl	8003100 <HAL_UART_Transmit>
			10);

	reg8Val = NRF24_read_register(0x11 + 1);
 800443a:	2012      	movs	r0, #18
 800443c:	f7ff fcb2 	bl	8003da4 <NRF24_read_register>
	sprintf(uartTxBuf, "RX_PW_P1:\r\n		%d bytes \r\n", reg8Val & 0x3F);
 8004440:	4917      	ldr	r1, [pc, #92]	; (80044a0 <printRadioSettings+0x344>)
 8004442:	f000 023f 	and.w	r2, r0, #63	; 0x3f
 8004446:	a807      	add	r0, sp, #28
 8004448:	f001 fb16 	bl	8005a78 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *) uartTxBuf, strlen(uartTxBuf),
 800444c:	a807      	add	r0, sp, #28
 800444e:	f7fb fee9 	bl	8000224 <strlen>
 8004452:	e027      	b.n	80044a4 <printRadioSettings+0x348>
 8004454:	0800743c 	.word	0x0800743c
 8004458:	2000010c 	.word	0x2000010c
 800445c:	0800746f 	.word	0x0800746f
 8004460:	0800748b 	.word	0x0800748b
 8004464:	080074ba 	.word	0x080074ba
 8004468:	080074fe 	.word	0x080074fe
 800446c:	08007547 	.word	0x08007547
 8004470:	08007560 	.word	0x08007560
 8004474:	08007573 	.word	0x08007573
 8004478:	0800758a 	.word	0x0800758a
 800447c:	080075a1 	.word	0x080075a1
 8004480:	080075ee 	.word	0x080075ee
 8004484:	0800761e 	.word	0x0800761e
 8004488:	0800764e 	.word	0x0800764e
 800448c:	08007676 	.word	0x08007676
 8004490:	0800769e 	.word	0x0800769e
 8004494:	080076c6 	.word	0x080076c6
 8004498:	080076ee 	.word	0x080076ee
 800449c:	08007718 	.word	0x08007718
 80044a0:	08007731 	.word	0x08007731
 80044a4:	230a      	movs	r3, #10
 80044a6:	b282      	uxth	r2, r0
 80044a8:	a907      	add	r1, sp, #28
 80044aa:	4854      	ldr	r0, [pc, #336]	; (80045fc <printRadioSettings+0x4a0>)
 80044ac:	f7fe fe28 	bl	8003100 <HAL_UART_Transmit>
			10);

	reg8Val = NRF24_read_register(0x11 + 2);
 80044b0:	2013      	movs	r0, #19
 80044b2:	f7ff fc77 	bl	8003da4 <NRF24_read_register>
	sprintf(uartTxBuf, "RX_PW_P2:\r\n		%d bytes \r\n", reg8Val & 0x3F);
 80044b6:	4952      	ldr	r1, [pc, #328]	; (8004600 <printRadioSettings+0x4a4>)
 80044b8:	f000 023f 	and.w	r2, r0, #63	; 0x3f
 80044bc:	a807      	add	r0, sp, #28
 80044be:	f001 fadb 	bl	8005a78 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *) uartTxBuf, strlen(uartTxBuf),
 80044c2:	a807      	add	r0, sp, #28
 80044c4:	f7fb feae 	bl	8000224 <strlen>
 80044c8:	230a      	movs	r3, #10
 80044ca:	b282      	uxth	r2, r0
 80044cc:	a907      	add	r1, sp, #28
 80044ce:	484b      	ldr	r0, [pc, #300]	; (80045fc <printRadioSettings+0x4a0>)
 80044d0:	f7fe fe16 	bl	8003100 <HAL_UART_Transmit>
			10);

	reg8Val = NRF24_read_register(0x11 + 3);
 80044d4:	2014      	movs	r0, #20
 80044d6:	f7ff fc65 	bl	8003da4 <NRF24_read_register>
	sprintf(uartTxBuf, "RX_PW_P3:\r\n		%d bytes \r\n", reg8Val & 0x3F);
 80044da:	494a      	ldr	r1, [pc, #296]	; (8004604 <printRadioSettings+0x4a8>)
 80044dc:	f000 023f 	and.w	r2, r0, #63	; 0x3f
 80044e0:	a807      	add	r0, sp, #28
 80044e2:	f001 fac9 	bl	8005a78 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *) uartTxBuf, strlen(uartTxBuf),
 80044e6:	a807      	add	r0, sp, #28
 80044e8:	f7fb fe9c 	bl	8000224 <strlen>
 80044ec:	230a      	movs	r3, #10
 80044ee:	b282      	uxth	r2, r0
 80044f0:	a907      	add	r1, sp, #28
 80044f2:	4842      	ldr	r0, [pc, #264]	; (80045fc <printRadioSettings+0x4a0>)
 80044f4:	f7fe fe04 	bl	8003100 <HAL_UART_Transmit>
			10);

	reg8Val = NRF24_read_register(0x11 + 4);
 80044f8:	2015      	movs	r0, #21
 80044fa:	f7ff fc53 	bl	8003da4 <NRF24_read_register>
	sprintf(uartTxBuf, "RX_PW_P4:\r\n		%d bytes \r\n", reg8Val & 0x3F);
 80044fe:	4942      	ldr	r1, [pc, #264]	; (8004608 <printRadioSettings+0x4ac>)
 8004500:	f000 023f 	and.w	r2, r0, #63	; 0x3f
 8004504:	a807      	add	r0, sp, #28
 8004506:	f001 fab7 	bl	8005a78 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *) uartTxBuf, strlen(uartTxBuf),
 800450a:	a807      	add	r0, sp, #28
 800450c:	f7fb fe8a 	bl	8000224 <strlen>
 8004510:	230a      	movs	r3, #10
 8004512:	b282      	uxth	r2, r0
 8004514:	a907      	add	r1, sp, #28
 8004516:	4839      	ldr	r0, [pc, #228]	; (80045fc <printRadioSettings+0x4a0>)
 8004518:	f7fe fdf2 	bl	8003100 <HAL_UART_Transmit>
			10);

	reg8Val = NRF24_read_register(0x11 + 5);
 800451c:	2016      	movs	r0, #22
 800451e:	f7ff fc41 	bl	8003da4 <NRF24_read_register>
	sprintf(uartTxBuf, "RX_PW_P5:\r\n		%d bytes \r\n", reg8Val & 0x3F);
 8004522:	493a      	ldr	r1, [pc, #232]	; (800460c <printRadioSettings+0x4b0>)
 8004524:	f000 023f 	and.w	r2, r0, #63	; 0x3f
 8004528:	a807      	add	r0, sp, #28
 800452a:	f001 faa5 	bl	8005a78 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *) uartTxBuf, strlen(uartTxBuf),
 800452e:	a807      	add	r0, sp, #28
 8004530:	f7fb fe78 	bl	8000224 <strlen>
 8004534:	a907      	add	r1, sp, #28
 8004536:	b282      	uxth	r2, r0
 8004538:	230a      	movs	r3, #10
 800453a:	4830      	ldr	r0, [pc, #192]	; (80045fc <printRadioSettings+0x4a0>)
 800453c:	f7fe fde0 	bl	8003100 <HAL_UART_Transmit>
			10);

	//i) Dynamic payload enable for each pipe
	reg8Val = NRF24_read_register(0x1c);
 8004540:	201c      	movs	r0, #28
 8004542:	f7ff fc2f 	bl	8003da4 <NRF24_read_register>
	sprintf(uartTxBuf,
 8004546:	f3c0 1340 	ubfx	r3, r0, #5, #1
 800454a:	9303      	str	r3, [sp, #12]
 800454c:	f3c0 1300 	ubfx	r3, r0, #4, #1
 8004550:	9302      	str	r3, [sp, #8]
 8004552:	f3c0 03c0 	ubfx	r3, r0, #3, #1
 8004556:	9301      	str	r3, [sp, #4]
 8004558:	f3c0 0380 	ubfx	r3, r0, #2, #1
 800455c:	f000 0201 	and.w	r2, r0, #1
 8004560:	9300      	str	r3, [sp, #0]
 8004562:	492b      	ldr	r1, [pc, #172]	; (8004610 <printRadioSettings+0x4b4>)
 8004564:	f3c0 0340 	ubfx	r3, r0, #1, #1
 8004568:	a807      	add	r0, sp, #28
 800456a:	f001 fa85 	bl	8005a78 <siprintf>
			"DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
			_BOOL(reg8Val & (1 << 0)), _BOOL(reg8Val & (1 << 1)),
			_BOOL(reg8Val & (1 << 2)), _BOOL(reg8Val & (1 << 3)),
			_BOOL(reg8Val & (1 << 4)), _BOOL(reg8Val & (1 << 5)));
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *) uartTxBuf, strlen(uartTxBuf),
 800456e:	a807      	add	r0, sp, #28
 8004570:	f7fb fe58 	bl	8000224 <strlen>
 8004574:	a907      	add	r1, sp, #28
 8004576:	b282      	uxth	r2, r0
 8004578:	230a      	movs	r3, #10
 800457a:	4820      	ldr	r0, [pc, #128]	; (80045fc <printRadioSettings+0x4a0>)
 800457c:	f7fe fdc0 	bl	8003100 <HAL_UART_Transmit>
			10);

	//j) EN_DPL (is Dynamic payload feature enabled ?)
	reg8Val = NRF24_read_register(0x1d);
 8004580:	201d      	movs	r0, #29
 8004582:	f7ff fc0f 	bl	8003da4 <NRF24_read_register>
	if (reg8Val & (1 << 2))
 8004586:	0742      	lsls	r2, r0, #29
		sprintf(uartTxBuf, "EN_DPL:\r\n		Enabled \r\n");
 8004588:	bf4c      	ite	mi
 800458a:	4922      	ldrmi	r1, [pc, #136]	; (8004614 <printRadioSettings+0x4b8>)
	else
		sprintf(uartTxBuf, "EN_DPL:\r\n		Disabled \r\n");
 800458c:	4922      	ldrpl	r1, [pc, #136]	; (8004618 <printRadioSettings+0x4bc>)
	reg8Val = NRF24_read_register(0x1d);
 800458e:	4604      	mov	r4, r0
		sprintf(uartTxBuf, "EN_DPL:\r\n		Disabled \r\n");
 8004590:	a807      	add	r0, sp, #28
 8004592:	f001 fa95 	bl	8005ac0 <strcpy>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *) uartTxBuf, strlen(uartTxBuf),
 8004596:	a807      	add	r0, sp, #28
 8004598:	f7fb fe44 	bl	8000224 <strlen>
 800459c:	a907      	add	r1, sp, #28
 800459e:	230a      	movs	r3, #10
 80045a0:	b282      	uxth	r2, r0
 80045a2:	4816      	ldr	r0, [pc, #88]	; (80045fc <printRadioSettings+0x4a0>)
 80045a4:	f7fe fdac 	bl	8003100 <HAL_UART_Transmit>
			10);

	//k) EN_ACK_PAY
	if (reg8Val & (1 << 1))
 80045a8:	07a3      	lsls	r3, r4, #30
		sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Enabled \r\n");
 80045aa:	bf4c      	ite	mi
 80045ac:	491b      	ldrmi	r1, [pc, #108]	; (800461c <printRadioSettings+0x4c0>)
	else
		sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Disabled \r\n");
 80045ae:	491c      	ldrpl	r1, [pc, #112]	; (8004620 <printRadioSettings+0x4c4>)
 80045b0:	a807      	add	r0, sp, #28
 80045b2:	f001 fa85 	bl	8005ac0 <strcpy>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *) uartTxBuf, strlen(uartTxBuf),
 80045b6:	a807      	add	r0, sp, #28
 80045b8:	f7fb fe34 	bl	8000224 <strlen>
 80045bc:	230a      	movs	r3, #10
 80045be:	b282      	uxth	r2, r0
 80045c0:	a907      	add	r1, sp, #28
 80045c2:	480e      	ldr	r0, [pc, #56]	; (80045fc <printRadioSettings+0x4a0>)
 80045c4:	f7fe fd9c 	bl	8003100 <HAL_UART_Transmit>
			10);

	sprintf(uartTxBuf,
 80045c8:	4916      	ldr	r1, [pc, #88]	; (8004624 <printRadioSettings+0x4c8>)
 80045ca:	a807      	add	r0, sp, #28
 80045cc:	f001 fa78 	bl	8005ac0 <strcpy>
			"\r\n**********************************************\r\n");
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *) uartTxBuf, strlen(uartTxBuf),
 80045d0:	a807      	add	r0, sp, #28
 80045d2:	f7fb fe27 	bl	8000224 <strlen>
 80045d6:	230a      	movs	r3, #10
 80045d8:	b282      	uxth	r2, r0
 80045da:	a907      	add	r1, sp, #28
 80045dc:	4807      	ldr	r0, [pc, #28]	; (80045fc <printRadioSettings+0x4a0>)
 80045de:	f7fe fd8f 	bl	8003100 <HAL_UART_Transmit>
			10);
}
 80045e2:	b020      	add	sp, #128	; 0x80
 80045e4:	bd10      	pop	{r4, pc}
		sprintf(uartTxBuf, "CRC:\r\n		Disabled \r\n");
 80045e6:	4910      	ldr	r1, [pc, #64]	; (8004628 <printRadioSettings+0x4cc>)
 80045e8:	e5d1      	b.n	800418e <printRadioSettings+0x32>
	else if (reg8Val == 1)
 80045ea:	2c01      	cmp	r4, #1
 80045ec:	d101      	bne.n	80045f2 <printRadioSettings+0x496>
		sprintf(uartTxBuf, "RF_PWR:\r\n		-12dB \r\n");
 80045ee:	490f      	ldr	r1, [pc, #60]	; (800462c <printRadioSettings+0x4d0>)
 80045f0:	e658      	b.n	80042a4 <printRadioSettings+0x148>
	else if (reg8Val == 2)
 80045f2:	2c02      	cmp	r4, #2
		sprintf(uartTxBuf, "RF_PWR:\r\n		-6dB \r\n");
 80045f4:	bf0c      	ite	eq
 80045f6:	490e      	ldreq	r1, [pc, #56]	; (8004630 <printRadioSettings+0x4d4>)
		sprintf(uartTxBuf, "RF_PWR:\r\n		0dB \r\n");
 80045f8:	490e      	ldrne	r1, [pc, #56]	; (8004634 <printRadioSettings+0x4d8>)
 80045fa:	e653      	b.n	80042a4 <printRadioSettings+0x148>
 80045fc:	2000010c 	.word	0x2000010c
 8004600:	0800774a 	.word	0x0800774a
 8004604:	08007763 	.word	0x08007763
 8004608:	0800777c 	.word	0x0800777c
 800460c:	08007795 	.word	0x08007795
 8004610:	080077ae 	.word	0x080077ae
 8004614:	080077f8 	.word	0x080077f8
 8004618:	0800780e 	.word	0x0800780e
 800461c:	08007825 	.word	0x08007825
 8004620:	0800783f 	.word	0x0800783f
 8004624:	0800743c 	.word	0x0800743c
 8004628:	080074a6 	.word	0x080074a6
 800462c:	080075b5 	.word	0x080075b5
 8004630:	080075c9 	.word	0x080075c9
 8004634:	080075dc 	.word	0x080075dc

08004638 <NRF24_begin>:
		uint16_t nrfCE_Pin, SPI_HandleTypeDef nrfSPI) {
 8004638:	b082      	sub	sp, #8
 800463a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800463c:	4606      	mov	r6, r0
 800463e:	460d      	mov	r5, r1
 8004640:	4614      	mov	r4, r2
 8004642:	a906      	add	r1, sp, #24
	memcpy(&nrf24_hspi, &nrfSPI, sizeof(nrfSPI));
 8004644:	2258      	movs	r2, #88	; 0x58
		uint16_t nrfCE_Pin, SPI_HandleTypeDef nrfSPI) {
 8004646:	f841 3f04 	str.w	r3, [r1, #4]!
	memcpy(&nrf24_hspi, &nrfSPI, sizeof(nrfSPI));
 800464a:	485f      	ldr	r0, [pc, #380]	; (80047c8 <NRF24_begin+0x190>)
 800464c:	f001 f984 	bl	8005958 <memcpy>
	nrf24_PORT = nrf24PORT;
 8004650:	4b5e      	ldr	r3, [pc, #376]	; (80047cc <NRF24_begin+0x194>)
 8004652:	601e      	str	r6, [r3, #0]
	nrf24_CSN_PIN = nrfCSN_Pin;
 8004654:	4b5e      	ldr	r3, [pc, #376]	; (80047d0 <NRF24_begin+0x198>)
 8004656:	801d      	strh	r5, [r3, #0]
	nrf24_CE_PIN = nrfCE_Pin;
 8004658:	4b5e      	ldr	r3, [pc, #376]	; (80047d4 <NRF24_begin+0x19c>)
	pipeAddrVar[0] = 0xE7;
 800465a:	ad02      	add	r5, sp, #8
	nrf24_CE_PIN = nrfCE_Pin;
 800465c:	801c      	strh	r4, [r3, #0]
 800465e:	f7ff fb6d 	bl	8003d3c <NRF24_csn.part.0>
	NRF24_ce(0);
 8004662:	2000      	movs	r0, #0
 8004664:	f7ff fb90 	bl	8003d88 <NRF24_ce>
	HAL_Delay(5);
 8004668:	2005      	movs	r0, #5
 800466a:	f7fc f8a9 	bl	80007c0 <HAL_Delay>
	NRF24_write_register(0x00, 0x08);
 800466e:	2108      	movs	r1, #8
 8004670:	2000      	movs	r0, #0
 8004672:	f7ff fbd5 	bl	8003e20 <NRF24_write_register>
	NRF24_write_register(0x01, 0x3f);
 8004676:	213f      	movs	r1, #63	; 0x3f
 8004678:	2001      	movs	r0, #1
 800467a:	f7ff fbd1 	bl	8003e20 <NRF24_write_register>
	NRF24_write_register(0x02, 0x03);
 800467e:	2103      	movs	r1, #3
 8004680:	2002      	movs	r0, #2
 8004682:	f7ff fbcd 	bl	8003e20 <NRF24_write_register>
	NRF24_write_register(0x03, 0x03);
 8004686:	2103      	movs	r1, #3
	pipeAddrVar[4] = 0xE7;
 8004688:	24e7      	movs	r4, #231	; 0xe7
	NRF24_write_register(0x03, 0x03);
 800468a:	4608      	mov	r0, r1
 800468c:	f7ff fbc8 	bl	8003e20 <NRF24_write_register>
	NRF24_write_register(0x04, 0x03);
 8004690:	2103      	movs	r1, #3
 8004692:	2004      	movs	r0, #4
 8004694:	f7ff fbc4 	bl	8003e20 <NRF24_write_register>
	NRF24_write_register(0x05, 0x02);
 8004698:	2102      	movs	r1, #2
 800469a:	2005      	movs	r0, #5
 800469c:	f7ff fbc0 	bl	8003e20 <NRF24_write_register>
	NRF24_write_register(0x06, 0x0f);
 80046a0:	210f      	movs	r1, #15
 80046a2:	2006      	movs	r0, #6
 80046a4:	f7ff fbbc 	bl	8003e20 <NRF24_write_register>
	NRF24_write_register(0x07, 0x0e);
 80046a8:	210e      	movs	r1, #14
 80046aa:	2007      	movs	r0, #7
 80046ac:	f7ff fbb8 	bl	8003e20 <NRF24_write_register>
	NRF24_write_register(0x08, 0x00);
 80046b0:	2100      	movs	r1, #0
 80046b2:	2008      	movs	r0, #8
 80046b4:	f7ff fbb4 	bl	8003e20 <NRF24_write_register>
	NRF24_write_register(0x09, 0x00);
 80046b8:	2100      	movs	r1, #0
 80046ba:	2009      	movs	r0, #9
 80046bc:	f7ff fbb0 	bl	8003e20 <NRF24_write_register>
	pipeAddrVar[0] = 0xE7;
 80046c0:	f805 4d08 	strb.w	r4, [r5, #-8]!
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 80046c4:	4629      	mov	r1, r5
 80046c6:	2205      	movs	r2, #5
 80046c8:	200a      	movs	r0, #10
	pipeAddrVar[4] = 0xE7;
 80046ca:	f88d 4004 	strb.w	r4, [sp, #4]
	pipeAddrVar[3] = 0xE7;
 80046ce:	f88d 4003 	strb.w	r4, [sp, #3]
	pipeAddrVar[2] = 0xE7;
 80046d2:	f88d 4002 	strb.w	r4, [sp, #2]
	pipeAddrVar[1] = 0xE7;
 80046d6:	f88d 4001 	strb.w	r4, [sp, #1]
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 80046da:	f7ff fbb9 	bl	8003e50 <NRF24_write_registerN>
	pipeAddrVar[4] = 0xC2;
 80046de:	23c2      	movs	r3, #194	; 0xc2
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 80046e0:	2205      	movs	r2, #5
 80046e2:	4629      	mov	r1, r5
 80046e4:	200b      	movs	r0, #11
	pipeAddrVar[4] = 0xC2;
 80046e6:	f88d 3004 	strb.w	r3, [sp, #4]
	pipeAddrVar[3] = 0xC2;
 80046ea:	f88d 3003 	strb.w	r3, [sp, #3]
	pipeAddrVar[2] = 0xC2;
 80046ee:	f88d 3002 	strb.w	r3, [sp, #2]
	pipeAddrVar[1] = 0xC2;
 80046f2:	f88d 3001 	strb.w	r3, [sp, #1]
	pipeAddrVar[0] = 0xC2;
 80046f6:	f88d 3000 	strb.w	r3, [sp]
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 80046fa:	f7ff fba9 	bl	8003e50 <NRF24_write_registerN>
	NRF24_write_register(0x0C, 0xC3);
 80046fe:	21c3      	movs	r1, #195	; 0xc3
 8004700:	200c      	movs	r0, #12
 8004702:	f7ff fb8d 	bl	8003e20 <NRF24_write_register>
	NRF24_write_register(0x0D, 0xC4);
 8004706:	21c4      	movs	r1, #196	; 0xc4
 8004708:	200d      	movs	r0, #13
 800470a:	f7ff fb89 	bl	8003e20 <NRF24_write_register>
	NRF24_write_register(0x0E, 0xC5);
 800470e:	21c5      	movs	r1, #197	; 0xc5
 8004710:	200e      	movs	r0, #14
 8004712:	f7ff fb85 	bl	8003e20 <NRF24_write_register>
	NRF24_write_register(0x0F, 0xC6);
 8004716:	21c6      	movs	r1, #198	; 0xc6
 8004718:	200f      	movs	r0, #15
 800471a:	f7ff fb81 	bl	8003e20 <NRF24_write_register>
	NRF24_write_registerN(0x10, pipeAddrVar, 5);
 800471e:	2205      	movs	r2, #5
 8004720:	4629      	mov	r1, r5
 8004722:	2010      	movs	r0, #16
	pipeAddrVar[4] = 0xE7;
 8004724:	f88d 4004 	strb.w	r4, [sp, #4]
	pipeAddrVar[3] = 0xE7;
 8004728:	f88d 4003 	strb.w	r4, [sp, #3]
	pipeAddrVar[2] = 0xE7;
 800472c:	f88d 4002 	strb.w	r4, [sp, #2]
	pipeAddrVar[1] = 0xE7;
 8004730:	f88d 4001 	strb.w	r4, [sp, #1]
	pipeAddrVar[0] = 0xE7;
 8004734:	f88d 4000 	strb.w	r4, [sp]
	NRF24_write_registerN(0x10, pipeAddrVar, 5);
 8004738:	f7ff fb8a 	bl	8003e50 <NRF24_write_registerN>
	NRF24_write_register(0x11, 0);
 800473c:	2100      	movs	r1, #0
 800473e:	2011      	movs	r0, #17
 8004740:	f7ff fb6e 	bl	8003e20 <NRF24_write_register>
	NRF24_write_register(0x12, 0);
 8004744:	2100      	movs	r1, #0
 8004746:	2012      	movs	r0, #18
 8004748:	f7ff fb6a 	bl	8003e20 <NRF24_write_register>
	NRF24_write_register(0x13, 0);
 800474c:	2100      	movs	r1, #0
 800474e:	2013      	movs	r0, #19
 8004750:	f7ff fb66 	bl	8003e20 <NRF24_write_register>
	NRF24_write_register(0x14, 0);
 8004754:	2100      	movs	r1, #0
 8004756:	2014      	movs	r0, #20
 8004758:	f7ff fb62 	bl	8003e20 <NRF24_write_register>
	NRF24_write_register(0x15, 0);
 800475c:	2100      	movs	r1, #0
 800475e:	2015      	movs	r0, #21
 8004760:	f7ff fb5e 	bl	8003e20 <NRF24_write_register>
	NRF24_write_register(0x16, 0);
 8004764:	2100      	movs	r1, #0
 8004766:	2016      	movs	r0, #22
 8004768:	f7ff fb5a 	bl	8003e20 <NRF24_write_register>
	NRF24_ACTIVATE_cmd();
 800476c:	f7ff fcde 	bl	800412c <NRF24_ACTIVATE_cmd>
	NRF24_write_register(0x1c, 0);
 8004770:	2100      	movs	r1, #0
 8004772:	201c      	movs	r0, #28
 8004774:	f7ff fb54 	bl	8003e20 <NRF24_write_register>
	NRF24_write_register(0x1d, 0);
 8004778:	2100      	movs	r1, #0
 800477a:	201d      	movs	r0, #29
 800477c:	f7ff fb50 	bl	8003e20 <NRF24_write_register>
	printRadioSettings();
 8004780:	f7ff fcec 	bl	800415c <printRadioSettings>
	NRF24_write_register(REG_SETUP_RETR,
 8004784:	21ff      	movs	r1, #255	; 0xff
 8004786:	2004      	movs	r0, #4
 8004788:	f7ff fb4a 	bl	8003e20 <NRF24_write_register>
	NRF24_setPALevel(RF24_PA_0dB);
 800478c:	2003      	movs	r0, #3
 800478e:	f7ff fbe8 	bl	8003f62 <NRF24_setPALevel>
	NRF24_setDataRate(RF24_2MBPS);
 8004792:	2001      	movs	r0, #1
 8004794:	f7ff fc02 	bl	8003f9c <NRF24_setDataRate>
	NRF24_setCRCLength(RF24_CRC_16);
 8004798:	2002      	movs	r0, #2
 800479a:	f7ff fc1a 	bl	8003fd2 <NRF24_setCRCLength>
	NRF24_disableDynamicPayloads();
 800479e:	f7ff fbcb 	bl	8003f38 <NRF24_disableDynamicPayloads>
	payload_size = MIN(size, max_payload_size);
 80047a2:	2220      	movs	r2, #32
 80047a4:	4b0c      	ldr	r3, [pc, #48]	; (80047d8 <NRF24_begin+0x1a0>)
 80047a6:	701a      	strb	r2, [r3, #0]
	NRF24_resetStatus();
 80047a8:	f7ff fc84 	bl	80040b4 <NRF24_resetStatus>
	NRF24_setChannel(76);
 80047ac:	204c      	movs	r0, #76	; 0x4c
 80047ae:	f7ff fbb9 	bl	8003f24 <NRF24_setChannel>
	NRF24_flush_tx();
 80047b2:	f7ff fb87 	bl	8003ec4 <NRF24_flush_tx>
	NRF24_flush_rx();
 80047b6:	f7ff fb89 	bl	8003ecc <NRF24_flush_rx>
	NRF24_powerDown();
 80047ba:	f7ff fc1d 	bl	8003ff8 <NRF24_powerDown>
}
 80047be:	b002      	add	sp, #8
 80047c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80047c4:	b002      	add	sp, #8
 80047c6:	4770      	bx	lr
 80047c8:	200000b4 	.word	0x200000b4
 80047cc:	200000b0 	.word	0x200000b0
 80047d0:	200000ac 	.word	0x200000ac
 80047d4:	200000aa 	.word	0x200000aa
 80047d8:	2000014c 	.word	0x2000014c

080047dc <nrf24_DebugUART_Init>:
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *) uartTxBuf, strlen(uartTxBuf),
			10);
}

//4. Init Variables
void nrf24_DebugUART_Init(UART_HandleTypeDef nrf24Uart) {
 80047dc:	b084      	sub	sp, #16
 80047de:	b530      	push	{r4, r5, lr}
 80047e0:	ac03      	add	r4, sp, #12
 80047e2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	memcpy(&nrf24_huart, &nrf24Uart, sizeof(nrf24Uart));
 80047e6:	4c08      	ldr	r4, [pc, #32]	; (8004808 <nrf24_DebugUART_Init+0x2c>)
 80047e8:	ad03      	add	r5, sp, #12
 80047ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80047ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80047ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80047f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80047f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80047f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80047f6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80047fa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80047fe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004802:	b004      	add	sp, #16
 8004804:	4770      	bx	lr
 8004806:	bf00      	nop
 8004808:	2000010c 	.word	0x2000010c

0800480c <initNRF24andPrintStatus>:
void initNRF24andPrintStatus(void) {
 800480c:	b570      	push	{r4, r5, r6, lr}
	NRF24_begin(CSN_GPIO_Port, CSN_Pin, CE_Pin, hspi1);
 800480e:	4c1c      	ldr	r4, [pc, #112]	; (8004880 <initNRF24andPrintStatus+0x74>)
void initNRF24andPrintStatus(void) {
 8004810:	b096      	sub	sp, #88	; 0x58
	NRF24_begin(CSN_GPIO_Port, CSN_Pin, CE_Pin, hspi1);
 8004812:	1d21      	adds	r1, r4, #4
 8004814:	2254      	movs	r2, #84	; 0x54
 8004816:	4668      	mov	r0, sp
 8004818:	f001 f89e 	bl	8005958 <memcpy>
 800481c:	6823      	ldr	r3, [r4, #0]
	nrf24_DebugUART_Init(DEBUG_UART);
 800481e:	466c      	mov	r4, sp
 8004820:	4e18      	ldr	r6, [pc, #96]	; (8004884 <initNRF24andPrintStatus+0x78>)
	NRF24_begin(CSN_GPIO_Port, CSN_Pin, CE_Pin, hspi1);
 8004822:	2210      	movs	r2, #16
 8004824:	2102      	movs	r1, #2
 8004826:	4818      	ldr	r0, [pc, #96]	; (8004888 <initNRF24andPrintStatus+0x7c>)
	nrf24_DebugUART_Init(DEBUG_UART);
 8004828:	f106 0510 	add.w	r5, r6, #16
	NRF24_begin(CSN_GPIO_Port, CSN_Pin, CE_Pin, hspi1);
 800482c:	f7ff ff04 	bl	8004638 <NRF24_begin>
	nrf24_DebugUART_Init(DEBUG_UART);
 8004830:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004832:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004834:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004836:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004838:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800483c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8004840:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8004844:	f7ff ffca 	bl	80047dc <nrf24_DebugUART_Init>
	NRF24_setAutoAck(false);
 8004848:	2000      	movs	r0, #0
 800484a:	f7ff fb84 	bl	8003f56 <NRF24_setAutoAck>
	NRF24_setChannel(52);
 800484e:	2034      	movs	r0, #52	; 0x34
 8004850:	f7ff fb68 	bl	8003f24 <NRF24_setChannel>
	payload_size = MIN(size, max_payload_size);
 8004854:	2220      	movs	r2, #32
 8004856:	4b0d      	ldr	r3, [pc, #52]	; (800488c <initNRF24andPrintStatus+0x80>)
 8004858:	701a      	strb	r2, [r3, #0]
	NRF24_stopListening();
 800485a:	f7ff fb3e 	bl	8003eda <NRF24_stopListening>
	NRF24_openWritingPipe(tx_pipe_adress.var);
 800485e:	4b0c      	ldr	r3, [pc, #48]	; (8004890 <initNRF24andPrintStatus+0x84>)
 8004860:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004864:	f7ff fb44 	bl	8003ef0 <NRF24_openWritingPipe>
	NRF24_setCRCLength(RF24_CRC_8);
 8004868:	2001      	movs	r0, #1
 800486a:	f7ff fbb2 	bl	8003fd2 <NRF24_setCRCLength>
	HAL_Delay(100);
 800486e:	2064      	movs	r0, #100	; 0x64
 8004870:	f7fb ffa6 	bl	80007c0 <HAL_Delay>
}
 8004874:	b016      	add	sp, #88	; 0x58
 8004876:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	printRadioSettings();
 800487a:	f7ff bc6f 	b.w	800415c <printRadioSettings>
 800487e:	bf00      	nop
 8004880:	20000818 	.word	0x20000818
 8004884:	200005fc 	.word	0x200005fc
 8004888:	40010800 	.word	0x40010800
 800488c:	2000014c 	.word	0x2000014c
 8004890:	20000018 	.word	0x20000018

08004894 <oledInit>:
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00 };

void oledInit(void) {
 8004894:	b508      	push	{r3, lr}

	HAL_GPIO_WritePin(OLED_PWR_GPIO_Port, OLED_PWR_Pin, SET);
 8004896:	2201      	movs	r2, #1
 8004898:	f44f 7180 	mov.w	r1, #256	; 0x100
 800489c:	4804      	ldr	r0, [pc, #16]	; (80048b0 <oledInit+0x1c>)
 800489e:	f7fc fc89 	bl	80011b4 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 80048a2:	2005      	movs	r0, #5
 80048a4:	f7fb ff8c 	bl	80007c0 <HAL_Delay>
	SSD1306_Init(); // initialize the diaply

}
 80048a8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	SSD1306_Init(); // initialize the diaply
 80048ac:	f000 bcec 	b.w	8005288 <SSD1306_Init>
 80048b0:	40010c00 	.word	0x40010c00

080048b4 <oledPrintInitScreen>:

void oledPrintInitScreen(void) {
 80048b4:	b570      	push	{r4, r5, r6, lr}
 80048b6:	b08a      	sub	sp, #40	; 0x28

	const char *firmawre_version = "1.2";

	char buffor_string[25];

	sprintf(buffor_string, "v%s %s", firmawre_version, __DATE__);
 80048b8:	4b27      	ldr	r3, [pc, #156]	; (8004958 <oledPrintInitScreen+0xa4>)
 80048ba:	4a28      	ldr	r2, [pc, #160]	; (800495c <oledPrintInitScreen+0xa8>)
 80048bc:	4928      	ldr	r1, [pc, #160]	; (8004960 <oledPrintInitScreen+0xac>)
 80048be:	a803      	add	r0, sp, #12

	SSD1306_Clear();

	SSD1306_DrawBitmap(0, 0, init_screen, 128, 64, 1);
 80048c0:	2401      	movs	r4, #1
	sprintf(buffor_string, "v%s %s", firmawre_version, __DATE__);
 80048c2:	f001 f8d9 	bl	8005a78 <siprintf>
	SSD1306_DrawBitmap(0, 0, init_screen, 128, 64, 1);
 80048c6:	2540      	movs	r5, #64	; 0x40
	SSD1306_Clear();
 80048c8:	f000 fcd6 	bl	8005278 <SSD1306_Clear>
	SSD1306_DrawBitmap(0, 0, init_screen, 128, 64, 1);
 80048cc:	2100      	movs	r1, #0
 80048ce:	9401      	str	r4, [sp, #4]
 80048d0:	4608      	mov	r0, r1
 80048d2:	9500      	str	r5, [sp, #0]
 80048d4:	2380      	movs	r3, #128	; 0x80
 80048d6:	4a23      	ldr	r2, [pc, #140]	; (8004964 <oledPrintInitScreen+0xb0>)
 80048d8:	f000 fad4 	bl	8004e84 <SSD1306_DrawBitmap>
	SSD1306_DrawRectangle(0, 0, 128, 64, 1);
 80048dc:	2100      	movs	r1, #0
 80048de:	462b      	mov	r3, r5
 80048e0:	2280      	movs	r2, #128	; 0x80
 80048e2:	4608      	mov	r0, r1
 80048e4:	9400      	str	r4, [sp, #0]
 80048e6:	f000 fc05 	bl	80050f4 <SSD1306_DrawRectangle>

	SSD1306_UpdateScreen(); // update screen
 80048ea:	f000 fca3 	bl	8005234 <SSD1306_UpdateScreen>
	HAL_Delay(2e3);
 80048ee:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80048f2:	f7fb ff65 	bl	80007c0 <HAL_Delay>

	SSD1306_Clear();
 80048f6:	f000 fcbf 	bl	8005278 <SSD1306_Clear>
	SSD1306_GotoXY(10, 10); // goto 10, 10
 80048fa:	210a      	movs	r1, #10
	SSD1306_Puts("RC_controler ", &Font_7x10, 1); // print Hello
 80048fc:	4e1a      	ldr	r6, [pc, #104]	; (8004968 <oledPrintInitScreen+0xb4>)
	SSD1306_GotoXY(10, 10); // goto 10, 10
 80048fe:	4608      	mov	r0, r1
 8004900:	f000 fb00 	bl	8004f04 <SSD1306_GotoXY>
	SSD1306_Puts("RC_controler ", &Font_7x10, 1); // print Hello
 8004904:	4622      	mov	r2, r4
 8004906:	4631      	mov	r1, r6
 8004908:	4818      	ldr	r0, [pc, #96]	; (800496c <oledPrintInitScreen+0xb8>)
 800490a:	f000 fb4d 	bl	8004fa8 <SSD1306_Puts>
	SSD1306_GotoXY(10, 22);
 800490e:	2116      	movs	r1, #22
 8004910:	200a      	movs	r0, #10
 8004912:	f000 faf7 	bl	8004f04 <SSD1306_GotoXY>
	SSD1306_Puts("by D.Wawerek", &Font_7x10, 1);
 8004916:	4622      	mov	r2, r4
 8004918:	4631      	mov	r1, r6
 800491a:	4815      	ldr	r0, [pc, #84]	; (8004970 <oledPrintInitScreen+0xbc>)
 800491c:	f000 fb44 	bl	8004fa8 <SSD1306_Puts>
	SSD1306_GotoXY(10, 34);
 8004920:	2122      	movs	r1, #34	; 0x22
 8004922:	200a      	movs	r0, #10
 8004924:	f000 faee 	bl	8004f04 <SSD1306_GotoXY>
	SSD1306_Puts(buffor_string, &Font_7x10, 1);
 8004928:	4622      	mov	r2, r4
 800492a:	4631      	mov	r1, r6
 800492c:	a803      	add	r0, sp, #12
 800492e:	f000 fb3b 	bl	8004fa8 <SSD1306_Puts>

	SSD1306_DrawRectangle(0, 0, 128, 64, 1); // nice border of a OLED
 8004932:	2100      	movs	r1, #0
 8004934:	462b      	mov	r3, r5
 8004936:	4608      	mov	r0, r1
 8004938:	2280      	movs	r2, #128	; 0x80
 800493a:	9400      	str	r4, [sp, #0]
 800493c:	f000 fbda 	bl	80050f4 <SSD1306_DrawRectangle>
	SSD1306_UpdateScreen(); // update screen
 8004940:	f000 fc78 	bl	8005234 <SSD1306_UpdateScreen>
	HAL_Delay(1e3);
 8004944:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004948:	f7fb ff3a 	bl	80007c0 <HAL_Delay>
	SSD1306_Clear();
 800494c:	f000 fc94 	bl	8005278 <SSD1306_Clear>
	SSD1306_UpdateScreen();
 8004950:	f000 fc70 	bl	8005234 <SSD1306_UpdateScreen>

}
 8004954:	b00a      	add	sp, #40	; 0x28
 8004956:	bd70      	pop	{r4, r5, r6, pc}
 8004958:	08007cd3 	.word	0x08007cd3
 800495c:	08007cdf 	.word	0x08007cdf
 8004960:	08007ce3 	.word	0x08007ce3
 8004964:	0800785a 	.word	0x0800785a
 8004968:	20000008 	.word	0x20000008
 800496c:	08007cea 	.word	0x08007cea
 8004970:	08007cf8 	.word	0x08007cf8

08004974 <oledDrawValueBars>:

void oledDrawValueBars(uint16_t value1, uint16_t value2, uint16_t value3,
		uint16_t value4, uint8_t start_number) {
 8004974:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004978:	4604      	mov	r4, r0
	// konwersja na wartosci z zakresu od 0 do 100;
	uint8_t divider = 10;

	uint8_t value1_u8 = (value1 - 1000) / divider;
 800497a:	f04f 080a 	mov.w	r8, #10
		uint16_t value4, uint8_t start_number) {
 800497e:	b087      	sub	sp, #28
 8004980:	f89d 5040 	ldrb.w	r5, [sp, #64]	; 0x40
//	sprintf(buffor_string, "%1d", start_number);
	//Draws 4 bars representing given values on screen. There is no clear function to avoid screen flushing(???)
	// As for now position of bars is chosed exprerimetnaly
	//1. BAR
	SSD1306_GotoXY(3, 5); // goto 10, 10
	sprintf(buffor_string, "%1d: ", start_number++);
 8004984:	f8df a0f8 	ldr.w	sl, [pc, #248]	; 8004a80 <oledDrawValueBars+0x10c>
	SSD1306_Fill(0);
 8004988:	2000      	movs	r0, #0
		uint16_t value4, uint8_t start_number) {
 800498a:	461e      	mov	r6, r3
 800498c:	4617      	mov	r7, r2
	SSD1306_Puts(buffor_string, &Font_7x10, 1);
 800498e:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 8004a84 <oledDrawValueBars+0x110>
		uint16_t value4, uint8_t start_number) {
 8004992:	468b      	mov	fp, r1
	SSD1306_Fill(0);
 8004994:	f000 fa46 	bl	8004e24 <SSD1306_Fill>
	SSD1306_GotoXY(3, 5); // goto 10, 10
 8004998:	2105      	movs	r1, #5
 800499a:	2003      	movs	r0, #3
 800499c:	f000 fab2 	bl	8004f04 <SSD1306_GotoXY>
	sprintf(buffor_string, "%1d: ", start_number++);
 80049a0:	462a      	mov	r2, r5
 80049a2:	4651      	mov	r1, sl
 80049a4:	a802      	add	r0, sp, #8
 80049a6:	f001 f867 	bl	8005a78 <siprintf>
	SSD1306_Puts(buffor_string, &Font_7x10, 1);
 80049aa:	4649      	mov	r1, r9
 80049ac:	2201      	movs	r2, #1
 80049ae:	a802      	add	r0, sp, #8
 80049b0:	f000 fafa 	bl	8004fa8 <SSD1306_Puts>
	uint8_t value1_u8 = (value1 - 1000) / divider;
 80049b4:	f5a4 727a 	sub.w	r2, r4, #1000	; 0x3e8
 80049b8:	fb92 f2f8 	sdiv	r2, r2, r8
	SSD1306_DrawFilledRectangle(20, 5, value1_u8, 8, 1); // draw rectangle and complemnetray one
 80049bc:	2401      	movs	r4, #1
 80049be:	2308      	movs	r3, #8
 80049c0:	b2d2      	uxtb	r2, r2
 80049c2:	9400      	str	r4, [sp, #0]
 80049c4:	2105      	movs	r1, #5
 80049c6:	2014      	movs	r0, #20
 80049c8:	f000 fbd5 	bl	8005176 <SSD1306_DrawFilledRectangle>

	//2. BAR
	SSD1306_GotoXY(3, 20); // goto 10, 10
 80049cc:	2114      	movs	r1, #20
 80049ce:	2003      	movs	r0, #3
 80049d0:	f000 fa98 	bl	8004f04 <SSD1306_GotoXY>
	sprintf(buffor_string, "%1d: ", start_number++);
 80049d4:	192a      	adds	r2, r5, r4
	sprintf(buffor_string, "%1d: ", start_number++);
 80049d6:	4651      	mov	r1, sl
 80049d8:	b2d2      	uxtb	r2, r2
 80049da:	a802      	add	r0, sp, #8
 80049dc:	f001 f84c 	bl	8005a78 <siprintf>
	SSD1306_Puts(buffor_string, &Font_7x10, 1);
 80049e0:	4622      	mov	r2, r4
 80049e2:	4649      	mov	r1, r9
 80049e4:	a802      	add	r0, sp, #8
 80049e6:	f000 fadf 	bl	8004fa8 <SSD1306_Puts>
	uint8_t value2_u8 = (value2 - 1000) / divider;
 80049ea:	f5ab 727a 	sub.w	r2, fp, #1000	; 0x3e8
	SSD1306_DrawFilledRectangle(20, 20, value2_u8, 8, 1);
 80049ee:	2114      	movs	r1, #20
	uint8_t value2_u8 = (value2 - 1000) / divider;
 80049f0:	fb92 f2f8 	sdiv	r2, r2, r8
	SSD1306_DrawFilledRectangle(20, 20, value2_u8, 8, 1);
 80049f4:	2308      	movs	r3, #8
 80049f6:	b2d2      	uxtb	r2, r2
 80049f8:	4608      	mov	r0, r1
 80049fa:	9400      	str	r4, [sp, #0]
 80049fc:	f000 fbbb 	bl	8005176 <SSD1306_DrawFilledRectangle>

	//3. BAR
	SSD1306_GotoXY(3, 34); // goto 10, 10
 8004a00:	2122      	movs	r1, #34	; 0x22
 8004a02:	2003      	movs	r0, #3
 8004a04:	f000 fa7e 	bl	8004f04 <SSD1306_GotoXY>
	sprintf(buffor_string, "%1d: ", start_number++);
 8004a08:	1caa      	adds	r2, r5, #2
	sprintf(buffor_string, "%1d: ", start_number++);
 8004a0a:	4651      	mov	r1, sl
 8004a0c:	b2d2      	uxtb	r2, r2
 8004a0e:	a802      	add	r0, sp, #8
 8004a10:	f001 f832 	bl	8005a78 <siprintf>
	SSD1306_Puts(buffor_string, &Font_7x10, 1);
 8004a14:	4622      	mov	r2, r4
 8004a16:	4649      	mov	r1, r9
 8004a18:	a802      	add	r0, sp, #8
 8004a1a:	f000 fac5 	bl	8004fa8 <SSD1306_Puts>
	uint8_t value3_u8 = (value3 - 1000) / divider;
 8004a1e:	f5a7 727a 	sub.w	r2, r7, #1000	; 0x3e8
 8004a22:	fb92 f2f8 	sdiv	r2, r2, r8
	SSD1306_DrawFilledRectangle(20, 34, value3_u8, 8, 1);
 8004a26:	2308      	movs	r3, #8
 8004a28:	b2d2      	uxtb	r2, r2
 8004a2a:	9400      	str	r4, [sp, #0]
 8004a2c:	2122      	movs	r1, #34	; 0x22
 8004a2e:	2014      	movs	r0, #20
 8004a30:	f000 fba1 	bl	8005176 <SSD1306_DrawFilledRectangle>

	//4. BAR
	SSD1306_GotoXY(3, 48); // goto 10, 10
 8004a34:	2130      	movs	r1, #48	; 0x30
 8004a36:	2003      	movs	r0, #3
 8004a38:	f000 fa64 	bl	8004f04 <SSD1306_GotoXY>
	sprintf(buffor_string, "%1d: ", start_number++);
 8004a3c:	1cea      	adds	r2, r5, #3
	sprintf(buffor_string, "%1d: ", start_number++);
 8004a3e:	4651      	mov	r1, sl
 8004a40:	b2d2      	uxtb	r2, r2
 8004a42:	a802      	add	r0, sp, #8
 8004a44:	f001 f818 	bl	8005a78 <siprintf>
	SSD1306_Puts(buffor_string, &Font_7x10, 1);
 8004a48:	4622      	mov	r2, r4
 8004a4a:	4649      	mov	r1, r9
 8004a4c:	a802      	add	r0, sp, #8
 8004a4e:	f000 faab 	bl	8004fa8 <SSD1306_Puts>
	uint8_t value4_u8 = (value4 - 1000) / divider;
 8004a52:	f5a6 727a 	sub.w	r2, r6, #1000	; 0x3e8
 8004a56:	fb92 f2f8 	sdiv	r2, r2, r8
	SSD1306_DrawFilledRectangle(20, 48, value4_u8, 8, 1);
 8004a5a:	9400      	str	r4, [sp, #0]
 8004a5c:	2308      	movs	r3, #8
 8004a5e:	b2d2      	uxtb	r2, r2
 8004a60:	2130      	movs	r1, #48	; 0x30
 8004a62:	2014      	movs	r0, #20
 8004a64:	f000 fb87 	bl	8005176 <SSD1306_DrawFilledRectangle>

	SSD1306_DrawRectangle(0, 0, 128, 64, 1); // nice border of a OLED
 8004a68:	2100      	movs	r1, #0
 8004a6a:	2340      	movs	r3, #64	; 0x40
 8004a6c:	2280      	movs	r2, #128	; 0x80
 8004a6e:	4608      	mov	r0, r1
 8004a70:	9400      	str	r4, [sp, #0]
 8004a72:	f000 fb3f 	bl	80050f4 <SSD1306_DrawRectangle>
	SSD1306_UpdateScreen(); // update screen
 8004a76:	f000 fbdd 	bl	8005234 <SSD1306_UpdateScreen>

}
 8004a7a:	b007      	add	sp, #28
 8004a7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a80:	08007c5a 	.word	0x08007c5a
 8004a84:	20000008 	.word	0x20000008

08004a88 <oledPrintEncValues>:

void oledPrintEncValues(uint8_t rotation_value, uint8_t push_value) {
 8004a88:	b530      	push	{r4, r5, lr}
 8004a8a:	4604      	mov	r4, r0
 8004a8c:	b08b      	sub	sp, #44	; 0x2c
	//Clear function
//	SSD1306_Clear();
	SSD1306_Fill(0);
 8004a8e:	2000      	movs	r0, #0
void oledPrintEncValues(uint8_t rotation_value, uint8_t push_value) {
 8004a90:	460d      	mov	r5, r1
	SSD1306_Fill(0);
 8004a92:	f000 f9c7 	bl	8004e24 <SSD1306_Fill>
	char buffor_string[25];

	sprintf(buffor_string, "ROTATION: %2d", rotation_value);
 8004a96:	4622      	mov	r2, r4
 8004a98:	4913      	ldr	r1, [pc, #76]	; (8004ae8 <oledPrintEncValues+0x60>)
 8004a9a:	a803      	add	r0, sp, #12
 8004a9c:	f000 ffec 	bl	8005a78 <siprintf>
	SSD1306_GotoXY(10, 10); // goto 10, 10
 8004aa0:	210a      	movs	r1, #10
	SSD1306_Puts(buffor_string, &Font_7x10, 1);
 8004aa2:	4c12      	ldr	r4, [pc, #72]	; (8004aec <oledPrintEncValues+0x64>)
	SSD1306_GotoXY(10, 10); // goto 10, 10
 8004aa4:	4608      	mov	r0, r1
 8004aa6:	f000 fa2d 	bl	8004f04 <SSD1306_GotoXY>
	SSD1306_Puts(buffor_string, &Font_7x10, 1);
 8004aaa:	4621      	mov	r1, r4
 8004aac:	2201      	movs	r2, #1
 8004aae:	a803      	add	r0, sp, #12
 8004ab0:	f000 fa7a 	bl	8004fa8 <SSD1306_Puts>

	sprintf(buffor_string, "PUSHES : %2d", push_value);
 8004ab4:	462a      	mov	r2, r5
 8004ab6:	490e      	ldr	r1, [pc, #56]	; (8004af0 <oledPrintEncValues+0x68>)
 8004ab8:	a803      	add	r0, sp, #12
 8004aba:	f000 ffdd 	bl	8005a78 <siprintf>
	SSD1306_GotoXY(10, 22);
 8004abe:	2116      	movs	r1, #22
 8004ac0:	200a      	movs	r0, #10
 8004ac2:	f000 fa1f 	bl	8004f04 <SSD1306_GotoXY>
	SSD1306_Puts(buffor_string, &Font_7x10, 1);
 8004ac6:	4621      	mov	r1, r4
 8004ac8:	2201      	movs	r2, #1
 8004aca:	a803      	add	r0, sp, #12
 8004acc:	f000 fa6c 	bl	8004fa8 <SSD1306_Puts>

	SSD1306_DrawRectangle(0, 0, 128, 64, 1); // nice border of a OLED
 8004ad0:	2100      	movs	r1, #0
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	2280      	movs	r2, #128	; 0x80
 8004ad6:	9300      	str	r3, [sp, #0]
 8004ad8:	4608      	mov	r0, r1
 8004ada:	2340      	movs	r3, #64	; 0x40
 8004adc:	f000 fb0a 	bl	80050f4 <SSD1306_DrawRectangle>
	SSD1306_UpdateScreen(); // update screen
 8004ae0:	f000 fba8 	bl	8005234 <SSD1306_UpdateScreen>
}
 8004ae4:	b00b      	add	sp, #44	; 0x2c
 8004ae6:	bd30      	pop	{r4, r5, pc}
 8004ae8:	08007cb8 	.word	0x08007cb8
 8004aec:	20000008 	.word	0x20000008
 8004af0:	08007cc6 	.word	0x08007cc6

08004af4 <oledPrintMainScreen>:

void oledPrintMainScreen(RC_Controler_Status *rc_status) {
 8004af4:	b530      	push	{r4, r5, lr}
 8004af6:	4605      	mov	r5, r0
 8004af8:	b08b      	sub	sp, #44	; 0x2c
	//Clear function

	SSD1306_Fill(0);
 8004afa:	2000      	movs	r0, #0
 8004afc:	f000 f992 	bl	8004e24 <SSD1306_Fill>
	char buffor_string[25];
	//1. Line of text
	sprintf(buffor_string, "FRM_SENT: %5ld", rc_status->frames_sent);
 8004b00:	682a      	ldr	r2, [r5, #0]
 8004b02:	4922      	ldr	r1, [pc, #136]	; (8004b8c <oledPrintMainScreen+0x98>)
 8004b04:	a803      	add	r0, sp, #12
 8004b06:	f000 ffb7 	bl	8005a78 <siprintf>
	SSD1306_GotoXY(10, 10); // goto 10, 10
 8004b0a:	210a      	movs	r1, #10
	SSD1306_Puts(buffor_string, &Font_7x10, 1);
 8004b0c:	4c20      	ldr	r4, [pc, #128]	; (8004b90 <oledPrintMainScreen+0x9c>)
	SSD1306_GotoXY(10, 10); // goto 10, 10
 8004b0e:	4608      	mov	r0, r1
 8004b10:	f000 f9f8 	bl	8004f04 <SSD1306_GotoXY>
	SSD1306_Puts(buffor_string, &Font_7x10, 1);
 8004b14:	4621      	mov	r1, r4
 8004b16:	2201      	movs	r2, #1
 8004b18:	a803      	add	r0, sp, #12
 8004b1a:	f000 fa45 	bl	8004fa8 <SSD1306_Puts>
	//2. Line of text
	sprintf(buffor_string, "IMU_STAT: %2d", rc_status->mpu_init_succes);
 8004b1e:	7b2a      	ldrb	r2, [r5, #12]
 8004b20:	491c      	ldr	r1, [pc, #112]	; (8004b94 <oledPrintMainScreen+0xa0>)
 8004b22:	a803      	add	r0, sp, #12
 8004b24:	f000 ffa8 	bl	8005a78 <siprintf>
	SSD1306_GotoXY(10, 22);
 8004b28:	2116      	movs	r1, #22
 8004b2a:	200a      	movs	r0, #10
 8004b2c:	f000 f9ea 	bl	8004f04 <SSD1306_GotoXY>
	SSD1306_Puts(buffor_string, &Font_7x10, 1);
 8004b30:	4621      	mov	r1, r4
 8004b32:	2201      	movs	r2, #1
 8004b34:	a803      	add	r0, sp, #12
 8004b36:	f000 fa37 	bl	8004fa8 <SSD1306_Puts>
	//3. Line of text
	sprintf(buffor_string, "RCV_STAT: %2d", rc_status->rc_recvier_found);
 8004b3a:	7b6a      	ldrb	r2, [r5, #13]
 8004b3c:	4916      	ldr	r1, [pc, #88]	; (8004b98 <oledPrintMainScreen+0xa4>)
 8004b3e:	a803      	add	r0, sp, #12
 8004b40:	f000 ff9a 	bl	8005a78 <siprintf>
	SSD1306_GotoXY(10, 34);
 8004b44:	2122      	movs	r1, #34	; 0x22
 8004b46:	200a      	movs	r0, #10
 8004b48:	f000 f9dc 	bl	8004f04 <SSD1306_GotoXY>
	SSD1306_Puts(buffor_string, &Font_7x10, 1);
 8004b4c:	4621      	mov	r1, r4
 8004b4e:	2201      	movs	r2, #1
 8004b50:	a803      	add	r0, sp, #12
 8004b52:	f000 fa29 	bl	8004fa8 <SSD1306_Puts>

	//4. Line of text

	sprintf(buffor_string, "ACK_RECV: %2d", rc_status->acks_recived);
 8004b56:	68aa      	ldr	r2, [r5, #8]
 8004b58:	4910      	ldr	r1, [pc, #64]	; (8004b9c <oledPrintMainScreen+0xa8>)
 8004b5a:	a803      	add	r0, sp, #12
 8004b5c:	f000 ff8c 	bl	8005a78 <siprintf>
	SSD1306_GotoXY(10, 46);
 8004b60:	212e      	movs	r1, #46	; 0x2e
 8004b62:	200a      	movs	r0, #10
 8004b64:	f000 f9ce 	bl	8004f04 <SSD1306_GotoXY>
	SSD1306_Puts(buffor_string, &Font_7x10, 1);
 8004b68:	4621      	mov	r1, r4
 8004b6a:	2201      	movs	r2, #1
 8004b6c:	a803      	add	r0, sp, #12
 8004b6e:	f000 fa1b 	bl	8004fa8 <SSD1306_Puts>

	SSD1306_DrawRectangle(0, 0, 128, 64, 1); // nice border of a OLED
 8004b72:	2100      	movs	r1, #0
 8004b74:	2301      	movs	r3, #1
 8004b76:	2280      	movs	r2, #128	; 0x80
 8004b78:	9300      	str	r3, [sp, #0]
 8004b7a:	4608      	mov	r0, r1
 8004b7c:	2340      	movs	r3, #64	; 0x40
 8004b7e:	f000 fab9 	bl	80050f4 <SSD1306_DrawRectangle>
	SSD1306_UpdateScreen(); // update screen
 8004b82:	f000 fb57 	bl	8005234 <SSD1306_UpdateScreen>
}
 8004b86:	b00b      	add	sp, #44	; 0x2c
 8004b88:	bd30      	pop	{r4, r5, pc}
 8004b8a:	bf00      	nop
 8004b8c:	08007d05 	.word	0x08007d05
 8004b90:	20000008 	.word	0x20000008
 8004b94:	08007d14 	.word	0x08007d14
 8004b98:	08007d22 	.word	0x08007d22
 8004b9c:	08007d30 	.word	0x08007d30

08004ba0 <oledPrintCalibMenu>:

	SSD1306_DrawRectangle(0, 0, 128, 64, 1); // nice border of a OLED
	SSD1306_UpdateScreen(); // update screen
}

void oledPrintCalibMenu(uint8_t active_channel_number, uint8_t row) {
 8004ba0:	b570      	push	{r4, r5, r6, lr}
 8004ba2:	4606      	mov	r6, r0
 8004ba4:	b08a      	sub	sp, #40	; 0x28

	SSD1306_Fill(0);
 8004ba6:	2000      	movs	r0, #0
void oledPrintCalibMenu(uint8_t active_channel_number, uint8_t row) {
 8004ba8:	460d      	mov	r5, r1
	SSD1306_Fill(0);
 8004baa:	f000 f93b 	bl	8004e24 <SSD1306_Fill>
	char buffor_string[25];

	sprintf(buffor_string, "CALIBRATION MENU");
 8004bae:	492b      	ldr	r1, [pc, #172]	; (8004c5c <oledPrintCalibMenu+0xbc>)
 8004bb0:	a803      	add	r0, sp, #12
 8004bb2:	f000 ff85 	bl	8005ac0 <strcpy>
	SSD1306_GotoXY(10, 10); // goto 10, 10
 8004bb6:	210a      	movs	r1, #10
	SSD1306_Puts(buffor_string, &Font_7x10, 1);
 8004bb8:	4c29      	ldr	r4, [pc, #164]	; (8004c60 <oledPrintCalibMenu+0xc0>)
	SSD1306_GotoXY(10, 10); // goto 10, 10
 8004bba:	4608      	mov	r0, r1
 8004bbc:	f000 f9a2 	bl	8004f04 <SSD1306_GotoXY>
	SSD1306_Puts(buffor_string, &Font_7x10, 1);
 8004bc0:	4621      	mov	r1, r4
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	a803      	add	r0, sp, #12
 8004bc6:	f000 f9ef 	bl	8004fa8 <SSD1306_Puts>
	//2. Line of text
	sprintf(buffor_string, "SET CHHN:  %2d", active_channel_number);
 8004bca:	4632      	mov	r2, r6
 8004bcc:	4925      	ldr	r1, [pc, #148]	; (8004c64 <oledPrintCalibMenu+0xc4>)
 8004bce:	a803      	add	r0, sp, #12
 8004bd0:	f000 ff52 	bl	8005a78 <siprintf>
	SSD1306_GotoXY(10, 22);
 8004bd4:	2116      	movs	r1, #22
 8004bd6:	200a      	movs	r0, #10
 8004bd8:	f000 f994 	bl	8004f04 <SSD1306_GotoXY>
	SSD1306_Puts(buffor_string, &Font_7x10, 1);
 8004bdc:	4621      	mov	r1, r4
 8004bde:	2201      	movs	r2, #1
 8004be0:	a803      	add	r0, sp, #12
 8004be2:	f000 f9e1 	bl	8004fa8 <SSD1306_Puts>
	//3. Line of text
	sprintf(buffor_string, "GET CHHN:  %2d ", active_channel_number);
 8004be6:	4632      	mov	r2, r6
 8004be8:	491f      	ldr	r1, [pc, #124]	; (8004c68 <oledPrintCalibMenu+0xc8>)
 8004bea:	a803      	add	r0, sp, #12
 8004bec:	f000 ff44 	bl	8005a78 <siprintf>
	SSD1306_GotoXY(10, 34);
	SSD1306_Puts(buffor_string, &Font_7x10, 1);

	sprintf(buffor_string, "IMU CALIB: ");
 8004bf0:	4e1e      	ldr	r6, [pc, #120]	; (8004c6c <oledPrintCalibMenu+0xcc>)
	SSD1306_GotoXY(10, 34);
 8004bf2:	2122      	movs	r1, #34	; 0x22
 8004bf4:	200a      	movs	r0, #10
 8004bf6:	f000 f985 	bl	8004f04 <SSD1306_GotoXY>
	SSD1306_Puts(buffor_string, &Font_7x10, 1);
 8004bfa:	2201      	movs	r2, #1
 8004bfc:	4621      	mov	r1, r4
 8004bfe:	a803      	add	r0, sp, #12
 8004c00:	f000 f9d2 	bl	8004fa8 <SSD1306_Puts>
	sprintf(buffor_string, "IMU CALIB: ");
 8004c04:	4631      	mov	r1, r6
 8004c06:	a803      	add	r0, sp, #12
 8004c08:	f000 ff5a 	bl	8005ac0 <strcpy>
	SSD1306_GotoXY(10, 46);
 8004c0c:	212e      	movs	r1, #46	; 0x2e
 8004c0e:	200a      	movs	r0, #10
 8004c10:	f000 f978 	bl	8004f04 <SSD1306_GotoXY>
	SSD1306_Puts(buffor_string, &Font_7x10, 1);
 8004c14:	2201      	movs	r2, #1
 8004c16:	4621      	mov	r1, r4
 8004c18:	a803      	add	r0, sp, #12
 8004c1a:	f000 f9c5 	bl	8004fa8 <SSD1306_Puts>

	sprintf(buffor_string, "IMU CALIB: ");
 8004c1e:	4631      	mov	r1, r6
 8004c20:	a803      	add	r0, sp, #12
 8004c22:	f000 ff4d 	bl	8005ac0 <strcpy>

	sprintf(buffor_string, "*");
	SSD1306_GotoXY(85, row * 12);
 8004c26:	eb05 0545 	add.w	r5, r5, r5, lsl #1
	sprintf(buffor_string, "*");
 8004c2a:	4911      	ldr	r1, [pc, #68]	; (8004c70 <oledPrintCalibMenu+0xd0>)
 8004c2c:	a803      	add	r0, sp, #12
 8004c2e:	f000 ff47 	bl	8005ac0 <strcpy>
	SSD1306_GotoXY(85, row * 12);
 8004c32:	00a9      	lsls	r1, r5, #2
 8004c34:	2055      	movs	r0, #85	; 0x55
 8004c36:	f000 f965 	bl	8004f04 <SSD1306_GotoXY>
	SSD1306_Puts(buffor_string, &Font_7x10, 1);
 8004c3a:	4621      	mov	r1, r4
 8004c3c:	2201      	movs	r2, #1
 8004c3e:	a803      	add	r0, sp, #12
 8004c40:	f000 f9b2 	bl	8004fa8 <SSD1306_Puts>

	SSD1306_DrawRectangle(0, 0, 128, 64, 1); // nice border of a OLED
 8004c44:	2100      	movs	r1, #0
 8004c46:	2301      	movs	r3, #1
 8004c48:	2280      	movs	r2, #128	; 0x80
 8004c4a:	9300      	str	r3, [sp, #0]
 8004c4c:	4608      	mov	r0, r1
 8004c4e:	2340      	movs	r3, #64	; 0x40
 8004c50:	f000 fa50 	bl	80050f4 <SSD1306_DrawRectangle>
	SSD1306_UpdateScreen(); // update screen
 8004c54:	f000 faee 	bl	8005234 <SSD1306_UpdateScreen>

}
 8004c58:	b00a      	add	sp, #40	; 0x28
 8004c5a:	bd70      	pop	{r4, r5, r6, pc}
 8004c5c:	08007c7a 	.word	0x08007c7a
 8004c60:	20000008 	.word	0x20000008
 8004c64:	08007c8b 	.word	0x08007c8b
 8004c68:	08007c9a 	.word	0x08007c9a
 8004c6c:	08007caa 	.word	0x08007caa
 8004c70:	08007cb6 	.word	0x08007cb6

08004c74 <oledPrintBindScren>:

void oledPrintBindScren() { //to add bind status
 8004c74:	b530      	push	{r4, r5, lr}
 8004c76:	b08b      	sub	sp, #44	; 0x2c

	const char *firmawre_version = "1.2";

	char buffor_string[25];

	sprintf(buffor_string, "v%s %s", firmawre_version, __DATE__);
 8004c78:	4b17      	ldr	r3, [pc, #92]	; (8004cd8 <oledPrintBindScren+0x64>)
 8004c7a:	4a18      	ldr	r2, [pc, #96]	; (8004cdc <oledPrintBindScren+0x68>)
 8004c7c:	4918      	ldr	r1, [pc, #96]	; (8004ce0 <oledPrintBindScren+0x6c>)
 8004c7e:	a803      	add	r0, sp, #12
 8004c80:	f000 fefa 	bl	8005a78 <siprintf>

	SSD1306_Clear();

//	SSD1306_DrawBitmap(0, 0, init_screen, 128, 64, 1);
	SSD1306_DrawRectangle(0, 0, 128, 64, 1);
 8004c84:	2401      	movs	r4, #1
	SSD1306_Clear();
 8004c86:	f000 faf7 	bl	8005278 <SSD1306_Clear>
	SSD1306_DrawRectangle(0, 0, 128, 64, 1);
 8004c8a:	2100      	movs	r1, #0
 8004c8c:	2340      	movs	r3, #64	; 0x40
 8004c8e:	2280      	movs	r2, #128	; 0x80
 8004c90:	4608      	mov	r0, r1
 8004c92:	9400      	str	r4, [sp, #0]
 8004c94:	f000 fa2e 	bl	80050f4 <SSD1306_DrawRectangle>


	SSD1306_GotoXY(10, 10); //
 8004c98:	210a      	movs	r1, #10
	SSD1306_Puts("Entered binding mode ", &Font_7x10, 1); // print Hello
 8004c9a:	4d12      	ldr	r5, [pc, #72]	; (8004ce4 <oledPrintBindScren+0x70>)
	SSD1306_GotoXY(10, 10); //
 8004c9c:	4608      	mov	r0, r1
 8004c9e:	f000 f931 	bl	8004f04 <SSD1306_GotoXY>
	SSD1306_Puts("Entered binding mode ", &Font_7x10, 1); // print Hello
 8004ca2:	4622      	mov	r2, r4
 8004ca4:	4629      	mov	r1, r5
 8004ca6:	4810      	ldr	r0, [pc, #64]	; (8004ce8 <oledPrintBindScren+0x74>)
 8004ca8:	f000 f97e 	bl	8004fa8 <SSD1306_Puts>
	SSD1306_GotoXY(10, 22);
 8004cac:	2116      	movs	r1, #22
 8004cae:	200a      	movs	r0, #10
 8004cb0:	f000 f928 	bl	8004f04 <SSD1306_GotoXY>
	SSD1306_Puts("...", &Font_7x10, 1);
 8004cb4:	4622      	mov	r2, r4
 8004cb6:	4629      	mov	r1, r5
 8004cb8:	480c      	ldr	r0, [pc, #48]	; (8004cec <oledPrintBindScren+0x78>)
 8004cba:	f000 f975 	bl	8004fa8 <SSD1306_Puts>
	SSD1306_GotoXY(10, 34);
 8004cbe:	2122      	movs	r1, #34	; 0x22
 8004cc0:	200a      	movs	r0, #10
 8004cc2:	f000 f91f 	bl	8004f04 <SSD1306_GotoXY>
	SSD1306_Puts(buffor_string, &Font_7x10, 1);
 8004cc6:	4622      	mov	r2, r4
 8004cc8:	4629      	mov	r1, r5
 8004cca:	a803      	add	r0, sp, #12
 8004ccc:	f000 f96c 	bl	8004fa8 <SSD1306_Puts>


	SSD1306_UpdateScreen();
 8004cd0:	f000 fab0 	bl	8005234 <SSD1306_UpdateScreen>

}
 8004cd4:	b00b      	add	sp, #44	; 0x2c
 8004cd6:	bd30      	pop	{r4, r5, pc}
 8004cd8:	08007cd3 	.word	0x08007cd3
 8004cdc:	08007cdf 	.word	0x08007cdf
 8004ce0:	08007ce3 	.word	0x08007ce3
 8004ce4:	20000008 	.word	0x20000008
 8004ce8:	08007c60 	.word	0x08007c60
 8004cec:	08007c76 	.word	0x08007c76

08004cf0 <map_values_sbus>:

	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;

}
uint16_t map_values_sbus(uint16_t x, uint16_t in_min, uint16_t in_max) {
	uint16_t temp_value = (x - in_min) * (2000 - 1000) / (in_max - in_min)
 8004cf0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004cf4:	1a40      	subs	r0, r0, r1
 8004cf6:	4358      	muls	r0, r3
 8004cf8:	1a52      	subs	r2, r2, r1
 8004cfa:	fb90 f0f2 	sdiv	r0, r0, r2
 8004cfe:	4418      	add	r0, r3
 8004d00:	b280      	uxth	r0, r0
 8004d02:	4298      	cmp	r0, r3
 8004d04:	bf38      	it	cc
 8004d06:	4618      	movcc	r0, r3
	if (temp_value < 1000)
		temp_value = 1000;

	return temp_value;

}
 8004d08:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 8004d0c:	bf28      	it	cs
 8004d0e:	f44f 60fa 	movcs.w	r0, #2000	; 0x7d0
 8004d12:	4770      	bx	lr

08004d14 <update_rc_mode>:
	return 3000 - value;
}

void update_rc_mode(RC_Mode mode) {

	if (mode)
 8004d14:	b110      	cbz	r0, 8004d1c <update_rc_mode+0x8>
	{ // checking if mode >0
		rc_channels.rc_mode = mode;
 8004d16:	4b02      	ldr	r3, [pc, #8]	; (8004d20 <update_rc_mode+0xc>)
 8004d18:	f883 0058 	strb.w	r0, [r3, #88]	; 0x58
 8004d1c:	4770      	bx	lr
 8004d1e:	bf00      	nop
 8004d20:	200008ca 	.word	0x200008ca

08004d24 <update_rc_channels>:
	}
}

void update_rc_channels(uint16_t* adc_values) {
 8004d24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

	if (rc_channels.rc_mode == RC_SIMPLE_JOYSTICK)
 8004d28:	4c3a      	ldr	r4, [pc, #232]	; (8004e14 <update_rc_channels+0xf0>)
void update_rc_channels(uint16_t* adc_values) {
 8004d2a:	4605      	mov	r5, r0
	if (rc_channels.rc_mode == RC_SIMPLE_JOYSTICK)
 8004d2c:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 8004d30:	2b01      	cmp	r3, #1
 8004d32:	d123      	bne.n	8004d7c <update_rc_channels+0x58>
	{
		rc_channels.scaled_values[0] = reverse_channel(
 8004d34:	8980      	ldrh	r0, [r0, #12]
 8004d36:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8004d3a:	f8b4 1044 	ldrh.w	r1, [r4, #68]	; 0x44
 8004d3e:	f7ff ffd7 	bl	8004cf0 <map_values_sbus>
	return 3000 - value;
 8004d42:	f640 36b8 	movw	r6, #3000	; 0xbb8
 8004d46:	1a30      	subs	r0, r6, r0
		rc_channels.scaled_values[0] = reverse_channel(
 8004d48:	8020      	strh	r0, [r4, #0]
				map_values_sbus(adc_values[6], rc_channels.calibration_values[6].min,
						rc_channels.calibration_values[6].max)); // ROLL
		rc_channels.scaled_values[1] =
				(map_values_sbus(adc_values[5], rc_channels.calibration_values[5].min,
 8004d4a:	8968      	ldrh	r0, [r5, #10]
 8004d4c:	f8b4 2042 	ldrh.w	r2, [r4, #66]	; 0x42
 8004d50:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 8004d54:	f7ff ffcc 	bl	8004cf0 <map_values_sbus>
		rc_channels.scaled_values[1] =
 8004d58:	8060      	strh	r0, [r4, #2]
						rc_channels.calibration_values[5].max)); // PITCH
		rc_channels.scaled_values[2] = reverse_channel(
 8004d5a:	89e8      	ldrh	r0, [r5, #14]
 8004d5c:	f8b4 204a 	ldrh.w	r2, [r4, #74]	; 0x4a
 8004d60:	f8b4 1048 	ldrh.w	r1, [r4, #72]	; 0x48
 8004d64:	f7ff ffc4 	bl	8004cf0 <map_values_sbus>
	return 3000 - value;
 8004d68:	1a30      	subs	r0, r6, r0
		rc_channels.scaled_values[2] = reverse_channel(
 8004d6a:	80a0      	strh	r0, [r4, #4]
				map_values_sbus(adc_values[7], rc_channels.calibration_values[7].min,
						rc_channels.calibration_values[7].max)); // THROTLE
		rc_channels.scaled_values[3] = map_values_sbus(adc_values[8],
 8004d6c:	8a28      	ldrh	r0, [r5, #16]
 8004d6e:	f8b4 204e 	ldrh.w	r2, [r4, #78]	; 0x4e
 8004d72:	f8b4 104c 	ldrh.w	r1, [r4, #76]	; 0x4c
 8004d76:	f7ff ffbb 	bl	8004cf0 <map_values_sbus>
 8004d7a:	80e0      	strh	r0, [r4, #6]
		rc_channels.scaled_values[2] = map_values_sbus(adc_values[5], 0, 3200); // THROTLE
		rc_channels.scaled_values[3] = map_values_sbus(adc_values[8], 0, 3200); // YAW

	}

	rc_channels.scaled_values[4] = map_values_sbus(adc_values[0], 0, 3646); // POT1 //VALUES READ FROM MANUAL CALIB
 8004d7c:	8828      	ldrh	r0, [r5, #0]
 8004d7e:	f640 623e 	movw	r2, #3646	; 0xe3e
 8004d82:	2100      	movs	r1, #0
 8004d84:	f7ff ffb4 	bl	8004cf0 <map_values_sbus>
 8004d88:	8120      	strh	r0, [r4, #8]
	rc_channels.scaled_values[5] = map_values_sbus(adc_values[1], 0, 3660); // POT2 //VALUES READ FROM MANUAL CALIB
 8004d8a:	8868      	ldrh	r0, [r5, #2]
 8004d8c:	f640 624c 	movw	r2, #3660	; 0xe4c
 8004d90:	2100      	movs	r1, #0
 8004d92:	f7ff ffad 	bl	8004cf0 <map_values_sbus>
 8004d96:	8160      	strh	r0, [r4, #10]

	rc_channels.scaled_values[6] = map_values_sbus(adc_values[2], 0, 4000); // SW1
 8004d98:	88a8      	ldrh	r0, [r5, #4]
 8004d9a:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8004d9e:	2100      	movs	r1, #0
 8004da0:	f7ff ffa6 	bl	8004cf0 <map_values_sbus>
 8004da4:	81a0      	strh	r0, [r4, #12]
	rc_channels.scaled_values[7] = map_values_sbus(adc_values[3], 0, 4000); // SW2
 8004da6:	88e8      	ldrh	r0, [r5, #6]
 8004da8:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8004dac:	2100      	movs	r1, #0
 8004dae:	f7ff ff9f 	bl	8004cf0 <map_values_sbus>
 8004db2:	81e0      	strh	r0, [r4, #14]

	rc_channels.scaled_values[8] = map_values_sbus(adc_values[9], 0, 4000); // 	 SW3
 8004db4:	8a68      	ldrh	r0, [r5, #18]
 8004db6:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8004dba:	2100      	movs	r1, #0
 8004dbc:	f7ff ff98 	bl	8004cf0 <map_values_sbus>
 8004dc0:	8220      	strh	r0, [r4, #16]
	rc_channels.scaled_values[10] = map_values_sbus(adc_values[10], 0, 4000); // SW4
 8004dc2:	8aa8      	ldrh	r0, [r5, #20]
 8004dc4:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8004dc8:	2100      	movs	r1, #0
 8004dca:	f7ff ff91 	bl	8004cf0 <map_values_sbus>
 8004dce:	82a0      	strh	r0, [r4, #20]
 8004dd0:	4c11      	ldr	r4, [pc, #68]	; (8004e18 <update_rc_channels+0xf4>)

//	rc_channels.scaled_values[8] = map_values_sbus(adc_values[4], 0, 3200);

	for (int i = 0; i < 4; i++)
	{
		rc_channels.low_pass_values[i] = rc_channels.low_pass_values[i] * 0.95f
 8004dd2:	f8df 9048 	ldr.w	r9, [pc, #72]	; 8004e1c <update_rc_channels+0xf8>
				+ 0.05f * rc_channels.scaled_values[i];
 8004dd6:	f8df 8048 	ldr.w	r8, [pc, #72]	; 8004e20 <update_rc_channels+0xfc>
 8004dda:	f104 0608 	add.w	r6, r4, #8
		rc_channels.low_pass_values[i] = rc_channels.low_pass_values[i] * 0.95f
 8004dde:	8860      	ldrh	r0, [r4, #2]
 8004de0:	f7fb fae2 	bl	80003a8 <__aeabi_i2f>
 8004de4:	4649      	mov	r1, r9
 8004de6:	f7fb fb33 	bl	8000450 <__aeabi_fmul>
 8004dea:	4607      	mov	r7, r0
				+ 0.05f * rc_channels.scaled_values[i];
 8004dec:	f834 0c14 	ldrh.w	r0, [r4, #-20]
 8004df0:	f7fb fada 	bl	80003a8 <__aeabi_i2f>
 8004df4:	4641      	mov	r1, r8
 8004df6:	f7fb fb2b 	bl	8000450 <__aeabi_fmul>
 8004dfa:	4601      	mov	r1, r0
 8004dfc:	4638      	mov	r0, r7
 8004dfe:	f7fb fa1f 	bl	8000240 <__addsf3>
		rc_channels.low_pass_values[i] = rc_channels.low_pass_values[i] * 0.95f
 8004e02:	f7fb fc75 	bl	80006f0 <__aeabi_f2uiz>
 8004e06:	f824 0f02 	strh.w	r0, [r4, #2]!
	for (int i = 0; i < 4; i++)
 8004e0a:	42a6      	cmp	r6, r4
 8004e0c:	d1e7      	bne.n	8004dde <update_rc_channels+0xba>
	}

}
 8004e0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004e12:	bf00      	nop
 8004e14:	200008ca 	.word	0x200008ca
 8004e18:	200008de 	.word	0x200008de
 8004e1c:	3f733333 	.word	0x3f733333
 8004e20:	3d4ccccd 	.word	0x3d4ccccd

08004e24 <SSD1306_Fill>:
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8004e24:	2800      	cmp	r0, #0
 8004e26:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004e2a:	bf14      	ite	ne
 8004e2c:	21ff      	movne	r1, #255	; 0xff
 8004e2e:	2100      	moveq	r1, #0
 8004e30:	4801      	ldr	r0, [pc, #4]	; (8004e38 <SSD1306_Fill+0x14>)
 8004e32:	f000 bd9c 	b.w	800596e <memset>
 8004e36:	bf00      	nop
 8004e38:	20000176 	.word	0x20000176

08004e3c <SSD1306_DrawPixel>:
}

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
	if (
 8004e3c:	287f      	cmp	r0, #127	; 0x7f
void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8004e3e:	b510      	push	{r4, lr}
	if (
 8004e40:	d81a      	bhi.n	8004e78 <SSD1306_DrawPixel+0x3c>
		x >= SSD1306_WIDTH ||
 8004e42:	293f      	cmp	r1, #63	; 0x3f
 8004e44:	d818      	bhi.n	8004e78 <SSD1306_DrawPixel+0x3c>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8004e46:	4b0d      	ldr	r3, [pc, #52]	; (8004e7c <SSD1306_DrawPixel+0x40>)
 8004e48:	791b      	ldrb	r3, [r3, #4]
 8004e4a:	b113      	cbz	r3, 8004e52 <SSD1306_DrawPixel+0x16>
		color = (SSD1306_COLOR_t)!color;
 8004e4c:	fab2 f282 	clz	r2, r2
 8004e50:	0952      	lsrs	r2, r2, #5
 8004e52:	08cc      	lsrs	r4, r1, #3
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8004e54:	2a01      	cmp	r2, #1
 8004e56:	4b0a      	ldr	r3, [pc, #40]	; (8004e80 <SSD1306_DrawPixel+0x44>)
 8004e58:	f001 0107 	and.w	r1, r1, #7
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8004e5c:	eb00 10c4 	add.w	r0, r0, r4, lsl #7
	if (color == SSD1306_COLOR_WHITE) {
 8004e60:	d104      	bne.n	8004e6c <SSD1306_DrawPixel+0x30>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8004e62:	408a      	lsls	r2, r1
 8004e64:	5c19      	ldrb	r1, [r3, r0]
 8004e66:	430a      	orrs	r2, r1
 8004e68:	541a      	strb	r2, [r3, r0]
 8004e6a:	bd10      	pop	{r4, pc}
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8004e6c:	2201      	movs	r2, #1
 8004e6e:	408a      	lsls	r2, r1
 8004e70:	5c19      	ldrb	r1, [r3, r0]
 8004e72:	ea21 0102 	bic.w	r1, r1, r2
 8004e76:	5419      	strb	r1, [r3, r0]
 8004e78:	bd10      	pop	{r4, pc}
 8004e7a:	bf00      	nop
 8004e7c:	20000170 	.word	0x20000170
 8004e80:	20000176 	.word	0x20000176

08004e84 <SSD1306_DrawBitmap>:
{
 8004e84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e88:	b087      	sub	sp, #28
 8004e8a:	4698      	mov	r8, r3
 8004e8c:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
    for(int16_t j=0; j<h; j++, y++)
 8004e90:	2500      	movs	r5, #0
{
 8004e92:	9302      	str	r3, [sp, #8]
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8004e94:	2308      	movs	r3, #8
{
 8004e96:	4693      	mov	fp, r2
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8004e98:	f108 0207 	add.w	r2, r8, #7
 8004e9c:	fb92 f2f3 	sdiv	r2, r2, r3
{
 8004ea0:	4682      	mov	sl, r0
 8004ea2:	4689      	mov	r9, r1
    for(int16_t j=0; j<h; j++, y++)
 8004ea4:	462e      	mov	r6, r5
    uint8_t byte = 0;
 8004ea6:	462c      	mov	r4, r5
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8004ea8:	9201      	str	r2, [sp, #4]
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
 8004eaa:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 8004eae:	9204      	str	r2, [sp, #16]
    for(int16_t j=0; j<h; j++, y++)
 8004eb0:	9902      	ldr	r1, [sp, #8]
 8004eb2:	b232      	sxth	r2, r6
 8004eb4:	4291      	cmp	r1, r2
 8004eb6:	dd22      	ble.n	8004efe <SSD1306_DrawBitmap+0x7a>
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
 8004eb8:	eb06 0209 	add.w	r2, r6, r9
 8004ebc:	b292      	uxth	r2, r2
    for(int16_t j=0; j<h; j++, y++)
 8004ebe:	2700      	movs	r7, #0
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
 8004ec0:	9203      	str	r2, [sp, #12]
 8004ec2:	e015      	b.n	8004ef0 <SSD1306_DrawBitmap+0x6c>
            if(i & 7)
 8004ec4:	b2b8      	uxth	r0, r7
 8004ec6:	0741      	lsls	r1, r0, #29
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8004ec8:	bf05      	ittet	eq
 8004eca:	fb92 f2f3 	sdiveq	r2, r2, r3
 8004ece:	eb0b 0105 	addeq.w	r1, fp, r5
               byte <<= 1;
 8004ed2:	0064      	lslne	r4, r4, #1
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8004ed4:	5c8c      	ldrbeq	r4, [r1, r2]
               byte <<= 1;
 8004ed6:	bf18      	it	ne
 8004ed8:	b2e4      	uxtbne	r4, r4
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
 8004eda:	0622      	lsls	r2, r4, #24
 8004edc:	d507      	bpl.n	8004eee <SSD1306_DrawBitmap+0x6a>
 8004ede:	4450      	add	r0, sl
 8004ee0:	9a04      	ldr	r2, [sp, #16]
 8004ee2:	9903      	ldr	r1, [sp, #12]
 8004ee4:	b280      	uxth	r0, r0
 8004ee6:	9305      	str	r3, [sp, #20]
 8004ee8:	f7ff ffa8 	bl	8004e3c <SSD1306_DrawPixel>
 8004eec:	9b05      	ldr	r3, [sp, #20]
 8004eee:	3701      	adds	r7, #1
 8004ef0:	b23a      	sxth	r2, r7
        for(int16_t i=0; i<w; i++)
 8004ef2:	4542      	cmp	r2, r8
 8004ef4:	dbe6      	blt.n	8004ec4 <SSD1306_DrawBitmap+0x40>
 8004ef6:	9a01      	ldr	r2, [sp, #4]
 8004ef8:	3601      	adds	r6, #1
 8004efa:	4415      	add	r5, r2
 8004efc:	e7d8      	b.n	8004eb0 <SSD1306_DrawBitmap+0x2c>
}
 8004efe:	b007      	add	sp, #28
 8004f00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004f04 <SSD1306_GotoXY>:
	}
}

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8004f04:	4b01      	ldr	r3, [pc, #4]	; (8004f0c <SSD1306_GotoXY+0x8>)
 8004f06:	8018      	strh	r0, [r3, #0]
	SSD1306.CurrentY = y;
 8004f08:	8059      	strh	r1, [r3, #2]
 8004f0a:	4770      	bx	lr
 8004f0c:	20000170 	.word	0x20000170

08004f10 <SSD1306_Putc>:
}

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8004f10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8004f14:	4d23      	ldr	r5, [pc, #140]	; (8004fa4 <SSD1306_Putc+0x94>)
char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8004f16:	4693      	mov	fp, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8004f18:	882e      	ldrh	r6, [r5, #0]
 8004f1a:	780a      	ldrb	r2, [r1, #0]
char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8004f1c:	b085      	sub	sp, #20
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8004f1e:	4432      	add	r2, r6
	if (
 8004f20:	2a7f      	cmp	r2, #127	; 0x7f
char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8004f22:	4682      	mov	sl, r0
 8004f24:	460c      	mov	r4, r1
	if (
 8004f26:	dc39      	bgt.n	8004f9c <SSD1306_Putc+0x8c>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8004f28:	886b      	ldrh	r3, [r5, #2]
 8004f2a:	784a      	ldrb	r2, [r1, #1]
 8004f2c:	9301      	str	r3, [sp, #4]
 8004f2e:	441a      	add	r2, r3
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8004f30:	2a3f      	cmp	r2, #63	; 0x3f
 8004f32:	dc33      	bgt.n	8004f9c <SSD1306_Putc+0x8c>
 8004f34:	2700      	movs	r7, #0
		return 0;
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8004f36:	f1a0 0320 	sub.w	r3, r0, #32
 8004f3a:	9303      	str	r3, [sp, #12]
	for (i = 0; i < Font->FontHeight; i++) {
 8004f3c:	7862      	ldrb	r2, [r4, #1]
 8004f3e:	4297      	cmp	r7, r2
 8004f40:	d306      	bcc.n	8004f50 <SSD1306_Putc+0x40>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8004f42:	7822      	ldrb	r2, [r4, #0]
 8004f44:	4416      	add	r6, r2
 8004f46:	802e      	strh	r6, [r5, #0]
	
	/* Return character written */
	return ch;
}
 8004f48:	4650      	mov	r0, sl
 8004f4a:	b005      	add	sp, #20
 8004f4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		for (j = 0; j < Font->FontWidth; j++) {
 8004f50:	f04f 0800 	mov.w	r8, #0
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8004f54:	9b03      	ldr	r3, [sp, #12]
 8004f56:	6861      	ldr	r1, [r4, #4]
 8004f58:	fb02 7203 	mla	r2, r2, r3, r7
 8004f5c:	f831 3012 	ldrh.w	r3, [r1, r2, lsl #1]
 8004f60:	9302      	str	r3, [sp, #8]
 8004f62:	9b01      	ldr	r3, [sp, #4]
 8004f64:	eb03 0907 	add.w	r9, r3, r7
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8004f68:	fa1f f989 	uxth.w	r9, r9
		for (j = 0; j < Font->FontWidth; j++) {
 8004f6c:	7822      	ldrb	r2, [r4, #0]
 8004f6e:	4590      	cmp	r8, r2
 8004f70:	d301      	bcc.n	8004f76 <SSD1306_Putc+0x66>
	for (i = 0; i < Font->FontHeight; i++) {
 8004f72:	3701      	adds	r7, #1
 8004f74:	e7e2      	b.n	8004f3c <SSD1306_Putc+0x2c>
			if ((b << j) & 0x8000) {
 8004f76:	9b02      	ldr	r3, [sp, #8]
 8004f78:	eb06 0008 	add.w	r0, r6, r8
 8004f7c:	fa03 f208 	lsl.w	r2, r3, r8
 8004f80:	f412 4f00 	tst.w	r2, #32768	; 0x8000
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8004f84:	bf0a      	itet	eq
 8004f86:	fabb f28b 	clzeq	r2, fp
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8004f8a:	465a      	movne	r2, fp
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8004f8c:	0952      	lsreq	r2, r2, #5
 8004f8e:	4649      	mov	r1, r9
 8004f90:	b280      	uxth	r0, r0
 8004f92:	f7ff ff53 	bl	8004e3c <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8004f96:	f108 0801 	add.w	r8, r8, #1
 8004f9a:	e7e7      	b.n	8004f6c <SSD1306_Putc+0x5c>
		return 0;
 8004f9c:	f04f 0a00 	mov.w	sl, #0
 8004fa0:	e7d2      	b.n	8004f48 <SSD1306_Putc+0x38>
 8004fa2:	bf00      	nop
 8004fa4:	20000170 	.word	0x20000170

08004fa8 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8004fa8:	b570      	push	{r4, r5, r6, lr}
 8004faa:	460d      	mov	r5, r1
 8004fac:	4616      	mov	r6, r2
 8004fae:	1e44      	subs	r4, r0, #1
	/* Write characters */
	while (*str) {
 8004fb0:	7863      	ldrb	r3, [r4, #1]
 8004fb2:	b143      	cbz	r3, 8004fc6 <SSD1306_Puts+0x1e>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	4632      	mov	r2, r6
 8004fb8:	4629      	mov	r1, r5
 8004fba:	f7ff ffa9 	bl	8004f10 <SSD1306_Putc>
 8004fbe:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8004fc2:	4298      	cmp	r0, r3
 8004fc4:	d0f4      	beq.n	8004fb0 <SSD1306_Puts+0x8>
		str++;
	}
	
	/* Everything OK, zero should be returned */
	return *str;
}
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	bd70      	pop	{r4, r5, r6, pc}

08004fca <SSD1306_DrawLine>:
 

void SSD1306_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, SSD1306_COLOR_t c) {
 8004fca:	287f      	cmp	r0, #127	; 0x7f
 8004fcc:	bf28      	it	cs
 8004fce:	207f      	movcs	r0, #127	; 0x7f
 8004fd0:	2a7f      	cmp	r2, #127	; 0x7f
 8004fd2:	bf28      	it	cs
 8004fd4:	227f      	movcs	r2, #127	; 0x7f
 8004fd6:	293f      	cmp	r1, #63	; 0x3f
 8004fd8:	bf28      	it	cs
 8004fda:	213f      	movcs	r1, #63	; 0x3f
 8004fdc:	2b3f      	cmp	r3, #63	; 0x3f
 8004fde:	bf28      	it	cs
 8004fe0:	233f      	movcs	r3, #63	; 0x3f
 8004fe2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fe6:	b085      	sub	sp, #20
 8004fe8:	f89d 4038 	ldrb.w	r4, [sp, #56]	; 0x38
	}
	if (y1 >= SSD1306_HEIGHT) {
		y1 = SSD1306_HEIGHT - 1;
	}
	
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 8004fec:	4290      	cmp	r0, r2
void SSD1306_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, SSD1306_COLOR_t c) {
 8004fee:	9401      	str	r4, [sp, #4]
 8004ff0:	4691      	mov	r9, r2
 8004ff2:	4604      	mov	r4, r0
 8004ff4:	460d      	mov	r5, r1
 8004ff6:	461e      	mov	r6, r3
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 8004ff8:	d211      	bcs.n	800501e <SSD1306_DrawLine+0x54>
 8004ffa:	eba2 0a00 	sub.w	sl, r2, r0
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 8004ffe:	428b      	cmp	r3, r1
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 8005000:	fa0f fa8a 	sxth.w	sl, sl
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 8005004:	d871      	bhi.n	80050ea <SSD1306_DrawLine+0x120>
	sx = (x0 < x1) ? 1 : -1; 
 8005006:	454c      	cmp	r4, r9
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 8005008:	eba5 0706 	sub.w	r7, r5, r6
 800500c:	b23f      	sxth	r7, r7
	sx = (x0 < x1) ? 1 : -1; 
 800500e:	bf2c      	ite	cs
 8005010:	f04f 3bff 	movcs.w	fp, #4294967295
 8005014:	f04f 0b01 	movcc.w	fp, #1
	sy = (y0 < y1) ? 1 : -1; 
 8005018:	f04f 33ff 	mov.w	r3, #4294967295
 800501c:	e00a      	b.n	8005034 <SSD1306_DrawLine+0x6a>
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 800501e:	eba0 0a02 	sub.w	sl, r0, r2
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 8005022:	428b      	cmp	r3, r1
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 8005024:	fa0f fa8a 	sxth.w	sl, sl
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 8005028:	d9ed      	bls.n	8005006 <SSD1306_DrawLine+0x3c>
	sx = (x0 < x1) ? 1 : -1; 
 800502a:	f04f 3bff 	mov.w	fp, #4294967295
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 800502e:	1a5f      	subs	r7, r3, r1
 8005030:	b23f      	sxth	r7, r7
	sy = (y0 < y1) ? 1 : -1; 
 8005032:	2301      	movs	r3, #1
 8005034:	f04f 0802 	mov.w	r8, #2
	err = ((dx > dy) ? dx : -dy) / 2; 
 8005038:	4557      	cmp	r7, sl
 800503a:	bfa5      	ittet	ge
 800503c:	fb97 f8f8 	sdivge	r8, r7, r8
 8005040:	f1c8 0800 	rsbge	r8, r8, #0
 8005044:	fb9a f8f8 	sdivlt	r8, sl, r8
 8005048:	fa0f f888 	sxthge.w	r8, r8

	if (dx == 0) {
 800504c:	f1ba 0f00 	cmp.w	sl, #0
 8005050:	d116      	bne.n	8005080 <SSD1306_DrawLine+0xb6>
		if (y1 < y0) {
 8005052:	42ae      	cmp	r6, r5
 8005054:	bf3e      	ittt	cc
 8005056:	462b      	movcc	r3, r5
 8005058:	4635      	movcc	r5, r6
 800505a:	461e      	movcc	r6, r3
 800505c:	454c      	cmp	r4, r9
 800505e:	bf28      	it	cs
 8005060:	464c      	movcs	r4, r9
 8005062:	b2a4      	uxth	r4, r4
			x1 = x0;
			x0 = tmp;
		}
		
		/* Vertical line */
		for (i = y0; i <= y1; i++) {
 8005064:	b22d      	sxth	r5, r5
 8005066:	42b5      	cmp	r5, r6
 8005068:	dd02      	ble.n	8005070 <SSD1306_DrawLine+0xa6>
		if (e2 < dy) {
			err += dx;
			y0 += sy;
		} 
	}
}
 800506a:	b005      	add	sp, #20
 800506c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			SSD1306_DrawPixel(x0, i, c);
 8005070:	b2ad      	uxth	r5, r5
 8005072:	4629      	mov	r1, r5
 8005074:	9a01      	ldr	r2, [sp, #4]
 8005076:	4620      	mov	r0, r4
 8005078:	f7ff fee0 	bl	8004e3c <SSD1306_DrawPixel>
		for (i = y0; i <= y1; i++) {
 800507c:	3501      	adds	r5, #1
 800507e:	e7f1      	b.n	8005064 <SSD1306_DrawLine+0x9a>
	if (dy == 0) {
 8005080:	b1ff      	cbz	r7, 80050c2 <SSD1306_DrawLine+0xf8>
		if (e2 > -dx) {
 8005082:	f1ca 0200 	rsb	r2, sl, #0
 8005086:	9202      	str	r2, [sp, #8]
		SSD1306_DrawPixel(x0, y0, c);
 8005088:	9a01      	ldr	r2, [sp, #4]
 800508a:	4629      	mov	r1, r5
 800508c:	4620      	mov	r0, r4
 800508e:	9303      	str	r3, [sp, #12]
 8005090:	f7ff fed4 	bl	8004e3c <SSD1306_DrawPixel>
		if (x0 == x1 && y0 == y1) {
 8005094:	454c      	cmp	r4, r9
 8005096:	9b03      	ldr	r3, [sp, #12]
 8005098:	d101      	bne.n	800509e <SSD1306_DrawLine+0xd4>
 800509a:	42b5      	cmp	r5, r6
 800509c:	d0e5      	beq.n	800506a <SSD1306_DrawLine+0xa0>
		if (e2 > -dx) {
 800509e:	9a02      	ldr	r2, [sp, #8]
 80050a0:	4590      	cmp	r8, r2
			err -= dy;
 80050a2:	bfc1      	itttt	gt
 80050a4:	eba8 0207 	subgt.w	r2, r8, r7
			x0 += sx;
 80050a8:	445c      	addgt	r4, fp
			err -= dy;
 80050aa:	b212      	sxthgt	r2, r2
			x0 += sx;
 80050ac:	b2a4      	uxthgt	r4, r4
 80050ae:	bfd8      	it	le
 80050b0:	4642      	movle	r2, r8
		if (e2 < dy) {
 80050b2:	45b8      	cmp	r8, r7
 80050b4:	da03      	bge.n	80050be <SSD1306_DrawLine+0xf4>
			err += dx;
 80050b6:	4452      	add	r2, sl
			y0 += sy;
 80050b8:	441d      	add	r5, r3
			err += dx;
 80050ba:	b212      	sxth	r2, r2
			y0 += sy;
 80050bc:	b2ad      	uxth	r5, r5
		if (x1 < x0) {
 80050be:	4690      	mov	r8, r2
 80050c0:	e7e2      	b.n	8005088 <SSD1306_DrawLine+0xbe>
 80050c2:	42b5      	cmp	r5, r6
 80050c4:	bf28      	it	cs
 80050c6:	4635      	movcs	r5, r6
 80050c8:	454c      	cmp	r4, r9
 80050ca:	b2ad      	uxth	r5, r5
 80050cc:	d902      	bls.n	80050d4 <SSD1306_DrawLine+0x10a>
 80050ce:	4623      	mov	r3, r4
 80050d0:	464c      	mov	r4, r9
 80050d2:	4699      	mov	r9, r3
		for (i = x0; i <= x1; i++) {
 80050d4:	b224      	sxth	r4, r4
 80050d6:	454c      	cmp	r4, r9
 80050d8:	dcc7      	bgt.n	800506a <SSD1306_DrawLine+0xa0>
			SSD1306_DrawPixel(i, y0, c);
 80050da:	b2a4      	uxth	r4, r4
 80050dc:	4620      	mov	r0, r4
 80050de:	9a01      	ldr	r2, [sp, #4]
 80050e0:	4629      	mov	r1, r5
 80050e2:	f7ff feab 	bl	8004e3c <SSD1306_DrawPixel>
		for (i = x0; i <= x1; i++) {
 80050e6:	3401      	adds	r4, #1
 80050e8:	e7f4      	b.n	80050d4 <SSD1306_DrawLine+0x10a>
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 80050ea:	1a5f      	subs	r7, r3, r1
 80050ec:	b23f      	sxth	r7, r7
	sx = (x0 < x1) ? 1 : -1; 
 80050ee:	f04f 0b01 	mov.w	fp, #1
 80050f2:	e79e      	b.n	8005032 <SSD1306_DrawLine+0x68>

080050f4 <SSD1306_DrawRectangle>:

void SSD1306_DrawRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, SSD1306_COLOR_t c) {
 80050f4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	/* Check input parameters */
	if (
 80050f8:	287f      	cmp	r0, #127	; 0x7f
void SSD1306_DrawRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, SSD1306_COLOR_t c) {
 80050fa:	4607      	mov	r7, r0
 80050fc:	460e      	mov	r6, r1
 80050fe:	461d      	mov	r5, r3
 8005100:	f89d 8020 	ldrb.w	r8, [sp, #32]
	if (
 8005104:	d834      	bhi.n	8005170 <SSD1306_DrawRectangle+0x7c>
		x >= SSD1306_WIDTH ||
 8005106:	293f      	cmp	r1, #63	; 0x3f
 8005108:	d832      	bhi.n	8005170 <SSD1306_DrawRectangle+0x7c>
		/* Return error */
		return;
	}
	
	/* Check width and height */
	if ((x + w) >= SSD1306_WIDTH) {
 800510a:	1883      	adds	r3, r0, r2
 800510c:	2b7f      	cmp	r3, #127	; 0x7f
		w = SSD1306_WIDTH - x;
 800510e:	bfc8      	it	gt
 8005110:	f1c0 0280 	rsbgt	r2, r0, #128	; 0x80
	}
	if ((y + h) >= SSD1306_HEIGHT) {
 8005114:	eb01 0305 	add.w	r3, r1, r5
		w = SSD1306_WIDTH - x;
 8005118:	bfc8      	it	gt
 800511a:	b292      	uxthgt	r2, r2
	if ((y + h) >= SSD1306_HEIGHT) {
 800511c:	2b3f      	cmp	r3, #63	; 0x3f
		h = SSD1306_HEIGHT - y;
 800511e:	bfc4      	itt	gt
 8005120:	f1c1 0540 	rsbgt	r5, r1, #64	; 0x40
 8005124:	b2ad      	uxthgt	r5, r5
	}
	
	/* Draw 4 lines */
	SSD1306_DrawLine(x, y, x + w, y, c);         /* Top line */
 8005126:	4402      	add	r2, r0
 8005128:	b294      	uxth	r4, r2
	SSD1306_DrawLine(x, y + h, x + w, y + h, c); /* Bottom line */
 800512a:	4435      	add	r5, r6
 800512c:	b2ad      	uxth	r5, r5
	SSD1306_DrawLine(x, y, x + w, y, c);         /* Top line */
 800512e:	460b      	mov	r3, r1
 8005130:	4622      	mov	r2, r4
 8005132:	f8cd 8000 	str.w	r8, [sp]
 8005136:	f7ff ff48 	bl	8004fca <SSD1306_DrawLine>
	SSD1306_DrawLine(x, y + h, x + w, y + h, c); /* Bottom line */
 800513a:	462b      	mov	r3, r5
 800513c:	4622      	mov	r2, r4
 800513e:	4629      	mov	r1, r5
 8005140:	4638      	mov	r0, r7
 8005142:	f8cd 8000 	str.w	r8, [sp]
 8005146:	f7ff ff40 	bl	8004fca <SSD1306_DrawLine>
	SSD1306_DrawLine(x, y, x, y + h, c);         /* Left line */
 800514a:	462b      	mov	r3, r5
 800514c:	463a      	mov	r2, r7
 800514e:	4631      	mov	r1, r6
 8005150:	4638      	mov	r0, r7
 8005152:	f8cd 8000 	str.w	r8, [sp]
 8005156:	f7ff ff38 	bl	8004fca <SSD1306_DrawLine>
	SSD1306_DrawLine(x + w, y, x + w, y + h, c); /* Right line */
 800515a:	462b      	mov	r3, r5
 800515c:	4622      	mov	r2, r4
 800515e:	4631      	mov	r1, r6
 8005160:	4620      	mov	r0, r4
 8005162:	f8cd 8020 	str.w	r8, [sp, #32]
}
 8005166:	b002      	add	sp, #8
 8005168:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	SSD1306_DrawLine(x + w, y, x + w, y + h, c); /* Right line */
 800516c:	f7ff bf2d 	b.w	8004fca <SSD1306_DrawLine>
}
 8005170:	b002      	add	sp, #8
 8005172:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005176 <SSD1306_DrawFilledRectangle>:

void SSD1306_DrawFilledRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, SSD1306_COLOR_t c) {
 8005176:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	uint8_t i;
	
	/* Check input parameters */
	if (
 800517a:	287f      	cmp	r0, #127	; 0x7f
void SSD1306_DrawFilledRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, SSD1306_COLOR_t c) {
 800517c:	4606      	mov	r6, r0
 800517e:	460f      	mov	r7, r1
 8005180:	461d      	mov	r5, r3
 8005182:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
	if (
 8005186:	d81a      	bhi.n	80051be <SSD1306_DrawFilledRectangle+0x48>
		x >= SSD1306_WIDTH ||
 8005188:	293f      	cmp	r1, #63	; 0x3f
 800518a:	d818      	bhi.n	80051be <SSD1306_DrawFilledRectangle+0x48>
	if ((y + h) >= SSD1306_HEIGHT) {
		h = SSD1306_HEIGHT - y;
	}
	
	/* Draw lines */
	for (i = 0; i <= h; i++) {
 800518c:	f04f 0900 	mov.w	r9, #0
	if ((x + w) >= SSD1306_WIDTH) {
 8005190:	1883      	adds	r3, r0, r2
 8005192:	2b7f      	cmp	r3, #127	; 0x7f
		w = SSD1306_WIDTH - x;
 8005194:	bfc8      	it	gt
 8005196:	f1c0 0280 	rsbgt	r2, r0, #128	; 0x80
	if ((y + h) >= SSD1306_HEIGHT) {
 800519a:	eb01 0305 	add.w	r3, r1, r5
		w = SSD1306_WIDTH - x;
 800519e:	bfc8      	it	gt
 80051a0:	b292      	uxthgt	r2, r2
	if ((y + h) >= SSD1306_HEIGHT) {
 80051a2:	2b3f      	cmp	r3, #63	; 0x3f
		h = SSD1306_HEIGHT - y;
 80051a4:	bfc8      	it	gt
 80051a6:	f1c1 0540 	rsbgt	r5, r1, #64	; 0x40
		/* Draw lines */
		SSD1306_DrawLine(x, y + i, x + w, y + i, c);
 80051aa:	4402      	add	r2, r0
		h = SSD1306_HEIGHT - y;
 80051ac:	bfc8      	it	gt
 80051ae:	b2ad      	uxthgt	r5, r5
		SSD1306_DrawLine(x, y + i, x + w, y + i, c);
 80051b0:	b294      	uxth	r4, r2
	for (i = 0; i <= h; i++) {
 80051b2:	fa5f f389 	uxtb.w	r3, r9
 80051b6:	429d      	cmp	r5, r3
 80051b8:	f109 0901 	add.w	r9, r9, #1
 80051bc:	d202      	bcs.n	80051c4 <SSD1306_DrawFilledRectangle+0x4e>
	}
}
 80051be:	b003      	add	sp, #12
 80051c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		SSD1306_DrawLine(x, y + i, x + w, y + i, c);
 80051c4:	443b      	add	r3, r7
 80051c6:	b29b      	uxth	r3, r3
 80051c8:	f8cd 8000 	str.w	r8, [sp]
 80051cc:	4622      	mov	r2, r4
 80051ce:	4619      	mov	r1, r3
 80051d0:	4630      	mov	r0, r6
 80051d2:	f7ff fefa 	bl	8004fca <SSD1306_DrawLine>
 80051d6:	e7ec      	b.n	80051b2 <SSD1306_DrawFilledRectangle+0x3c>

080051d8 <ssd1306_I2C_WriteMulti>:
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 80051d8:	b530      	push	{r4, r5, lr}
 80051da:	b0c3      	sub	sp, #268	; 0x10c
uint8_t dt[256];
dt[0] = reg;
 80051dc:	f88d 1008 	strb.w	r1, [sp, #8]
uint8_t i;
for(i = 0; i < count; i++)
 80051e0:	2100      	movs	r1, #0
 80051e2:	1c4c      	adds	r4, r1, #1
 80051e4:	b2c9      	uxtb	r1, r1
 80051e6:	4299      	cmp	r1, r3
 80051e8:	d30a      	bcc.n	8005200 <ssd1306_I2C_WriteMulti+0x28>
dt[i+1] = data[i];
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 80051ea:	220a      	movs	r2, #10
 80051ec:	3301      	adds	r3, #1
 80051ee:	9200      	str	r2, [sp, #0]
 80051f0:	4601      	mov	r1, r0
 80051f2:	b29b      	uxth	r3, r3
 80051f4:	aa02      	add	r2, sp, #8
 80051f6:	4805      	ldr	r0, [pc, #20]	; (800520c <ssd1306_I2C_WriteMulti+0x34>)
 80051f8:	f7fc fa2c 	bl	8001654 <HAL_I2C_Master_Transmit>
}
 80051fc:	b043      	add	sp, #268	; 0x10c
 80051fe:	bd30      	pop	{r4, r5, pc}
dt[i+1] = data[i];
 8005200:	ad02      	add	r5, sp, #8
 8005202:	440d      	add	r5, r1
 8005204:	5c51      	ldrb	r1, [r2, r1]
 8005206:	7069      	strb	r1, [r5, #1]
 8005208:	4621      	mov	r1, r4
 800520a:	e7ea      	b.n	80051e2 <ssd1306_I2C_WriteMulti+0xa>
 800520c:	2000063c 	.word	0x2000063c

08005210 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8005210:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t dt[2];
	dt[0] = reg;
	dt[1] = data;
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8005212:	230a      	movs	r3, #10
	dt[0] = reg;
 8005214:	f88d 100c 	strb.w	r1, [sp, #12]
	dt[1] = data;
 8005218:	f88d 200d 	strb.w	r2, [sp, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 800521c:	9300      	str	r3, [sp, #0]
 800521e:	4601      	mov	r1, r0
 8005220:	2302      	movs	r3, #2
 8005222:	aa03      	add	r2, sp, #12
 8005224:	4802      	ldr	r0, [pc, #8]	; (8005230 <ssd1306_I2C_Write+0x20>)
 8005226:	f7fc fa15 	bl	8001654 <HAL_I2C_Master_Transmit>
}
 800522a:	b005      	add	sp, #20
 800522c:	f85d fb04 	ldr.w	pc, [sp], #4
 8005230:	2000063c 	.word	0x2000063c

08005234 <SSD1306_UpdateScreen>:
void SSD1306_UpdateScreen(void) {
 8005234:	b538      	push	{r3, r4, r5, lr}
 8005236:	2400      	movs	r4, #0
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8005238:	4d0e      	ldr	r5, [pc, #56]	; (8005274 <SSD1306_UpdateScreen+0x40>)
		SSD1306_WRITECOMMAND(0xB0 + m);
 800523a:	f1a4 0250 	sub.w	r2, r4, #80	; 0x50
 800523e:	b2d2      	uxtb	r2, r2
 8005240:	2100      	movs	r1, #0
 8005242:	2078      	movs	r0, #120	; 0x78
 8005244:	f7ff ffe4 	bl	8005210 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8005248:	2200      	movs	r2, #0
 800524a:	2078      	movs	r0, #120	; 0x78
 800524c:	4611      	mov	r1, r2
 800524e:	f7ff ffdf 	bl	8005210 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8005252:	2210      	movs	r2, #16
 8005254:	2100      	movs	r1, #0
 8005256:	2078      	movs	r0, #120	; 0x78
 8005258:	f7ff ffda 	bl	8005210 <ssd1306_I2C_Write>
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 800525c:	eb05 12c4 	add.w	r2, r5, r4, lsl #7
 8005260:	2380      	movs	r3, #128	; 0x80
 8005262:	2140      	movs	r1, #64	; 0x40
 8005264:	2078      	movs	r0, #120	; 0x78
 8005266:	3401      	adds	r4, #1
 8005268:	f7ff ffb6 	bl	80051d8 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 800526c:	2c08      	cmp	r4, #8
 800526e:	d1e4      	bne.n	800523a <SSD1306_UpdateScreen+0x6>
}
 8005270:	bd38      	pop	{r3, r4, r5, pc}
 8005272:	bf00      	nop
 8005274:	20000176 	.word	0x20000176

08005278 <SSD1306_Clear>:
{
 8005278:	b508      	push	{r3, lr}
	SSD1306_Fill (0);
 800527a:	2000      	movs	r0, #0
 800527c:	f7ff fdd2 	bl	8004e24 <SSD1306_Fill>
}
 8005280:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    SSD1306_UpdateScreen();
 8005284:	f7ff bfd6 	b.w	8005234 <SSD1306_UpdateScreen>

08005288 <SSD1306_Init>:
uint8_t SSD1306_Init(void) {
 8005288:	b510      	push	{r4, lr}
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 800528a:	f644 6320 	movw	r3, #20000	; 0x4e20
 800528e:	2201      	movs	r2, #1
 8005290:	2178      	movs	r1, #120	; 0x78
 8005292:	4852      	ldr	r0, [pc, #328]	; (80053dc <SSD1306_Init+0x154>)
 8005294:	f7fc fd8e 	bl	8001db4 <HAL_I2C_IsDeviceReady>
 8005298:	4604      	mov	r4, r0
 800529a:	2800      	cmp	r0, #0
 800529c:	f040 809c 	bne.w	80053d8 <SSD1306_Init+0x150>
	SSD1306_WRITECOMMAND(0xAE); //display off
 80052a0:	4601      	mov	r1, r0
 80052a2:	22ae      	movs	r2, #174	; 0xae
 80052a4:	2078      	movs	r0, #120	; 0x78
 80052a6:	f7ff ffb3 	bl	8005210 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 80052aa:	4621      	mov	r1, r4
 80052ac:	2220      	movs	r2, #32
 80052ae:	2078      	movs	r0, #120	; 0x78
 80052b0:	f7ff ffae 	bl	8005210 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80052b4:	4621      	mov	r1, r4
 80052b6:	2210      	movs	r2, #16
 80052b8:	2078      	movs	r0, #120	; 0x78
 80052ba:	f7ff ffa9 	bl	8005210 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80052be:	4621      	mov	r1, r4
 80052c0:	22b0      	movs	r2, #176	; 0xb0
 80052c2:	2078      	movs	r0, #120	; 0x78
 80052c4:	f7ff ffa4 	bl	8005210 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80052c8:	4621      	mov	r1, r4
 80052ca:	22c8      	movs	r2, #200	; 0xc8
 80052cc:	2078      	movs	r0, #120	; 0x78
 80052ce:	f7ff ff9f 	bl	8005210 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 80052d2:	4622      	mov	r2, r4
 80052d4:	4621      	mov	r1, r4
 80052d6:	2078      	movs	r0, #120	; 0x78
 80052d8:	f7ff ff9a 	bl	8005210 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 80052dc:	4621      	mov	r1, r4
 80052de:	2210      	movs	r2, #16
 80052e0:	2078      	movs	r0, #120	; 0x78
 80052e2:	f7ff ff95 	bl	8005210 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 80052e6:	4621      	mov	r1, r4
 80052e8:	2240      	movs	r2, #64	; 0x40
 80052ea:	2078      	movs	r0, #120	; 0x78
 80052ec:	f7ff ff90 	bl	8005210 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80052f0:	4621      	mov	r1, r4
 80052f2:	2281      	movs	r2, #129	; 0x81
 80052f4:	2078      	movs	r0, #120	; 0x78
 80052f6:	f7ff ff8b 	bl	8005210 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 80052fa:	4621      	mov	r1, r4
 80052fc:	22ff      	movs	r2, #255	; 0xff
 80052fe:	2078      	movs	r0, #120	; 0x78
 8005300:	f7ff ff86 	bl	8005210 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8005304:	4621      	mov	r1, r4
 8005306:	22a1      	movs	r2, #161	; 0xa1
 8005308:	2078      	movs	r0, #120	; 0x78
 800530a:	f7ff ff81 	bl	8005210 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 800530e:	4621      	mov	r1, r4
 8005310:	22a6      	movs	r2, #166	; 0xa6
 8005312:	2078      	movs	r0, #120	; 0x78
 8005314:	f7ff ff7c 	bl	8005210 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8005318:	4621      	mov	r1, r4
 800531a:	22a8      	movs	r2, #168	; 0xa8
 800531c:	2078      	movs	r0, #120	; 0x78
 800531e:	f7ff ff77 	bl	8005210 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8005322:	4621      	mov	r1, r4
 8005324:	223f      	movs	r2, #63	; 0x3f
 8005326:	2078      	movs	r0, #120	; 0x78
 8005328:	f7ff ff72 	bl	8005210 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800532c:	4621      	mov	r1, r4
 800532e:	22a4      	movs	r2, #164	; 0xa4
 8005330:	2078      	movs	r0, #120	; 0x78
 8005332:	f7ff ff6d 	bl	8005210 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8005336:	4621      	mov	r1, r4
 8005338:	22d3      	movs	r2, #211	; 0xd3
 800533a:	2078      	movs	r0, #120	; 0x78
 800533c:	f7ff ff68 	bl	8005210 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8005340:	4622      	mov	r2, r4
 8005342:	4621      	mov	r1, r4
 8005344:	2078      	movs	r0, #120	; 0x78
 8005346:	f7ff ff63 	bl	8005210 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 800534a:	4621      	mov	r1, r4
 800534c:	22d5      	movs	r2, #213	; 0xd5
 800534e:	2078      	movs	r0, #120	; 0x78
 8005350:	f7ff ff5e 	bl	8005210 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8005354:	4621      	mov	r1, r4
 8005356:	22f0      	movs	r2, #240	; 0xf0
 8005358:	2078      	movs	r0, #120	; 0x78
 800535a:	f7ff ff59 	bl	8005210 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 800535e:	4621      	mov	r1, r4
 8005360:	22d9      	movs	r2, #217	; 0xd9
 8005362:	2078      	movs	r0, #120	; 0x78
 8005364:	f7ff ff54 	bl	8005210 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8005368:	4621      	mov	r1, r4
 800536a:	2222      	movs	r2, #34	; 0x22
 800536c:	2078      	movs	r0, #120	; 0x78
 800536e:	f7ff ff4f 	bl	8005210 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8005372:	4621      	mov	r1, r4
 8005374:	22da      	movs	r2, #218	; 0xda
 8005376:	2078      	movs	r0, #120	; 0x78
 8005378:	f7ff ff4a 	bl	8005210 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 800537c:	4621      	mov	r1, r4
 800537e:	2212      	movs	r2, #18
 8005380:	2078      	movs	r0, #120	; 0x78
 8005382:	f7ff ff45 	bl	8005210 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8005386:	4621      	mov	r1, r4
 8005388:	22db      	movs	r2, #219	; 0xdb
 800538a:	2078      	movs	r0, #120	; 0x78
 800538c:	f7ff ff40 	bl	8005210 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8005390:	4621      	mov	r1, r4
 8005392:	2220      	movs	r2, #32
 8005394:	2078      	movs	r0, #120	; 0x78
 8005396:	f7ff ff3b 	bl	8005210 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 800539a:	4621      	mov	r1, r4
 800539c:	228d      	movs	r2, #141	; 0x8d
 800539e:	2078      	movs	r0, #120	; 0x78
 80053a0:	f7ff ff36 	bl	8005210 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80053a4:	4621      	mov	r1, r4
 80053a6:	2214      	movs	r2, #20
 80053a8:	2078      	movs	r0, #120	; 0x78
 80053aa:	f7ff ff31 	bl	8005210 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80053ae:	4621      	mov	r1, r4
 80053b0:	22af      	movs	r2, #175	; 0xaf
 80053b2:	2078      	movs	r0, #120	; 0x78
 80053b4:	f7ff ff2c 	bl	8005210 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80053b8:	222e      	movs	r2, #46	; 0x2e
 80053ba:	4621      	mov	r1, r4
 80053bc:	2078      	movs	r0, #120	; 0x78
 80053be:	f7ff ff27 	bl	8005210 <ssd1306_I2C_Write>
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80053c2:	4620      	mov	r0, r4
 80053c4:	f7ff fd2e 	bl	8004e24 <SSD1306_Fill>
	SSD1306_UpdateScreen();
 80053c8:	f7ff ff34 	bl	8005234 <SSD1306_UpdateScreen>
	SSD1306.Initialized = 1;
 80053cc:	2001      	movs	r0, #1
	SSD1306.CurrentX = 0;
 80053ce:	4b04      	ldr	r3, [pc, #16]	; (80053e0 <SSD1306_Init+0x158>)
	SSD1306.Initialized = 1;
 80053d0:	7158      	strb	r0, [r3, #5]
	SSD1306.CurrentX = 0;
 80053d2:	801c      	strh	r4, [r3, #0]
	SSD1306.CurrentY = 0;
 80053d4:	805c      	strh	r4, [r3, #2]
	return 1;
 80053d6:	bd10      	pop	{r4, pc}
		return 0;
 80053d8:	2000      	movs	r0, #0
}
 80053da:	bd10      	pop	{r4, pc}
 80053dc:	2000063c 	.word	0x2000063c
 80053e0:	20000170 	.word	0x20000170

080053e4 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80053e4:	4b0e      	ldr	r3, [pc, #56]	; (8005420 <HAL_MspInit+0x3c>)
{
 80053e6:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 80053e8:	699a      	ldr	r2, [r3, #24]
 80053ea:	f042 0201 	orr.w	r2, r2, #1
 80053ee:	619a      	str	r2, [r3, #24]
 80053f0:	699a      	ldr	r2, [r3, #24]
 80053f2:	f002 0201 	and.w	r2, r2, #1
 80053f6:	9200      	str	r2, [sp, #0]
 80053f8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80053fa:	69da      	ldr	r2, [r3, #28]
 80053fc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005400:	61da      	str	r2, [r3, #28]
 8005402:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8005404:	4a07      	ldr	r2, [pc, #28]	; (8005424 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8005406:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800540a:	9301      	str	r3, [sp, #4]
 800540c:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800540e:	6853      	ldr	r3, [r2, #4]
 8005410:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8005414:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005418:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800541a:	b002      	add	sp, #8
 800541c:	4770      	bx	lr
 800541e:	bf00      	nop
 8005420:	40021000 	.word	0x40021000
 8005424:	40010000 	.word	0x40010000

08005428 <HAL_ADC_MspInit>:
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005428:	2210      	movs	r2, #16
{
 800542a:	b530      	push	{r4, r5, lr}
 800542c:	4605      	mov	r5, r0
 800542e:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005430:	eb0d 0002 	add.w	r0, sp, r2
 8005434:	2100      	movs	r1, #0
 8005436:	f000 fa9a 	bl	800596e <memset>
  if(hadc->Instance==ADC1)
 800543a:	682a      	ldr	r2, [r5, #0]
 800543c:	4b2c      	ldr	r3, [pc, #176]	; (80054f0 <HAL_ADC_MspInit+0xc8>)
 800543e:	429a      	cmp	r2, r3
 8005440:	d154      	bne.n	80054ec <HAL_ADC_MspInit+0xc4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005442:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 8005446:	699a      	ldr	r2, [r3, #24]
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = JOY1_X_Pin|JO1_Y_Pin|JOY2_X_Pin|JOY2_Y_Pin
                          |SW3_Pin|SW4_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005448:	2403      	movs	r4, #3
    __HAL_RCC_ADC1_CLK_ENABLE();
 800544a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800544e:	619a      	str	r2, [r3, #24]
 8005450:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005452:	a904      	add	r1, sp, #16
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005454:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8005458:	9200      	str	r2, [sp, #0]
 800545a:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800545c:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800545e:	4825      	ldr	r0, [pc, #148]	; (80054f4 <HAL_ADC_MspInit+0xcc>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005460:	f042 0210 	orr.w	r2, r2, #16
 8005464:	619a      	str	r2, [r3, #24]
 8005466:	699a      	ldr	r2, [r3, #24]
 8005468:	f002 0210 	and.w	r2, r2, #16
 800546c:	9201      	str	r2, [sp, #4]
 800546e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005470:	699a      	ldr	r2, [r3, #24]
 8005472:	f042 0204 	orr.w	r2, r2, #4
 8005476:	619a      	str	r2, [r3, #24]
 8005478:	699a      	ldr	r2, [r3, #24]
 800547a:	f002 0204 	and.w	r2, r2, #4
 800547e:	9202      	str	r2, [sp, #8]
 8005480:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005482:	699a      	ldr	r2, [r3, #24]
 8005484:	f042 0208 	orr.w	r2, r2, #8
 8005488:	619a      	str	r2, [r3, #24]
 800548a:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800548c:	9405      	str	r4, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800548e:	f003 0308 	and.w	r3, r3, #8
 8005492:	9303      	str	r3, [sp, #12]
 8005494:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = JOY1_X_Pin|JO1_Y_Pin|JOY2_X_Pin|JOY2_Y_Pin
 8005496:	233f      	movs	r3, #63	; 0x3f
 8005498:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800549a:	f7fb fd99 	bl	8000fd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = POT1_Pin|POT2_Pin|SW1_Pin|SW2_Pin;
 800549e:	23e1      	movs	r3, #225	; 0xe1
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80054a0:	a904      	add	r1, sp, #16
 80054a2:	4815      	ldr	r0, [pc, #84]	; (80054f8 <HAL_ADC_MspInit+0xd0>)
    GPIO_InitStruct.Pin = POT1_Pin|POT2_Pin|SW1_Pin|SW2_Pin;
 80054a4:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80054a6:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80054a8:	f7fb fd92 	bl	8000fd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BAT_LEVEL_Pin;
 80054ac:	2301      	movs	r3, #1
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(BAT_LEVEL_GPIO_Port, &GPIO_InitStruct);
 80054ae:	4813      	ldr	r0, [pc, #76]	; (80054fc <HAL_ADC_MspInit+0xd4>)
 80054b0:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = BAT_LEVEL_Pin;
 80054b2:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80054b4:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(BAT_LEVEL_GPIO_Port, &GPIO_InitStruct);
 80054b6:	f7fb fd8b 	bl	8000fd0 <HAL_GPIO_Init>
    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80054ba:	2280      	movs	r2, #128	; 0x80
    hdma_adc1.Instance = DMA1_Channel1;
 80054bc:	4c10      	ldr	r4, [pc, #64]	; (8005500 <HAL_ADC_MspInit+0xd8>)
 80054be:	4b11      	ldr	r3, [pc, #68]	; (8005504 <HAL_ADC_MspInit+0xdc>)
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80054c0:	60e2      	str	r2, [r4, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80054c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80054c6:	6122      	str	r2, [r4, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80054c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_adc1.Instance = DMA1_Channel1;
 80054cc:	6023      	str	r3, [r4, #0]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80054ce:	6162      	str	r2, [r4, #20]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80054d0:	2300      	movs	r3, #0
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80054d2:	2220      	movs	r2, #32
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80054d4:	4620      	mov	r0, r4
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80054d6:	6063      	str	r3, [r4, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80054d8:	60a3      	str	r3, [r4, #8]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80054da:	61a2      	str	r2, [r4, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80054dc:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80054de:	f7fb fc1d 	bl	8000d1c <HAL_DMA_Init>
 80054e2:	b108      	cbz	r0, 80054e8 <HAL_ADC_MspInit+0xc0>
    {
      Error_Handler();
 80054e4:	f7fe fc28 	bl	8003d38 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80054e8:	622c      	str	r4, [r5, #32]
 80054ea:	6265      	str	r5, [r4, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80054ec:	b009      	add	sp, #36	; 0x24
 80054ee:	bd30      	pop	{r4, r5, pc}
 80054f0:	40012400 	.word	0x40012400
 80054f4:	40011000 	.word	0x40011000
 80054f8:	40010800 	.word	0x40010800
 80054fc:	40010c00 	.word	0x40010c00
 8005500:	20000744 	.word	0x20000744
 8005504:	40020008 	.word	0x40020008

08005508 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005508:	b510      	push	{r4, lr}
 800550a:	4604      	mov	r4, r0
 800550c:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800550e:	2210      	movs	r2, #16
 8005510:	2100      	movs	r1, #0
 8005512:	a806      	add	r0, sp, #24
 8005514:	f000 fa2b 	bl	800596e <memset>
  if(hi2c->Instance==I2C1)
 8005518:	6823      	ldr	r3, [r4, #0]
 800551a:	4a26      	ldr	r2, [pc, #152]	; (80055b4 <HAL_I2C_MspInit+0xac>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d127      	bne.n	8005570 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */
	  __HAL_RCC_I2C2_CLK_ENABLE();  // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  add manualy
 8005520:	4c25      	ldr	r4, [pc, #148]	; (80055b8 <HAL_I2C_MspInit+0xb0>)
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005522:	a906      	add	r1, sp, #24
	  __HAL_RCC_I2C2_CLK_ENABLE();  // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  add manualy
 8005524:	69e3      	ldr	r3, [r4, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005526:	4825      	ldr	r0, [pc, #148]	; (80055bc <HAL_I2C_MspInit+0xb4>)
	  __HAL_RCC_I2C2_CLK_ENABLE();  // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  add manualy
 8005528:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800552c:	61e3      	str	r3, [r4, #28]
 800552e:	69e3      	ldr	r3, [r4, #28]
 8005530:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005534:	9301      	str	r3, [sp, #4]
 8005536:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005538:	69a3      	ldr	r3, [r4, #24]
 800553a:	f043 0308 	orr.w	r3, r3, #8
 800553e:	61a3      	str	r3, [r4, #24]
 8005540:	69a3      	ldr	r3, [r4, #24]
 8005542:	f003 0308 	and.w	r3, r3, #8
 8005546:	9302      	str	r3, [sp, #8]
 8005548:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800554a:	23c0      	movs	r3, #192	; 0xc0
 800554c:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800554e:	2312      	movs	r3, #18
 8005550:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005552:	2303      	movs	r3, #3
 8005554:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005556:	f7fb fd3b 	bl	8000fd0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800555a:	69e3      	ldr	r3, [r4, #28]
 800555c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005560:	61e3      	str	r3, [r4, #28]
 8005562:	69e3      	ldr	r3, [r4, #28]
 8005564:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005568:	9303      	str	r3, [sp, #12]
 800556a:	9b03      	ldr	r3, [sp, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800556c:	b00a      	add	sp, #40	; 0x28
 800556e:	bd10      	pop	{r4, pc}
  else if(hi2c->Instance==I2C2)
 8005570:	4a13      	ldr	r2, [pc, #76]	; (80055c0 <HAL_I2C_MspInit+0xb8>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d1fa      	bne.n	800556c <HAL_I2C_MspInit+0x64>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005576:	4c10      	ldr	r4, [pc, #64]	; (80055b8 <HAL_I2C_MspInit+0xb0>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005578:	a906      	add	r1, sp, #24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800557a:	69a3      	ldr	r3, [r4, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800557c:	480f      	ldr	r0, [pc, #60]	; (80055bc <HAL_I2C_MspInit+0xb4>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800557e:	f043 0308 	orr.w	r3, r3, #8
 8005582:	61a3      	str	r3, [r4, #24]
 8005584:	69a3      	ldr	r3, [r4, #24]
 8005586:	f003 0308 	and.w	r3, r3, #8
 800558a:	9304      	str	r3, [sp, #16]
 800558c:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800558e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005592:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005594:	2312      	movs	r3, #18
 8005596:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005598:	2303      	movs	r3, #3
 800559a:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800559c:	f7fb fd18 	bl	8000fd0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80055a0:	69e3      	ldr	r3, [r4, #28]
 80055a2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80055a6:	61e3      	str	r3, [r4, #28]
 80055a8:	69e3      	ldr	r3, [r4, #28]
 80055aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055ae:	9305      	str	r3, [sp, #20]
 80055b0:	9b05      	ldr	r3, [sp, #20]
}
 80055b2:	e7db      	b.n	800556c <HAL_I2C_MspInit+0x64>
 80055b4:	40005400 	.word	0x40005400
 80055b8:	40021000 	.word	0x40021000
 80055bc:	40010c00 	.word	0x40010c00
 80055c0:	40005800 	.word	0x40005800

080055c4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80055c4:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80055c6:	2410      	movs	r4, #16
{
 80055c8:	4605      	mov	r5, r0
 80055ca:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80055cc:	4622      	mov	r2, r4
 80055ce:	2100      	movs	r1, #0
 80055d0:	a802      	add	r0, sp, #8
 80055d2:	f000 f9cc 	bl	800596e <memset>
  if(hspi->Instance==SPI1)
 80055d6:	682a      	ldr	r2, [r5, #0]
 80055d8:	4b18      	ldr	r3, [pc, #96]	; (800563c <HAL_SPI_MspInit+0x78>)
 80055da:	429a      	cmp	r2, r3
 80055dc:	d12c      	bne.n	8005638 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80055de:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
 80055e2:	699a      	ldr	r2, [r3, #24]
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80055e4:	a902      	add	r1, sp, #8
    __HAL_RCC_SPI1_CLK_ENABLE();
 80055e6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80055ea:	619a      	str	r2, [r3, #24]
 80055ec:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80055ee:	4814      	ldr	r0, [pc, #80]	; (8005640 <HAL_SPI_MspInit+0x7c>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 80055f0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80055f4:	9200      	str	r2, [sp, #0]
 80055f6:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80055f8:	699a      	ldr	r2, [r3, #24]
 80055fa:	f042 0208 	orr.w	r2, r2, #8
 80055fe:	619a      	str	r2, [r3, #24]
 8005600:	699b      	ldr	r3, [r3, #24]
 8005602:	f003 0308 	and.w	r3, r3, #8
 8005606:	9301      	str	r3, [sp, #4]
 8005608:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 800560a:	2328      	movs	r3, #40	; 0x28
 800560c:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800560e:	2302      	movs	r3, #2
 8005610:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005612:	2303      	movs	r3, #3
 8005614:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005616:	f7fb fcdb 	bl	8000fd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800561a:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800561c:	a902      	add	r1, sp, #8
 800561e:	4808      	ldr	r0, [pc, #32]	; (8005640 <HAL_SPI_MspInit+0x7c>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005620:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005622:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8005624:	9402      	str	r4, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005626:	f7fb fcd3 	bl	8000fd0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 800562a:	4a06      	ldr	r2, [pc, #24]	; (8005644 <HAL_SPI_MspInit+0x80>)
 800562c:	6853      	ldr	r3, [r2, #4]
 800562e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8005632:	f043 0301 	orr.w	r3, r3, #1
 8005636:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8005638:	b007      	add	sp, #28
 800563a:	bd30      	pop	{r4, r5, pc}
 800563c:	40013000 	.word	0x40013000
 8005640:	40010c00 	.word	0x40010c00
 8005644:	40010000 	.word	0x40010000

08005648 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8005648:	b510      	push	{r4, lr}
 800564a:	4604      	mov	r4, r0
 800564c:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800564e:	2210      	movs	r2, #16
 8005650:	2100      	movs	r1, #0
 8005652:	a802      	add	r0, sp, #8
 8005654:	f000 f98b 	bl	800596e <memset>
  if(htim_encoder->Instance==TIM1)
 8005658:	6822      	ldr	r2, [r4, #0]
 800565a:	4b11      	ldr	r3, [pc, #68]	; (80056a0 <HAL_TIM_Encoder_MspInit+0x58>)
 800565c:	429a      	cmp	r2, r3
 800565e:	d11c      	bne.n	800569a <HAL_TIM_Encoder_MspInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005660:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8005664:	699a      	ldr	r2, [r3, #24]
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005666:	a902      	add	r1, sp, #8
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005668:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800566c:	619a      	str	r2, [r3, #24]
 800566e:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005670:	480c      	ldr	r0, [pc, #48]	; (80056a4 <HAL_TIM_Encoder_MspInit+0x5c>)
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005672:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8005676:	9200      	str	r2, [sp, #0]
 8005678:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800567a:	699a      	ldr	r2, [r3, #24]
 800567c:	f042 0204 	orr.w	r2, r2, #4
 8005680:	619a      	str	r2, [r3, #24]
 8005682:	699b      	ldr	r3, [r3, #24]
 8005684:	f003 0304 	and.w	r3, r3, #4
 8005688:	9301      	str	r3, [sp, #4]
 800568a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800568c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005690:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005692:	2301      	movs	r3, #1
 8005694:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005696:	f7fb fc9b 	bl	8000fd0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800569a:	b006      	add	sp, #24
 800569c:	bd10      	pop	{r4, pc}
 800569e:	bf00      	nop
 80056a0:	40012c00 	.word	0x40012c00
 80056a4:	40010800 	.word	0x40010800

080056a8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80056a8:	b507      	push	{r0, r1, r2, lr}
  if(htim_base->Instance==TIM6)
 80056aa:	4b0d      	ldr	r3, [pc, #52]	; (80056e0 <HAL_TIM_Base_MspInit+0x38>)
 80056ac:	6802      	ldr	r2, [r0, #0]
 80056ae:	429a      	cmp	r2, r3
 80056b0:	d112      	bne.n	80056d8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80056b2:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80056b6:	69da      	ldr	r2, [r3, #28]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 80056b8:	2036      	movs	r0, #54	; 0x36
    __HAL_RCC_TIM6_CLK_ENABLE();
 80056ba:	f042 0210 	orr.w	r2, r2, #16
 80056be:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 80056c0:	2200      	movs	r2, #0
    __HAL_RCC_TIM6_CLK_ENABLE();
 80056c2:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 80056c4:	4611      	mov	r1, r2
    __HAL_RCC_TIM6_CLK_ENABLE();
 80056c6:	f003 0310 	and.w	r3, r3, #16
 80056ca:	9301      	str	r3, [sp, #4]
 80056cc:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 80056ce:	f7fb facd 	bl	8000c6c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 80056d2:	2036      	movs	r0, #54	; 0x36
 80056d4:	f7fb fafe 	bl	8000cd4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80056d8:	b003      	add	sp, #12
 80056da:	f85d fb04 	ldr.w	pc, [sp], #4
 80056de:	bf00      	nop
 80056e0:	40001000 	.word	0x40001000

080056e4 <HAL_UART_MspInit>:
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80056e4:	2210      	movs	r2, #16
{
 80056e6:	b510      	push	{r4, lr}
 80056e8:	4604      	mov	r4, r0
 80056ea:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80056ec:	eb0d 0002 	add.w	r0, sp, r2
 80056f0:	2100      	movs	r1, #0
 80056f2:	f000 f93c 	bl	800596e <memset>
  if(huart->Instance==USART2)
 80056f6:	6823      	ldr	r3, [r4, #0]
 80056f8:	4a2f      	ldr	r2, [pc, #188]	; (80057b8 <HAL_UART_MspInit+0xd4>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d127      	bne.n	800574e <HAL_UART_MspInit+0x6a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80056fe:	4b2f      	ldr	r3, [pc, #188]	; (80057bc <HAL_UART_MspInit+0xd8>)
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005700:	a904      	add	r1, sp, #16
    __HAL_RCC_USART2_CLK_ENABLE();
 8005702:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005704:	482e      	ldr	r0, [pc, #184]	; (80057c0 <HAL_UART_MspInit+0xdc>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8005706:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800570a:	61da      	str	r2, [r3, #28]
 800570c:	69da      	ldr	r2, [r3, #28]
 800570e:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8005712:	9200      	str	r2, [sp, #0]
 8005714:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005716:	699a      	ldr	r2, [r3, #24]
 8005718:	f042 0204 	orr.w	r2, r2, #4
 800571c:	619a      	str	r2, [r3, #24]
 800571e:	699b      	ldr	r3, [r3, #24]
 8005720:	f003 0304 	and.w	r3, r3, #4
 8005724:	9301      	str	r3, [sp, #4]
 8005726:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8005728:	2304      	movs	r3, #4
 800572a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800572c:	2302      	movs	r3, #2
 800572e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005730:	2303      	movs	r3, #3
 8005732:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005734:	f7fb fc4c 	bl	8000fd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8005738:	2308      	movs	r3, #8
 800573a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800573c:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800573e:	a904      	add	r1, sp, #16
 8005740:	481f      	ldr	r0, [pc, #124]	; (80057c0 <HAL_UART_MspInit+0xdc>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005742:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005744:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005746:	f7fb fc43 	bl	8000fd0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800574a:	b008      	add	sp, #32
 800574c:	bd10      	pop	{r4, pc}
  else if(huart->Instance==USART3)
 800574e:	4a1d      	ldr	r2, [pc, #116]	; (80057c4 <HAL_UART_MspInit+0xe0>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d1fa      	bne.n	800574a <HAL_UART_MspInit+0x66>
    __HAL_RCC_USART3_CLK_ENABLE();
 8005754:	4b19      	ldr	r3, [pc, #100]	; (80057bc <HAL_UART_MspInit+0xd8>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005756:	a904      	add	r1, sp, #16
    __HAL_RCC_USART3_CLK_ENABLE();
 8005758:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800575a:	481b      	ldr	r0, [pc, #108]	; (80057c8 <HAL_UART_MspInit+0xe4>)
    __HAL_RCC_USART3_CLK_ENABLE();
 800575c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8005760:	61da      	str	r2, [r3, #28]
 8005762:	69da      	ldr	r2, [r3, #28]
 8005764:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8005768:	9202      	str	r2, [sp, #8]
 800576a:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800576c:	699a      	ldr	r2, [r3, #24]
 800576e:	f042 0210 	orr.w	r2, r2, #16
 8005772:	619a      	str	r2, [r3, #24]
 8005774:	699b      	ldr	r3, [r3, #24]
 8005776:	f003 0310 	and.w	r3, r3, #16
 800577a:	9303      	str	r3, [sp, #12]
 800577c:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800577e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005782:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005784:	2302      	movs	r3, #2
 8005786:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005788:	2303      	movs	r3, #3
 800578a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800578c:	f7fb fc20 	bl	8000fd0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8005790:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005794:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005796:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005798:	a904      	add	r1, sp, #16
 800579a:	480b      	ldr	r0, [pc, #44]	; (80057c8 <HAL_UART_MspInit+0xe4>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800579c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800579e:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80057a0:	f7fb fc16 	bl	8000fd0 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_USART3_PARTIAL();
 80057a4:	4a09      	ldr	r2, [pc, #36]	; (80057cc <HAL_UART_MspInit+0xe8>)
 80057a6:	6853      	ldr	r3, [r2, #4]
 80057a8:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80057ac:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80057b0:	f043 0310 	orr.w	r3, r3, #16
 80057b4:	6053      	str	r3, [r2, #4]
}
 80057b6:	e7c8      	b.n	800574a <HAL_UART_MspInit+0x66>
 80057b8:	40004400 	.word	0x40004400
 80057bc:	40021000 	.word	0x40021000
 80057c0:	40010800 	.word	0x40010800
 80057c4:	40004800 	.word	0x40004800
 80057c8:	40011000 	.word	0x40011000
 80057cc:	40010000 	.word	0x40010000

080057d0 <NMI_Handler>:
 80057d0:	4770      	bx	lr

080057d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80057d2:	e7fe      	b.n	80057d2 <HardFault_Handler>

080057d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80057d4:	e7fe      	b.n	80057d4 <MemManage_Handler>

080057d6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80057d6:	e7fe      	b.n	80057d6 <BusFault_Handler>

080057d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80057d8:	e7fe      	b.n	80057d8 <UsageFault_Handler>

080057da <SVC_Handler>:
 80057da:	4770      	bx	lr

080057dc <DebugMon_Handler>:
 80057dc:	4770      	bx	lr

080057de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80057de:	4770      	bx	lr

080057e0 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80057e0:	f7fa bfdc 	b.w	800079c <HAL_IncTick>

080057e4 <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80057e4:	4801      	ldr	r0, [pc, #4]	; (80057ec <DMA1_Channel1_IRQHandler+0x8>)
 80057e6:	f7fb bb17 	b.w	8000e18 <HAL_DMA_IRQHandler>
 80057ea:	bf00      	nop
 80057ec:	20000744 	.word	0x20000744

080057f0 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80057f0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80057f4:	f7fb bcec 	b.w	80011d0 <HAL_GPIO_EXTI_IRQHandler>

080057f8 <TIM6_IRQHandler>:
void TIM6_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80057f8:	4801      	ldr	r0, [pc, #4]	; (8005800 <TIM6_IRQHandler+0x8>)
 80057fa:	f7fd ba45 	b.w	8002c88 <HAL_TIM_IRQHandler>
 80057fe:	bf00      	nop
 8005800:	20000788 	.word	0x20000788

08005804 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005804:	b570      	push	{r4, r5, r6, lr}
 8005806:	460e      	mov	r6, r1
 8005808:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800580a:	460c      	mov	r4, r1
 800580c:	1ba3      	subs	r3, r4, r6
 800580e:	429d      	cmp	r5, r3
 8005810:	dc01      	bgt.n	8005816 <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8005812:	4628      	mov	r0, r5
 8005814:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8005816:	f3af 8000 	nop.w
 800581a:	f804 0b01 	strb.w	r0, [r4], #1
 800581e:	e7f5      	b.n	800580c <_read+0x8>

08005820 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8005820:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8005822:	4b0a      	ldr	r3, [pc, #40]	; (800584c <_sbrk+0x2c>)
{
 8005824:	4602      	mov	r2, r0
	if (heap_end == 0)
 8005826:	6819      	ldr	r1, [r3, #0]
 8005828:	b909      	cbnz	r1, 800582e <_sbrk+0xe>
		heap_end = &end;
 800582a:	4909      	ldr	r1, [pc, #36]	; (8005850 <_sbrk+0x30>)
 800582c:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 800582e:	4669      	mov	r1, sp
	prev_heap_end = heap_end;
 8005830:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8005832:	4402      	add	r2, r0
 8005834:	428a      	cmp	r2, r1
 8005836:	d906      	bls.n	8005846 <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8005838:	f000 f864 	bl	8005904 <__errno>
 800583c:	230c      	movs	r3, #12
 800583e:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8005840:	f04f 30ff 	mov.w	r0, #4294967295
 8005844:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 8005846:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 8005848:	bd08      	pop	{r3, pc}
 800584a:	bf00      	nop
 800584c:	20000578 	.word	0x20000578
 8005850:	20000928 	.word	0x20000928

08005854 <_close>:

int _close(int file)
{
	return -1;
}
 8005854:	f04f 30ff 	mov.w	r0, #4294967295
 8005858:	4770      	bx	lr

0800585a <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 800585a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 800585e:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8005860:	604b      	str	r3, [r1, #4]
}
 8005862:	4770      	bx	lr

08005864 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8005864:	2001      	movs	r0, #1
 8005866:	4770      	bx	lr

08005868 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8005868:	2000      	movs	r0, #0
 800586a:	4770      	bx	lr

0800586c <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800586c:	4b0f      	ldr	r3, [pc, #60]	; (80058ac <SystemInit+0x40>)
 800586e:	681a      	ldr	r2, [r3, #0]
 8005870:	f042 0201 	orr.w	r2, r2, #1
 8005874:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8005876:	6859      	ldr	r1, [r3, #4]
 8005878:	4a0d      	ldr	r2, [pc, #52]	; (80058b0 <SystemInit+0x44>)
 800587a:	400a      	ands	r2, r1
 800587c:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800587e:	681a      	ldr	r2, [r3, #0]
 8005880:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8005884:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005888:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800588a:	681a      	ldr	r2, [r3, #0]
 800588c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005890:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8005892:	685a      	ldr	r2, [r3, #4]
 8005894:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8005898:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800589a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800589e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80058a0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80058a4:	4b03      	ldr	r3, [pc, #12]	; (80058b4 <SystemInit+0x48>)
 80058a6:	609a      	str	r2, [r3, #8]
 80058a8:	4770      	bx	lr
 80058aa:	bf00      	nop
 80058ac:	40021000 	.word	0x40021000
 80058b0:	f8ff0000 	.word	0xf8ff0000
 80058b4:	e000ed00 	.word	0xe000ed00

080058b8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80058b8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80058ba:	e003      	b.n	80058c4 <LoopCopyDataInit>

080058bc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80058bc:	4b0b      	ldr	r3, [pc, #44]	; (80058ec <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80058be:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80058c0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80058c2:	3104      	adds	r1, #4

080058c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80058c4:	480a      	ldr	r0, [pc, #40]	; (80058f0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80058c6:	4b0b      	ldr	r3, [pc, #44]	; (80058f4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80058c8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80058ca:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80058cc:	d3f6      	bcc.n	80058bc <CopyDataInit>
  ldr r2, =_sbss
 80058ce:	4a0a      	ldr	r2, [pc, #40]	; (80058f8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80058d0:	e002      	b.n	80058d8 <LoopFillZerobss>

080058d2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80058d2:	2300      	movs	r3, #0
  str r3, [r2], #4
 80058d4:	f842 3b04 	str.w	r3, [r2], #4

080058d8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80058d8:	4b08      	ldr	r3, [pc, #32]	; (80058fc <LoopFillZerobss+0x24>)
  cmp r2, r3
 80058da:	429a      	cmp	r2, r3
  bcc FillZerobss
 80058dc:	d3f9      	bcc.n	80058d2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80058de:	f7ff ffc5 	bl	800586c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80058e2:	f000 f815 	bl	8005910 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80058e6:	f7fd ff85 	bl	80037f4 <main>
  bx lr
 80058ea:	4770      	bx	lr
  ldr r3, =_sidata
 80058ec:	08007df8 	.word	0x08007df8
  ldr r0, =_sdata
 80058f0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80058f4:	20000088 	.word	0x20000088
  ldr r2, =_sbss
 80058f8:	20000088 	.word	0x20000088
  ldr r3, = _ebss
 80058fc:	20000928 	.word	0x20000928

08005900 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005900:	e7fe      	b.n	8005900 <ADC1_2_IRQHandler>
	...

08005904 <__errno>:
 8005904:	4b01      	ldr	r3, [pc, #4]	; (800590c <__errno+0x8>)
 8005906:	6818      	ldr	r0, [r3, #0]
 8005908:	4770      	bx	lr
 800590a:	bf00      	nop
 800590c:	20000024 	.word	0x20000024

08005910 <__libc_init_array>:
 8005910:	b570      	push	{r4, r5, r6, lr}
 8005912:	2500      	movs	r5, #0
 8005914:	4e0c      	ldr	r6, [pc, #48]	; (8005948 <__libc_init_array+0x38>)
 8005916:	4c0d      	ldr	r4, [pc, #52]	; (800594c <__libc_init_array+0x3c>)
 8005918:	1ba4      	subs	r4, r4, r6
 800591a:	10a4      	asrs	r4, r4, #2
 800591c:	42a5      	cmp	r5, r4
 800591e:	d109      	bne.n	8005934 <__libc_init_array+0x24>
 8005920:	f001 f95c 	bl	8006bdc <_init>
 8005924:	2500      	movs	r5, #0
 8005926:	4e0a      	ldr	r6, [pc, #40]	; (8005950 <__libc_init_array+0x40>)
 8005928:	4c0a      	ldr	r4, [pc, #40]	; (8005954 <__libc_init_array+0x44>)
 800592a:	1ba4      	subs	r4, r4, r6
 800592c:	10a4      	asrs	r4, r4, #2
 800592e:	42a5      	cmp	r5, r4
 8005930:	d105      	bne.n	800593e <__libc_init_array+0x2e>
 8005932:	bd70      	pop	{r4, r5, r6, pc}
 8005934:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005938:	4798      	blx	r3
 800593a:	3501      	adds	r5, #1
 800593c:	e7ee      	b.n	800591c <__libc_init_array+0xc>
 800593e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005942:	4798      	blx	r3
 8005944:	3501      	adds	r5, #1
 8005946:	e7f2      	b.n	800592e <__libc_init_array+0x1e>
 8005948:	08007df0 	.word	0x08007df0
 800594c:	08007df0 	.word	0x08007df0
 8005950:	08007df0 	.word	0x08007df0
 8005954:	08007df4 	.word	0x08007df4

08005958 <memcpy>:
 8005958:	b510      	push	{r4, lr}
 800595a:	1e43      	subs	r3, r0, #1
 800595c:	440a      	add	r2, r1
 800595e:	4291      	cmp	r1, r2
 8005960:	d100      	bne.n	8005964 <memcpy+0xc>
 8005962:	bd10      	pop	{r4, pc}
 8005964:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005968:	f803 4f01 	strb.w	r4, [r3, #1]!
 800596c:	e7f7      	b.n	800595e <memcpy+0x6>

0800596e <memset>:
 800596e:	4603      	mov	r3, r0
 8005970:	4402      	add	r2, r0
 8005972:	4293      	cmp	r3, r2
 8005974:	d100      	bne.n	8005978 <memset+0xa>
 8005976:	4770      	bx	lr
 8005978:	f803 1b01 	strb.w	r1, [r3], #1
 800597c:	e7f9      	b.n	8005972 <memset+0x4>
	...

08005980 <iprintf>:
 8005980:	b40f      	push	{r0, r1, r2, r3}
 8005982:	4b0a      	ldr	r3, [pc, #40]	; (80059ac <iprintf+0x2c>)
 8005984:	b513      	push	{r0, r1, r4, lr}
 8005986:	681c      	ldr	r4, [r3, #0]
 8005988:	b124      	cbz	r4, 8005994 <iprintf+0x14>
 800598a:	69a3      	ldr	r3, [r4, #24]
 800598c:	b913      	cbnz	r3, 8005994 <iprintf+0x14>
 800598e:	4620      	mov	r0, r4
 8005990:	f000 fa50 	bl	8005e34 <__sinit>
 8005994:	ab05      	add	r3, sp, #20
 8005996:	9a04      	ldr	r2, [sp, #16]
 8005998:	68a1      	ldr	r1, [r4, #8]
 800599a:	4620      	mov	r0, r4
 800599c:	9301      	str	r3, [sp, #4]
 800599e:	f000 fd59 	bl	8006454 <_vfiprintf_r>
 80059a2:	b002      	add	sp, #8
 80059a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80059a8:	b004      	add	sp, #16
 80059aa:	4770      	bx	lr
 80059ac:	20000024 	.word	0x20000024

080059b0 <_puts_r>:
 80059b0:	b570      	push	{r4, r5, r6, lr}
 80059b2:	460e      	mov	r6, r1
 80059b4:	4605      	mov	r5, r0
 80059b6:	b118      	cbz	r0, 80059c0 <_puts_r+0x10>
 80059b8:	6983      	ldr	r3, [r0, #24]
 80059ba:	b90b      	cbnz	r3, 80059c0 <_puts_r+0x10>
 80059bc:	f000 fa3a 	bl	8005e34 <__sinit>
 80059c0:	69ab      	ldr	r3, [r5, #24]
 80059c2:	68ac      	ldr	r4, [r5, #8]
 80059c4:	b913      	cbnz	r3, 80059cc <_puts_r+0x1c>
 80059c6:	4628      	mov	r0, r5
 80059c8:	f000 fa34 	bl	8005e34 <__sinit>
 80059cc:	4b23      	ldr	r3, [pc, #140]	; (8005a5c <_puts_r+0xac>)
 80059ce:	429c      	cmp	r4, r3
 80059d0:	d117      	bne.n	8005a02 <_puts_r+0x52>
 80059d2:	686c      	ldr	r4, [r5, #4]
 80059d4:	89a3      	ldrh	r3, [r4, #12]
 80059d6:	071b      	lsls	r3, r3, #28
 80059d8:	d51d      	bpl.n	8005a16 <_puts_r+0x66>
 80059da:	6923      	ldr	r3, [r4, #16]
 80059dc:	b1db      	cbz	r3, 8005a16 <_puts_r+0x66>
 80059de:	3e01      	subs	r6, #1
 80059e0:	68a3      	ldr	r3, [r4, #8]
 80059e2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80059e6:	3b01      	subs	r3, #1
 80059e8:	60a3      	str	r3, [r4, #8]
 80059ea:	b9e9      	cbnz	r1, 8005a28 <_puts_r+0x78>
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	da2e      	bge.n	8005a4e <_puts_r+0x9e>
 80059f0:	4622      	mov	r2, r4
 80059f2:	210a      	movs	r1, #10
 80059f4:	4628      	mov	r0, r5
 80059f6:	f000 f86b 	bl	8005ad0 <__swbuf_r>
 80059fa:	3001      	adds	r0, #1
 80059fc:	d011      	beq.n	8005a22 <_puts_r+0x72>
 80059fe:	200a      	movs	r0, #10
 8005a00:	bd70      	pop	{r4, r5, r6, pc}
 8005a02:	4b17      	ldr	r3, [pc, #92]	; (8005a60 <_puts_r+0xb0>)
 8005a04:	429c      	cmp	r4, r3
 8005a06:	d101      	bne.n	8005a0c <_puts_r+0x5c>
 8005a08:	68ac      	ldr	r4, [r5, #8]
 8005a0a:	e7e3      	b.n	80059d4 <_puts_r+0x24>
 8005a0c:	4b15      	ldr	r3, [pc, #84]	; (8005a64 <_puts_r+0xb4>)
 8005a0e:	429c      	cmp	r4, r3
 8005a10:	bf08      	it	eq
 8005a12:	68ec      	ldreq	r4, [r5, #12]
 8005a14:	e7de      	b.n	80059d4 <_puts_r+0x24>
 8005a16:	4621      	mov	r1, r4
 8005a18:	4628      	mov	r0, r5
 8005a1a:	f000 f8ab 	bl	8005b74 <__swsetup_r>
 8005a1e:	2800      	cmp	r0, #0
 8005a20:	d0dd      	beq.n	80059de <_puts_r+0x2e>
 8005a22:	f04f 30ff 	mov.w	r0, #4294967295
 8005a26:	bd70      	pop	{r4, r5, r6, pc}
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	da04      	bge.n	8005a36 <_puts_r+0x86>
 8005a2c:	69a2      	ldr	r2, [r4, #24]
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	db06      	blt.n	8005a40 <_puts_r+0x90>
 8005a32:	290a      	cmp	r1, #10
 8005a34:	d004      	beq.n	8005a40 <_puts_r+0x90>
 8005a36:	6823      	ldr	r3, [r4, #0]
 8005a38:	1c5a      	adds	r2, r3, #1
 8005a3a:	6022      	str	r2, [r4, #0]
 8005a3c:	7019      	strb	r1, [r3, #0]
 8005a3e:	e7cf      	b.n	80059e0 <_puts_r+0x30>
 8005a40:	4622      	mov	r2, r4
 8005a42:	4628      	mov	r0, r5
 8005a44:	f000 f844 	bl	8005ad0 <__swbuf_r>
 8005a48:	3001      	adds	r0, #1
 8005a4a:	d1c9      	bne.n	80059e0 <_puts_r+0x30>
 8005a4c:	e7e9      	b.n	8005a22 <_puts_r+0x72>
 8005a4e:	200a      	movs	r0, #10
 8005a50:	6823      	ldr	r3, [r4, #0]
 8005a52:	1c5a      	adds	r2, r3, #1
 8005a54:	6022      	str	r2, [r4, #0]
 8005a56:	7018      	strb	r0, [r3, #0]
 8005a58:	bd70      	pop	{r4, r5, r6, pc}
 8005a5a:	bf00      	nop
 8005a5c:	08007d7c 	.word	0x08007d7c
 8005a60:	08007d9c 	.word	0x08007d9c
 8005a64:	08007d5c 	.word	0x08007d5c

08005a68 <puts>:
 8005a68:	4b02      	ldr	r3, [pc, #8]	; (8005a74 <puts+0xc>)
 8005a6a:	4601      	mov	r1, r0
 8005a6c:	6818      	ldr	r0, [r3, #0]
 8005a6e:	f7ff bf9f 	b.w	80059b0 <_puts_r>
 8005a72:	bf00      	nop
 8005a74:	20000024 	.word	0x20000024

08005a78 <siprintf>:
 8005a78:	b40e      	push	{r1, r2, r3}
 8005a7a:	f44f 7102 	mov.w	r1, #520	; 0x208
 8005a7e:	b500      	push	{lr}
 8005a80:	b09c      	sub	sp, #112	; 0x70
 8005a82:	f8ad 1014 	strh.w	r1, [sp, #20]
 8005a86:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005a8a:	9104      	str	r1, [sp, #16]
 8005a8c:	9107      	str	r1, [sp, #28]
 8005a8e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005a92:	ab1d      	add	r3, sp, #116	; 0x74
 8005a94:	9002      	str	r0, [sp, #8]
 8005a96:	9006      	str	r0, [sp, #24]
 8005a98:	4808      	ldr	r0, [pc, #32]	; (8005abc <siprintf+0x44>)
 8005a9a:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a9e:	f8ad 1016 	strh.w	r1, [sp, #22]
 8005aa2:	6800      	ldr	r0, [r0, #0]
 8005aa4:	a902      	add	r1, sp, #8
 8005aa6:	9301      	str	r3, [sp, #4]
 8005aa8:	f000 fbb8 	bl	800621c <_svfiprintf_r>
 8005aac:	2200      	movs	r2, #0
 8005aae:	9b02      	ldr	r3, [sp, #8]
 8005ab0:	701a      	strb	r2, [r3, #0]
 8005ab2:	b01c      	add	sp, #112	; 0x70
 8005ab4:	f85d eb04 	ldr.w	lr, [sp], #4
 8005ab8:	b003      	add	sp, #12
 8005aba:	4770      	bx	lr
 8005abc:	20000024 	.word	0x20000024

08005ac0 <strcpy>:
 8005ac0:	4603      	mov	r3, r0
 8005ac2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005ac6:	f803 2b01 	strb.w	r2, [r3], #1
 8005aca:	2a00      	cmp	r2, #0
 8005acc:	d1f9      	bne.n	8005ac2 <strcpy+0x2>
 8005ace:	4770      	bx	lr

08005ad0 <__swbuf_r>:
 8005ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ad2:	460e      	mov	r6, r1
 8005ad4:	4614      	mov	r4, r2
 8005ad6:	4605      	mov	r5, r0
 8005ad8:	b118      	cbz	r0, 8005ae2 <__swbuf_r+0x12>
 8005ada:	6983      	ldr	r3, [r0, #24]
 8005adc:	b90b      	cbnz	r3, 8005ae2 <__swbuf_r+0x12>
 8005ade:	f000 f9a9 	bl	8005e34 <__sinit>
 8005ae2:	4b21      	ldr	r3, [pc, #132]	; (8005b68 <__swbuf_r+0x98>)
 8005ae4:	429c      	cmp	r4, r3
 8005ae6:	d12a      	bne.n	8005b3e <__swbuf_r+0x6e>
 8005ae8:	686c      	ldr	r4, [r5, #4]
 8005aea:	69a3      	ldr	r3, [r4, #24]
 8005aec:	60a3      	str	r3, [r4, #8]
 8005aee:	89a3      	ldrh	r3, [r4, #12]
 8005af0:	071a      	lsls	r2, r3, #28
 8005af2:	d52e      	bpl.n	8005b52 <__swbuf_r+0x82>
 8005af4:	6923      	ldr	r3, [r4, #16]
 8005af6:	b363      	cbz	r3, 8005b52 <__swbuf_r+0x82>
 8005af8:	6923      	ldr	r3, [r4, #16]
 8005afa:	6820      	ldr	r0, [r4, #0]
 8005afc:	b2f6      	uxtb	r6, r6
 8005afe:	1ac0      	subs	r0, r0, r3
 8005b00:	6963      	ldr	r3, [r4, #20]
 8005b02:	4637      	mov	r7, r6
 8005b04:	4298      	cmp	r0, r3
 8005b06:	db04      	blt.n	8005b12 <__swbuf_r+0x42>
 8005b08:	4621      	mov	r1, r4
 8005b0a:	4628      	mov	r0, r5
 8005b0c:	f000 f928 	bl	8005d60 <_fflush_r>
 8005b10:	bb28      	cbnz	r0, 8005b5e <__swbuf_r+0x8e>
 8005b12:	68a3      	ldr	r3, [r4, #8]
 8005b14:	3001      	adds	r0, #1
 8005b16:	3b01      	subs	r3, #1
 8005b18:	60a3      	str	r3, [r4, #8]
 8005b1a:	6823      	ldr	r3, [r4, #0]
 8005b1c:	1c5a      	adds	r2, r3, #1
 8005b1e:	6022      	str	r2, [r4, #0]
 8005b20:	701e      	strb	r6, [r3, #0]
 8005b22:	6963      	ldr	r3, [r4, #20]
 8005b24:	4298      	cmp	r0, r3
 8005b26:	d004      	beq.n	8005b32 <__swbuf_r+0x62>
 8005b28:	89a3      	ldrh	r3, [r4, #12]
 8005b2a:	07db      	lsls	r3, r3, #31
 8005b2c:	d519      	bpl.n	8005b62 <__swbuf_r+0x92>
 8005b2e:	2e0a      	cmp	r6, #10
 8005b30:	d117      	bne.n	8005b62 <__swbuf_r+0x92>
 8005b32:	4621      	mov	r1, r4
 8005b34:	4628      	mov	r0, r5
 8005b36:	f000 f913 	bl	8005d60 <_fflush_r>
 8005b3a:	b190      	cbz	r0, 8005b62 <__swbuf_r+0x92>
 8005b3c:	e00f      	b.n	8005b5e <__swbuf_r+0x8e>
 8005b3e:	4b0b      	ldr	r3, [pc, #44]	; (8005b6c <__swbuf_r+0x9c>)
 8005b40:	429c      	cmp	r4, r3
 8005b42:	d101      	bne.n	8005b48 <__swbuf_r+0x78>
 8005b44:	68ac      	ldr	r4, [r5, #8]
 8005b46:	e7d0      	b.n	8005aea <__swbuf_r+0x1a>
 8005b48:	4b09      	ldr	r3, [pc, #36]	; (8005b70 <__swbuf_r+0xa0>)
 8005b4a:	429c      	cmp	r4, r3
 8005b4c:	bf08      	it	eq
 8005b4e:	68ec      	ldreq	r4, [r5, #12]
 8005b50:	e7cb      	b.n	8005aea <__swbuf_r+0x1a>
 8005b52:	4621      	mov	r1, r4
 8005b54:	4628      	mov	r0, r5
 8005b56:	f000 f80d 	bl	8005b74 <__swsetup_r>
 8005b5a:	2800      	cmp	r0, #0
 8005b5c:	d0cc      	beq.n	8005af8 <__swbuf_r+0x28>
 8005b5e:	f04f 37ff 	mov.w	r7, #4294967295
 8005b62:	4638      	mov	r0, r7
 8005b64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b66:	bf00      	nop
 8005b68:	08007d7c 	.word	0x08007d7c
 8005b6c:	08007d9c 	.word	0x08007d9c
 8005b70:	08007d5c 	.word	0x08007d5c

08005b74 <__swsetup_r>:
 8005b74:	4b32      	ldr	r3, [pc, #200]	; (8005c40 <__swsetup_r+0xcc>)
 8005b76:	b570      	push	{r4, r5, r6, lr}
 8005b78:	681d      	ldr	r5, [r3, #0]
 8005b7a:	4606      	mov	r6, r0
 8005b7c:	460c      	mov	r4, r1
 8005b7e:	b125      	cbz	r5, 8005b8a <__swsetup_r+0x16>
 8005b80:	69ab      	ldr	r3, [r5, #24]
 8005b82:	b913      	cbnz	r3, 8005b8a <__swsetup_r+0x16>
 8005b84:	4628      	mov	r0, r5
 8005b86:	f000 f955 	bl	8005e34 <__sinit>
 8005b8a:	4b2e      	ldr	r3, [pc, #184]	; (8005c44 <__swsetup_r+0xd0>)
 8005b8c:	429c      	cmp	r4, r3
 8005b8e:	d10f      	bne.n	8005bb0 <__swsetup_r+0x3c>
 8005b90:	686c      	ldr	r4, [r5, #4]
 8005b92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b96:	b29a      	uxth	r2, r3
 8005b98:	0715      	lsls	r5, r2, #28
 8005b9a:	d42c      	bmi.n	8005bf6 <__swsetup_r+0x82>
 8005b9c:	06d0      	lsls	r0, r2, #27
 8005b9e:	d411      	bmi.n	8005bc4 <__swsetup_r+0x50>
 8005ba0:	2209      	movs	r2, #9
 8005ba2:	6032      	str	r2, [r6, #0]
 8005ba4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ba8:	81a3      	strh	r3, [r4, #12]
 8005baa:	f04f 30ff 	mov.w	r0, #4294967295
 8005bae:	bd70      	pop	{r4, r5, r6, pc}
 8005bb0:	4b25      	ldr	r3, [pc, #148]	; (8005c48 <__swsetup_r+0xd4>)
 8005bb2:	429c      	cmp	r4, r3
 8005bb4:	d101      	bne.n	8005bba <__swsetup_r+0x46>
 8005bb6:	68ac      	ldr	r4, [r5, #8]
 8005bb8:	e7eb      	b.n	8005b92 <__swsetup_r+0x1e>
 8005bba:	4b24      	ldr	r3, [pc, #144]	; (8005c4c <__swsetup_r+0xd8>)
 8005bbc:	429c      	cmp	r4, r3
 8005bbe:	bf08      	it	eq
 8005bc0:	68ec      	ldreq	r4, [r5, #12]
 8005bc2:	e7e6      	b.n	8005b92 <__swsetup_r+0x1e>
 8005bc4:	0751      	lsls	r1, r2, #29
 8005bc6:	d512      	bpl.n	8005bee <__swsetup_r+0x7a>
 8005bc8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005bca:	b141      	cbz	r1, 8005bde <__swsetup_r+0x6a>
 8005bcc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005bd0:	4299      	cmp	r1, r3
 8005bd2:	d002      	beq.n	8005bda <__swsetup_r+0x66>
 8005bd4:	4630      	mov	r0, r6
 8005bd6:	f000 fa1b 	bl	8006010 <_free_r>
 8005bda:	2300      	movs	r3, #0
 8005bdc:	6363      	str	r3, [r4, #52]	; 0x34
 8005bde:	89a3      	ldrh	r3, [r4, #12]
 8005be0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005be4:	81a3      	strh	r3, [r4, #12]
 8005be6:	2300      	movs	r3, #0
 8005be8:	6063      	str	r3, [r4, #4]
 8005bea:	6923      	ldr	r3, [r4, #16]
 8005bec:	6023      	str	r3, [r4, #0]
 8005bee:	89a3      	ldrh	r3, [r4, #12]
 8005bf0:	f043 0308 	orr.w	r3, r3, #8
 8005bf4:	81a3      	strh	r3, [r4, #12]
 8005bf6:	6923      	ldr	r3, [r4, #16]
 8005bf8:	b94b      	cbnz	r3, 8005c0e <__swsetup_r+0x9a>
 8005bfa:	89a3      	ldrh	r3, [r4, #12]
 8005bfc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005c00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c04:	d003      	beq.n	8005c0e <__swsetup_r+0x9a>
 8005c06:	4621      	mov	r1, r4
 8005c08:	4630      	mov	r0, r6
 8005c0a:	f000 f9c1 	bl	8005f90 <__smakebuf_r>
 8005c0e:	89a2      	ldrh	r2, [r4, #12]
 8005c10:	f012 0301 	ands.w	r3, r2, #1
 8005c14:	d00c      	beq.n	8005c30 <__swsetup_r+0xbc>
 8005c16:	2300      	movs	r3, #0
 8005c18:	60a3      	str	r3, [r4, #8]
 8005c1a:	6963      	ldr	r3, [r4, #20]
 8005c1c:	425b      	negs	r3, r3
 8005c1e:	61a3      	str	r3, [r4, #24]
 8005c20:	6923      	ldr	r3, [r4, #16]
 8005c22:	b953      	cbnz	r3, 8005c3a <__swsetup_r+0xc6>
 8005c24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c28:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8005c2c:	d1ba      	bne.n	8005ba4 <__swsetup_r+0x30>
 8005c2e:	bd70      	pop	{r4, r5, r6, pc}
 8005c30:	0792      	lsls	r2, r2, #30
 8005c32:	bf58      	it	pl
 8005c34:	6963      	ldrpl	r3, [r4, #20]
 8005c36:	60a3      	str	r3, [r4, #8]
 8005c38:	e7f2      	b.n	8005c20 <__swsetup_r+0xac>
 8005c3a:	2000      	movs	r0, #0
 8005c3c:	e7f7      	b.n	8005c2e <__swsetup_r+0xba>
 8005c3e:	bf00      	nop
 8005c40:	20000024 	.word	0x20000024
 8005c44:	08007d7c 	.word	0x08007d7c
 8005c48:	08007d9c 	.word	0x08007d9c
 8005c4c:	08007d5c 	.word	0x08007d5c

08005c50 <__sflush_r>:
 8005c50:	898a      	ldrh	r2, [r1, #12]
 8005c52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c56:	4605      	mov	r5, r0
 8005c58:	0710      	lsls	r0, r2, #28
 8005c5a:	460c      	mov	r4, r1
 8005c5c:	d45a      	bmi.n	8005d14 <__sflush_r+0xc4>
 8005c5e:	684b      	ldr	r3, [r1, #4]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	dc05      	bgt.n	8005c70 <__sflush_r+0x20>
 8005c64:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	dc02      	bgt.n	8005c70 <__sflush_r+0x20>
 8005c6a:	2000      	movs	r0, #0
 8005c6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c70:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005c72:	2e00      	cmp	r6, #0
 8005c74:	d0f9      	beq.n	8005c6a <__sflush_r+0x1a>
 8005c76:	2300      	movs	r3, #0
 8005c78:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005c7c:	682f      	ldr	r7, [r5, #0]
 8005c7e:	602b      	str	r3, [r5, #0]
 8005c80:	d033      	beq.n	8005cea <__sflush_r+0x9a>
 8005c82:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005c84:	89a3      	ldrh	r3, [r4, #12]
 8005c86:	075a      	lsls	r2, r3, #29
 8005c88:	d505      	bpl.n	8005c96 <__sflush_r+0x46>
 8005c8a:	6863      	ldr	r3, [r4, #4]
 8005c8c:	1ac0      	subs	r0, r0, r3
 8005c8e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005c90:	b10b      	cbz	r3, 8005c96 <__sflush_r+0x46>
 8005c92:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005c94:	1ac0      	subs	r0, r0, r3
 8005c96:	2300      	movs	r3, #0
 8005c98:	4602      	mov	r2, r0
 8005c9a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005c9c:	6a21      	ldr	r1, [r4, #32]
 8005c9e:	4628      	mov	r0, r5
 8005ca0:	47b0      	blx	r6
 8005ca2:	1c43      	adds	r3, r0, #1
 8005ca4:	89a3      	ldrh	r3, [r4, #12]
 8005ca6:	d106      	bne.n	8005cb6 <__sflush_r+0x66>
 8005ca8:	6829      	ldr	r1, [r5, #0]
 8005caa:	291d      	cmp	r1, #29
 8005cac:	d84b      	bhi.n	8005d46 <__sflush_r+0xf6>
 8005cae:	4a2b      	ldr	r2, [pc, #172]	; (8005d5c <__sflush_r+0x10c>)
 8005cb0:	40ca      	lsrs	r2, r1
 8005cb2:	07d6      	lsls	r6, r2, #31
 8005cb4:	d547      	bpl.n	8005d46 <__sflush_r+0xf6>
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	6062      	str	r2, [r4, #4]
 8005cba:	6922      	ldr	r2, [r4, #16]
 8005cbc:	04d9      	lsls	r1, r3, #19
 8005cbe:	6022      	str	r2, [r4, #0]
 8005cc0:	d504      	bpl.n	8005ccc <__sflush_r+0x7c>
 8005cc2:	1c42      	adds	r2, r0, #1
 8005cc4:	d101      	bne.n	8005cca <__sflush_r+0x7a>
 8005cc6:	682b      	ldr	r3, [r5, #0]
 8005cc8:	b903      	cbnz	r3, 8005ccc <__sflush_r+0x7c>
 8005cca:	6560      	str	r0, [r4, #84]	; 0x54
 8005ccc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005cce:	602f      	str	r7, [r5, #0]
 8005cd0:	2900      	cmp	r1, #0
 8005cd2:	d0ca      	beq.n	8005c6a <__sflush_r+0x1a>
 8005cd4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005cd8:	4299      	cmp	r1, r3
 8005cda:	d002      	beq.n	8005ce2 <__sflush_r+0x92>
 8005cdc:	4628      	mov	r0, r5
 8005cde:	f000 f997 	bl	8006010 <_free_r>
 8005ce2:	2000      	movs	r0, #0
 8005ce4:	6360      	str	r0, [r4, #52]	; 0x34
 8005ce6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005cea:	6a21      	ldr	r1, [r4, #32]
 8005cec:	2301      	movs	r3, #1
 8005cee:	4628      	mov	r0, r5
 8005cf0:	47b0      	blx	r6
 8005cf2:	1c41      	adds	r1, r0, #1
 8005cf4:	d1c6      	bne.n	8005c84 <__sflush_r+0x34>
 8005cf6:	682b      	ldr	r3, [r5, #0]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d0c3      	beq.n	8005c84 <__sflush_r+0x34>
 8005cfc:	2b1d      	cmp	r3, #29
 8005cfe:	d001      	beq.n	8005d04 <__sflush_r+0xb4>
 8005d00:	2b16      	cmp	r3, #22
 8005d02:	d101      	bne.n	8005d08 <__sflush_r+0xb8>
 8005d04:	602f      	str	r7, [r5, #0]
 8005d06:	e7b0      	b.n	8005c6a <__sflush_r+0x1a>
 8005d08:	89a3      	ldrh	r3, [r4, #12]
 8005d0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d0e:	81a3      	strh	r3, [r4, #12]
 8005d10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d14:	690f      	ldr	r7, [r1, #16]
 8005d16:	2f00      	cmp	r7, #0
 8005d18:	d0a7      	beq.n	8005c6a <__sflush_r+0x1a>
 8005d1a:	0793      	lsls	r3, r2, #30
 8005d1c:	bf18      	it	ne
 8005d1e:	2300      	movne	r3, #0
 8005d20:	680e      	ldr	r6, [r1, #0]
 8005d22:	bf08      	it	eq
 8005d24:	694b      	ldreq	r3, [r1, #20]
 8005d26:	eba6 0807 	sub.w	r8, r6, r7
 8005d2a:	600f      	str	r7, [r1, #0]
 8005d2c:	608b      	str	r3, [r1, #8]
 8005d2e:	f1b8 0f00 	cmp.w	r8, #0
 8005d32:	dd9a      	ble.n	8005c6a <__sflush_r+0x1a>
 8005d34:	4643      	mov	r3, r8
 8005d36:	463a      	mov	r2, r7
 8005d38:	6a21      	ldr	r1, [r4, #32]
 8005d3a:	4628      	mov	r0, r5
 8005d3c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005d3e:	47b0      	blx	r6
 8005d40:	2800      	cmp	r0, #0
 8005d42:	dc07      	bgt.n	8005d54 <__sflush_r+0x104>
 8005d44:	89a3      	ldrh	r3, [r4, #12]
 8005d46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d4a:	81a3      	strh	r3, [r4, #12]
 8005d4c:	f04f 30ff 	mov.w	r0, #4294967295
 8005d50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d54:	4407      	add	r7, r0
 8005d56:	eba8 0800 	sub.w	r8, r8, r0
 8005d5a:	e7e8      	b.n	8005d2e <__sflush_r+0xde>
 8005d5c:	20400001 	.word	0x20400001

08005d60 <_fflush_r>:
 8005d60:	b538      	push	{r3, r4, r5, lr}
 8005d62:	690b      	ldr	r3, [r1, #16]
 8005d64:	4605      	mov	r5, r0
 8005d66:	460c      	mov	r4, r1
 8005d68:	b1db      	cbz	r3, 8005da2 <_fflush_r+0x42>
 8005d6a:	b118      	cbz	r0, 8005d74 <_fflush_r+0x14>
 8005d6c:	6983      	ldr	r3, [r0, #24]
 8005d6e:	b90b      	cbnz	r3, 8005d74 <_fflush_r+0x14>
 8005d70:	f000 f860 	bl	8005e34 <__sinit>
 8005d74:	4b0c      	ldr	r3, [pc, #48]	; (8005da8 <_fflush_r+0x48>)
 8005d76:	429c      	cmp	r4, r3
 8005d78:	d109      	bne.n	8005d8e <_fflush_r+0x2e>
 8005d7a:	686c      	ldr	r4, [r5, #4]
 8005d7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d80:	b17b      	cbz	r3, 8005da2 <_fflush_r+0x42>
 8005d82:	4621      	mov	r1, r4
 8005d84:	4628      	mov	r0, r5
 8005d86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005d8a:	f7ff bf61 	b.w	8005c50 <__sflush_r>
 8005d8e:	4b07      	ldr	r3, [pc, #28]	; (8005dac <_fflush_r+0x4c>)
 8005d90:	429c      	cmp	r4, r3
 8005d92:	d101      	bne.n	8005d98 <_fflush_r+0x38>
 8005d94:	68ac      	ldr	r4, [r5, #8]
 8005d96:	e7f1      	b.n	8005d7c <_fflush_r+0x1c>
 8005d98:	4b05      	ldr	r3, [pc, #20]	; (8005db0 <_fflush_r+0x50>)
 8005d9a:	429c      	cmp	r4, r3
 8005d9c:	bf08      	it	eq
 8005d9e:	68ec      	ldreq	r4, [r5, #12]
 8005da0:	e7ec      	b.n	8005d7c <_fflush_r+0x1c>
 8005da2:	2000      	movs	r0, #0
 8005da4:	bd38      	pop	{r3, r4, r5, pc}
 8005da6:	bf00      	nop
 8005da8:	08007d7c 	.word	0x08007d7c
 8005dac:	08007d9c 	.word	0x08007d9c
 8005db0:	08007d5c 	.word	0x08007d5c

08005db4 <_cleanup_r>:
 8005db4:	4901      	ldr	r1, [pc, #4]	; (8005dbc <_cleanup_r+0x8>)
 8005db6:	f000 b8a9 	b.w	8005f0c <_fwalk_reent>
 8005dba:	bf00      	nop
 8005dbc:	08005d61 	.word	0x08005d61

08005dc0 <std.isra.0>:
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	b510      	push	{r4, lr}
 8005dc4:	4604      	mov	r4, r0
 8005dc6:	6003      	str	r3, [r0, #0]
 8005dc8:	6043      	str	r3, [r0, #4]
 8005dca:	6083      	str	r3, [r0, #8]
 8005dcc:	8181      	strh	r1, [r0, #12]
 8005dce:	6643      	str	r3, [r0, #100]	; 0x64
 8005dd0:	81c2      	strh	r2, [r0, #14]
 8005dd2:	6103      	str	r3, [r0, #16]
 8005dd4:	6143      	str	r3, [r0, #20]
 8005dd6:	6183      	str	r3, [r0, #24]
 8005dd8:	4619      	mov	r1, r3
 8005dda:	2208      	movs	r2, #8
 8005ddc:	305c      	adds	r0, #92	; 0x5c
 8005dde:	f7ff fdc6 	bl	800596e <memset>
 8005de2:	4b05      	ldr	r3, [pc, #20]	; (8005df8 <std.isra.0+0x38>)
 8005de4:	6224      	str	r4, [r4, #32]
 8005de6:	6263      	str	r3, [r4, #36]	; 0x24
 8005de8:	4b04      	ldr	r3, [pc, #16]	; (8005dfc <std.isra.0+0x3c>)
 8005dea:	62a3      	str	r3, [r4, #40]	; 0x28
 8005dec:	4b04      	ldr	r3, [pc, #16]	; (8005e00 <std.isra.0+0x40>)
 8005dee:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005df0:	4b04      	ldr	r3, [pc, #16]	; (8005e04 <std.isra.0+0x44>)
 8005df2:	6323      	str	r3, [r4, #48]	; 0x30
 8005df4:	bd10      	pop	{r4, pc}
 8005df6:	bf00      	nop
 8005df8:	080069d1 	.word	0x080069d1
 8005dfc:	080069f3 	.word	0x080069f3
 8005e00:	08006a2b 	.word	0x08006a2b
 8005e04:	08006a4f 	.word	0x08006a4f

08005e08 <__sfmoreglue>:
 8005e08:	b570      	push	{r4, r5, r6, lr}
 8005e0a:	2568      	movs	r5, #104	; 0x68
 8005e0c:	1e4a      	subs	r2, r1, #1
 8005e0e:	4355      	muls	r5, r2
 8005e10:	460e      	mov	r6, r1
 8005e12:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005e16:	f000 f947 	bl	80060a8 <_malloc_r>
 8005e1a:	4604      	mov	r4, r0
 8005e1c:	b140      	cbz	r0, 8005e30 <__sfmoreglue+0x28>
 8005e1e:	2100      	movs	r1, #0
 8005e20:	e880 0042 	stmia.w	r0, {r1, r6}
 8005e24:	300c      	adds	r0, #12
 8005e26:	60a0      	str	r0, [r4, #8]
 8005e28:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005e2c:	f7ff fd9f 	bl	800596e <memset>
 8005e30:	4620      	mov	r0, r4
 8005e32:	bd70      	pop	{r4, r5, r6, pc}

08005e34 <__sinit>:
 8005e34:	6983      	ldr	r3, [r0, #24]
 8005e36:	b510      	push	{r4, lr}
 8005e38:	4604      	mov	r4, r0
 8005e3a:	bb33      	cbnz	r3, 8005e8a <__sinit+0x56>
 8005e3c:	6483      	str	r3, [r0, #72]	; 0x48
 8005e3e:	64c3      	str	r3, [r0, #76]	; 0x4c
 8005e40:	6503      	str	r3, [r0, #80]	; 0x50
 8005e42:	4b12      	ldr	r3, [pc, #72]	; (8005e8c <__sinit+0x58>)
 8005e44:	4a12      	ldr	r2, [pc, #72]	; (8005e90 <__sinit+0x5c>)
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	6282      	str	r2, [r0, #40]	; 0x28
 8005e4a:	4298      	cmp	r0, r3
 8005e4c:	bf04      	itt	eq
 8005e4e:	2301      	moveq	r3, #1
 8005e50:	6183      	streq	r3, [r0, #24]
 8005e52:	f000 f81f 	bl	8005e94 <__sfp>
 8005e56:	6060      	str	r0, [r4, #4]
 8005e58:	4620      	mov	r0, r4
 8005e5a:	f000 f81b 	bl	8005e94 <__sfp>
 8005e5e:	60a0      	str	r0, [r4, #8]
 8005e60:	4620      	mov	r0, r4
 8005e62:	f000 f817 	bl	8005e94 <__sfp>
 8005e66:	2200      	movs	r2, #0
 8005e68:	60e0      	str	r0, [r4, #12]
 8005e6a:	2104      	movs	r1, #4
 8005e6c:	6860      	ldr	r0, [r4, #4]
 8005e6e:	f7ff ffa7 	bl	8005dc0 <std.isra.0>
 8005e72:	2201      	movs	r2, #1
 8005e74:	2109      	movs	r1, #9
 8005e76:	68a0      	ldr	r0, [r4, #8]
 8005e78:	f7ff ffa2 	bl	8005dc0 <std.isra.0>
 8005e7c:	2202      	movs	r2, #2
 8005e7e:	2112      	movs	r1, #18
 8005e80:	68e0      	ldr	r0, [r4, #12]
 8005e82:	f7ff ff9d 	bl	8005dc0 <std.isra.0>
 8005e86:	2301      	movs	r3, #1
 8005e88:	61a3      	str	r3, [r4, #24]
 8005e8a:	bd10      	pop	{r4, pc}
 8005e8c:	08007d58 	.word	0x08007d58
 8005e90:	08005db5 	.word	0x08005db5

08005e94 <__sfp>:
 8005e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e96:	4b1c      	ldr	r3, [pc, #112]	; (8005f08 <__sfp+0x74>)
 8005e98:	4607      	mov	r7, r0
 8005e9a:	681e      	ldr	r6, [r3, #0]
 8005e9c:	69b3      	ldr	r3, [r6, #24]
 8005e9e:	b913      	cbnz	r3, 8005ea6 <__sfp+0x12>
 8005ea0:	4630      	mov	r0, r6
 8005ea2:	f7ff ffc7 	bl	8005e34 <__sinit>
 8005ea6:	3648      	adds	r6, #72	; 0x48
 8005ea8:	68b4      	ldr	r4, [r6, #8]
 8005eaa:	6873      	ldr	r3, [r6, #4]
 8005eac:	3b01      	subs	r3, #1
 8005eae:	d503      	bpl.n	8005eb8 <__sfp+0x24>
 8005eb0:	6833      	ldr	r3, [r6, #0]
 8005eb2:	b133      	cbz	r3, 8005ec2 <__sfp+0x2e>
 8005eb4:	6836      	ldr	r6, [r6, #0]
 8005eb6:	e7f7      	b.n	8005ea8 <__sfp+0x14>
 8005eb8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005ebc:	b16d      	cbz	r5, 8005eda <__sfp+0x46>
 8005ebe:	3468      	adds	r4, #104	; 0x68
 8005ec0:	e7f4      	b.n	8005eac <__sfp+0x18>
 8005ec2:	2104      	movs	r1, #4
 8005ec4:	4638      	mov	r0, r7
 8005ec6:	f7ff ff9f 	bl	8005e08 <__sfmoreglue>
 8005eca:	6030      	str	r0, [r6, #0]
 8005ecc:	2800      	cmp	r0, #0
 8005ece:	d1f1      	bne.n	8005eb4 <__sfp+0x20>
 8005ed0:	230c      	movs	r3, #12
 8005ed2:	4604      	mov	r4, r0
 8005ed4:	603b      	str	r3, [r7, #0]
 8005ed6:	4620      	mov	r0, r4
 8005ed8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005eda:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005ede:	81e3      	strh	r3, [r4, #14]
 8005ee0:	2301      	movs	r3, #1
 8005ee2:	6665      	str	r5, [r4, #100]	; 0x64
 8005ee4:	81a3      	strh	r3, [r4, #12]
 8005ee6:	6025      	str	r5, [r4, #0]
 8005ee8:	60a5      	str	r5, [r4, #8]
 8005eea:	6065      	str	r5, [r4, #4]
 8005eec:	6125      	str	r5, [r4, #16]
 8005eee:	6165      	str	r5, [r4, #20]
 8005ef0:	61a5      	str	r5, [r4, #24]
 8005ef2:	2208      	movs	r2, #8
 8005ef4:	4629      	mov	r1, r5
 8005ef6:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005efa:	f7ff fd38 	bl	800596e <memset>
 8005efe:	6365      	str	r5, [r4, #52]	; 0x34
 8005f00:	63a5      	str	r5, [r4, #56]	; 0x38
 8005f02:	64a5      	str	r5, [r4, #72]	; 0x48
 8005f04:	64e5      	str	r5, [r4, #76]	; 0x4c
 8005f06:	e7e6      	b.n	8005ed6 <__sfp+0x42>
 8005f08:	08007d58 	.word	0x08007d58

08005f0c <_fwalk_reent>:
 8005f0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f10:	4680      	mov	r8, r0
 8005f12:	4689      	mov	r9, r1
 8005f14:	2600      	movs	r6, #0
 8005f16:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005f1a:	b914      	cbnz	r4, 8005f22 <_fwalk_reent+0x16>
 8005f1c:	4630      	mov	r0, r6
 8005f1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005f22:	68a5      	ldr	r5, [r4, #8]
 8005f24:	6867      	ldr	r7, [r4, #4]
 8005f26:	3f01      	subs	r7, #1
 8005f28:	d501      	bpl.n	8005f2e <_fwalk_reent+0x22>
 8005f2a:	6824      	ldr	r4, [r4, #0]
 8005f2c:	e7f5      	b.n	8005f1a <_fwalk_reent+0xe>
 8005f2e:	89ab      	ldrh	r3, [r5, #12]
 8005f30:	2b01      	cmp	r3, #1
 8005f32:	d907      	bls.n	8005f44 <_fwalk_reent+0x38>
 8005f34:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005f38:	3301      	adds	r3, #1
 8005f3a:	d003      	beq.n	8005f44 <_fwalk_reent+0x38>
 8005f3c:	4629      	mov	r1, r5
 8005f3e:	4640      	mov	r0, r8
 8005f40:	47c8      	blx	r9
 8005f42:	4306      	orrs	r6, r0
 8005f44:	3568      	adds	r5, #104	; 0x68
 8005f46:	e7ee      	b.n	8005f26 <_fwalk_reent+0x1a>

08005f48 <__swhatbuf_r>:
 8005f48:	b570      	push	{r4, r5, r6, lr}
 8005f4a:	460e      	mov	r6, r1
 8005f4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f50:	b090      	sub	sp, #64	; 0x40
 8005f52:	2900      	cmp	r1, #0
 8005f54:	4614      	mov	r4, r2
 8005f56:	461d      	mov	r5, r3
 8005f58:	da07      	bge.n	8005f6a <__swhatbuf_r+0x22>
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	602b      	str	r3, [r5, #0]
 8005f5e:	89b3      	ldrh	r3, [r6, #12]
 8005f60:	061a      	lsls	r2, r3, #24
 8005f62:	d410      	bmi.n	8005f86 <__swhatbuf_r+0x3e>
 8005f64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005f68:	e00e      	b.n	8005f88 <__swhatbuf_r+0x40>
 8005f6a:	aa01      	add	r2, sp, #4
 8005f6c:	f000 fd96 	bl	8006a9c <_fstat_r>
 8005f70:	2800      	cmp	r0, #0
 8005f72:	dbf2      	blt.n	8005f5a <__swhatbuf_r+0x12>
 8005f74:	9a02      	ldr	r2, [sp, #8]
 8005f76:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005f7a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005f7e:	425a      	negs	r2, r3
 8005f80:	415a      	adcs	r2, r3
 8005f82:	602a      	str	r2, [r5, #0]
 8005f84:	e7ee      	b.n	8005f64 <__swhatbuf_r+0x1c>
 8005f86:	2340      	movs	r3, #64	; 0x40
 8005f88:	2000      	movs	r0, #0
 8005f8a:	6023      	str	r3, [r4, #0]
 8005f8c:	b010      	add	sp, #64	; 0x40
 8005f8e:	bd70      	pop	{r4, r5, r6, pc}

08005f90 <__smakebuf_r>:
 8005f90:	898b      	ldrh	r3, [r1, #12]
 8005f92:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005f94:	079d      	lsls	r5, r3, #30
 8005f96:	4606      	mov	r6, r0
 8005f98:	460c      	mov	r4, r1
 8005f9a:	d507      	bpl.n	8005fac <__smakebuf_r+0x1c>
 8005f9c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005fa0:	6023      	str	r3, [r4, #0]
 8005fa2:	6123      	str	r3, [r4, #16]
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	6163      	str	r3, [r4, #20]
 8005fa8:	b002      	add	sp, #8
 8005faa:	bd70      	pop	{r4, r5, r6, pc}
 8005fac:	ab01      	add	r3, sp, #4
 8005fae:	466a      	mov	r2, sp
 8005fb0:	f7ff ffca 	bl	8005f48 <__swhatbuf_r>
 8005fb4:	9900      	ldr	r1, [sp, #0]
 8005fb6:	4605      	mov	r5, r0
 8005fb8:	4630      	mov	r0, r6
 8005fba:	f000 f875 	bl	80060a8 <_malloc_r>
 8005fbe:	b948      	cbnz	r0, 8005fd4 <__smakebuf_r+0x44>
 8005fc0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005fc4:	059a      	lsls	r2, r3, #22
 8005fc6:	d4ef      	bmi.n	8005fa8 <__smakebuf_r+0x18>
 8005fc8:	f023 0303 	bic.w	r3, r3, #3
 8005fcc:	f043 0302 	orr.w	r3, r3, #2
 8005fd0:	81a3      	strh	r3, [r4, #12]
 8005fd2:	e7e3      	b.n	8005f9c <__smakebuf_r+0xc>
 8005fd4:	4b0d      	ldr	r3, [pc, #52]	; (800600c <__smakebuf_r+0x7c>)
 8005fd6:	62b3      	str	r3, [r6, #40]	; 0x28
 8005fd8:	89a3      	ldrh	r3, [r4, #12]
 8005fda:	6020      	str	r0, [r4, #0]
 8005fdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fe0:	81a3      	strh	r3, [r4, #12]
 8005fe2:	9b00      	ldr	r3, [sp, #0]
 8005fe4:	6120      	str	r0, [r4, #16]
 8005fe6:	6163      	str	r3, [r4, #20]
 8005fe8:	9b01      	ldr	r3, [sp, #4]
 8005fea:	b15b      	cbz	r3, 8006004 <__smakebuf_r+0x74>
 8005fec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005ff0:	4630      	mov	r0, r6
 8005ff2:	f000 fd65 	bl	8006ac0 <_isatty_r>
 8005ff6:	b128      	cbz	r0, 8006004 <__smakebuf_r+0x74>
 8005ff8:	89a3      	ldrh	r3, [r4, #12]
 8005ffa:	f023 0303 	bic.w	r3, r3, #3
 8005ffe:	f043 0301 	orr.w	r3, r3, #1
 8006002:	81a3      	strh	r3, [r4, #12]
 8006004:	89a3      	ldrh	r3, [r4, #12]
 8006006:	431d      	orrs	r5, r3
 8006008:	81a5      	strh	r5, [r4, #12]
 800600a:	e7cd      	b.n	8005fa8 <__smakebuf_r+0x18>
 800600c:	08005db5 	.word	0x08005db5

08006010 <_free_r>:
 8006010:	b538      	push	{r3, r4, r5, lr}
 8006012:	4605      	mov	r5, r0
 8006014:	2900      	cmp	r1, #0
 8006016:	d043      	beq.n	80060a0 <_free_r+0x90>
 8006018:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800601c:	1f0c      	subs	r4, r1, #4
 800601e:	2b00      	cmp	r3, #0
 8006020:	bfb8      	it	lt
 8006022:	18e4      	addlt	r4, r4, r3
 8006024:	f000 fd96 	bl	8006b54 <__malloc_lock>
 8006028:	4a1e      	ldr	r2, [pc, #120]	; (80060a4 <_free_r+0x94>)
 800602a:	6813      	ldr	r3, [r2, #0]
 800602c:	4610      	mov	r0, r2
 800602e:	b933      	cbnz	r3, 800603e <_free_r+0x2e>
 8006030:	6063      	str	r3, [r4, #4]
 8006032:	6014      	str	r4, [r2, #0]
 8006034:	4628      	mov	r0, r5
 8006036:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800603a:	f000 bd8c 	b.w	8006b56 <__malloc_unlock>
 800603e:	42a3      	cmp	r3, r4
 8006040:	d90b      	bls.n	800605a <_free_r+0x4a>
 8006042:	6821      	ldr	r1, [r4, #0]
 8006044:	1862      	adds	r2, r4, r1
 8006046:	4293      	cmp	r3, r2
 8006048:	bf01      	itttt	eq
 800604a:	681a      	ldreq	r2, [r3, #0]
 800604c:	685b      	ldreq	r3, [r3, #4]
 800604e:	1852      	addeq	r2, r2, r1
 8006050:	6022      	streq	r2, [r4, #0]
 8006052:	6063      	str	r3, [r4, #4]
 8006054:	6004      	str	r4, [r0, #0]
 8006056:	e7ed      	b.n	8006034 <_free_r+0x24>
 8006058:	4613      	mov	r3, r2
 800605a:	685a      	ldr	r2, [r3, #4]
 800605c:	b10a      	cbz	r2, 8006062 <_free_r+0x52>
 800605e:	42a2      	cmp	r2, r4
 8006060:	d9fa      	bls.n	8006058 <_free_r+0x48>
 8006062:	6819      	ldr	r1, [r3, #0]
 8006064:	1858      	adds	r0, r3, r1
 8006066:	42a0      	cmp	r0, r4
 8006068:	d10b      	bne.n	8006082 <_free_r+0x72>
 800606a:	6820      	ldr	r0, [r4, #0]
 800606c:	4401      	add	r1, r0
 800606e:	1858      	adds	r0, r3, r1
 8006070:	4282      	cmp	r2, r0
 8006072:	6019      	str	r1, [r3, #0]
 8006074:	d1de      	bne.n	8006034 <_free_r+0x24>
 8006076:	6810      	ldr	r0, [r2, #0]
 8006078:	6852      	ldr	r2, [r2, #4]
 800607a:	4401      	add	r1, r0
 800607c:	6019      	str	r1, [r3, #0]
 800607e:	605a      	str	r2, [r3, #4]
 8006080:	e7d8      	b.n	8006034 <_free_r+0x24>
 8006082:	d902      	bls.n	800608a <_free_r+0x7a>
 8006084:	230c      	movs	r3, #12
 8006086:	602b      	str	r3, [r5, #0]
 8006088:	e7d4      	b.n	8006034 <_free_r+0x24>
 800608a:	6820      	ldr	r0, [r4, #0]
 800608c:	1821      	adds	r1, r4, r0
 800608e:	428a      	cmp	r2, r1
 8006090:	bf01      	itttt	eq
 8006092:	6811      	ldreq	r1, [r2, #0]
 8006094:	6852      	ldreq	r2, [r2, #4]
 8006096:	1809      	addeq	r1, r1, r0
 8006098:	6021      	streq	r1, [r4, #0]
 800609a:	6062      	str	r2, [r4, #4]
 800609c:	605c      	str	r4, [r3, #4]
 800609e:	e7c9      	b.n	8006034 <_free_r+0x24>
 80060a0:	bd38      	pop	{r3, r4, r5, pc}
 80060a2:	bf00      	nop
 80060a4:	2000057c 	.word	0x2000057c

080060a8 <_malloc_r>:
 80060a8:	b570      	push	{r4, r5, r6, lr}
 80060aa:	1ccd      	adds	r5, r1, #3
 80060ac:	f025 0503 	bic.w	r5, r5, #3
 80060b0:	3508      	adds	r5, #8
 80060b2:	2d0c      	cmp	r5, #12
 80060b4:	bf38      	it	cc
 80060b6:	250c      	movcc	r5, #12
 80060b8:	2d00      	cmp	r5, #0
 80060ba:	4606      	mov	r6, r0
 80060bc:	db01      	blt.n	80060c2 <_malloc_r+0x1a>
 80060be:	42a9      	cmp	r1, r5
 80060c0:	d903      	bls.n	80060ca <_malloc_r+0x22>
 80060c2:	230c      	movs	r3, #12
 80060c4:	6033      	str	r3, [r6, #0]
 80060c6:	2000      	movs	r0, #0
 80060c8:	bd70      	pop	{r4, r5, r6, pc}
 80060ca:	f000 fd43 	bl	8006b54 <__malloc_lock>
 80060ce:	4a23      	ldr	r2, [pc, #140]	; (800615c <_malloc_r+0xb4>)
 80060d0:	6814      	ldr	r4, [r2, #0]
 80060d2:	4621      	mov	r1, r4
 80060d4:	b991      	cbnz	r1, 80060fc <_malloc_r+0x54>
 80060d6:	4c22      	ldr	r4, [pc, #136]	; (8006160 <_malloc_r+0xb8>)
 80060d8:	6823      	ldr	r3, [r4, #0]
 80060da:	b91b      	cbnz	r3, 80060e4 <_malloc_r+0x3c>
 80060dc:	4630      	mov	r0, r6
 80060de:	f000 fc67 	bl	80069b0 <_sbrk_r>
 80060e2:	6020      	str	r0, [r4, #0]
 80060e4:	4629      	mov	r1, r5
 80060e6:	4630      	mov	r0, r6
 80060e8:	f000 fc62 	bl	80069b0 <_sbrk_r>
 80060ec:	1c43      	adds	r3, r0, #1
 80060ee:	d126      	bne.n	800613e <_malloc_r+0x96>
 80060f0:	230c      	movs	r3, #12
 80060f2:	4630      	mov	r0, r6
 80060f4:	6033      	str	r3, [r6, #0]
 80060f6:	f000 fd2e 	bl	8006b56 <__malloc_unlock>
 80060fa:	e7e4      	b.n	80060c6 <_malloc_r+0x1e>
 80060fc:	680b      	ldr	r3, [r1, #0]
 80060fe:	1b5b      	subs	r3, r3, r5
 8006100:	d41a      	bmi.n	8006138 <_malloc_r+0x90>
 8006102:	2b0b      	cmp	r3, #11
 8006104:	d90f      	bls.n	8006126 <_malloc_r+0x7e>
 8006106:	600b      	str	r3, [r1, #0]
 8006108:	18cc      	adds	r4, r1, r3
 800610a:	50cd      	str	r5, [r1, r3]
 800610c:	4630      	mov	r0, r6
 800610e:	f000 fd22 	bl	8006b56 <__malloc_unlock>
 8006112:	f104 000b 	add.w	r0, r4, #11
 8006116:	1d23      	adds	r3, r4, #4
 8006118:	f020 0007 	bic.w	r0, r0, #7
 800611c:	1ac3      	subs	r3, r0, r3
 800611e:	d01b      	beq.n	8006158 <_malloc_r+0xb0>
 8006120:	425a      	negs	r2, r3
 8006122:	50e2      	str	r2, [r4, r3]
 8006124:	bd70      	pop	{r4, r5, r6, pc}
 8006126:	428c      	cmp	r4, r1
 8006128:	bf0b      	itete	eq
 800612a:	6863      	ldreq	r3, [r4, #4]
 800612c:	684b      	ldrne	r3, [r1, #4]
 800612e:	6013      	streq	r3, [r2, #0]
 8006130:	6063      	strne	r3, [r4, #4]
 8006132:	bf18      	it	ne
 8006134:	460c      	movne	r4, r1
 8006136:	e7e9      	b.n	800610c <_malloc_r+0x64>
 8006138:	460c      	mov	r4, r1
 800613a:	6849      	ldr	r1, [r1, #4]
 800613c:	e7ca      	b.n	80060d4 <_malloc_r+0x2c>
 800613e:	1cc4      	adds	r4, r0, #3
 8006140:	f024 0403 	bic.w	r4, r4, #3
 8006144:	42a0      	cmp	r0, r4
 8006146:	d005      	beq.n	8006154 <_malloc_r+0xac>
 8006148:	1a21      	subs	r1, r4, r0
 800614a:	4630      	mov	r0, r6
 800614c:	f000 fc30 	bl	80069b0 <_sbrk_r>
 8006150:	3001      	adds	r0, #1
 8006152:	d0cd      	beq.n	80060f0 <_malloc_r+0x48>
 8006154:	6025      	str	r5, [r4, #0]
 8006156:	e7d9      	b.n	800610c <_malloc_r+0x64>
 8006158:	bd70      	pop	{r4, r5, r6, pc}
 800615a:	bf00      	nop
 800615c:	2000057c 	.word	0x2000057c
 8006160:	20000580 	.word	0x20000580

08006164 <__ssputs_r>:
 8006164:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006168:	688e      	ldr	r6, [r1, #8]
 800616a:	4682      	mov	sl, r0
 800616c:	429e      	cmp	r6, r3
 800616e:	460c      	mov	r4, r1
 8006170:	4691      	mov	r9, r2
 8006172:	4698      	mov	r8, r3
 8006174:	d835      	bhi.n	80061e2 <__ssputs_r+0x7e>
 8006176:	898a      	ldrh	r2, [r1, #12]
 8006178:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800617c:	d031      	beq.n	80061e2 <__ssputs_r+0x7e>
 800617e:	2302      	movs	r3, #2
 8006180:	6825      	ldr	r5, [r4, #0]
 8006182:	6909      	ldr	r1, [r1, #16]
 8006184:	1a6f      	subs	r7, r5, r1
 8006186:	6965      	ldr	r5, [r4, #20]
 8006188:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800618c:	fb95 f5f3 	sdiv	r5, r5, r3
 8006190:	f108 0301 	add.w	r3, r8, #1
 8006194:	443b      	add	r3, r7
 8006196:	429d      	cmp	r5, r3
 8006198:	bf38      	it	cc
 800619a:	461d      	movcc	r5, r3
 800619c:	0553      	lsls	r3, r2, #21
 800619e:	d531      	bpl.n	8006204 <__ssputs_r+0xa0>
 80061a0:	4629      	mov	r1, r5
 80061a2:	f7ff ff81 	bl	80060a8 <_malloc_r>
 80061a6:	4606      	mov	r6, r0
 80061a8:	b950      	cbnz	r0, 80061c0 <__ssputs_r+0x5c>
 80061aa:	230c      	movs	r3, #12
 80061ac:	f8ca 3000 	str.w	r3, [sl]
 80061b0:	89a3      	ldrh	r3, [r4, #12]
 80061b2:	f04f 30ff 	mov.w	r0, #4294967295
 80061b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80061ba:	81a3      	strh	r3, [r4, #12]
 80061bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061c0:	463a      	mov	r2, r7
 80061c2:	6921      	ldr	r1, [r4, #16]
 80061c4:	f7ff fbc8 	bl	8005958 <memcpy>
 80061c8:	89a3      	ldrh	r3, [r4, #12]
 80061ca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80061ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061d2:	81a3      	strh	r3, [r4, #12]
 80061d4:	6126      	str	r6, [r4, #16]
 80061d6:	443e      	add	r6, r7
 80061d8:	6026      	str	r6, [r4, #0]
 80061da:	4646      	mov	r6, r8
 80061dc:	6165      	str	r5, [r4, #20]
 80061de:	1bed      	subs	r5, r5, r7
 80061e0:	60a5      	str	r5, [r4, #8]
 80061e2:	4546      	cmp	r6, r8
 80061e4:	bf28      	it	cs
 80061e6:	4646      	movcs	r6, r8
 80061e8:	4649      	mov	r1, r9
 80061ea:	4632      	mov	r2, r6
 80061ec:	6820      	ldr	r0, [r4, #0]
 80061ee:	f000 fc97 	bl	8006b20 <memmove>
 80061f2:	68a3      	ldr	r3, [r4, #8]
 80061f4:	2000      	movs	r0, #0
 80061f6:	1b9b      	subs	r3, r3, r6
 80061f8:	60a3      	str	r3, [r4, #8]
 80061fa:	6823      	ldr	r3, [r4, #0]
 80061fc:	441e      	add	r6, r3
 80061fe:	6026      	str	r6, [r4, #0]
 8006200:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006204:	462a      	mov	r2, r5
 8006206:	f000 fca7 	bl	8006b58 <_realloc_r>
 800620a:	4606      	mov	r6, r0
 800620c:	2800      	cmp	r0, #0
 800620e:	d1e1      	bne.n	80061d4 <__ssputs_r+0x70>
 8006210:	6921      	ldr	r1, [r4, #16]
 8006212:	4650      	mov	r0, sl
 8006214:	f7ff fefc 	bl	8006010 <_free_r>
 8006218:	e7c7      	b.n	80061aa <__ssputs_r+0x46>
	...

0800621c <_svfiprintf_r>:
 800621c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006220:	b09d      	sub	sp, #116	; 0x74
 8006222:	9303      	str	r3, [sp, #12]
 8006224:	898b      	ldrh	r3, [r1, #12]
 8006226:	4680      	mov	r8, r0
 8006228:	061c      	lsls	r4, r3, #24
 800622a:	460d      	mov	r5, r1
 800622c:	4616      	mov	r6, r2
 800622e:	d50f      	bpl.n	8006250 <_svfiprintf_r+0x34>
 8006230:	690b      	ldr	r3, [r1, #16]
 8006232:	b96b      	cbnz	r3, 8006250 <_svfiprintf_r+0x34>
 8006234:	2140      	movs	r1, #64	; 0x40
 8006236:	f7ff ff37 	bl	80060a8 <_malloc_r>
 800623a:	6028      	str	r0, [r5, #0]
 800623c:	6128      	str	r0, [r5, #16]
 800623e:	b928      	cbnz	r0, 800624c <_svfiprintf_r+0x30>
 8006240:	230c      	movs	r3, #12
 8006242:	f8c8 3000 	str.w	r3, [r8]
 8006246:	f04f 30ff 	mov.w	r0, #4294967295
 800624a:	e0c4      	b.n	80063d6 <_svfiprintf_r+0x1ba>
 800624c:	2340      	movs	r3, #64	; 0x40
 800624e:	616b      	str	r3, [r5, #20]
 8006250:	2300      	movs	r3, #0
 8006252:	9309      	str	r3, [sp, #36]	; 0x24
 8006254:	2320      	movs	r3, #32
 8006256:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800625a:	2330      	movs	r3, #48	; 0x30
 800625c:	f04f 0b01 	mov.w	fp, #1
 8006260:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006264:	4637      	mov	r7, r6
 8006266:	463c      	mov	r4, r7
 8006268:	f814 3b01 	ldrb.w	r3, [r4], #1
 800626c:	2b00      	cmp	r3, #0
 800626e:	d13c      	bne.n	80062ea <_svfiprintf_r+0xce>
 8006270:	ebb7 0a06 	subs.w	sl, r7, r6
 8006274:	d00b      	beq.n	800628e <_svfiprintf_r+0x72>
 8006276:	4653      	mov	r3, sl
 8006278:	4632      	mov	r2, r6
 800627a:	4629      	mov	r1, r5
 800627c:	4640      	mov	r0, r8
 800627e:	f7ff ff71 	bl	8006164 <__ssputs_r>
 8006282:	3001      	adds	r0, #1
 8006284:	f000 80a2 	beq.w	80063cc <_svfiprintf_r+0x1b0>
 8006288:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800628a:	4453      	add	r3, sl
 800628c:	9309      	str	r3, [sp, #36]	; 0x24
 800628e:	783b      	ldrb	r3, [r7, #0]
 8006290:	2b00      	cmp	r3, #0
 8006292:	f000 809b 	beq.w	80063cc <_svfiprintf_r+0x1b0>
 8006296:	2300      	movs	r3, #0
 8006298:	f04f 32ff 	mov.w	r2, #4294967295
 800629c:	9304      	str	r3, [sp, #16]
 800629e:	9307      	str	r3, [sp, #28]
 80062a0:	9205      	str	r2, [sp, #20]
 80062a2:	9306      	str	r3, [sp, #24]
 80062a4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80062a8:	931a      	str	r3, [sp, #104]	; 0x68
 80062aa:	2205      	movs	r2, #5
 80062ac:	7821      	ldrb	r1, [r4, #0]
 80062ae:	4850      	ldr	r0, [pc, #320]	; (80063f0 <_svfiprintf_r+0x1d4>)
 80062b0:	f000 fc28 	bl	8006b04 <memchr>
 80062b4:	1c67      	adds	r7, r4, #1
 80062b6:	9b04      	ldr	r3, [sp, #16]
 80062b8:	b9d8      	cbnz	r0, 80062f2 <_svfiprintf_r+0xd6>
 80062ba:	06d9      	lsls	r1, r3, #27
 80062bc:	bf44      	itt	mi
 80062be:	2220      	movmi	r2, #32
 80062c0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80062c4:	071a      	lsls	r2, r3, #28
 80062c6:	bf44      	itt	mi
 80062c8:	222b      	movmi	r2, #43	; 0x2b
 80062ca:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80062ce:	7822      	ldrb	r2, [r4, #0]
 80062d0:	2a2a      	cmp	r2, #42	; 0x2a
 80062d2:	d016      	beq.n	8006302 <_svfiprintf_r+0xe6>
 80062d4:	2100      	movs	r1, #0
 80062d6:	200a      	movs	r0, #10
 80062d8:	9a07      	ldr	r2, [sp, #28]
 80062da:	4627      	mov	r7, r4
 80062dc:	783b      	ldrb	r3, [r7, #0]
 80062de:	3401      	adds	r4, #1
 80062e0:	3b30      	subs	r3, #48	; 0x30
 80062e2:	2b09      	cmp	r3, #9
 80062e4:	d950      	bls.n	8006388 <_svfiprintf_r+0x16c>
 80062e6:	b1c9      	cbz	r1, 800631c <_svfiprintf_r+0x100>
 80062e8:	e011      	b.n	800630e <_svfiprintf_r+0xf2>
 80062ea:	2b25      	cmp	r3, #37	; 0x25
 80062ec:	d0c0      	beq.n	8006270 <_svfiprintf_r+0x54>
 80062ee:	4627      	mov	r7, r4
 80062f0:	e7b9      	b.n	8006266 <_svfiprintf_r+0x4a>
 80062f2:	4a3f      	ldr	r2, [pc, #252]	; (80063f0 <_svfiprintf_r+0x1d4>)
 80062f4:	463c      	mov	r4, r7
 80062f6:	1a80      	subs	r0, r0, r2
 80062f8:	fa0b f000 	lsl.w	r0, fp, r0
 80062fc:	4318      	orrs	r0, r3
 80062fe:	9004      	str	r0, [sp, #16]
 8006300:	e7d3      	b.n	80062aa <_svfiprintf_r+0x8e>
 8006302:	9a03      	ldr	r2, [sp, #12]
 8006304:	1d11      	adds	r1, r2, #4
 8006306:	6812      	ldr	r2, [r2, #0]
 8006308:	9103      	str	r1, [sp, #12]
 800630a:	2a00      	cmp	r2, #0
 800630c:	db01      	blt.n	8006312 <_svfiprintf_r+0xf6>
 800630e:	9207      	str	r2, [sp, #28]
 8006310:	e004      	b.n	800631c <_svfiprintf_r+0x100>
 8006312:	4252      	negs	r2, r2
 8006314:	f043 0302 	orr.w	r3, r3, #2
 8006318:	9207      	str	r2, [sp, #28]
 800631a:	9304      	str	r3, [sp, #16]
 800631c:	783b      	ldrb	r3, [r7, #0]
 800631e:	2b2e      	cmp	r3, #46	; 0x2e
 8006320:	d10d      	bne.n	800633e <_svfiprintf_r+0x122>
 8006322:	787b      	ldrb	r3, [r7, #1]
 8006324:	1c79      	adds	r1, r7, #1
 8006326:	2b2a      	cmp	r3, #42	; 0x2a
 8006328:	d132      	bne.n	8006390 <_svfiprintf_r+0x174>
 800632a:	9b03      	ldr	r3, [sp, #12]
 800632c:	3702      	adds	r7, #2
 800632e:	1d1a      	adds	r2, r3, #4
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	9203      	str	r2, [sp, #12]
 8006334:	2b00      	cmp	r3, #0
 8006336:	bfb8      	it	lt
 8006338:	f04f 33ff 	movlt.w	r3, #4294967295
 800633c:	9305      	str	r3, [sp, #20]
 800633e:	4c2d      	ldr	r4, [pc, #180]	; (80063f4 <_svfiprintf_r+0x1d8>)
 8006340:	2203      	movs	r2, #3
 8006342:	7839      	ldrb	r1, [r7, #0]
 8006344:	4620      	mov	r0, r4
 8006346:	f000 fbdd 	bl	8006b04 <memchr>
 800634a:	b138      	cbz	r0, 800635c <_svfiprintf_r+0x140>
 800634c:	2340      	movs	r3, #64	; 0x40
 800634e:	1b00      	subs	r0, r0, r4
 8006350:	fa03 f000 	lsl.w	r0, r3, r0
 8006354:	9b04      	ldr	r3, [sp, #16]
 8006356:	3701      	adds	r7, #1
 8006358:	4303      	orrs	r3, r0
 800635a:	9304      	str	r3, [sp, #16]
 800635c:	7839      	ldrb	r1, [r7, #0]
 800635e:	2206      	movs	r2, #6
 8006360:	4825      	ldr	r0, [pc, #148]	; (80063f8 <_svfiprintf_r+0x1dc>)
 8006362:	1c7e      	adds	r6, r7, #1
 8006364:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006368:	f000 fbcc 	bl	8006b04 <memchr>
 800636c:	2800      	cmp	r0, #0
 800636e:	d035      	beq.n	80063dc <_svfiprintf_r+0x1c0>
 8006370:	4b22      	ldr	r3, [pc, #136]	; (80063fc <_svfiprintf_r+0x1e0>)
 8006372:	b9fb      	cbnz	r3, 80063b4 <_svfiprintf_r+0x198>
 8006374:	9b03      	ldr	r3, [sp, #12]
 8006376:	3307      	adds	r3, #7
 8006378:	f023 0307 	bic.w	r3, r3, #7
 800637c:	3308      	adds	r3, #8
 800637e:	9303      	str	r3, [sp, #12]
 8006380:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006382:	444b      	add	r3, r9
 8006384:	9309      	str	r3, [sp, #36]	; 0x24
 8006386:	e76d      	b.n	8006264 <_svfiprintf_r+0x48>
 8006388:	fb00 3202 	mla	r2, r0, r2, r3
 800638c:	2101      	movs	r1, #1
 800638e:	e7a4      	b.n	80062da <_svfiprintf_r+0xbe>
 8006390:	2300      	movs	r3, #0
 8006392:	240a      	movs	r4, #10
 8006394:	4618      	mov	r0, r3
 8006396:	9305      	str	r3, [sp, #20]
 8006398:	460f      	mov	r7, r1
 800639a:	783a      	ldrb	r2, [r7, #0]
 800639c:	3101      	adds	r1, #1
 800639e:	3a30      	subs	r2, #48	; 0x30
 80063a0:	2a09      	cmp	r2, #9
 80063a2:	d903      	bls.n	80063ac <_svfiprintf_r+0x190>
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d0ca      	beq.n	800633e <_svfiprintf_r+0x122>
 80063a8:	9005      	str	r0, [sp, #20]
 80063aa:	e7c8      	b.n	800633e <_svfiprintf_r+0x122>
 80063ac:	fb04 2000 	mla	r0, r4, r0, r2
 80063b0:	2301      	movs	r3, #1
 80063b2:	e7f1      	b.n	8006398 <_svfiprintf_r+0x17c>
 80063b4:	ab03      	add	r3, sp, #12
 80063b6:	9300      	str	r3, [sp, #0]
 80063b8:	462a      	mov	r2, r5
 80063ba:	4b11      	ldr	r3, [pc, #68]	; (8006400 <_svfiprintf_r+0x1e4>)
 80063bc:	a904      	add	r1, sp, #16
 80063be:	4640      	mov	r0, r8
 80063c0:	f3af 8000 	nop.w
 80063c4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80063c8:	4681      	mov	r9, r0
 80063ca:	d1d9      	bne.n	8006380 <_svfiprintf_r+0x164>
 80063cc:	89ab      	ldrh	r3, [r5, #12]
 80063ce:	065b      	lsls	r3, r3, #25
 80063d0:	f53f af39 	bmi.w	8006246 <_svfiprintf_r+0x2a>
 80063d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80063d6:	b01d      	add	sp, #116	; 0x74
 80063d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063dc:	ab03      	add	r3, sp, #12
 80063de:	9300      	str	r3, [sp, #0]
 80063e0:	462a      	mov	r2, r5
 80063e2:	4b07      	ldr	r3, [pc, #28]	; (8006400 <_svfiprintf_r+0x1e4>)
 80063e4:	a904      	add	r1, sp, #16
 80063e6:	4640      	mov	r0, r8
 80063e8:	f000 f9c2 	bl	8006770 <_printf_i>
 80063ec:	e7ea      	b.n	80063c4 <_svfiprintf_r+0x1a8>
 80063ee:	bf00      	nop
 80063f0:	08007dbc 	.word	0x08007dbc
 80063f4:	08007dc2 	.word	0x08007dc2
 80063f8:	08007dc6 	.word	0x08007dc6
 80063fc:	00000000 	.word	0x00000000
 8006400:	08006165 	.word	0x08006165

08006404 <__sfputc_r>:
 8006404:	6893      	ldr	r3, [r2, #8]
 8006406:	b410      	push	{r4}
 8006408:	3b01      	subs	r3, #1
 800640a:	2b00      	cmp	r3, #0
 800640c:	6093      	str	r3, [r2, #8]
 800640e:	da08      	bge.n	8006422 <__sfputc_r+0x1e>
 8006410:	6994      	ldr	r4, [r2, #24]
 8006412:	42a3      	cmp	r3, r4
 8006414:	db02      	blt.n	800641c <__sfputc_r+0x18>
 8006416:	b2cb      	uxtb	r3, r1
 8006418:	2b0a      	cmp	r3, #10
 800641a:	d102      	bne.n	8006422 <__sfputc_r+0x1e>
 800641c:	bc10      	pop	{r4}
 800641e:	f7ff bb57 	b.w	8005ad0 <__swbuf_r>
 8006422:	6813      	ldr	r3, [r2, #0]
 8006424:	1c58      	adds	r0, r3, #1
 8006426:	6010      	str	r0, [r2, #0]
 8006428:	7019      	strb	r1, [r3, #0]
 800642a:	b2c8      	uxtb	r0, r1
 800642c:	bc10      	pop	{r4}
 800642e:	4770      	bx	lr

08006430 <__sfputs_r>:
 8006430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006432:	4606      	mov	r6, r0
 8006434:	460f      	mov	r7, r1
 8006436:	4614      	mov	r4, r2
 8006438:	18d5      	adds	r5, r2, r3
 800643a:	42ac      	cmp	r4, r5
 800643c:	d101      	bne.n	8006442 <__sfputs_r+0x12>
 800643e:	2000      	movs	r0, #0
 8006440:	e007      	b.n	8006452 <__sfputs_r+0x22>
 8006442:	463a      	mov	r2, r7
 8006444:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006448:	4630      	mov	r0, r6
 800644a:	f7ff ffdb 	bl	8006404 <__sfputc_r>
 800644e:	1c43      	adds	r3, r0, #1
 8006450:	d1f3      	bne.n	800643a <__sfputs_r+0xa>
 8006452:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006454 <_vfiprintf_r>:
 8006454:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006458:	b09d      	sub	sp, #116	; 0x74
 800645a:	460c      	mov	r4, r1
 800645c:	4617      	mov	r7, r2
 800645e:	9303      	str	r3, [sp, #12]
 8006460:	4606      	mov	r6, r0
 8006462:	b118      	cbz	r0, 800646c <_vfiprintf_r+0x18>
 8006464:	6983      	ldr	r3, [r0, #24]
 8006466:	b90b      	cbnz	r3, 800646c <_vfiprintf_r+0x18>
 8006468:	f7ff fce4 	bl	8005e34 <__sinit>
 800646c:	4b7c      	ldr	r3, [pc, #496]	; (8006660 <_vfiprintf_r+0x20c>)
 800646e:	429c      	cmp	r4, r3
 8006470:	d157      	bne.n	8006522 <_vfiprintf_r+0xce>
 8006472:	6874      	ldr	r4, [r6, #4]
 8006474:	89a3      	ldrh	r3, [r4, #12]
 8006476:	0718      	lsls	r0, r3, #28
 8006478:	d55d      	bpl.n	8006536 <_vfiprintf_r+0xe2>
 800647a:	6923      	ldr	r3, [r4, #16]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d05a      	beq.n	8006536 <_vfiprintf_r+0xe2>
 8006480:	2300      	movs	r3, #0
 8006482:	9309      	str	r3, [sp, #36]	; 0x24
 8006484:	2320      	movs	r3, #32
 8006486:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800648a:	2330      	movs	r3, #48	; 0x30
 800648c:	f04f 0b01 	mov.w	fp, #1
 8006490:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006494:	46b8      	mov	r8, r7
 8006496:	4645      	mov	r5, r8
 8006498:	f815 3b01 	ldrb.w	r3, [r5], #1
 800649c:	2b00      	cmp	r3, #0
 800649e:	d155      	bne.n	800654c <_vfiprintf_r+0xf8>
 80064a0:	ebb8 0a07 	subs.w	sl, r8, r7
 80064a4:	d00b      	beq.n	80064be <_vfiprintf_r+0x6a>
 80064a6:	4653      	mov	r3, sl
 80064a8:	463a      	mov	r2, r7
 80064aa:	4621      	mov	r1, r4
 80064ac:	4630      	mov	r0, r6
 80064ae:	f7ff ffbf 	bl	8006430 <__sfputs_r>
 80064b2:	3001      	adds	r0, #1
 80064b4:	f000 80c4 	beq.w	8006640 <_vfiprintf_r+0x1ec>
 80064b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064ba:	4453      	add	r3, sl
 80064bc:	9309      	str	r3, [sp, #36]	; 0x24
 80064be:	f898 3000 	ldrb.w	r3, [r8]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	f000 80bc 	beq.w	8006640 <_vfiprintf_r+0x1ec>
 80064c8:	2300      	movs	r3, #0
 80064ca:	f04f 32ff 	mov.w	r2, #4294967295
 80064ce:	9304      	str	r3, [sp, #16]
 80064d0:	9307      	str	r3, [sp, #28]
 80064d2:	9205      	str	r2, [sp, #20]
 80064d4:	9306      	str	r3, [sp, #24]
 80064d6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80064da:	931a      	str	r3, [sp, #104]	; 0x68
 80064dc:	2205      	movs	r2, #5
 80064de:	7829      	ldrb	r1, [r5, #0]
 80064e0:	4860      	ldr	r0, [pc, #384]	; (8006664 <_vfiprintf_r+0x210>)
 80064e2:	f000 fb0f 	bl	8006b04 <memchr>
 80064e6:	f105 0801 	add.w	r8, r5, #1
 80064ea:	9b04      	ldr	r3, [sp, #16]
 80064ec:	2800      	cmp	r0, #0
 80064ee:	d131      	bne.n	8006554 <_vfiprintf_r+0x100>
 80064f0:	06d9      	lsls	r1, r3, #27
 80064f2:	bf44      	itt	mi
 80064f4:	2220      	movmi	r2, #32
 80064f6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80064fa:	071a      	lsls	r2, r3, #28
 80064fc:	bf44      	itt	mi
 80064fe:	222b      	movmi	r2, #43	; 0x2b
 8006500:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006504:	782a      	ldrb	r2, [r5, #0]
 8006506:	2a2a      	cmp	r2, #42	; 0x2a
 8006508:	d02c      	beq.n	8006564 <_vfiprintf_r+0x110>
 800650a:	2100      	movs	r1, #0
 800650c:	200a      	movs	r0, #10
 800650e:	9a07      	ldr	r2, [sp, #28]
 8006510:	46a8      	mov	r8, r5
 8006512:	f898 3000 	ldrb.w	r3, [r8]
 8006516:	3501      	adds	r5, #1
 8006518:	3b30      	subs	r3, #48	; 0x30
 800651a:	2b09      	cmp	r3, #9
 800651c:	d96d      	bls.n	80065fa <_vfiprintf_r+0x1a6>
 800651e:	b371      	cbz	r1, 800657e <_vfiprintf_r+0x12a>
 8006520:	e026      	b.n	8006570 <_vfiprintf_r+0x11c>
 8006522:	4b51      	ldr	r3, [pc, #324]	; (8006668 <_vfiprintf_r+0x214>)
 8006524:	429c      	cmp	r4, r3
 8006526:	d101      	bne.n	800652c <_vfiprintf_r+0xd8>
 8006528:	68b4      	ldr	r4, [r6, #8]
 800652a:	e7a3      	b.n	8006474 <_vfiprintf_r+0x20>
 800652c:	4b4f      	ldr	r3, [pc, #316]	; (800666c <_vfiprintf_r+0x218>)
 800652e:	429c      	cmp	r4, r3
 8006530:	bf08      	it	eq
 8006532:	68f4      	ldreq	r4, [r6, #12]
 8006534:	e79e      	b.n	8006474 <_vfiprintf_r+0x20>
 8006536:	4621      	mov	r1, r4
 8006538:	4630      	mov	r0, r6
 800653a:	f7ff fb1b 	bl	8005b74 <__swsetup_r>
 800653e:	2800      	cmp	r0, #0
 8006540:	d09e      	beq.n	8006480 <_vfiprintf_r+0x2c>
 8006542:	f04f 30ff 	mov.w	r0, #4294967295
 8006546:	b01d      	add	sp, #116	; 0x74
 8006548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800654c:	2b25      	cmp	r3, #37	; 0x25
 800654e:	d0a7      	beq.n	80064a0 <_vfiprintf_r+0x4c>
 8006550:	46a8      	mov	r8, r5
 8006552:	e7a0      	b.n	8006496 <_vfiprintf_r+0x42>
 8006554:	4a43      	ldr	r2, [pc, #268]	; (8006664 <_vfiprintf_r+0x210>)
 8006556:	4645      	mov	r5, r8
 8006558:	1a80      	subs	r0, r0, r2
 800655a:	fa0b f000 	lsl.w	r0, fp, r0
 800655e:	4318      	orrs	r0, r3
 8006560:	9004      	str	r0, [sp, #16]
 8006562:	e7bb      	b.n	80064dc <_vfiprintf_r+0x88>
 8006564:	9a03      	ldr	r2, [sp, #12]
 8006566:	1d11      	adds	r1, r2, #4
 8006568:	6812      	ldr	r2, [r2, #0]
 800656a:	9103      	str	r1, [sp, #12]
 800656c:	2a00      	cmp	r2, #0
 800656e:	db01      	blt.n	8006574 <_vfiprintf_r+0x120>
 8006570:	9207      	str	r2, [sp, #28]
 8006572:	e004      	b.n	800657e <_vfiprintf_r+0x12a>
 8006574:	4252      	negs	r2, r2
 8006576:	f043 0302 	orr.w	r3, r3, #2
 800657a:	9207      	str	r2, [sp, #28]
 800657c:	9304      	str	r3, [sp, #16]
 800657e:	f898 3000 	ldrb.w	r3, [r8]
 8006582:	2b2e      	cmp	r3, #46	; 0x2e
 8006584:	d110      	bne.n	80065a8 <_vfiprintf_r+0x154>
 8006586:	f898 3001 	ldrb.w	r3, [r8, #1]
 800658a:	f108 0101 	add.w	r1, r8, #1
 800658e:	2b2a      	cmp	r3, #42	; 0x2a
 8006590:	d137      	bne.n	8006602 <_vfiprintf_r+0x1ae>
 8006592:	9b03      	ldr	r3, [sp, #12]
 8006594:	f108 0802 	add.w	r8, r8, #2
 8006598:	1d1a      	adds	r2, r3, #4
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	9203      	str	r2, [sp, #12]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	bfb8      	it	lt
 80065a2:	f04f 33ff 	movlt.w	r3, #4294967295
 80065a6:	9305      	str	r3, [sp, #20]
 80065a8:	4d31      	ldr	r5, [pc, #196]	; (8006670 <_vfiprintf_r+0x21c>)
 80065aa:	2203      	movs	r2, #3
 80065ac:	f898 1000 	ldrb.w	r1, [r8]
 80065b0:	4628      	mov	r0, r5
 80065b2:	f000 faa7 	bl	8006b04 <memchr>
 80065b6:	b140      	cbz	r0, 80065ca <_vfiprintf_r+0x176>
 80065b8:	2340      	movs	r3, #64	; 0x40
 80065ba:	1b40      	subs	r0, r0, r5
 80065bc:	fa03 f000 	lsl.w	r0, r3, r0
 80065c0:	9b04      	ldr	r3, [sp, #16]
 80065c2:	f108 0801 	add.w	r8, r8, #1
 80065c6:	4303      	orrs	r3, r0
 80065c8:	9304      	str	r3, [sp, #16]
 80065ca:	f898 1000 	ldrb.w	r1, [r8]
 80065ce:	2206      	movs	r2, #6
 80065d0:	4828      	ldr	r0, [pc, #160]	; (8006674 <_vfiprintf_r+0x220>)
 80065d2:	f108 0701 	add.w	r7, r8, #1
 80065d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80065da:	f000 fa93 	bl	8006b04 <memchr>
 80065de:	2800      	cmp	r0, #0
 80065e0:	d034      	beq.n	800664c <_vfiprintf_r+0x1f8>
 80065e2:	4b25      	ldr	r3, [pc, #148]	; (8006678 <_vfiprintf_r+0x224>)
 80065e4:	bb03      	cbnz	r3, 8006628 <_vfiprintf_r+0x1d4>
 80065e6:	9b03      	ldr	r3, [sp, #12]
 80065e8:	3307      	adds	r3, #7
 80065ea:	f023 0307 	bic.w	r3, r3, #7
 80065ee:	3308      	adds	r3, #8
 80065f0:	9303      	str	r3, [sp, #12]
 80065f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065f4:	444b      	add	r3, r9
 80065f6:	9309      	str	r3, [sp, #36]	; 0x24
 80065f8:	e74c      	b.n	8006494 <_vfiprintf_r+0x40>
 80065fa:	fb00 3202 	mla	r2, r0, r2, r3
 80065fe:	2101      	movs	r1, #1
 8006600:	e786      	b.n	8006510 <_vfiprintf_r+0xbc>
 8006602:	2300      	movs	r3, #0
 8006604:	250a      	movs	r5, #10
 8006606:	4618      	mov	r0, r3
 8006608:	9305      	str	r3, [sp, #20]
 800660a:	4688      	mov	r8, r1
 800660c:	f898 2000 	ldrb.w	r2, [r8]
 8006610:	3101      	adds	r1, #1
 8006612:	3a30      	subs	r2, #48	; 0x30
 8006614:	2a09      	cmp	r2, #9
 8006616:	d903      	bls.n	8006620 <_vfiprintf_r+0x1cc>
 8006618:	2b00      	cmp	r3, #0
 800661a:	d0c5      	beq.n	80065a8 <_vfiprintf_r+0x154>
 800661c:	9005      	str	r0, [sp, #20]
 800661e:	e7c3      	b.n	80065a8 <_vfiprintf_r+0x154>
 8006620:	fb05 2000 	mla	r0, r5, r0, r2
 8006624:	2301      	movs	r3, #1
 8006626:	e7f0      	b.n	800660a <_vfiprintf_r+0x1b6>
 8006628:	ab03      	add	r3, sp, #12
 800662a:	9300      	str	r3, [sp, #0]
 800662c:	4622      	mov	r2, r4
 800662e:	4b13      	ldr	r3, [pc, #76]	; (800667c <_vfiprintf_r+0x228>)
 8006630:	a904      	add	r1, sp, #16
 8006632:	4630      	mov	r0, r6
 8006634:	f3af 8000 	nop.w
 8006638:	f1b0 3fff 	cmp.w	r0, #4294967295
 800663c:	4681      	mov	r9, r0
 800663e:	d1d8      	bne.n	80065f2 <_vfiprintf_r+0x19e>
 8006640:	89a3      	ldrh	r3, [r4, #12]
 8006642:	065b      	lsls	r3, r3, #25
 8006644:	f53f af7d 	bmi.w	8006542 <_vfiprintf_r+0xee>
 8006648:	9809      	ldr	r0, [sp, #36]	; 0x24
 800664a:	e77c      	b.n	8006546 <_vfiprintf_r+0xf2>
 800664c:	ab03      	add	r3, sp, #12
 800664e:	9300      	str	r3, [sp, #0]
 8006650:	4622      	mov	r2, r4
 8006652:	4b0a      	ldr	r3, [pc, #40]	; (800667c <_vfiprintf_r+0x228>)
 8006654:	a904      	add	r1, sp, #16
 8006656:	4630      	mov	r0, r6
 8006658:	f000 f88a 	bl	8006770 <_printf_i>
 800665c:	e7ec      	b.n	8006638 <_vfiprintf_r+0x1e4>
 800665e:	bf00      	nop
 8006660:	08007d7c 	.word	0x08007d7c
 8006664:	08007dbc 	.word	0x08007dbc
 8006668:	08007d9c 	.word	0x08007d9c
 800666c:	08007d5c 	.word	0x08007d5c
 8006670:	08007dc2 	.word	0x08007dc2
 8006674:	08007dc6 	.word	0x08007dc6
 8006678:	00000000 	.word	0x00000000
 800667c:	08006431 	.word	0x08006431

08006680 <_printf_common>:
 8006680:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006684:	4691      	mov	r9, r2
 8006686:	461f      	mov	r7, r3
 8006688:	688a      	ldr	r2, [r1, #8]
 800668a:	690b      	ldr	r3, [r1, #16]
 800668c:	4606      	mov	r6, r0
 800668e:	4293      	cmp	r3, r2
 8006690:	bfb8      	it	lt
 8006692:	4613      	movlt	r3, r2
 8006694:	f8c9 3000 	str.w	r3, [r9]
 8006698:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800669c:	460c      	mov	r4, r1
 800669e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80066a2:	b112      	cbz	r2, 80066aa <_printf_common+0x2a>
 80066a4:	3301      	adds	r3, #1
 80066a6:	f8c9 3000 	str.w	r3, [r9]
 80066aa:	6823      	ldr	r3, [r4, #0]
 80066ac:	0699      	lsls	r1, r3, #26
 80066ae:	bf42      	ittt	mi
 80066b0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80066b4:	3302      	addmi	r3, #2
 80066b6:	f8c9 3000 	strmi.w	r3, [r9]
 80066ba:	6825      	ldr	r5, [r4, #0]
 80066bc:	f015 0506 	ands.w	r5, r5, #6
 80066c0:	d107      	bne.n	80066d2 <_printf_common+0x52>
 80066c2:	f104 0a19 	add.w	sl, r4, #25
 80066c6:	68e3      	ldr	r3, [r4, #12]
 80066c8:	f8d9 2000 	ldr.w	r2, [r9]
 80066cc:	1a9b      	subs	r3, r3, r2
 80066ce:	429d      	cmp	r5, r3
 80066d0:	db2a      	blt.n	8006728 <_printf_common+0xa8>
 80066d2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80066d6:	6822      	ldr	r2, [r4, #0]
 80066d8:	3300      	adds	r3, #0
 80066da:	bf18      	it	ne
 80066dc:	2301      	movne	r3, #1
 80066de:	0692      	lsls	r2, r2, #26
 80066e0:	d42f      	bmi.n	8006742 <_printf_common+0xc2>
 80066e2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80066e6:	4639      	mov	r1, r7
 80066e8:	4630      	mov	r0, r6
 80066ea:	47c0      	blx	r8
 80066ec:	3001      	adds	r0, #1
 80066ee:	d022      	beq.n	8006736 <_printf_common+0xb6>
 80066f0:	6823      	ldr	r3, [r4, #0]
 80066f2:	68e5      	ldr	r5, [r4, #12]
 80066f4:	f003 0306 	and.w	r3, r3, #6
 80066f8:	2b04      	cmp	r3, #4
 80066fa:	bf18      	it	ne
 80066fc:	2500      	movne	r5, #0
 80066fe:	f8d9 2000 	ldr.w	r2, [r9]
 8006702:	f04f 0900 	mov.w	r9, #0
 8006706:	bf08      	it	eq
 8006708:	1aad      	subeq	r5, r5, r2
 800670a:	68a3      	ldr	r3, [r4, #8]
 800670c:	6922      	ldr	r2, [r4, #16]
 800670e:	bf08      	it	eq
 8006710:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006714:	4293      	cmp	r3, r2
 8006716:	bfc4      	itt	gt
 8006718:	1a9b      	subgt	r3, r3, r2
 800671a:	18ed      	addgt	r5, r5, r3
 800671c:	341a      	adds	r4, #26
 800671e:	454d      	cmp	r5, r9
 8006720:	d11b      	bne.n	800675a <_printf_common+0xda>
 8006722:	2000      	movs	r0, #0
 8006724:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006728:	2301      	movs	r3, #1
 800672a:	4652      	mov	r2, sl
 800672c:	4639      	mov	r1, r7
 800672e:	4630      	mov	r0, r6
 8006730:	47c0      	blx	r8
 8006732:	3001      	adds	r0, #1
 8006734:	d103      	bne.n	800673e <_printf_common+0xbe>
 8006736:	f04f 30ff 	mov.w	r0, #4294967295
 800673a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800673e:	3501      	adds	r5, #1
 8006740:	e7c1      	b.n	80066c6 <_printf_common+0x46>
 8006742:	2030      	movs	r0, #48	; 0x30
 8006744:	18e1      	adds	r1, r4, r3
 8006746:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800674a:	1c5a      	adds	r2, r3, #1
 800674c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006750:	4422      	add	r2, r4
 8006752:	3302      	adds	r3, #2
 8006754:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006758:	e7c3      	b.n	80066e2 <_printf_common+0x62>
 800675a:	2301      	movs	r3, #1
 800675c:	4622      	mov	r2, r4
 800675e:	4639      	mov	r1, r7
 8006760:	4630      	mov	r0, r6
 8006762:	47c0      	blx	r8
 8006764:	3001      	adds	r0, #1
 8006766:	d0e6      	beq.n	8006736 <_printf_common+0xb6>
 8006768:	f109 0901 	add.w	r9, r9, #1
 800676c:	e7d7      	b.n	800671e <_printf_common+0x9e>
	...

08006770 <_printf_i>:
 8006770:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006774:	4617      	mov	r7, r2
 8006776:	7e0a      	ldrb	r2, [r1, #24]
 8006778:	b085      	sub	sp, #20
 800677a:	2a6e      	cmp	r2, #110	; 0x6e
 800677c:	4698      	mov	r8, r3
 800677e:	4606      	mov	r6, r0
 8006780:	460c      	mov	r4, r1
 8006782:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006784:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8006788:	f000 80bc 	beq.w	8006904 <_printf_i+0x194>
 800678c:	d81a      	bhi.n	80067c4 <_printf_i+0x54>
 800678e:	2a63      	cmp	r2, #99	; 0x63
 8006790:	d02e      	beq.n	80067f0 <_printf_i+0x80>
 8006792:	d80a      	bhi.n	80067aa <_printf_i+0x3a>
 8006794:	2a00      	cmp	r2, #0
 8006796:	f000 80c8 	beq.w	800692a <_printf_i+0x1ba>
 800679a:	2a58      	cmp	r2, #88	; 0x58
 800679c:	f000 808a 	beq.w	80068b4 <_printf_i+0x144>
 80067a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80067a4:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 80067a8:	e02a      	b.n	8006800 <_printf_i+0x90>
 80067aa:	2a64      	cmp	r2, #100	; 0x64
 80067ac:	d001      	beq.n	80067b2 <_printf_i+0x42>
 80067ae:	2a69      	cmp	r2, #105	; 0x69
 80067b0:	d1f6      	bne.n	80067a0 <_printf_i+0x30>
 80067b2:	6821      	ldr	r1, [r4, #0]
 80067b4:	681a      	ldr	r2, [r3, #0]
 80067b6:	f011 0f80 	tst.w	r1, #128	; 0x80
 80067ba:	d023      	beq.n	8006804 <_printf_i+0x94>
 80067bc:	1d11      	adds	r1, r2, #4
 80067be:	6019      	str	r1, [r3, #0]
 80067c0:	6813      	ldr	r3, [r2, #0]
 80067c2:	e027      	b.n	8006814 <_printf_i+0xa4>
 80067c4:	2a73      	cmp	r2, #115	; 0x73
 80067c6:	f000 80b4 	beq.w	8006932 <_printf_i+0x1c2>
 80067ca:	d808      	bhi.n	80067de <_printf_i+0x6e>
 80067cc:	2a6f      	cmp	r2, #111	; 0x6f
 80067ce:	d02a      	beq.n	8006826 <_printf_i+0xb6>
 80067d0:	2a70      	cmp	r2, #112	; 0x70
 80067d2:	d1e5      	bne.n	80067a0 <_printf_i+0x30>
 80067d4:	680a      	ldr	r2, [r1, #0]
 80067d6:	f042 0220 	orr.w	r2, r2, #32
 80067da:	600a      	str	r2, [r1, #0]
 80067dc:	e003      	b.n	80067e6 <_printf_i+0x76>
 80067de:	2a75      	cmp	r2, #117	; 0x75
 80067e0:	d021      	beq.n	8006826 <_printf_i+0xb6>
 80067e2:	2a78      	cmp	r2, #120	; 0x78
 80067e4:	d1dc      	bne.n	80067a0 <_printf_i+0x30>
 80067e6:	2278      	movs	r2, #120	; 0x78
 80067e8:	496f      	ldr	r1, [pc, #444]	; (80069a8 <_printf_i+0x238>)
 80067ea:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 80067ee:	e064      	b.n	80068ba <_printf_i+0x14a>
 80067f0:	681a      	ldr	r2, [r3, #0]
 80067f2:	f101 0542 	add.w	r5, r1, #66	; 0x42
 80067f6:	1d11      	adds	r1, r2, #4
 80067f8:	6019      	str	r1, [r3, #0]
 80067fa:	6813      	ldr	r3, [r2, #0]
 80067fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006800:	2301      	movs	r3, #1
 8006802:	e0a3      	b.n	800694c <_printf_i+0x1dc>
 8006804:	f011 0f40 	tst.w	r1, #64	; 0x40
 8006808:	f102 0104 	add.w	r1, r2, #4
 800680c:	6019      	str	r1, [r3, #0]
 800680e:	d0d7      	beq.n	80067c0 <_printf_i+0x50>
 8006810:	f9b2 3000 	ldrsh.w	r3, [r2]
 8006814:	2b00      	cmp	r3, #0
 8006816:	da03      	bge.n	8006820 <_printf_i+0xb0>
 8006818:	222d      	movs	r2, #45	; 0x2d
 800681a:	425b      	negs	r3, r3
 800681c:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006820:	4962      	ldr	r1, [pc, #392]	; (80069ac <_printf_i+0x23c>)
 8006822:	220a      	movs	r2, #10
 8006824:	e017      	b.n	8006856 <_printf_i+0xe6>
 8006826:	6820      	ldr	r0, [r4, #0]
 8006828:	6819      	ldr	r1, [r3, #0]
 800682a:	f010 0f80 	tst.w	r0, #128	; 0x80
 800682e:	d003      	beq.n	8006838 <_printf_i+0xc8>
 8006830:	1d08      	adds	r0, r1, #4
 8006832:	6018      	str	r0, [r3, #0]
 8006834:	680b      	ldr	r3, [r1, #0]
 8006836:	e006      	b.n	8006846 <_printf_i+0xd6>
 8006838:	f010 0f40 	tst.w	r0, #64	; 0x40
 800683c:	f101 0004 	add.w	r0, r1, #4
 8006840:	6018      	str	r0, [r3, #0]
 8006842:	d0f7      	beq.n	8006834 <_printf_i+0xc4>
 8006844:	880b      	ldrh	r3, [r1, #0]
 8006846:	2a6f      	cmp	r2, #111	; 0x6f
 8006848:	bf14      	ite	ne
 800684a:	220a      	movne	r2, #10
 800684c:	2208      	moveq	r2, #8
 800684e:	4957      	ldr	r1, [pc, #348]	; (80069ac <_printf_i+0x23c>)
 8006850:	2000      	movs	r0, #0
 8006852:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8006856:	6865      	ldr	r5, [r4, #4]
 8006858:	2d00      	cmp	r5, #0
 800685a:	60a5      	str	r5, [r4, #8]
 800685c:	f2c0 809c 	blt.w	8006998 <_printf_i+0x228>
 8006860:	6820      	ldr	r0, [r4, #0]
 8006862:	f020 0004 	bic.w	r0, r0, #4
 8006866:	6020      	str	r0, [r4, #0]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d13f      	bne.n	80068ec <_printf_i+0x17c>
 800686c:	2d00      	cmp	r5, #0
 800686e:	f040 8095 	bne.w	800699c <_printf_i+0x22c>
 8006872:	4675      	mov	r5, lr
 8006874:	2a08      	cmp	r2, #8
 8006876:	d10b      	bne.n	8006890 <_printf_i+0x120>
 8006878:	6823      	ldr	r3, [r4, #0]
 800687a:	07da      	lsls	r2, r3, #31
 800687c:	d508      	bpl.n	8006890 <_printf_i+0x120>
 800687e:	6923      	ldr	r3, [r4, #16]
 8006880:	6862      	ldr	r2, [r4, #4]
 8006882:	429a      	cmp	r2, r3
 8006884:	bfde      	ittt	le
 8006886:	2330      	movle	r3, #48	; 0x30
 8006888:	f805 3c01 	strble.w	r3, [r5, #-1]
 800688c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006890:	ebae 0305 	sub.w	r3, lr, r5
 8006894:	6123      	str	r3, [r4, #16]
 8006896:	f8cd 8000 	str.w	r8, [sp]
 800689a:	463b      	mov	r3, r7
 800689c:	aa03      	add	r2, sp, #12
 800689e:	4621      	mov	r1, r4
 80068a0:	4630      	mov	r0, r6
 80068a2:	f7ff feed 	bl	8006680 <_printf_common>
 80068a6:	3001      	adds	r0, #1
 80068a8:	d155      	bne.n	8006956 <_printf_i+0x1e6>
 80068aa:	f04f 30ff 	mov.w	r0, #4294967295
 80068ae:	b005      	add	sp, #20
 80068b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80068b4:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 80068b8:	493c      	ldr	r1, [pc, #240]	; (80069ac <_printf_i+0x23c>)
 80068ba:	6822      	ldr	r2, [r4, #0]
 80068bc:	6818      	ldr	r0, [r3, #0]
 80068be:	f012 0f80 	tst.w	r2, #128	; 0x80
 80068c2:	f100 0504 	add.w	r5, r0, #4
 80068c6:	601d      	str	r5, [r3, #0]
 80068c8:	d001      	beq.n	80068ce <_printf_i+0x15e>
 80068ca:	6803      	ldr	r3, [r0, #0]
 80068cc:	e002      	b.n	80068d4 <_printf_i+0x164>
 80068ce:	0655      	lsls	r5, r2, #25
 80068d0:	d5fb      	bpl.n	80068ca <_printf_i+0x15a>
 80068d2:	8803      	ldrh	r3, [r0, #0]
 80068d4:	07d0      	lsls	r0, r2, #31
 80068d6:	bf44      	itt	mi
 80068d8:	f042 0220 	orrmi.w	r2, r2, #32
 80068dc:	6022      	strmi	r2, [r4, #0]
 80068de:	b91b      	cbnz	r3, 80068e8 <_printf_i+0x178>
 80068e0:	6822      	ldr	r2, [r4, #0]
 80068e2:	f022 0220 	bic.w	r2, r2, #32
 80068e6:	6022      	str	r2, [r4, #0]
 80068e8:	2210      	movs	r2, #16
 80068ea:	e7b1      	b.n	8006850 <_printf_i+0xe0>
 80068ec:	4675      	mov	r5, lr
 80068ee:	fbb3 f0f2 	udiv	r0, r3, r2
 80068f2:	fb02 3310 	mls	r3, r2, r0, r3
 80068f6:	5ccb      	ldrb	r3, [r1, r3]
 80068f8:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80068fc:	4603      	mov	r3, r0
 80068fe:	2800      	cmp	r0, #0
 8006900:	d1f5      	bne.n	80068ee <_printf_i+0x17e>
 8006902:	e7b7      	b.n	8006874 <_printf_i+0x104>
 8006904:	6808      	ldr	r0, [r1, #0]
 8006906:	681a      	ldr	r2, [r3, #0]
 8006908:	f010 0f80 	tst.w	r0, #128	; 0x80
 800690c:	6949      	ldr	r1, [r1, #20]
 800690e:	d004      	beq.n	800691a <_printf_i+0x1aa>
 8006910:	1d10      	adds	r0, r2, #4
 8006912:	6018      	str	r0, [r3, #0]
 8006914:	6813      	ldr	r3, [r2, #0]
 8006916:	6019      	str	r1, [r3, #0]
 8006918:	e007      	b.n	800692a <_printf_i+0x1ba>
 800691a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800691e:	f102 0004 	add.w	r0, r2, #4
 8006922:	6018      	str	r0, [r3, #0]
 8006924:	6813      	ldr	r3, [r2, #0]
 8006926:	d0f6      	beq.n	8006916 <_printf_i+0x1a6>
 8006928:	8019      	strh	r1, [r3, #0]
 800692a:	2300      	movs	r3, #0
 800692c:	4675      	mov	r5, lr
 800692e:	6123      	str	r3, [r4, #16]
 8006930:	e7b1      	b.n	8006896 <_printf_i+0x126>
 8006932:	681a      	ldr	r2, [r3, #0]
 8006934:	1d11      	adds	r1, r2, #4
 8006936:	6019      	str	r1, [r3, #0]
 8006938:	6815      	ldr	r5, [r2, #0]
 800693a:	2100      	movs	r1, #0
 800693c:	6862      	ldr	r2, [r4, #4]
 800693e:	4628      	mov	r0, r5
 8006940:	f000 f8e0 	bl	8006b04 <memchr>
 8006944:	b108      	cbz	r0, 800694a <_printf_i+0x1da>
 8006946:	1b40      	subs	r0, r0, r5
 8006948:	6060      	str	r0, [r4, #4]
 800694a:	6863      	ldr	r3, [r4, #4]
 800694c:	6123      	str	r3, [r4, #16]
 800694e:	2300      	movs	r3, #0
 8006950:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006954:	e79f      	b.n	8006896 <_printf_i+0x126>
 8006956:	6923      	ldr	r3, [r4, #16]
 8006958:	462a      	mov	r2, r5
 800695a:	4639      	mov	r1, r7
 800695c:	4630      	mov	r0, r6
 800695e:	47c0      	blx	r8
 8006960:	3001      	adds	r0, #1
 8006962:	d0a2      	beq.n	80068aa <_printf_i+0x13a>
 8006964:	6823      	ldr	r3, [r4, #0]
 8006966:	079b      	lsls	r3, r3, #30
 8006968:	d507      	bpl.n	800697a <_printf_i+0x20a>
 800696a:	2500      	movs	r5, #0
 800696c:	f104 0919 	add.w	r9, r4, #25
 8006970:	68e3      	ldr	r3, [r4, #12]
 8006972:	9a03      	ldr	r2, [sp, #12]
 8006974:	1a9b      	subs	r3, r3, r2
 8006976:	429d      	cmp	r5, r3
 8006978:	db05      	blt.n	8006986 <_printf_i+0x216>
 800697a:	68e0      	ldr	r0, [r4, #12]
 800697c:	9b03      	ldr	r3, [sp, #12]
 800697e:	4298      	cmp	r0, r3
 8006980:	bfb8      	it	lt
 8006982:	4618      	movlt	r0, r3
 8006984:	e793      	b.n	80068ae <_printf_i+0x13e>
 8006986:	2301      	movs	r3, #1
 8006988:	464a      	mov	r2, r9
 800698a:	4639      	mov	r1, r7
 800698c:	4630      	mov	r0, r6
 800698e:	47c0      	blx	r8
 8006990:	3001      	adds	r0, #1
 8006992:	d08a      	beq.n	80068aa <_printf_i+0x13a>
 8006994:	3501      	adds	r5, #1
 8006996:	e7eb      	b.n	8006970 <_printf_i+0x200>
 8006998:	2b00      	cmp	r3, #0
 800699a:	d1a7      	bne.n	80068ec <_printf_i+0x17c>
 800699c:	780b      	ldrb	r3, [r1, #0]
 800699e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80069a2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80069a6:	e765      	b.n	8006874 <_printf_i+0x104>
 80069a8:	08007dde 	.word	0x08007dde
 80069ac:	08007dcd 	.word	0x08007dcd

080069b0 <_sbrk_r>:
 80069b0:	b538      	push	{r3, r4, r5, lr}
 80069b2:	2300      	movs	r3, #0
 80069b4:	4c05      	ldr	r4, [pc, #20]	; (80069cc <_sbrk_r+0x1c>)
 80069b6:	4605      	mov	r5, r0
 80069b8:	4608      	mov	r0, r1
 80069ba:	6023      	str	r3, [r4, #0]
 80069bc:	f7fe ff30 	bl	8005820 <_sbrk>
 80069c0:	1c43      	adds	r3, r0, #1
 80069c2:	d102      	bne.n	80069ca <_sbrk_r+0x1a>
 80069c4:	6823      	ldr	r3, [r4, #0]
 80069c6:	b103      	cbz	r3, 80069ca <_sbrk_r+0x1a>
 80069c8:	602b      	str	r3, [r5, #0]
 80069ca:	bd38      	pop	{r3, r4, r5, pc}
 80069cc:	20000924 	.word	0x20000924

080069d0 <__sread>:
 80069d0:	b510      	push	{r4, lr}
 80069d2:	460c      	mov	r4, r1
 80069d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069d8:	f000 f8e4 	bl	8006ba4 <_read_r>
 80069dc:	2800      	cmp	r0, #0
 80069de:	bfab      	itete	ge
 80069e0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80069e2:	89a3      	ldrhlt	r3, [r4, #12]
 80069e4:	181b      	addge	r3, r3, r0
 80069e6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80069ea:	bfac      	ite	ge
 80069ec:	6563      	strge	r3, [r4, #84]	; 0x54
 80069ee:	81a3      	strhlt	r3, [r4, #12]
 80069f0:	bd10      	pop	{r4, pc}

080069f2 <__swrite>:
 80069f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069f6:	461f      	mov	r7, r3
 80069f8:	898b      	ldrh	r3, [r1, #12]
 80069fa:	4605      	mov	r5, r0
 80069fc:	05db      	lsls	r3, r3, #23
 80069fe:	460c      	mov	r4, r1
 8006a00:	4616      	mov	r6, r2
 8006a02:	d505      	bpl.n	8006a10 <__swrite+0x1e>
 8006a04:	2302      	movs	r3, #2
 8006a06:	2200      	movs	r2, #0
 8006a08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a0c:	f000 f868 	bl	8006ae0 <_lseek_r>
 8006a10:	89a3      	ldrh	r3, [r4, #12]
 8006a12:	4632      	mov	r2, r6
 8006a14:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006a18:	81a3      	strh	r3, [r4, #12]
 8006a1a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006a1e:	463b      	mov	r3, r7
 8006a20:	4628      	mov	r0, r5
 8006a22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006a26:	f000 b817 	b.w	8006a58 <_write_r>

08006a2a <__sseek>:
 8006a2a:	b510      	push	{r4, lr}
 8006a2c:	460c      	mov	r4, r1
 8006a2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a32:	f000 f855 	bl	8006ae0 <_lseek_r>
 8006a36:	1c43      	adds	r3, r0, #1
 8006a38:	89a3      	ldrh	r3, [r4, #12]
 8006a3a:	bf15      	itete	ne
 8006a3c:	6560      	strne	r0, [r4, #84]	; 0x54
 8006a3e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006a42:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006a46:	81a3      	strheq	r3, [r4, #12]
 8006a48:	bf18      	it	ne
 8006a4a:	81a3      	strhne	r3, [r4, #12]
 8006a4c:	bd10      	pop	{r4, pc}

08006a4e <__sclose>:
 8006a4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a52:	f000 b813 	b.w	8006a7c <_close_r>
	...

08006a58 <_write_r>:
 8006a58:	b538      	push	{r3, r4, r5, lr}
 8006a5a:	4605      	mov	r5, r0
 8006a5c:	4608      	mov	r0, r1
 8006a5e:	4611      	mov	r1, r2
 8006a60:	2200      	movs	r2, #0
 8006a62:	4c05      	ldr	r4, [pc, #20]	; (8006a78 <_write_r+0x20>)
 8006a64:	6022      	str	r2, [r4, #0]
 8006a66:	461a      	mov	r2, r3
 8006a68:	f7fd f928 	bl	8003cbc <_write>
 8006a6c:	1c43      	adds	r3, r0, #1
 8006a6e:	d102      	bne.n	8006a76 <_write_r+0x1e>
 8006a70:	6823      	ldr	r3, [r4, #0]
 8006a72:	b103      	cbz	r3, 8006a76 <_write_r+0x1e>
 8006a74:	602b      	str	r3, [r5, #0]
 8006a76:	bd38      	pop	{r3, r4, r5, pc}
 8006a78:	20000924 	.word	0x20000924

08006a7c <_close_r>:
 8006a7c:	b538      	push	{r3, r4, r5, lr}
 8006a7e:	2300      	movs	r3, #0
 8006a80:	4c05      	ldr	r4, [pc, #20]	; (8006a98 <_close_r+0x1c>)
 8006a82:	4605      	mov	r5, r0
 8006a84:	4608      	mov	r0, r1
 8006a86:	6023      	str	r3, [r4, #0]
 8006a88:	f7fe fee4 	bl	8005854 <_close>
 8006a8c:	1c43      	adds	r3, r0, #1
 8006a8e:	d102      	bne.n	8006a96 <_close_r+0x1a>
 8006a90:	6823      	ldr	r3, [r4, #0]
 8006a92:	b103      	cbz	r3, 8006a96 <_close_r+0x1a>
 8006a94:	602b      	str	r3, [r5, #0]
 8006a96:	bd38      	pop	{r3, r4, r5, pc}
 8006a98:	20000924 	.word	0x20000924

08006a9c <_fstat_r>:
 8006a9c:	b538      	push	{r3, r4, r5, lr}
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	4c06      	ldr	r4, [pc, #24]	; (8006abc <_fstat_r+0x20>)
 8006aa2:	4605      	mov	r5, r0
 8006aa4:	4608      	mov	r0, r1
 8006aa6:	4611      	mov	r1, r2
 8006aa8:	6023      	str	r3, [r4, #0]
 8006aaa:	f7fe fed6 	bl	800585a <_fstat>
 8006aae:	1c43      	adds	r3, r0, #1
 8006ab0:	d102      	bne.n	8006ab8 <_fstat_r+0x1c>
 8006ab2:	6823      	ldr	r3, [r4, #0]
 8006ab4:	b103      	cbz	r3, 8006ab8 <_fstat_r+0x1c>
 8006ab6:	602b      	str	r3, [r5, #0]
 8006ab8:	bd38      	pop	{r3, r4, r5, pc}
 8006aba:	bf00      	nop
 8006abc:	20000924 	.word	0x20000924

08006ac0 <_isatty_r>:
 8006ac0:	b538      	push	{r3, r4, r5, lr}
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	4c05      	ldr	r4, [pc, #20]	; (8006adc <_isatty_r+0x1c>)
 8006ac6:	4605      	mov	r5, r0
 8006ac8:	4608      	mov	r0, r1
 8006aca:	6023      	str	r3, [r4, #0]
 8006acc:	f7fe feca 	bl	8005864 <_isatty>
 8006ad0:	1c43      	adds	r3, r0, #1
 8006ad2:	d102      	bne.n	8006ada <_isatty_r+0x1a>
 8006ad4:	6823      	ldr	r3, [r4, #0]
 8006ad6:	b103      	cbz	r3, 8006ada <_isatty_r+0x1a>
 8006ad8:	602b      	str	r3, [r5, #0]
 8006ada:	bd38      	pop	{r3, r4, r5, pc}
 8006adc:	20000924 	.word	0x20000924

08006ae0 <_lseek_r>:
 8006ae0:	b538      	push	{r3, r4, r5, lr}
 8006ae2:	4605      	mov	r5, r0
 8006ae4:	4608      	mov	r0, r1
 8006ae6:	4611      	mov	r1, r2
 8006ae8:	2200      	movs	r2, #0
 8006aea:	4c05      	ldr	r4, [pc, #20]	; (8006b00 <_lseek_r+0x20>)
 8006aec:	6022      	str	r2, [r4, #0]
 8006aee:	461a      	mov	r2, r3
 8006af0:	f7fe feba 	bl	8005868 <_lseek>
 8006af4:	1c43      	adds	r3, r0, #1
 8006af6:	d102      	bne.n	8006afe <_lseek_r+0x1e>
 8006af8:	6823      	ldr	r3, [r4, #0]
 8006afa:	b103      	cbz	r3, 8006afe <_lseek_r+0x1e>
 8006afc:	602b      	str	r3, [r5, #0]
 8006afe:	bd38      	pop	{r3, r4, r5, pc}
 8006b00:	20000924 	.word	0x20000924

08006b04 <memchr>:
 8006b04:	b510      	push	{r4, lr}
 8006b06:	b2c9      	uxtb	r1, r1
 8006b08:	4402      	add	r2, r0
 8006b0a:	4290      	cmp	r0, r2
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	d101      	bne.n	8006b14 <memchr+0x10>
 8006b10:	2000      	movs	r0, #0
 8006b12:	bd10      	pop	{r4, pc}
 8006b14:	781c      	ldrb	r4, [r3, #0]
 8006b16:	3001      	adds	r0, #1
 8006b18:	428c      	cmp	r4, r1
 8006b1a:	d1f6      	bne.n	8006b0a <memchr+0x6>
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	bd10      	pop	{r4, pc}

08006b20 <memmove>:
 8006b20:	4288      	cmp	r0, r1
 8006b22:	b510      	push	{r4, lr}
 8006b24:	eb01 0302 	add.w	r3, r1, r2
 8006b28:	d803      	bhi.n	8006b32 <memmove+0x12>
 8006b2a:	1e42      	subs	r2, r0, #1
 8006b2c:	4299      	cmp	r1, r3
 8006b2e:	d10c      	bne.n	8006b4a <memmove+0x2a>
 8006b30:	bd10      	pop	{r4, pc}
 8006b32:	4298      	cmp	r0, r3
 8006b34:	d2f9      	bcs.n	8006b2a <memmove+0xa>
 8006b36:	1881      	adds	r1, r0, r2
 8006b38:	1ad2      	subs	r2, r2, r3
 8006b3a:	42d3      	cmn	r3, r2
 8006b3c:	d100      	bne.n	8006b40 <memmove+0x20>
 8006b3e:	bd10      	pop	{r4, pc}
 8006b40:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006b44:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006b48:	e7f7      	b.n	8006b3a <memmove+0x1a>
 8006b4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006b4e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006b52:	e7eb      	b.n	8006b2c <memmove+0xc>

08006b54 <__malloc_lock>:
 8006b54:	4770      	bx	lr

08006b56 <__malloc_unlock>:
 8006b56:	4770      	bx	lr

08006b58 <_realloc_r>:
 8006b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b5a:	4607      	mov	r7, r0
 8006b5c:	4614      	mov	r4, r2
 8006b5e:	460e      	mov	r6, r1
 8006b60:	b921      	cbnz	r1, 8006b6c <_realloc_r+0x14>
 8006b62:	4611      	mov	r1, r2
 8006b64:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006b68:	f7ff ba9e 	b.w	80060a8 <_malloc_r>
 8006b6c:	b922      	cbnz	r2, 8006b78 <_realloc_r+0x20>
 8006b6e:	f7ff fa4f 	bl	8006010 <_free_r>
 8006b72:	4625      	mov	r5, r4
 8006b74:	4628      	mov	r0, r5
 8006b76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b78:	f000 f826 	bl	8006bc8 <_malloc_usable_size_r>
 8006b7c:	4284      	cmp	r4, r0
 8006b7e:	d90f      	bls.n	8006ba0 <_realloc_r+0x48>
 8006b80:	4621      	mov	r1, r4
 8006b82:	4638      	mov	r0, r7
 8006b84:	f7ff fa90 	bl	80060a8 <_malloc_r>
 8006b88:	4605      	mov	r5, r0
 8006b8a:	2800      	cmp	r0, #0
 8006b8c:	d0f2      	beq.n	8006b74 <_realloc_r+0x1c>
 8006b8e:	4631      	mov	r1, r6
 8006b90:	4622      	mov	r2, r4
 8006b92:	f7fe fee1 	bl	8005958 <memcpy>
 8006b96:	4631      	mov	r1, r6
 8006b98:	4638      	mov	r0, r7
 8006b9a:	f7ff fa39 	bl	8006010 <_free_r>
 8006b9e:	e7e9      	b.n	8006b74 <_realloc_r+0x1c>
 8006ba0:	4635      	mov	r5, r6
 8006ba2:	e7e7      	b.n	8006b74 <_realloc_r+0x1c>

08006ba4 <_read_r>:
 8006ba4:	b538      	push	{r3, r4, r5, lr}
 8006ba6:	4605      	mov	r5, r0
 8006ba8:	4608      	mov	r0, r1
 8006baa:	4611      	mov	r1, r2
 8006bac:	2200      	movs	r2, #0
 8006bae:	4c05      	ldr	r4, [pc, #20]	; (8006bc4 <_read_r+0x20>)
 8006bb0:	6022      	str	r2, [r4, #0]
 8006bb2:	461a      	mov	r2, r3
 8006bb4:	f7fe fe26 	bl	8005804 <_read>
 8006bb8:	1c43      	adds	r3, r0, #1
 8006bba:	d102      	bne.n	8006bc2 <_read_r+0x1e>
 8006bbc:	6823      	ldr	r3, [r4, #0]
 8006bbe:	b103      	cbz	r3, 8006bc2 <_read_r+0x1e>
 8006bc0:	602b      	str	r3, [r5, #0]
 8006bc2:	bd38      	pop	{r3, r4, r5, pc}
 8006bc4:	20000924 	.word	0x20000924

08006bc8 <_malloc_usable_size_r>:
 8006bc8:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8006bcc:	2800      	cmp	r0, #0
 8006bce:	f1a0 0004 	sub.w	r0, r0, #4
 8006bd2:	bfbc      	itt	lt
 8006bd4:	580b      	ldrlt	r3, [r1, r0]
 8006bd6:	18c0      	addlt	r0, r0, r3
 8006bd8:	4770      	bx	lr
	...

08006bdc <_init>:
 8006bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bde:	bf00      	nop
 8006be0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006be2:	bc08      	pop	{r3}
 8006be4:	469e      	mov	lr, r3
 8006be6:	4770      	bx	lr

08006be8 <_fini>:
 8006be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bea:	bf00      	nop
 8006bec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bee:	bc08      	pop	{r3}
 8006bf0:	469e      	mov	lr, r3
 8006bf2:	4770      	bx	lr
