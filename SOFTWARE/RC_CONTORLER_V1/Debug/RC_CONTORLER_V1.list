
RC_CONTORLER_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001810  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  080019f4  080019f4  000119f4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001a1c  08001a1c  00011a1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001a20  08001a20  00011a20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000000  08001a24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000250  2000000c  08001a30  0002000c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  2000025c  08001a30  0002025c  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001214c  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002586  00000000  00000000  00032181  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000b07e  00000000  00000000  00034707  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000cb0  00000000  00000000  0003f788  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000013b0  00000000  00000000  00040438  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00007897  00000000  00000000  000417e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000492d  00000000  00000000  0004907f  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0004d9ac  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000028b4  00000000  00000000  0004da28  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000000c 	.word	0x2000000c
 8000200:	00000000 	.word	0x00000000
 8000204:	080019dc 	.word	0x080019dc

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000010 	.word	0x20000010
 8000220:	080019dc 	.word	0x080019dc

08000224 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000224:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000226:	4b0e      	ldr	r3, [pc, #56]	; (8000260 <HAL_InitTick+0x3c>)
{
 8000228:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800022a:	7818      	ldrb	r0, [r3, #0]
 800022c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000230:	fbb3 f3f0 	udiv	r3, r3, r0
 8000234:	4a0b      	ldr	r2, [pc, #44]	; (8000264 <HAL_InitTick+0x40>)
 8000236:	6810      	ldr	r0, [r2, #0]
 8000238:	fbb0 f0f3 	udiv	r0, r0, r3
 800023c:	f000 f9c2 	bl	80005c4 <HAL_SYSTICK_Config>
 8000240:	4604      	mov	r4, r0
 8000242:	b958      	cbnz	r0, 800025c <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000244:	2d0f      	cmp	r5, #15
 8000246:	d809      	bhi.n	800025c <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000248:	4602      	mov	r2, r0
 800024a:	4629      	mov	r1, r5
 800024c:	f04f 30ff 	mov.w	r0, #4294967295
 8000250:	f000 f984 	bl	800055c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000254:	4b04      	ldr	r3, [pc, #16]	; (8000268 <HAL_InitTick+0x44>)
 8000256:	4620      	mov	r0, r4
 8000258:	601d      	str	r5, [r3, #0]
 800025a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800025c:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800025e:	bd38      	pop	{r3, r4, r5, pc}
 8000260:	20000000 	.word	0x20000000
 8000264:	20000008 	.word	0x20000008
 8000268:	20000004 	.word	0x20000004

0800026c <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800026c:	4a07      	ldr	r2, [pc, #28]	; (800028c <HAL_Init+0x20>)
{
 800026e:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000270:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000272:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000274:	f043 0310 	orr.w	r3, r3, #16
 8000278:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800027a:	f000 f95d 	bl	8000538 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800027e:	2000      	movs	r0, #0
 8000280:	f7ff ffd0 	bl	8000224 <HAL_InitTick>
  HAL_MspInit();
 8000284:	f001 f962 	bl	800154c <HAL_MspInit>
}
 8000288:	2000      	movs	r0, #0
 800028a:	bd08      	pop	{r3, pc}
 800028c:	40022000 	.word	0x40022000

08000290 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000290:	4a03      	ldr	r2, [pc, #12]	; (80002a0 <HAL_IncTick+0x10>)
 8000292:	4b04      	ldr	r3, [pc, #16]	; (80002a4 <HAL_IncTick+0x14>)
 8000294:	6811      	ldr	r1, [r2, #0]
 8000296:	781b      	ldrb	r3, [r3, #0]
 8000298:	440b      	add	r3, r1
 800029a:	6013      	str	r3, [r2, #0]
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop
 80002a0:	20000028 	.word	0x20000028
 80002a4:	20000000 	.word	0x20000000

080002a8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80002a8:	4b01      	ldr	r3, [pc, #4]	; (80002b0 <HAL_GetTick+0x8>)
 80002aa:	6818      	ldr	r0, [r3, #0]
}
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop
 80002b0:	20000028 	.word	0x20000028

080002b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80002b4:	b538      	push	{r3, r4, r5, lr}
 80002b6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80002b8:	f7ff fff6 	bl	80002a8 <HAL_GetTick>
 80002bc:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80002be:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80002c0:	bf1e      	ittt	ne
 80002c2:	4b04      	ldrne	r3, [pc, #16]	; (80002d4 <HAL_Delay+0x20>)
 80002c4:	781b      	ldrbne	r3, [r3, #0]
 80002c6:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80002c8:	f7ff ffee 	bl	80002a8 <HAL_GetTick>
 80002cc:	1b40      	subs	r0, r0, r5
 80002ce:	4284      	cmp	r4, r0
 80002d0:	d8fa      	bhi.n	80002c8 <HAL_Delay+0x14>
  {
  }
}
 80002d2:	bd38      	pop	{r3, r4, r5, pc}
 80002d4:	20000000 	.word	0x20000000

080002d8 <HAL_ADC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 80002d8:	2300      	movs	r3, #0
{ 
 80002da:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 80002dc:	9301      	str	r3, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80002de:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 80002e2:	2b01      	cmp	r3, #1
 80002e4:	d074      	beq.n	80003d0 <HAL_ADC_ConfigChannel+0xf8>
 80002e6:	2301      	movs	r3, #1
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80002e8:	684d      	ldr	r5, [r1, #4]
  __HAL_LOCK(hadc);
 80002ea:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  if (sConfig->Rank < 7U)
 80002ee:	2d06      	cmp	r5, #6
 80002f0:	6802      	ldr	r2, [r0, #0]
 80002f2:	ea4f 0385 	mov.w	r3, r5, lsl #2
 80002f6:	680c      	ldr	r4, [r1, #0]
 80002f8:	d825      	bhi.n	8000346 <HAL_ADC_ConfigChannel+0x6e>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80002fa:	442b      	add	r3, r5
 80002fc:	251f      	movs	r5, #31
 80002fe:	6b56      	ldr	r6, [r2, #52]	; 0x34
 8000300:	3b05      	subs	r3, #5
 8000302:	409d      	lsls	r5, r3
 8000304:	ea26 0505 	bic.w	r5, r6, r5
 8000308:	fa04 f303 	lsl.w	r3, r4, r3
 800030c:	432b      	orrs	r3, r5
 800030e:	6353      	str	r3, [r2, #52]	; 0x34
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000310:	2c09      	cmp	r4, #9
 8000312:	ea4f 0344 	mov.w	r3, r4, lsl #1
 8000316:	688d      	ldr	r5, [r1, #8]
 8000318:	d92f      	bls.n	800037a <HAL_ADC_ConfigChannel+0xa2>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800031a:	2607      	movs	r6, #7
 800031c:	4423      	add	r3, r4
 800031e:	68d1      	ldr	r1, [r2, #12]
 8000320:	3b1e      	subs	r3, #30
 8000322:	409e      	lsls	r6, r3
 8000324:	ea21 0106 	bic.w	r1, r1, r6
 8000328:	fa05 f303 	lsl.w	r3, r5, r3
 800032c:	430b      	orrs	r3, r1
 800032e:	60d3      	str	r3, [r2, #12]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000330:	f1a4 0310 	sub.w	r3, r4, #16
 8000334:	2b01      	cmp	r3, #1
 8000336:	d92b      	bls.n	8000390 <HAL_ADC_ConfigChannel+0xb8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000338:	2300      	movs	r3, #0
      tmp_hal_status = HAL_ERROR;
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800033a:	2200      	movs	r2, #0
 800033c:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
}
 8000340:	4618      	mov	r0, r3
 8000342:	b002      	add	sp, #8
 8000344:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13U)
 8000346:	2d0c      	cmp	r5, #12
 8000348:	d80b      	bhi.n	8000362 <HAL_ADC_ConfigChannel+0x8a>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800034a:	442b      	add	r3, r5
 800034c:	251f      	movs	r5, #31
 800034e:	6b16      	ldr	r6, [r2, #48]	; 0x30
 8000350:	3b23      	subs	r3, #35	; 0x23
 8000352:	409d      	lsls	r5, r3
 8000354:	ea26 0505 	bic.w	r5, r6, r5
 8000358:	fa04 f303 	lsl.w	r3, r4, r3
 800035c:	432b      	orrs	r3, r5
 800035e:	6313      	str	r3, [r2, #48]	; 0x30
 8000360:	e7d6      	b.n	8000310 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000362:	442b      	add	r3, r5
 8000364:	251f      	movs	r5, #31
 8000366:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
 8000368:	3b41      	subs	r3, #65	; 0x41
 800036a:	409d      	lsls	r5, r3
 800036c:	ea26 0505 	bic.w	r5, r6, r5
 8000370:	fa04 f303 	lsl.w	r3, r4, r3
 8000374:	432b      	orrs	r3, r5
 8000376:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000378:	e7ca      	b.n	8000310 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800037a:	2607      	movs	r6, #7
 800037c:	6911      	ldr	r1, [r2, #16]
 800037e:	4423      	add	r3, r4
 8000380:	409e      	lsls	r6, r3
 8000382:	ea21 0106 	bic.w	r1, r1, r6
 8000386:	fa05 f303 	lsl.w	r3, r5, r3
 800038a:	430b      	orrs	r3, r1
 800038c:	6113      	str	r3, [r2, #16]
 800038e:	e7cf      	b.n	8000330 <HAL_ADC_ConfigChannel+0x58>
    if (hadc->Instance == ADC1)
 8000390:	4b10      	ldr	r3, [pc, #64]	; (80003d4 <HAL_ADC_ConfigChannel+0xfc>)
 8000392:	429a      	cmp	r2, r3
 8000394:	d116      	bne.n	80003c4 <HAL_ADC_ConfigChannel+0xec>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000396:	6893      	ldr	r3, [r2, #8]
 8000398:	021b      	lsls	r3, r3, #8
 800039a:	d4cd      	bmi.n	8000338 <HAL_ADC_ConfigChannel+0x60>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800039c:	6893      	ldr	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800039e:	2c10      	cmp	r4, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80003a0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80003a4:	6093      	str	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80003a6:	d1c7      	bne.n	8000338 <HAL_ADC_ConfigChannel+0x60>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80003a8:	4b0b      	ldr	r3, [pc, #44]	; (80003d8 <HAL_ADC_ConfigChannel+0x100>)
 80003aa:	4a0c      	ldr	r2, [pc, #48]	; (80003dc <HAL_ADC_ConfigChannel+0x104>)
 80003ac:	681b      	ldr	r3, [r3, #0]
 80003ae:	fbb3 f2f2 	udiv	r2, r3, r2
 80003b2:	230a      	movs	r3, #10
 80003b4:	4353      	muls	r3, r2
            wait_loop_index--;
 80003b6:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 80003b8:	9b01      	ldr	r3, [sp, #4]
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d0bc      	beq.n	8000338 <HAL_ADC_ConfigChannel+0x60>
            wait_loop_index--;
 80003be:	9b01      	ldr	r3, [sp, #4]
 80003c0:	3b01      	subs	r3, #1
 80003c2:	e7f8      	b.n	80003b6 <HAL_ADC_ConfigChannel+0xde>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80003c4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80003c6:	f043 0320 	orr.w	r3, r3, #32
 80003ca:	6283      	str	r3, [r0, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 80003cc:	2301      	movs	r3, #1
 80003ce:	e7b4      	b.n	800033a <HAL_ADC_ConfigChannel+0x62>
  __HAL_LOCK(hadc);
 80003d0:	2302      	movs	r3, #2
 80003d2:	e7b5      	b.n	8000340 <HAL_ADC_ConfigChannel+0x68>
 80003d4:	40012400 	.word	0x40012400
 80003d8:	20000008 	.word	0x20000008
 80003dc:	000f4240 	.word	0x000f4240

080003e0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80003e0:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80003e2:	6803      	ldr	r3, [r0, #0]
{
 80003e4:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 80003e6:	689a      	ldr	r2, [r3, #8]
 80003e8:	07d2      	lsls	r2, r2, #31
 80003ea:	d401      	bmi.n	80003f0 <ADC_ConversionStop_Disable+0x10>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80003ec:	2000      	movs	r0, #0
 80003ee:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 80003f0:	689a      	ldr	r2, [r3, #8]
 80003f2:	f022 0201 	bic.w	r2, r2, #1
 80003f6:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 80003f8:	f7ff ff56 	bl	80002a8 <HAL_GetTick>
 80003fc:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 80003fe:	6823      	ldr	r3, [r4, #0]
 8000400:	689b      	ldr	r3, [r3, #8]
 8000402:	07db      	lsls	r3, r3, #31
 8000404:	d5f2      	bpl.n	80003ec <ADC_ConversionStop_Disable+0xc>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000406:	f7ff ff4f 	bl	80002a8 <HAL_GetTick>
 800040a:	1b40      	subs	r0, r0, r5
 800040c:	2802      	cmp	r0, #2
 800040e:	d9f6      	bls.n	80003fe <ADC_ConversionStop_Disable+0x1e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000410:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000412:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000414:	f043 0310 	orr.w	r3, r3, #16
 8000418:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800041a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800041c:	f043 0301 	orr.w	r3, r3, #1
 8000420:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000422:	bd38      	pop	{r3, r4, r5, pc}

08000424 <HAL_ADC_Init>:
{
 8000424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(hadc == NULL)
 8000426:	4604      	mov	r4, r0
 8000428:	2800      	cmp	r0, #0
 800042a:	d077      	beq.n	800051c <HAL_ADC_Init+0xf8>
  if (hadc->State == HAL_ADC_STATE_RESET)
 800042c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800042e:	b923      	cbnz	r3, 800043a <HAL_ADC_Init+0x16>
    ADC_CLEAR_ERRORCODE(hadc);
 8000430:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 8000432:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 8000436:	f001 f8ab 	bl	8001590 <HAL_ADC_MspInit>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800043a:	4620      	mov	r0, r4
 800043c:	f7ff ffd0 	bl	80003e0 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000440:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000442:	f013 0310 	ands.w	r3, r3, #16
 8000446:	d16b      	bne.n	8000520 <HAL_ADC_Init+0xfc>
 8000448:	2800      	cmp	r0, #0
 800044a:	d169      	bne.n	8000520 <HAL_ADC_Init+0xfc>
    ADC_STATE_CLR_SET(hadc->State,
 800044c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800044e:	4937      	ldr	r1, [pc, #220]	; (800052c <HAL_ADC_Init+0x108>)
    ADC_STATE_CLR_SET(hadc->State,
 8000450:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 8000454:	f022 0202 	bic.w	r2, r2, #2
 8000458:	f042 0202 	orr.w	r2, r2, #2
 800045c:	62a2      	str	r2, [r4, #40]	; 0x28
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800045e:	e894 0024 	ldmia.w	r4, {r2, r5}
 8000462:	428a      	cmp	r2, r1
 8000464:	69e1      	ldr	r1, [r4, #28]
 8000466:	d104      	bne.n	8000472 <HAL_ADC_Init+0x4e>
 8000468:	f5b1 2f40 	cmp.w	r1, #786432	; 0xc0000
 800046c:	bf08      	it	eq
 800046e:	f44f 2100 	moveq.w	r1, #524288	; 0x80000
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000472:	7b26      	ldrb	r6, [r4, #12]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000474:	ea45 0546 	orr.w	r5, r5, r6, lsl #1
 8000478:	4329      	orrs	r1, r5
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800047a:	68a5      	ldr	r5, [r4, #8]
 800047c:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8000480:	d035      	beq.n	80004ee <HAL_ADC_Init+0xca>
 8000482:	2d01      	cmp	r5, #1
 8000484:	bf08      	it	eq
 8000486:	f44f 7380 	moveq.w	r3, #256	; 0x100
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800048a:	7d27      	ldrb	r7, [r4, #20]
 800048c:	2f01      	cmp	r7, #1
 800048e:	d106      	bne.n	800049e <HAL_ADC_Init+0x7a>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000490:	bb7e      	cbnz	r6, 80004f2 <HAL_ADC_Init+0xce>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000492:	69a6      	ldr	r6, [r4, #24]
 8000494:	3e01      	subs	r6, #1
 8000496:	ea43 3346 	orr.w	r3, r3, r6, lsl #13
 800049a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
      MODIFY_REG(hadc->Instance->CR1,
 800049e:	6856      	ldr	r6, [r2, #4]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80004a0:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR1,
 80004a4:	f426 4669 	bic.w	r6, r6, #59648	; 0xe900
 80004a8:	ea43 0306 	orr.w	r3, r3, r6
 80004ac:	6053      	str	r3, [r2, #4]
      MODIFY_REG(hadc->Instance->CR2,
 80004ae:	6896      	ldr	r6, [r2, #8]
 80004b0:	4b1f      	ldr	r3, [pc, #124]	; (8000530 <HAL_ADC_Init+0x10c>)
 80004b2:	ea03 0306 	and.w	r3, r3, r6
 80004b6:	ea43 0301 	orr.w	r3, r3, r1
 80004ba:	6093      	str	r3, [r2, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80004bc:	d001      	beq.n	80004c2 <HAL_ADC_Init+0x9e>
 80004be:	2d01      	cmp	r5, #1
 80004c0:	d120      	bne.n	8000504 <HAL_ADC_Init+0xe0>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80004c2:	6923      	ldr	r3, [r4, #16]
 80004c4:	3b01      	subs	r3, #1
 80004c6:	051b      	lsls	r3, r3, #20
    MODIFY_REG(hadc->Instance->SQR1,
 80004c8:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
 80004ca:	f425 0570 	bic.w	r5, r5, #15728640	; 0xf00000
 80004ce:	432b      	orrs	r3, r5
 80004d0:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80004d2:	6892      	ldr	r2, [r2, #8]
 80004d4:	4b17      	ldr	r3, [pc, #92]	; (8000534 <HAL_ADC_Init+0x110>)
 80004d6:	4013      	ands	r3, r2
 80004d8:	4299      	cmp	r1, r3
 80004da:	d115      	bne.n	8000508 <HAL_ADC_Init+0xe4>
      ADC_CLEAR_ERRORCODE(hadc);
 80004dc:	2300      	movs	r3, #0
 80004de:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 80004e0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80004e2:	f023 0303 	bic.w	r3, r3, #3
 80004e6:	f043 0301 	orr.w	r3, r3, #1
 80004ea:	62a3      	str	r3, [r4, #40]	; 0x28
 80004ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80004ee:	462b      	mov	r3, r5
 80004f0:	e7cb      	b.n	800048a <HAL_ADC_Init+0x66>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80004f2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80004f4:	f046 0620 	orr.w	r6, r6, #32
 80004f8:	62a6      	str	r6, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80004fa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80004fc:	f046 0601 	orr.w	r6, r6, #1
 8000500:	62e6      	str	r6, [r4, #44]	; 0x2c
 8000502:	e7cc      	b.n	800049e <HAL_ADC_Init+0x7a>
  uint32_t tmp_sqr1 = 0U;
 8000504:	2300      	movs	r3, #0
 8000506:	e7df      	b.n	80004c8 <HAL_ADC_Init+0xa4>
      ADC_STATE_CLR_SET(hadc->State,
 8000508:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800050a:	f023 0312 	bic.w	r3, r3, #18
 800050e:	f043 0310 	orr.w	r3, r3, #16
 8000512:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000514:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000516:	f043 0301 	orr.w	r3, r3, #1
 800051a:	62e3      	str	r3, [r4, #44]	; 0x2c
    return HAL_ERROR;
 800051c:	2001      	movs	r0, #1
}
 800051e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000520:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000522:	f043 0310 	orr.w	r3, r3, #16
 8000526:	62a3      	str	r3, [r4, #40]	; 0x28
 8000528:	e7f8      	b.n	800051c <HAL_ADC_Init+0xf8>
 800052a:	bf00      	nop
 800052c:	40013c00 	.word	0x40013c00
 8000530:	ffe1f7fd 	.word	0xffe1f7fd
 8000534:	ff1f0efe 	.word	0xff1f0efe

08000538 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000538:	4a07      	ldr	r2, [pc, #28]	; (8000558 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800053a:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800053c:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800053e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000542:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000546:	041b      	lsls	r3, r3, #16
 8000548:	0c1b      	lsrs	r3, r3, #16
 800054a:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800054e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8000552:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000554:	60d3      	str	r3, [r2, #12]
 8000556:	4770      	bx	lr
 8000558:	e000ed00 	.word	0xe000ed00

0800055c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800055c:	4b17      	ldr	r3, [pc, #92]	; (80005bc <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	68dc      	ldr	r4, [r3, #12]
 8000562:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000566:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800056a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800056c:	2b04      	cmp	r3, #4
 800056e:	bf28      	it	cs
 8000570:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000572:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000574:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000578:	bf98      	it	ls
 800057a:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800057c:	fa05 f303 	lsl.w	r3, r5, r3
 8000580:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000584:	bf88      	it	hi
 8000586:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000588:	4019      	ands	r1, r3
 800058a:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800058c:	fa05 f404 	lsl.w	r4, r5, r4
 8000590:	3c01      	subs	r4, #1
 8000592:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 8000594:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000596:	ea42 0201 	orr.w	r2, r2, r1
 800059a:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800059e:	bfa9      	itett	ge
 80005a0:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005a4:	4b06      	ldrlt	r3, [pc, #24]	; (80005c0 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005a6:	b2d2      	uxtbge	r2, r2
 80005a8:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005ac:	bfbb      	ittet	lt
 80005ae:	f000 000f 	andlt.w	r0, r0, #15
 80005b2:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005b4:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005b8:	541a      	strblt	r2, [r3, r0]
 80005ba:	bd30      	pop	{r4, r5, pc}
 80005bc:	e000ed00 	.word	0xe000ed00
 80005c0:	e000ed14 	.word	0xe000ed14

080005c4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80005c4:	3801      	subs	r0, #1
 80005c6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80005ca:	d20a      	bcs.n	80005e2 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005cc:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80005ce:	4b06      	ldr	r3, [pc, #24]	; (80005e8 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005d0:	4a06      	ldr	r2, [pc, #24]	; (80005ec <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80005d2:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005d4:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80005d8:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80005da:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80005dc:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80005de:	601a      	str	r2, [r3, #0]
 80005e0:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80005e2:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop
 80005e8:	e000e010 	.word	0xe000e010
 80005ec:	e000ed00 	.word	0xe000ed00

080005f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80005f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80005f4:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 80005f6:	4626      	mov	r6, r4
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80005f8:	4f6c      	ldr	r7, [pc, #432]	; (80007ac <HAL_GPIO_Init+0x1bc>)
 80005fa:	4b6d      	ldr	r3, [pc, #436]	; (80007b0 <HAL_GPIO_Init+0x1c0>)
        temp = AFIO->EXTICR[position >> 2u];
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80005fc:	f8df e1b8 	ldr.w	lr, [pc, #440]	; 80007b8 <HAL_GPIO_Init+0x1c8>
      switch (GPIO_Init->Mode)
 8000600:	f8df c1b8 	ldr.w	ip, [pc, #440]	; 80007bc <HAL_GPIO_Init+0x1cc>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000604:	680a      	ldr	r2, [r1, #0]
 8000606:	fa32 f506 	lsrs.w	r5, r2, r6
 800060a:	d102      	bne.n	8000612 <HAL_GPIO_Init+0x22>
      }
    }

	position++;
  }
}
 800060c:	b003      	add	sp, #12
 800060e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 8000612:	f04f 0801 	mov.w	r8, #1
 8000616:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800061a:	ea02 0208 	and.w	r2, r2, r8
    if (iocurrent == ioposition)
 800061e:	4590      	cmp	r8, r2
 8000620:	f040 8084 	bne.w	800072c <HAL_GPIO_Init+0x13c>
      switch (GPIO_Init->Mode)
 8000624:	684d      	ldr	r5, [r1, #4]
 8000626:	2d12      	cmp	r5, #18
 8000628:	f000 80b1 	beq.w	800078e <HAL_GPIO_Init+0x19e>
 800062c:	f200 8087 	bhi.w	800073e <HAL_GPIO_Init+0x14e>
 8000630:	2d02      	cmp	r5, #2
 8000632:	f000 80a9 	beq.w	8000788 <HAL_GPIO_Init+0x198>
 8000636:	d87b      	bhi.n	8000730 <HAL_GPIO_Init+0x140>
 8000638:	2d00      	cmp	r5, #0
 800063a:	f000 808c 	beq.w	8000756 <HAL_GPIO_Init+0x166>
 800063e:	2d01      	cmp	r5, #1
 8000640:	f000 80a0 	beq.w	8000784 <HAL_GPIO_Init+0x194>
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000644:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000648:	2aff      	cmp	r2, #255	; 0xff
 800064a:	bf93      	iteet	ls
 800064c:	4682      	movls	sl, r0
 800064e:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 8000652:	3d08      	subhi	r5, #8
 8000654:	f8d0 b000 	ldrls.w	fp, [r0]
 8000658:	bf92      	itee	ls
 800065a:	00b5      	lslls	r5, r6, #2
 800065c:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8000660:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000662:	fa09 f805 	lsl.w	r8, r9, r5
 8000666:	ea2b 0808 	bic.w	r8, fp, r8
 800066a:	fa04 f505 	lsl.w	r5, r4, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800066e:	bf88      	it	hi
 8000670:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000674:	ea48 0505 	orr.w	r5, r8, r5
 8000678:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800067c:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8000680:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8000684:	d052      	beq.n	800072c <HAL_GPIO_Init+0x13c>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000686:	69bd      	ldr	r5, [r7, #24]
 8000688:	f026 0803 	bic.w	r8, r6, #3
 800068c:	f045 0501 	orr.w	r5, r5, #1
 8000690:	61bd      	str	r5, [r7, #24]
 8000692:	69bd      	ldr	r5, [r7, #24]
 8000694:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8000698:	f005 0501 	and.w	r5, r5, #1
 800069c:	9501      	str	r5, [sp, #4]
 800069e:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80006a2:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 80006a6:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80006a8:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 80006ac:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80006b0:	fa09 f90b 	lsl.w	r9, r9, fp
 80006b4:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80006b8:	4d3e      	ldr	r5, [pc, #248]	; (80007b4 <HAL_GPIO_Init+0x1c4>)
 80006ba:	42a8      	cmp	r0, r5
 80006bc:	d06c      	beq.n	8000798 <HAL_GPIO_Init+0x1a8>
 80006be:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80006c2:	42a8      	cmp	r0, r5
 80006c4:	d06a      	beq.n	800079c <HAL_GPIO_Init+0x1ac>
 80006c6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80006ca:	42a8      	cmp	r0, r5
 80006cc:	d068      	beq.n	80007a0 <HAL_GPIO_Init+0x1b0>
 80006ce:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80006d2:	42a8      	cmp	r0, r5
 80006d4:	d066      	beq.n	80007a4 <HAL_GPIO_Init+0x1b4>
 80006d6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80006da:	42a8      	cmp	r0, r5
 80006dc:	d064      	beq.n	80007a8 <HAL_GPIO_Init+0x1b8>
 80006de:	4570      	cmp	r0, lr
 80006e0:	bf0c      	ite	eq
 80006e2:	2505      	moveq	r5, #5
 80006e4:	2506      	movne	r5, #6
 80006e6:	fa05 f50b 	lsl.w	r5, r5, fp
 80006ea:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 80006ee:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 80006f2:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80006f4:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 80006f8:	bf14      	ite	ne
 80006fa:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80006fc:	4395      	biceq	r5, r2
 80006fe:	601d      	str	r5, [r3, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 8000700:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000702:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8000706:	bf14      	ite	ne
 8000708:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800070a:	4395      	biceq	r5, r2
 800070c:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 800070e:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000710:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8000714:	bf14      	ite	ne
 8000716:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000718:	4395      	biceq	r5, r2
 800071a:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 800071c:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800071e:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8000722:	bf14      	ite	ne
 8000724:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000726:	ea25 0202 	biceq.w	r2, r5, r2
 800072a:	60da      	str	r2, [r3, #12]
	position++;
 800072c:	3601      	adds	r6, #1
 800072e:	e769      	b.n	8000604 <HAL_GPIO_Init+0x14>
      switch (GPIO_Init->Mode)
 8000730:	2d03      	cmp	r5, #3
 8000732:	d025      	beq.n	8000780 <HAL_GPIO_Init+0x190>
 8000734:	2d11      	cmp	r5, #17
 8000736:	d185      	bne.n	8000644 <HAL_GPIO_Init+0x54>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000738:	68cc      	ldr	r4, [r1, #12]
 800073a:	3404      	adds	r4, #4
          break;
 800073c:	e782      	b.n	8000644 <HAL_GPIO_Init+0x54>
      switch (GPIO_Init->Mode)
 800073e:	4565      	cmp	r5, ip
 8000740:	d009      	beq.n	8000756 <HAL_GPIO_Init+0x166>
 8000742:	d812      	bhi.n	800076a <HAL_GPIO_Init+0x17a>
 8000744:	f8df 9078 	ldr.w	r9, [pc, #120]	; 80007c0 <HAL_GPIO_Init+0x1d0>
 8000748:	454d      	cmp	r5, r9
 800074a:	d004      	beq.n	8000756 <HAL_GPIO_Init+0x166>
 800074c:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8000750:	454d      	cmp	r5, r9
 8000752:	f47f af77 	bne.w	8000644 <HAL_GPIO_Init+0x54>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000756:	688c      	ldr	r4, [r1, #8]
 8000758:	b1e4      	cbz	r4, 8000794 <HAL_GPIO_Init+0x1a4>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800075a:	2c01      	cmp	r4, #1
            GPIOx->BSRR = ioposition;
 800075c:	bf0c      	ite	eq
 800075e:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8000762:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000766:	2408      	movs	r4, #8
 8000768:	e76c      	b.n	8000644 <HAL_GPIO_Init+0x54>
      switch (GPIO_Init->Mode)
 800076a:	f8df 9058 	ldr.w	r9, [pc, #88]	; 80007c4 <HAL_GPIO_Init+0x1d4>
 800076e:	454d      	cmp	r5, r9
 8000770:	d0f1      	beq.n	8000756 <HAL_GPIO_Init+0x166>
 8000772:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8000776:	454d      	cmp	r5, r9
 8000778:	d0ed      	beq.n	8000756 <HAL_GPIO_Init+0x166>
 800077a:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 800077e:	e7e7      	b.n	8000750 <HAL_GPIO_Init+0x160>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000780:	2400      	movs	r4, #0
 8000782:	e75f      	b.n	8000644 <HAL_GPIO_Init+0x54>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000784:	68cc      	ldr	r4, [r1, #12]
          break;
 8000786:	e75d      	b.n	8000644 <HAL_GPIO_Init+0x54>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000788:	68cc      	ldr	r4, [r1, #12]
 800078a:	3408      	adds	r4, #8
          break;
 800078c:	e75a      	b.n	8000644 <HAL_GPIO_Init+0x54>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800078e:	68cc      	ldr	r4, [r1, #12]
 8000790:	340c      	adds	r4, #12
          break;
 8000792:	e757      	b.n	8000644 <HAL_GPIO_Init+0x54>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000794:	2404      	movs	r4, #4
 8000796:	e755      	b.n	8000644 <HAL_GPIO_Init+0x54>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000798:	2500      	movs	r5, #0
 800079a:	e7a4      	b.n	80006e6 <HAL_GPIO_Init+0xf6>
 800079c:	2501      	movs	r5, #1
 800079e:	e7a2      	b.n	80006e6 <HAL_GPIO_Init+0xf6>
 80007a0:	2502      	movs	r5, #2
 80007a2:	e7a0      	b.n	80006e6 <HAL_GPIO_Init+0xf6>
 80007a4:	2503      	movs	r5, #3
 80007a6:	e79e      	b.n	80006e6 <HAL_GPIO_Init+0xf6>
 80007a8:	2504      	movs	r5, #4
 80007aa:	e79c      	b.n	80006e6 <HAL_GPIO_Init+0xf6>
 80007ac:	40021000 	.word	0x40021000
 80007b0:	40010400 	.word	0x40010400
 80007b4:	40010800 	.word	0x40010800
 80007b8:	40011c00 	.word	0x40011c00
 80007bc:	10210000 	.word	0x10210000
 80007c0:	10110000 	.word	0x10110000
 80007c4:	10310000 	.word	0x10310000

080007c8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80007c8:	b10a      	cbz	r2, 80007ce <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80007ca:	6101      	str	r1, [r0, #16]
 80007cc:	4770      	bx	lr
 80007ce:	0409      	lsls	r1, r1, #16
 80007d0:	e7fb      	b.n	80007ca <HAL_GPIO_WritePin+0x2>

080007d2 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 80007d2:	68c3      	ldr	r3, [r0, #12]
 80007d4:	420b      	tst	r3, r1
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80007d6:	bf14      	ite	ne
 80007d8:	6141      	strne	r1, [r0, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80007da:	6101      	streq	r1, [r0, #16]
 80007dc:	4770      	bx	lr
	...

080007e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80007e0:	b570      	push	{r4, r5, r6, lr}
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80007e2:	4604      	mov	r4, r0
 80007e4:	b908      	cbnz	r0, 80007ea <HAL_I2C_Init+0xa>
  {
    return HAL_ERROR;
 80007e6:	2001      	movs	r0, #1
 80007e8:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80007ea:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80007ee:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80007f2:	b91b      	cbnz	r3, 80007fc <HAL_I2C_Init+0x1c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80007f4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80007f8:	f000 ff1e 	bl	8001638 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80007fc:	2324      	movs	r3, #36	; 0x24

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80007fe:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8000800:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8000804:	6813      	ldr	r3, [r2, #0]
 8000806:	f023 0301 	bic.w	r3, r3, #1
 800080a:	6013      	str	r3, [r2, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800080c:	f000 fb04 	bl	8000e18 <HAL_RCC_GetPCLK1Freq>

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000810:	6865      	ldr	r5, [r4, #4]
 8000812:	4b41      	ldr	r3, [pc, #260]	; (8000918 <HAL_I2C_Init+0x138>)
 8000814:	429d      	cmp	r5, r3
 8000816:	d84d      	bhi.n	80008b4 <HAL_I2C_Init+0xd4>
 8000818:	4b40      	ldr	r3, [pc, #256]	; (800091c <HAL_I2C_Init+0x13c>)
 800081a:	4298      	cmp	r0, r3
 800081c:	d9e3      	bls.n	80007e6 <HAL_I2C_Init+0x6>
  {
    return HAL_ERROR;
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800081e:	4940      	ldr	r1, [pc, #256]	; (8000920 <HAL_I2C_Init+0x140>)

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000820:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8000822:	fbb0 f1f1 	udiv	r1, r0, r1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000826:	6853      	ldr	r3, [r2, #4]
 8000828:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800082c:	430b      	orrs	r3, r1
 800082e:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000830:	6a13      	ldr	r3, [r2, #32]
 8000832:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000836:	3101      	adds	r1, #1
 8000838:	4319      	orrs	r1, r3
 800083a:	6211      	str	r1, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800083c:	69d1      	ldr	r1, [r2, #28]
 800083e:	4b36      	ldr	r3, [pc, #216]	; (8000918 <HAL_I2C_Init+0x138>)
 8000840:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8000844:	429d      	cmp	r5, r3
 8000846:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 800084a:	f100 30ff 	add.w	r0, r0, #4294967295
 800084e:	d848      	bhi.n	80008e2 <HAL_I2C_Init+0x102>
 8000850:	006d      	lsls	r5, r5, #1
 8000852:	fbb0 f0f5 	udiv	r0, r0, r5
 8000856:	3001      	adds	r0, #1
 8000858:	f3c0 030b 	ubfx	r3, r0, #0, #12
 800085c:	2b04      	cmp	r3, #4
 800085e:	bf38      	it	cc
 8000860:	2304      	movcc	r3, #4
 8000862:	430b      	orrs	r3, r1
 8000864:	61d3      	str	r3, [r2, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8000866:	6811      	ldr	r1, [r2, #0]
 8000868:	6a20      	ldr	r0, [r4, #32]
 800086a:	69e3      	ldr	r3, [r4, #28]
 800086c:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8000870:	4303      	orrs	r3, r0
 8000872:	430b      	orrs	r3, r1
 8000874:	6013      	str	r3, [r2, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8000876:	6891      	ldr	r1, [r2, #8]
 8000878:	68e0      	ldr	r0, [r4, #12]
 800087a:	6923      	ldr	r3, [r4, #16]
 800087c:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 8000880:	4303      	orrs	r3, r0
 8000882:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8000886:	430b      	orrs	r3, r1
 8000888:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800088a:	68d1      	ldr	r1, [r2, #12]
 800088c:	69a0      	ldr	r0, [r4, #24]
 800088e:	6963      	ldr	r3, [r4, #20]
 8000890:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8000894:	4303      	orrs	r3, r0
 8000896:	430b      	orrs	r3, r1
 8000898:	60d3      	str	r3, [r2, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800089a:	6813      	ldr	r3, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800089c:	2000      	movs	r0, #0
  __HAL_I2C_ENABLE(hi2c);
 800089e:	f043 0301 	orr.w	r3, r3, #1
 80008a2:	6013      	str	r3, [r2, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 80008a4:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80008a6:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80008a8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80008ac:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80008ae:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e

  return HAL_OK;
 80008b2:	bd70      	pop	{r4, r5, r6, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80008b4:	4b1b      	ldr	r3, [pc, #108]	; (8000924 <HAL_I2C_Init+0x144>)
 80008b6:	4298      	cmp	r0, r3
 80008b8:	d995      	bls.n	80007e6 <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 80008ba:	4e19      	ldr	r6, [pc, #100]	; (8000920 <HAL_I2C_Init+0x140>)
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80008bc:	f44f 7196 	mov.w	r1, #300	; 0x12c
  freqrange = I2C_FREQRANGE(pclk1);
 80008c0:	fbb0 f6f6 	udiv	r6, r0, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80008c4:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80008c6:	4371      	muls	r1, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80008c8:	6853      	ldr	r3, [r2, #4]
 80008ca:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80008ce:	4333      	orrs	r3, r6
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80008d0:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80008d4:	6053      	str	r3, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80008d6:	6a13      	ldr	r3, [r2, #32]
 80008d8:	fbb1 f1f6 	udiv	r1, r1, r6
 80008dc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80008e0:	e7a9      	b.n	8000836 <HAL_I2C_Init+0x56>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80008e2:	68a3      	ldr	r3, [r4, #8]
 80008e4:	b953      	cbnz	r3, 80008fc <HAL_I2C_Init+0x11c>
 80008e6:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 80008ea:	fbb0 f0f3 	udiv	r0, r0, r3
 80008ee:	1c43      	adds	r3, r0, #1
 80008f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80008f4:	b16b      	cbz	r3, 8000912 <HAL_I2C_Init+0x132>
 80008f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80008fa:	e7b2      	b.n	8000862 <HAL_I2C_Init+0x82>
 80008fc:	2319      	movs	r3, #25
 80008fe:	436b      	muls	r3, r5
 8000900:	fbb0 f0f3 	udiv	r0, r0, r3
 8000904:	1c43      	adds	r3, r0, #1
 8000906:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800090a:	b113      	cbz	r3, 8000912 <HAL_I2C_Init+0x132>
 800090c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000910:	e7a7      	b.n	8000862 <HAL_I2C_Init+0x82>
 8000912:	2301      	movs	r3, #1
 8000914:	e7a5      	b.n	8000862 <HAL_I2C_Init+0x82>
 8000916:	bf00      	nop
 8000918:	000186a0 	.word	0x000186a0
 800091c:	001e847f 	.word	0x001e847f
 8000920:	000f4240 	.word	0x000f4240
 8000924:	003d08ff 	.word	0x003d08ff

08000928 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000928:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800092c:	4605      	mov	r5, r0
 800092e:	b908      	cbnz	r0, 8000934 <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 8000930:	2001      	movs	r0, #1
 8000932:	e03c      	b.n	80009ae <HAL_RCC_OscConfig+0x86>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000934:	6803      	ldr	r3, [r0, #0]
 8000936:	07db      	lsls	r3, r3, #31
 8000938:	d410      	bmi.n	800095c <HAL_RCC_OscConfig+0x34>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800093a:	682b      	ldr	r3, [r5, #0]
 800093c:	079f      	lsls	r7, r3, #30
 800093e:	d45d      	bmi.n	80009fc <HAL_RCC_OscConfig+0xd4>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000940:	682b      	ldr	r3, [r5, #0]
 8000942:	0719      	lsls	r1, r3, #28
 8000944:	f100 8094 	bmi.w	8000a70 <HAL_RCC_OscConfig+0x148>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000948:	682b      	ldr	r3, [r5, #0]
 800094a:	075a      	lsls	r2, r3, #29
 800094c:	f100 80be 	bmi.w	8000acc <HAL_RCC_OscConfig+0x1a4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000950:	69e8      	ldr	r0, [r5, #28]
 8000952:	2800      	cmp	r0, #0
 8000954:	f040 812c 	bne.w	8000bb0 <HAL_RCC_OscConfig+0x288>
        }
      }
    }
  }

  return HAL_OK;
 8000958:	2000      	movs	r0, #0
 800095a:	e028      	b.n	80009ae <HAL_RCC_OscConfig+0x86>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800095c:	4c8f      	ldr	r4, [pc, #572]	; (8000b9c <HAL_RCC_OscConfig+0x274>)
 800095e:	6863      	ldr	r3, [r4, #4]
 8000960:	f003 030c 	and.w	r3, r3, #12
 8000964:	2b04      	cmp	r3, #4
 8000966:	d007      	beq.n	8000978 <HAL_RCC_OscConfig+0x50>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000968:	6863      	ldr	r3, [r4, #4]
 800096a:	f003 030c 	and.w	r3, r3, #12
 800096e:	2b08      	cmp	r3, #8
 8000970:	d109      	bne.n	8000986 <HAL_RCC_OscConfig+0x5e>
 8000972:	6863      	ldr	r3, [r4, #4]
 8000974:	03de      	lsls	r6, r3, #15
 8000976:	d506      	bpl.n	8000986 <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000978:	6823      	ldr	r3, [r4, #0]
 800097a:	039c      	lsls	r4, r3, #14
 800097c:	d5dd      	bpl.n	800093a <HAL_RCC_OscConfig+0x12>
 800097e:	686b      	ldr	r3, [r5, #4]
 8000980:	2b00      	cmp	r3, #0
 8000982:	d1da      	bne.n	800093a <HAL_RCC_OscConfig+0x12>
 8000984:	e7d4      	b.n	8000930 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000986:	686b      	ldr	r3, [r5, #4]
 8000988:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800098c:	d112      	bne.n	80009b4 <HAL_RCC_OscConfig+0x8c>
 800098e:	6823      	ldr	r3, [r4, #0]
 8000990:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000994:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000996:	f7ff fc87 	bl	80002a8 <HAL_GetTick>
 800099a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800099c:	6823      	ldr	r3, [r4, #0]
 800099e:	0398      	lsls	r0, r3, #14
 80009a0:	d4cb      	bmi.n	800093a <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80009a2:	f7ff fc81 	bl	80002a8 <HAL_GetTick>
 80009a6:	1b80      	subs	r0, r0, r6
 80009a8:	2864      	cmp	r0, #100	; 0x64
 80009aa:	d9f7      	bls.n	800099c <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 80009ac:	2003      	movs	r0, #3
}
 80009ae:	b002      	add	sp, #8
 80009b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80009b4:	b99b      	cbnz	r3, 80009de <HAL_RCC_OscConfig+0xb6>
 80009b6:	6823      	ldr	r3, [r4, #0]
 80009b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80009bc:	6023      	str	r3, [r4, #0]
 80009be:	6823      	ldr	r3, [r4, #0]
 80009c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80009c4:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80009c6:	f7ff fc6f 	bl	80002a8 <HAL_GetTick>
 80009ca:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80009cc:	6823      	ldr	r3, [r4, #0]
 80009ce:	0399      	lsls	r1, r3, #14
 80009d0:	d5b3      	bpl.n	800093a <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80009d2:	f7ff fc69 	bl	80002a8 <HAL_GetTick>
 80009d6:	1b80      	subs	r0, r0, r6
 80009d8:	2864      	cmp	r0, #100	; 0x64
 80009da:	d9f7      	bls.n	80009cc <HAL_RCC_OscConfig+0xa4>
 80009dc:	e7e6      	b.n	80009ac <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80009de:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80009e2:	6823      	ldr	r3, [r4, #0]
 80009e4:	d103      	bne.n	80009ee <HAL_RCC_OscConfig+0xc6>
 80009e6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009ea:	6023      	str	r3, [r4, #0]
 80009ec:	e7cf      	b.n	800098e <HAL_RCC_OscConfig+0x66>
 80009ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80009f2:	6023      	str	r3, [r4, #0]
 80009f4:	6823      	ldr	r3, [r4, #0]
 80009f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80009fa:	e7cb      	b.n	8000994 <HAL_RCC_OscConfig+0x6c>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80009fc:	4c67      	ldr	r4, [pc, #412]	; (8000b9c <HAL_RCC_OscConfig+0x274>)
 80009fe:	6863      	ldr	r3, [r4, #4]
 8000a00:	f013 0f0c 	tst.w	r3, #12
 8000a04:	d007      	beq.n	8000a16 <HAL_RCC_OscConfig+0xee>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000a06:	6863      	ldr	r3, [r4, #4]
 8000a08:	f003 030c 	and.w	r3, r3, #12
 8000a0c:	2b08      	cmp	r3, #8
 8000a0e:	d110      	bne.n	8000a32 <HAL_RCC_OscConfig+0x10a>
 8000a10:	6863      	ldr	r3, [r4, #4]
 8000a12:	03da      	lsls	r2, r3, #15
 8000a14:	d40d      	bmi.n	8000a32 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000a16:	6823      	ldr	r3, [r4, #0]
 8000a18:	079b      	lsls	r3, r3, #30
 8000a1a:	d502      	bpl.n	8000a22 <HAL_RCC_OscConfig+0xfa>
 8000a1c:	692b      	ldr	r3, [r5, #16]
 8000a1e:	2b01      	cmp	r3, #1
 8000a20:	d186      	bne.n	8000930 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000a22:	6823      	ldr	r3, [r4, #0]
 8000a24:	696a      	ldr	r2, [r5, #20]
 8000a26:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000a2a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000a2e:	6023      	str	r3, [r4, #0]
 8000a30:	e786      	b.n	8000940 <HAL_RCC_OscConfig+0x18>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000a32:	692a      	ldr	r2, [r5, #16]
 8000a34:	4b5a      	ldr	r3, [pc, #360]	; (8000ba0 <HAL_RCC_OscConfig+0x278>)
 8000a36:	b16a      	cbz	r2, 8000a54 <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_ENABLE();
 8000a38:	2201      	movs	r2, #1
 8000a3a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000a3c:	f7ff fc34 	bl	80002a8 <HAL_GetTick>
 8000a40:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a42:	6823      	ldr	r3, [r4, #0]
 8000a44:	079f      	lsls	r7, r3, #30
 8000a46:	d4ec      	bmi.n	8000a22 <HAL_RCC_OscConfig+0xfa>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000a48:	f7ff fc2e 	bl	80002a8 <HAL_GetTick>
 8000a4c:	1b80      	subs	r0, r0, r6
 8000a4e:	2802      	cmp	r0, #2
 8000a50:	d9f7      	bls.n	8000a42 <HAL_RCC_OscConfig+0x11a>
 8000a52:	e7ab      	b.n	80009ac <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8000a54:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000a56:	f7ff fc27 	bl	80002a8 <HAL_GetTick>
 8000a5a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a5c:	6823      	ldr	r3, [r4, #0]
 8000a5e:	0798      	lsls	r0, r3, #30
 8000a60:	f57f af6e 	bpl.w	8000940 <HAL_RCC_OscConfig+0x18>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000a64:	f7ff fc20 	bl	80002a8 <HAL_GetTick>
 8000a68:	1b80      	subs	r0, r0, r6
 8000a6a:	2802      	cmp	r0, #2
 8000a6c:	d9f6      	bls.n	8000a5c <HAL_RCC_OscConfig+0x134>
 8000a6e:	e79d      	b.n	80009ac <HAL_RCC_OscConfig+0x84>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000a70:	69aa      	ldr	r2, [r5, #24]
 8000a72:	4c4a      	ldr	r4, [pc, #296]	; (8000b9c <HAL_RCC_OscConfig+0x274>)
 8000a74:	4b4b      	ldr	r3, [pc, #300]	; (8000ba4 <HAL_RCC_OscConfig+0x27c>)
 8000a76:	b1da      	cbz	r2, 8000ab0 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 8000a78:	2201      	movs	r2, #1
 8000a7a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000a7c:	f7ff fc14 	bl	80002a8 <HAL_GetTick>
 8000a80:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a82:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000a84:	079b      	lsls	r3, r3, #30
 8000a86:	d50d      	bpl.n	8000aa4 <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000a88:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000a8c:	4b46      	ldr	r3, [pc, #280]	; (8000ba8 <HAL_RCC_OscConfig+0x280>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	fbb3 f3f2 	udiv	r3, r3, r2
 8000a94:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8000a96:	bf00      	nop
  }
  while (Delay --);
 8000a98:	9b01      	ldr	r3, [sp, #4]
 8000a9a:	1e5a      	subs	r2, r3, #1
 8000a9c:	9201      	str	r2, [sp, #4]
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d1f9      	bne.n	8000a96 <HAL_RCC_OscConfig+0x16e>
 8000aa2:	e751      	b.n	8000948 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000aa4:	f7ff fc00 	bl	80002a8 <HAL_GetTick>
 8000aa8:	1b80      	subs	r0, r0, r6
 8000aaa:	2802      	cmp	r0, #2
 8000aac:	d9e9      	bls.n	8000a82 <HAL_RCC_OscConfig+0x15a>
 8000aae:	e77d      	b.n	80009ac <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8000ab0:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000ab2:	f7ff fbf9 	bl	80002a8 <HAL_GetTick>
 8000ab6:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ab8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000aba:	079f      	lsls	r7, r3, #30
 8000abc:	f57f af44 	bpl.w	8000948 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000ac0:	f7ff fbf2 	bl	80002a8 <HAL_GetTick>
 8000ac4:	1b80      	subs	r0, r0, r6
 8000ac6:	2802      	cmp	r0, #2
 8000ac8:	d9f6      	bls.n	8000ab8 <HAL_RCC_OscConfig+0x190>
 8000aca:	e76f      	b.n	80009ac <HAL_RCC_OscConfig+0x84>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000acc:	4c33      	ldr	r4, [pc, #204]	; (8000b9c <HAL_RCC_OscConfig+0x274>)
 8000ace:	69e3      	ldr	r3, [r4, #28]
 8000ad0:	00d8      	lsls	r0, r3, #3
 8000ad2:	d424      	bmi.n	8000b1e <HAL_RCC_OscConfig+0x1f6>
      pwrclkchanged = SET;
 8000ad4:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8000ad6:	69e3      	ldr	r3, [r4, #28]
 8000ad8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000adc:	61e3      	str	r3, [r4, #28]
 8000ade:	69e3      	ldr	r3, [r4, #28]
 8000ae0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ae4:	9300      	str	r3, [sp, #0]
 8000ae6:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ae8:	4e30      	ldr	r6, [pc, #192]	; (8000bac <HAL_RCC_OscConfig+0x284>)
 8000aea:	6833      	ldr	r3, [r6, #0]
 8000aec:	05d9      	lsls	r1, r3, #23
 8000aee:	d518      	bpl.n	8000b22 <HAL_RCC_OscConfig+0x1fa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000af0:	68eb      	ldr	r3, [r5, #12]
 8000af2:	2b01      	cmp	r3, #1
 8000af4:	d126      	bne.n	8000b44 <HAL_RCC_OscConfig+0x21c>
 8000af6:	6a23      	ldr	r3, [r4, #32]
 8000af8:	f043 0301 	orr.w	r3, r3, #1
 8000afc:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000afe:	f7ff fbd3 	bl	80002a8 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000b02:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000b06:	4680      	mov	r8, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000b08:	6a23      	ldr	r3, [r4, #32]
 8000b0a:	079b      	lsls	r3, r3, #30
 8000b0c:	d53f      	bpl.n	8000b8e <HAL_RCC_OscConfig+0x266>
    if (pwrclkchanged == SET)
 8000b0e:	2f00      	cmp	r7, #0
 8000b10:	f43f af1e 	beq.w	8000950 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000b14:	69e3      	ldr	r3, [r4, #28]
 8000b16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000b1a:	61e3      	str	r3, [r4, #28]
 8000b1c:	e718      	b.n	8000950 <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 8000b1e:	2700      	movs	r7, #0
 8000b20:	e7e2      	b.n	8000ae8 <HAL_RCC_OscConfig+0x1c0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000b22:	6833      	ldr	r3, [r6, #0]
 8000b24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b28:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000b2a:	f7ff fbbd 	bl	80002a8 <HAL_GetTick>
 8000b2e:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000b30:	6833      	ldr	r3, [r6, #0]
 8000b32:	05da      	lsls	r2, r3, #23
 8000b34:	d4dc      	bmi.n	8000af0 <HAL_RCC_OscConfig+0x1c8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000b36:	f7ff fbb7 	bl	80002a8 <HAL_GetTick>
 8000b3a:	eba0 0008 	sub.w	r0, r0, r8
 8000b3e:	2864      	cmp	r0, #100	; 0x64
 8000b40:	d9f6      	bls.n	8000b30 <HAL_RCC_OscConfig+0x208>
 8000b42:	e733      	b.n	80009ac <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b44:	b9ab      	cbnz	r3, 8000b72 <HAL_RCC_OscConfig+0x24a>
 8000b46:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000b48:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b4c:	f023 0301 	bic.w	r3, r3, #1
 8000b50:	6223      	str	r3, [r4, #32]
 8000b52:	6a23      	ldr	r3, [r4, #32]
 8000b54:	f023 0304 	bic.w	r3, r3, #4
 8000b58:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000b5a:	f7ff fba5 	bl	80002a8 <HAL_GetTick>
 8000b5e:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000b60:	6a23      	ldr	r3, [r4, #32]
 8000b62:	0798      	lsls	r0, r3, #30
 8000b64:	d5d3      	bpl.n	8000b0e <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000b66:	f7ff fb9f 	bl	80002a8 <HAL_GetTick>
 8000b6a:	1b80      	subs	r0, r0, r6
 8000b6c:	4540      	cmp	r0, r8
 8000b6e:	d9f7      	bls.n	8000b60 <HAL_RCC_OscConfig+0x238>
 8000b70:	e71c      	b.n	80009ac <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b72:	2b05      	cmp	r3, #5
 8000b74:	6a23      	ldr	r3, [r4, #32]
 8000b76:	d103      	bne.n	8000b80 <HAL_RCC_OscConfig+0x258>
 8000b78:	f043 0304 	orr.w	r3, r3, #4
 8000b7c:	6223      	str	r3, [r4, #32]
 8000b7e:	e7ba      	b.n	8000af6 <HAL_RCC_OscConfig+0x1ce>
 8000b80:	f023 0301 	bic.w	r3, r3, #1
 8000b84:	6223      	str	r3, [r4, #32]
 8000b86:	6a23      	ldr	r3, [r4, #32]
 8000b88:	f023 0304 	bic.w	r3, r3, #4
 8000b8c:	e7b6      	b.n	8000afc <HAL_RCC_OscConfig+0x1d4>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000b8e:	f7ff fb8b 	bl	80002a8 <HAL_GetTick>
 8000b92:	eba0 0008 	sub.w	r0, r0, r8
 8000b96:	42b0      	cmp	r0, r6
 8000b98:	d9b6      	bls.n	8000b08 <HAL_RCC_OscConfig+0x1e0>
 8000b9a:	e707      	b.n	80009ac <HAL_RCC_OscConfig+0x84>
 8000b9c:	40021000 	.word	0x40021000
 8000ba0:	42420000 	.word	0x42420000
 8000ba4:	42420480 	.word	0x42420480
 8000ba8:	20000008 	.word	0x20000008
 8000bac:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000bb0:	4b2a      	ldr	r3, [pc, #168]	; (8000c5c <HAL_RCC_OscConfig+0x334>)
 8000bb2:	685a      	ldr	r2, [r3, #4]
 8000bb4:	461c      	mov	r4, r3
 8000bb6:	f002 020c 	and.w	r2, r2, #12
 8000bba:	2a08      	cmp	r2, #8
 8000bbc:	d03d      	beq.n	8000c3a <HAL_RCC_OscConfig+0x312>
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	4e27      	ldr	r6, [pc, #156]	; (8000c60 <HAL_RCC_OscConfig+0x338>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000bc2:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8000bc4:	6033      	str	r3, [r6, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000bc6:	d12b      	bne.n	8000c20 <HAL_RCC_OscConfig+0x2f8>
        tickstart = HAL_GetTick();
 8000bc8:	f7ff fb6e 	bl	80002a8 <HAL_GetTick>
 8000bcc:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000bce:	6823      	ldr	r3, [r4, #0]
 8000bd0:	0199      	lsls	r1, r3, #6
 8000bd2:	d41f      	bmi.n	8000c14 <HAL_RCC_OscConfig+0x2ec>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000bd4:	6a2b      	ldr	r3, [r5, #32]
 8000bd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000bda:	d105      	bne.n	8000be8 <HAL_RCC_OscConfig+0x2c0>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000bdc:	6862      	ldr	r2, [r4, #4]
 8000bde:	68a9      	ldr	r1, [r5, #8]
 8000be0:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8000be4:	430a      	orrs	r2, r1
 8000be6:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000be8:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8000bea:	6862      	ldr	r2, [r4, #4]
 8000bec:	430b      	orrs	r3, r1
 8000bee:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8000bf2:	4313      	orrs	r3, r2
 8000bf4:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000bfa:	f7ff fb55 	bl	80002a8 <HAL_GetTick>
 8000bfe:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000c00:	6823      	ldr	r3, [r4, #0]
 8000c02:	019a      	lsls	r2, r3, #6
 8000c04:	f53f aea8 	bmi.w	8000958 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000c08:	f7ff fb4e 	bl	80002a8 <HAL_GetTick>
 8000c0c:	1b40      	subs	r0, r0, r5
 8000c0e:	2802      	cmp	r0, #2
 8000c10:	d9f6      	bls.n	8000c00 <HAL_RCC_OscConfig+0x2d8>
 8000c12:	e6cb      	b.n	80009ac <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000c14:	f7ff fb48 	bl	80002a8 <HAL_GetTick>
 8000c18:	1bc0      	subs	r0, r0, r7
 8000c1a:	2802      	cmp	r0, #2
 8000c1c:	d9d7      	bls.n	8000bce <HAL_RCC_OscConfig+0x2a6>
 8000c1e:	e6c5      	b.n	80009ac <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8000c20:	f7ff fb42 	bl	80002a8 <HAL_GetTick>
 8000c24:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000c26:	6823      	ldr	r3, [r4, #0]
 8000c28:	019b      	lsls	r3, r3, #6
 8000c2a:	f57f ae95 	bpl.w	8000958 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000c2e:	f7ff fb3b 	bl	80002a8 <HAL_GetTick>
 8000c32:	1b40      	subs	r0, r0, r5
 8000c34:	2802      	cmp	r0, #2
 8000c36:	d9f6      	bls.n	8000c26 <HAL_RCC_OscConfig+0x2fe>
 8000c38:	e6b8      	b.n	80009ac <HAL_RCC_OscConfig+0x84>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000c3a:	2801      	cmp	r0, #1
 8000c3c:	f43f aeb7 	beq.w	80009ae <HAL_RCC_OscConfig+0x86>
        pll_config = RCC->CFGR;
 8000c40:	6858      	ldr	r0, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000c42:	6a2b      	ldr	r3, [r5, #32]
 8000c44:	f400 3280 	and.w	r2, r0, #65536	; 0x10000
 8000c48:	429a      	cmp	r2, r3
 8000c4a:	f47f ae71 	bne.w	8000930 <HAL_RCC_OscConfig+0x8>
 8000c4e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000c50:	f400 1070 	and.w	r0, r0, #3932160	; 0x3c0000
    return HAL_ERROR;
 8000c54:	1ac0      	subs	r0, r0, r3
 8000c56:	bf18      	it	ne
 8000c58:	2001      	movne	r0, #1
 8000c5a:	e6a8      	b.n	80009ae <HAL_RCC_OscConfig+0x86>
 8000c5c:	40021000 	.word	0x40021000
 8000c60:	42420060 	.word	0x42420060

08000c64 <HAL_RCC_GetSysClockFreq>:
{
 8000c64:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000c66:	4b19      	ldr	r3, [pc, #100]	; (8000ccc <HAL_RCC_GetSysClockFreq+0x68>)
{
 8000c68:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000c6a:	ac02      	add	r4, sp, #8
 8000c6c:	f103 0510 	add.w	r5, r3, #16
 8000c70:	4622      	mov	r2, r4
 8000c72:	6818      	ldr	r0, [r3, #0]
 8000c74:	6859      	ldr	r1, [r3, #4]
 8000c76:	3308      	adds	r3, #8
 8000c78:	c203      	stmia	r2!, {r0, r1}
 8000c7a:	42ab      	cmp	r3, r5
 8000c7c:	4614      	mov	r4, r2
 8000c7e:	d1f7      	bne.n	8000c70 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000c80:	2301      	movs	r3, #1
 8000c82:	f88d 3004 	strb.w	r3, [sp, #4]
 8000c86:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 8000c88:	4911      	ldr	r1, [pc, #68]	; (8000cd0 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000c8a:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 8000c8e:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8000c90:	f003 020c 	and.w	r2, r3, #12
 8000c94:	2a08      	cmp	r2, #8
 8000c96:	d117      	bne.n	8000cc8 <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000c98:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8000c9c:	a806      	add	r0, sp, #24
 8000c9e:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000ca0:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000ca2:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000ca6:	d50c      	bpl.n	8000cc2 <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000ca8:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000caa:	480a      	ldr	r0, [pc, #40]	; (8000cd4 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000cac:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000cb0:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000cb2:	aa06      	add	r2, sp, #24
 8000cb4:	4413      	add	r3, r2
 8000cb6:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000cba:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8000cbe:	b007      	add	sp, #28
 8000cc0:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000cc2:	4805      	ldr	r0, [pc, #20]	; (8000cd8 <HAL_RCC_GetSysClockFreq+0x74>)
 8000cc4:	4350      	muls	r0, r2
 8000cc6:	e7fa      	b.n	8000cbe <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 8000cc8:	4802      	ldr	r0, [pc, #8]	; (8000cd4 <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 8000cca:	e7f8      	b.n	8000cbe <HAL_RCC_GetSysClockFreq+0x5a>
 8000ccc:	080019f4 	.word	0x080019f4
 8000cd0:	40021000 	.word	0x40021000
 8000cd4:	007a1200 	.word	0x007a1200
 8000cd8:	003d0900 	.word	0x003d0900

08000cdc <HAL_RCC_ClockConfig>:
{
 8000cdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000ce0:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8000ce2:	4604      	mov	r4, r0
 8000ce4:	b910      	cbnz	r0, 8000cec <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000ce6:	2001      	movs	r0, #1
 8000ce8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000cec:	4a45      	ldr	r2, [pc, #276]	; (8000e04 <HAL_RCC_ClockConfig+0x128>)
 8000cee:	6813      	ldr	r3, [r2, #0]
 8000cf0:	f003 0307 	and.w	r3, r3, #7
 8000cf4:	428b      	cmp	r3, r1
 8000cf6:	d329      	bcc.n	8000d4c <HAL_RCC_ClockConfig+0x70>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000cf8:	6821      	ldr	r1, [r4, #0]
 8000cfa:	078e      	lsls	r6, r1, #30
 8000cfc:	d431      	bmi.n	8000d62 <HAL_RCC_ClockConfig+0x86>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000cfe:	07ca      	lsls	r2, r1, #31
 8000d00:	d444      	bmi.n	8000d8c <HAL_RCC_ClockConfig+0xb0>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8000d02:	4a40      	ldr	r2, [pc, #256]	; (8000e04 <HAL_RCC_ClockConfig+0x128>)
 8000d04:	6813      	ldr	r3, [r2, #0]
 8000d06:	f003 0307 	and.w	r3, r3, #7
 8000d0a:	429d      	cmp	r5, r3
 8000d0c:	d367      	bcc.n	8000dde <HAL_RCC_ClockConfig+0x102>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000d0e:	6822      	ldr	r2, [r4, #0]
 8000d10:	4d3d      	ldr	r5, [pc, #244]	; (8000e08 <HAL_RCC_ClockConfig+0x12c>)
 8000d12:	f012 0f04 	tst.w	r2, #4
 8000d16:	d16e      	bne.n	8000df6 <HAL_RCC_ClockConfig+0x11a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000d18:	0713      	lsls	r3, r2, #28
 8000d1a:	d506      	bpl.n	8000d2a <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000d1c:	686b      	ldr	r3, [r5, #4]
 8000d1e:	6922      	ldr	r2, [r4, #16]
 8000d20:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000d24:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000d28:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8000d2a:	f7ff ff9b 	bl	8000c64 <HAL_RCC_GetSysClockFreq>
 8000d2e:	686b      	ldr	r3, [r5, #4]
 8000d30:	4a36      	ldr	r2, [pc, #216]	; (8000e0c <HAL_RCC_ClockConfig+0x130>)
 8000d32:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000d36:	5cd3      	ldrb	r3, [r2, r3]
 8000d38:	40d8      	lsrs	r0, r3
 8000d3a:	4b35      	ldr	r3, [pc, #212]	; (8000e10 <HAL_RCC_ClockConfig+0x134>)
 8000d3c:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8000d3e:	4b35      	ldr	r3, [pc, #212]	; (8000e14 <HAL_RCC_ClockConfig+0x138>)
 8000d40:	6818      	ldr	r0, [r3, #0]
 8000d42:	f7ff fa6f 	bl	8000224 <HAL_InitTick>
  return HAL_OK;
 8000d46:	2000      	movs	r0, #0
 8000d48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d4c:	6813      	ldr	r3, [r2, #0]
 8000d4e:	f023 0307 	bic.w	r3, r3, #7
 8000d52:	430b      	orrs	r3, r1
 8000d54:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000d56:	6813      	ldr	r3, [r2, #0]
 8000d58:	f003 0307 	and.w	r3, r3, #7
 8000d5c:	4299      	cmp	r1, r3
 8000d5e:	d1c2      	bne.n	8000ce6 <HAL_RCC_ClockConfig+0xa>
 8000d60:	e7ca      	b.n	8000cf8 <HAL_RCC_ClockConfig+0x1c>
 8000d62:	4b29      	ldr	r3, [pc, #164]	; (8000e08 <HAL_RCC_ClockConfig+0x12c>)
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000d64:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000d68:	bf1e      	ittt	ne
 8000d6a:	685a      	ldrne	r2, [r3, #4]
 8000d6c:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8000d70:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000d72:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000d74:	bf42      	ittt	mi
 8000d76:	685a      	ldrmi	r2, [r3, #4]
 8000d78:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8000d7c:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000d7e:	685a      	ldr	r2, [r3, #4]
 8000d80:	68a0      	ldr	r0, [r4, #8]
 8000d82:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000d86:	4302      	orrs	r2, r0
 8000d88:	605a      	str	r2, [r3, #4]
 8000d8a:	e7b8      	b.n	8000cfe <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d8c:	6862      	ldr	r2, [r4, #4]
 8000d8e:	4e1e      	ldr	r6, [pc, #120]	; (8000e08 <HAL_RCC_ClockConfig+0x12c>)
 8000d90:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d92:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d94:	d11b      	bne.n	8000dce <HAL_RCC_ClockConfig+0xf2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d96:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d9a:	d0a4      	beq.n	8000ce6 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000d9c:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d9e:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000da2:	f023 0303 	bic.w	r3, r3, #3
 8000da6:	4313      	orrs	r3, r2
 8000da8:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8000daa:	f7ff fa7d 	bl	80002a8 <HAL_GetTick>
 8000dae:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000db0:	6873      	ldr	r3, [r6, #4]
 8000db2:	6862      	ldr	r2, [r4, #4]
 8000db4:	f003 030c 	and.w	r3, r3, #12
 8000db8:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000dbc:	d0a1      	beq.n	8000d02 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000dbe:	f7ff fa73 	bl	80002a8 <HAL_GetTick>
 8000dc2:	1bc0      	subs	r0, r0, r7
 8000dc4:	4540      	cmp	r0, r8
 8000dc6:	d9f3      	bls.n	8000db0 <HAL_RCC_ClockConfig+0xd4>
        return HAL_TIMEOUT;
 8000dc8:	2003      	movs	r0, #3
}
 8000dca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000dce:	2a02      	cmp	r2, #2
 8000dd0:	d102      	bne.n	8000dd8 <HAL_RCC_ClockConfig+0xfc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000dd2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000dd6:	e7e0      	b.n	8000d9a <HAL_RCC_ClockConfig+0xbe>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000dd8:	f013 0f02 	tst.w	r3, #2
 8000ddc:	e7dd      	b.n	8000d9a <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000dde:	6813      	ldr	r3, [r2, #0]
 8000de0:	f023 0307 	bic.w	r3, r3, #7
 8000de4:	432b      	orrs	r3, r5
 8000de6:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000de8:	6813      	ldr	r3, [r2, #0]
 8000dea:	f003 0307 	and.w	r3, r3, #7
 8000dee:	429d      	cmp	r5, r3
 8000df0:	f47f af79 	bne.w	8000ce6 <HAL_RCC_ClockConfig+0xa>
 8000df4:	e78b      	b.n	8000d0e <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000df6:	686b      	ldr	r3, [r5, #4]
 8000df8:	68e1      	ldr	r1, [r4, #12]
 8000dfa:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000dfe:	430b      	orrs	r3, r1
 8000e00:	606b      	str	r3, [r5, #4]
 8000e02:	e789      	b.n	8000d18 <HAL_RCC_ClockConfig+0x3c>
 8000e04:	40022000 	.word	0x40022000
 8000e08:	40021000 	.word	0x40021000
 8000e0c:	08001a04 	.word	0x08001a04
 8000e10:	20000008 	.word	0x20000008
 8000e14:	20000004 	.word	0x20000004

08000e18 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8000e18:	4b04      	ldr	r3, [pc, #16]	; (8000e2c <HAL_RCC_GetPCLK1Freq+0x14>)
 8000e1a:	4a05      	ldr	r2, [pc, #20]	; (8000e30 <HAL_RCC_GetPCLK1Freq+0x18>)
 8000e1c:	685b      	ldr	r3, [r3, #4]
 8000e1e:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8000e22:	5cd3      	ldrb	r3, [r2, r3]
 8000e24:	4a03      	ldr	r2, [pc, #12]	; (8000e34 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000e26:	6810      	ldr	r0, [r2, #0]
}
 8000e28:	40d8      	lsrs	r0, r3
 8000e2a:	4770      	bx	lr
 8000e2c:	40021000 	.word	0x40021000
 8000e30:	08001a14 	.word	0x08001a14
 8000e34:	20000008 	.word	0x20000008

08000e38 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8000e38:	4b04      	ldr	r3, [pc, #16]	; (8000e4c <HAL_RCC_GetPCLK2Freq+0x14>)
 8000e3a:	4a05      	ldr	r2, [pc, #20]	; (8000e50 <HAL_RCC_GetPCLK2Freq+0x18>)
 8000e3c:	685b      	ldr	r3, [r3, #4]
 8000e3e:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8000e42:	5cd3      	ldrb	r3, [r2, r3]
 8000e44:	4a03      	ldr	r2, [pc, #12]	; (8000e54 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000e46:	6810      	ldr	r0, [r2, #0]
}
 8000e48:	40d8      	lsrs	r0, r3
 8000e4a:	4770      	bx	lr
 8000e4c:	40021000 	.word	0x40021000
 8000e50:	08001a14 	.word	0x08001a14
 8000e54:	20000008 	.word	0x20000008

08000e58 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8000e58:	6803      	ldr	r3, [r0, #0]
{
 8000e5a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8000e5e:	07d9      	lsls	r1, r3, #31
{
 8000e60:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8000e62:	d520      	bpl.n	8000ea6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e64:	4c35      	ldr	r4, [pc, #212]	; (8000f3c <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8000e66:	69e3      	ldr	r3, [r4, #28]
 8000e68:	00da      	lsls	r2, r3, #3
 8000e6a:	d432      	bmi.n	8000ed2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8000e6c:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e6e:	69e3      	ldr	r3, [r4, #28]
 8000e70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e74:	61e3      	str	r3, [r4, #28]
 8000e76:	69e3      	ldr	r3, [r4, #28]
 8000e78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e7c:	9301      	str	r3, [sp, #4]
 8000e7e:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e80:	4e2f      	ldr	r6, [pc, #188]	; (8000f40 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8000e82:	6833      	ldr	r3, [r6, #0]
 8000e84:	05db      	lsls	r3, r3, #23
 8000e86:	d526      	bpl.n	8000ed6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8000e88:	6a23      	ldr	r3, [r4, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8000e8a:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8000e8e:	d136      	bne.n	8000efe <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8000e90:	6a23      	ldr	r3, [r4, #32]
 8000e92:	686a      	ldr	r2, [r5, #4]
 8000e94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000e98:	4313      	orrs	r3, r2
 8000e9a:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000e9c:	b11f      	cbz	r7, 8000ea6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000e9e:	69e3      	ldr	r3, [r4, #28]
 8000ea0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000ea4:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8000ea6:	6828      	ldr	r0, [r5, #0]
 8000ea8:	0783      	lsls	r3, r0, #30
 8000eaa:	d506      	bpl.n	8000eba <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8000eac:	4a23      	ldr	r2, [pc, #140]	; (8000f3c <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8000eae:	68a9      	ldr	r1, [r5, #8]
 8000eb0:	6853      	ldr	r3, [r2, #4]
 8000eb2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000eb6:	430b      	orrs	r3, r1
 8000eb8:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8000eba:	f010 0010 	ands.w	r0, r0, #16
 8000ebe:	d01b      	beq.n	8000ef8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8000ec0:	4a1e      	ldr	r2, [pc, #120]	; (8000f3c <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8000ec2:	6969      	ldr	r1, [r5, #20]
 8000ec4:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8000ec6:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8000ec8:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000ecc:	430b      	orrs	r3, r1
 8000ece:	6053      	str	r3, [r2, #4]
 8000ed0:	e012      	b.n	8000ef8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;
 8000ed2:	2700      	movs	r7, #0
 8000ed4:	e7d4      	b.n	8000e80 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000ed6:	6833      	ldr	r3, [r6, #0]
 8000ed8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000edc:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000ede:	f7ff f9e3 	bl	80002a8 <HAL_GetTick>
 8000ee2:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ee4:	6833      	ldr	r3, [r6, #0]
 8000ee6:	05d8      	lsls	r0, r3, #23
 8000ee8:	d4ce      	bmi.n	8000e88 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000eea:	f7ff f9dd 	bl	80002a8 <HAL_GetTick>
 8000eee:	eba0 0008 	sub.w	r0, r0, r8
 8000ef2:	2864      	cmp	r0, #100	; 0x64
 8000ef4:	d9f6      	bls.n	8000ee4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 8000ef6:	2003      	movs	r0, #3
}
 8000ef8:	b002      	add	sp, #8
 8000efa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8000efe:	686a      	ldr	r2, [r5, #4]
 8000f00:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8000f04:	4293      	cmp	r3, r2
 8000f06:	d0c3      	beq.n	8000e90 <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 8000f08:	2001      	movs	r0, #1
 8000f0a:	4a0e      	ldr	r2, [pc, #56]	; (8000f44 <HAL_RCCEx_PeriphCLKConfig+0xec>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8000f0c:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8000f0e:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8000f10:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8000f12:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8000f16:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 8000f18:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8000f1a:	07d9      	lsls	r1, r3, #31
 8000f1c:	d5b8      	bpl.n	8000e90 <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 8000f1e:	f7ff f9c3 	bl	80002a8 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f22:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8000f26:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f28:	6a23      	ldr	r3, [r4, #32]
 8000f2a:	079a      	lsls	r2, r3, #30
 8000f2c:	d4b0      	bmi.n	8000e90 <HAL_RCCEx_PeriphCLKConfig+0x38>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f2e:	f7ff f9bb 	bl	80002a8 <HAL_GetTick>
 8000f32:	1b80      	subs	r0, r0, r6
 8000f34:	4540      	cmp	r0, r8
 8000f36:	d9f7      	bls.n	8000f28 <HAL_RCCEx_PeriphCLKConfig+0xd0>
 8000f38:	e7dd      	b.n	8000ef6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8000f3a:	bf00      	nop
 8000f3c:	40021000 	.word	0x40021000
 8000f40:	40007000 	.word	0x40007000
 8000f44:	42420440 	.word	0x42420440

08000f48 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8000f48:	b510      	push	{r4, lr}
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8000f4a:	4604      	mov	r4, r0
 8000f4c:	2800      	cmp	r0, #0
 8000f4e:	d034      	beq.n	8000fba <HAL_SPI_Init+0x72>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f50:	2300      	movs	r3, #0
 8000f52:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8000f54:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8000f58:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000f5c:	b91b      	cbnz	r3, 8000f66 <HAL_SPI_Init+0x1e>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8000f5e:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8000f62:	f000 fbbf 	bl	80016e4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8000f66:	2302      	movs	r3, #2

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8000f68:	6822      	ldr	r2, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8000f6a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8000f6e:	6813      	ldr	r3, [r2, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8000f70:	68a0      	ldr	r0, [r4, #8]
  __HAL_SPI_DISABLE(hspi);
 8000f72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000f76:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8000f78:	6863      	ldr	r3, [r4, #4]
 8000f7a:	69a1      	ldr	r1, [r4, #24]
 8000f7c:	4303      	orrs	r3, r0
 8000f7e:	68e0      	ldr	r0, [r4, #12]
 8000f80:	4303      	orrs	r3, r0
 8000f82:	6920      	ldr	r0, [r4, #16]
 8000f84:	4303      	orrs	r3, r0
 8000f86:	6960      	ldr	r0, [r4, #20]
 8000f88:	4303      	orrs	r3, r0
 8000f8a:	69e0      	ldr	r0, [r4, #28]
 8000f8c:	4303      	orrs	r3, r0
 8000f8e:	6a20      	ldr	r0, [r4, #32]
 8000f90:	4303      	orrs	r3, r0
 8000f92:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8000f94:	4303      	orrs	r3, r0
 8000f96:	f401 7000 	and.w	r0, r1, #512	; 0x200
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8000f9a:	0c09      	lsrs	r1, r1, #16
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8000f9c:	4303      	orrs	r3, r0
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8000f9e:	f001 0104 	and.w	r1, r1, #4
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8000fa2:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8000fa4:	6051      	str	r1, [r2, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8000fa6:	69d3      	ldr	r3, [r2, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8000fa8:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8000faa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000fae:	61d3      	str	r3, [r2, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 8000fb0:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8000fb2:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8000fb4:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

  return HAL_OK;
 8000fb8:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000fba:	2001      	movs	r0, #1
}
 8000fbc:	bd10      	pop	{r4, pc}
	...

08000fc0 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000fc0:	4a24      	ldr	r2, [pc, #144]	; (8001054 <TIM_Base_SetConfig+0x94>)
  tmpcr1 = TIMx->CR1;
 8000fc2:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000fc4:	4290      	cmp	r0, r2
 8000fc6:	d012      	beq.n	8000fee <TIM_Base_SetConfig+0x2e>
 8000fc8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8000fcc:	4290      	cmp	r0, r2
 8000fce:	d00e      	beq.n	8000fee <TIM_Base_SetConfig+0x2e>
 8000fd0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000fd4:	d00b      	beq.n	8000fee <TIM_Base_SetConfig+0x2e>
 8000fd6:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8000fda:	4290      	cmp	r0, r2
 8000fdc:	d007      	beq.n	8000fee <TIM_Base_SetConfig+0x2e>
 8000fde:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000fe2:	4290      	cmp	r0, r2
 8000fe4:	d003      	beq.n	8000fee <TIM_Base_SetConfig+0x2e>
 8000fe6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000fea:	4290      	cmp	r0, r2
 8000fec:	d11d      	bne.n	800102a <TIM_Base_SetConfig+0x6a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8000fee:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8000ff0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8000ff4:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8000ff6:	4a17      	ldr	r2, [pc, #92]	; (8001054 <TIM_Base_SetConfig+0x94>)
 8000ff8:	4290      	cmp	r0, r2
 8000ffa:	d012      	beq.n	8001022 <TIM_Base_SetConfig+0x62>
 8000ffc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001000:	4290      	cmp	r0, r2
 8001002:	d00e      	beq.n	8001022 <TIM_Base_SetConfig+0x62>
 8001004:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001008:	d00b      	beq.n	8001022 <TIM_Base_SetConfig+0x62>
 800100a:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 800100e:	4290      	cmp	r0, r2
 8001010:	d007      	beq.n	8001022 <TIM_Base_SetConfig+0x62>
 8001012:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001016:	4290      	cmp	r0, r2
 8001018:	d003      	beq.n	8001022 <TIM_Base_SetConfig+0x62>
 800101a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800101e:	4290      	cmp	r0, r2
 8001020:	d103      	bne.n	800102a <TIM_Base_SetConfig+0x6a>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001022:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8001024:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001028:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800102a:	694a      	ldr	r2, [r1, #20]
 800102c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001030:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8001032:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001034:	688b      	ldr	r3, [r1, #8]
 8001036:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001038:	680b      	ldr	r3, [r1, #0]
 800103a:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800103c:	4b05      	ldr	r3, [pc, #20]	; (8001054 <TIM_Base_SetConfig+0x94>)
 800103e:	4298      	cmp	r0, r3
 8001040:	d003      	beq.n	800104a <TIM_Base_SetConfig+0x8a>
 8001042:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001046:	4298      	cmp	r0, r3
 8001048:	d101      	bne.n	800104e <TIM_Base_SetConfig+0x8e>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800104a:	690b      	ldr	r3, [r1, #16]
 800104c:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800104e:	2301      	movs	r3, #1
 8001050:	6143      	str	r3, [r0, #20]
 8001052:	4770      	bx	lr
 8001054:	40012c00 	.word	0x40012c00

08001058 <HAL_TIM_Base_Init>:
{
 8001058:	b510      	push	{r4, lr}
  if (htim == NULL)
 800105a:	4604      	mov	r4, r0
 800105c:	b1a0      	cbz	r0, 8001088 <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 800105e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001062:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001066:	b91b      	cbnz	r3, 8001070 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001068:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800106c:	f000 fbaa 	bl	80017c4 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8001070:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001072:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8001074:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001078:	1d21      	adds	r1, r4, #4
 800107a:	f7ff ffa1 	bl	8000fc0 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 800107e:	2301      	movs	r3, #1
  return HAL_OK;
 8001080:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001082:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001086:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001088:	2001      	movs	r0, #1
}
 800108a:	bd10      	pop	{r4, pc}

0800108c <HAL_TIM_Encoder_Init>:
{
 800108c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800108e:	460c      	mov	r4, r1
  if (htim == NULL)
 8001090:	4605      	mov	r5, r0
 8001092:	2800      	cmp	r0, #0
 8001094:	d043      	beq.n	800111e <HAL_TIM_Encoder_Init+0x92>
  if (htim->State == HAL_TIM_STATE_RESET)
 8001096:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800109a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800109e:	b91b      	cbnz	r3, 80010a8 <HAL_TIM_Encoder_Init+0x1c>
    htim->Lock = HAL_UNLOCKED;
 80010a0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Encoder_MspInit(htim);
 80010a4:	f000 fb60 	bl	8001768 <HAL_TIM_Encoder_MspInit>
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80010a8:	4629      	mov	r1, r5
  htim->State = HAL_TIM_STATE_BUSY;
 80010aa:	2302      	movs	r3, #2
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80010ac:	f851 0b04 	ldr.w	r0, [r1], #4
  htim->State = HAL_TIM_STATE_BUSY;
 80010b0:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80010b4:	6883      	ldr	r3, [r0, #8]
 80010b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80010ba:	f023 0307 	bic.w	r3, r3, #7
 80010be:	6083      	str	r3, [r0, #8]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80010c0:	f7ff ff7e 	bl	8000fc0 <TIM_Base_SetConfig>
  tmpsmcr = htim->Instance->SMCR;
 80010c4:	6828      	ldr	r0, [r5, #0]
  tmpsmcr |= sConfig->EncoderMode;
 80010c6:	6823      	ldr	r3, [r4, #0]
  tmpsmcr = htim->Instance->SMCR;
 80010c8:	6886      	ldr	r6, [r0, #8]
  tmpccmr1 = htim->Instance->CCMR1;
 80010ca:	6982      	ldr	r2, [r0, #24]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80010cc:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr |= sConfig->EncoderMode;
 80010ce:	431e      	orrs	r6, r3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80010d0:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80010d2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80010d6:	f022 0203 	bic.w	r2, r2, #3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80010da:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
 80010de:	4313      	orrs	r3, r2
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80010e0:	f423 427c 	bic.w	r2, r3, #64512	; 0xfc00
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80010e4:	6923      	ldr	r3, [r4, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80010e6:	69e1      	ldr	r1, [r4, #28]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80010e8:	011b      	lsls	r3, r3, #4
 80010ea:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80010ee:	68e1      	ldr	r1, [r4, #12]
  tmpccer = htim->Instance->CCER;
 80010f0:	6a07      	ldr	r7, [r0, #32]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80010f2:	430b      	orrs	r3, r1
 80010f4:	6a21      	ldr	r1, [r4, #32]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80010f6:	f022 02fc 	bic.w	r2, r2, #252	; 0xfc
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80010fa:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
 80010fe:	4313      	orrs	r3, r2
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8001100:	6961      	ldr	r1, [r4, #20]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8001102:	f027 0222 	bic.w	r2, r7, #34	; 0x22
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8001106:	6867      	ldr	r7, [r4, #4]
  htim->Instance->SMCR = tmpsmcr;
 8001108:	6086      	str	r6, [r0, #8]
  htim->Instance->CCMR1 = tmpccmr1;
 800110a:	6183      	str	r3, [r0, #24]
  htim->State = HAL_TIM_STATE_READY;
 800110c:	2301      	movs	r3, #1
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800110e:	ea47 1701 	orr.w	r7, r7, r1, lsl #4
 8001112:	4317      	orrs	r7, r2
  htim->Instance->CCER = tmpccer;
 8001114:	6207      	str	r7, [r0, #32]
  htim->State = HAL_TIM_STATE_READY;
 8001116:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
  return HAL_OK;
 800111a:	2000      	movs	r0, #0
 800111c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 800111e:	2001      	movs	r0, #1
}
 8001120:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001122 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001122:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8001126:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 8001128:	2b01      	cmp	r3, #1
 800112a:	f04f 0302 	mov.w	r3, #2
 800112e:	d014      	beq.n	800115a <HAL_TIMEx_MasterConfigSynchronization+0x38>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001130:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8001132:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 8001136:	6862      	ldr	r2, [r4, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001138:	68a3      	ldr	r3, [r4, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800113a:	680d      	ldr	r5, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800113c:	6849      	ldr	r1, [r1, #4]
  tmpcr2 &= ~TIM_CR2_MMS;
 800113e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr &= ~TIM_SMCR_MSM;
 8001142:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001146:	430b      	orrs	r3, r1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001148:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800114a:	6062      	str	r2, [r4, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800114c:	60a3      	str	r3, [r4, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800114e:	2301      	movs	r3, #1
 8001150:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001154:	2300      	movs	r3, #0
 8001156:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 800115a:	4618      	mov	r0, r3

  return HAL_OK;
}
 800115c:	bd30      	pop	{r4, r5, pc}
	...

08001160 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001160:	b538      	push	{r3, r4, r5, lr}
 8001162:	4605      	mov	r5, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001164:	6803      	ldr	r3, [r0, #0]
 8001166:	68c1      	ldr	r1, [r0, #12]
 8001168:	691a      	ldr	r2, [r3, #16]
 800116a:	2419      	movs	r4, #25
 800116c:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001170:	430a      	orrs	r2, r1
 8001172:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001174:	6882      	ldr	r2, [r0, #8]
 8001176:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 8001178:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800117a:	4302      	orrs	r2, r0
 800117c:	6968      	ldr	r0, [r5, #20]
  MODIFY_REG(huart->Instance->CR1,
 800117e:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 8001182:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001186:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8001188:	430a      	orrs	r2, r1
 800118a:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800118c:	695a      	ldr	r2, [r3, #20]
 800118e:	69a9      	ldr	r1, [r5, #24]
 8001190:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001194:	430a      	orrs	r2, r1
 8001196:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8001198:	4a0d      	ldr	r2, [pc, #52]	; (80011d0 <UART_SetConfig+0x70>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d114      	bne.n	80011c8 <UART_SetConfig+0x68>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800119e:	f7ff fe4b 	bl	8000e38 <HAL_RCC_GetPCLK2Freq>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80011a2:	4360      	muls	r0, r4
 80011a4:	686c      	ldr	r4, [r5, #4]
 80011a6:	2264      	movs	r2, #100	; 0x64
 80011a8:	00a4      	lsls	r4, r4, #2
 80011aa:	fbb0 f0f4 	udiv	r0, r0, r4
 80011ae:	fbb0 f4f2 	udiv	r4, r0, r2
 80011b2:	fb02 0314 	mls	r3, r2, r4, r0
 80011b6:	011b      	lsls	r3, r3, #4
 80011b8:	3332      	adds	r3, #50	; 0x32
 80011ba:	fbb3 f3f2 	udiv	r3, r3, r2
 80011be:	6829      	ldr	r1, [r5, #0]
 80011c0:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 80011c4:	608b      	str	r3, [r1, #8]
 80011c6:	bd38      	pop	{r3, r4, r5, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 80011c8:	f7ff fe26 	bl	8000e18 <HAL_RCC_GetPCLK1Freq>
 80011cc:	e7e9      	b.n	80011a2 <UART_SetConfig+0x42>
 80011ce:	bf00      	nop
 80011d0:	40013800 	.word	0x40013800

080011d4 <HAL_UART_Init>:
{
 80011d4:	b510      	push	{r4, lr}
  if (huart == NULL)
 80011d6:	4604      	mov	r4, r0
 80011d8:	b340      	cbz	r0, 800122c <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 80011da:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80011de:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80011e2:	b91b      	cbnz	r3, 80011ec <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80011e4:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80011e8:	f000 fb00 	bl	80017ec <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 80011ec:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 80011ee:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80011f0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80011f4:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 80011f6:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 80011f8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80011fc:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80011fe:	f7ff ffaf 	bl	8001160 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001202:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001204:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001206:	691a      	ldr	r2, [r3, #16]
 8001208:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800120c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800120e:	695a      	ldr	r2, [r3, #20]
 8001210:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001214:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8001216:	68da      	ldr	r2, [r3, #12]
 8001218:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800121c:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 800121e:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001220:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001222:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001226:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 800122a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800122c:	2001      	movs	r0, #1
}
 800122e:	bd10      	pop	{r4, pc}

08001230 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001230:	b510      	push	{r4, lr}
 8001232:	b096      	sub	sp, #88	; 0x58
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001234:	2228      	movs	r2, #40	; 0x28
 8001236:	2100      	movs	r1, #0
 8001238:	a80c      	add	r0, sp, #48	; 0x30
 800123a:	f000 fbc7 	bl	80019cc <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800123e:	2214      	movs	r2, #20
 8001240:	2100      	movs	r1, #0
 8001242:	a801      	add	r0, sp, #4
 8001244:	f000 fbc2 	bl	80019cc <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8001248:	2218      	movs	r2, #24
 800124a:	2100      	movs	r1, #0
 800124c:	eb0d 0002 	add.w	r0, sp, r2
 8001250:	f000 fbbc 	bl	80019cc <memset>

	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001254:	f44f 3380 	mov.w	r3, #65536	; 0x10000
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001258:	2402      	movs	r4, #2
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800125a:	2201      	movs	r2, #1
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800125c:	930d      	str	r3, [sp, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800125e:	9314      	str	r3, [sp, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001260:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001264:	a80c      	add	r0, sp, #48	; 0x30
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001266:	920c      	str	r2, [sp, #48]	; 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001268:	9210      	str	r2, [sp, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800126a:	9315      	str	r3, [sp, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800126c:	9413      	str	r4, [sp, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800126e:	f7ff fb5b 	bl	8000928 <HAL_RCC_OscConfig>
		Error_Handler();
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001272:	230f      	movs	r3, #15
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001274:	f44f 6280 	mov.w	r2, #1024	; 0x400
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001278:	9301      	str	r3, [sp, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800127a:	2300      	movs	r3, #0
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 800127c:	4621      	mov	r1, r4
 800127e:	a801      	add	r0, sp, #4
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001280:	9303      	str	r3, [sp, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001282:	9204      	str	r2, [sp, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001284:	9305      	str	r3, [sp, #20]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001286:	9402      	str	r4, [sp, #8]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8001288:	f7ff fd28 	bl	8000cdc <HAL_RCC_ClockConfig>
		Error_Handler();
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800128c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8001290:	a806      	add	r0, sp, #24
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001292:	9406      	str	r4, [sp, #24]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001294:	9308      	str	r3, [sp, #32]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8001296:	f7ff fddf 	bl	8000e58 <HAL_RCCEx_PeriphCLKConfig>
		Error_Handler();
	}
}
 800129a:	b016      	add	sp, #88	; 0x58
 800129c:	bd10      	pop	{r4, pc}
	...

080012a0 <IdleLoop>:

}

/* USER CODE BEGIN 4 */

void IdleLoop() {
 80012a0:	b510      	push	{r4, lr}
	HAL_Delay(500);
	HAL_GPIO_TogglePin(LED_BAT_GPIO_Port, LED_BAT_Pin);
 80012a2:	4c0e      	ldr	r4, [pc, #56]	; (80012dc <IdleLoop+0x3c>)
	HAL_Delay(500);
 80012a4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80012a8:	f7ff f804 	bl	80002b4 <HAL_Delay>
	HAL_GPIO_TogglePin(LED_BAT_GPIO_Port, LED_BAT_Pin);
 80012ac:	2180      	movs	r1, #128	; 0x80
 80012ae:	4620      	mov	r0, r4
 80012b0:	f7ff fa8f 	bl	80007d2 <HAL_GPIO_TogglePin>
	HAL_Delay(500);
 80012b4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80012b8:	f7fe fffc 	bl	80002b4 <HAL_Delay>
	HAL_GPIO_TogglePin(LED_EXT_GPIO_Port, LED_EXT_Pin);
 80012bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012c0:	4620      	mov	r0, r4
 80012c2:	f7ff fa86 	bl	80007d2 <HAL_GPIO_TogglePin>
	HAL_Delay(500);
 80012c6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80012ca:	f7fe fff3 	bl	80002b4 <HAL_Delay>
	HAL_GPIO_TogglePin(LED_MODE_GPIO_Port, LED_MODE_Pin);
 80012ce:	4620      	mov	r0, r4
}
 80012d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_GPIO_TogglePin(LED_MODE_GPIO_Port, LED_MODE_Pin);
 80012d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012d8:	f7ff ba7b 	b.w	80007d2 <HAL_GPIO_TogglePin>
 80012dc:	40011000 	.word	0x40011000

080012e0 <main>:
int main(void) {
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b090      	sub	sp, #64	; 0x40
	HAL_Init();
 80012e4:	f7fe ffc2 	bl	800026c <HAL_Init>
	SystemClock_Config();
 80012e8:	f7ff ffa2 	bl	8001230 <SystemClock_Config>
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80012ec:	2210      	movs	r2, #16
 80012ee:	2100      	movs	r1, #0
 80012f0:	a807      	add	r0, sp, #28
 80012f2:	f000 fb6b 	bl	80019cc <memset>
	__HAL_RCC_GPIOD_CLK_ENABLE()
 80012f6:	4b80      	ldr	r3, [pc, #512]	; (80014f8 <main+0x218>)
	HAL_GPIO_WritePin(GPIOA, CSN_Pin | CE_Pin, GPIO_PIN_RESET);
 80012f8:	2112      	movs	r1, #18
	__HAL_RCC_GPIOD_CLK_ENABLE()
 80012fa:	699a      	ldr	r2, [r3, #24]
	HAL_GPIO_WritePin(GPIOA, CSN_Pin | CE_Pin, GPIO_PIN_RESET);
 80012fc:	487f      	ldr	r0, [pc, #508]	; (80014fc <main+0x21c>)
	__HAL_RCC_GPIOD_CLK_ENABLE()
 80012fe:	f042 0220 	orr.w	r2, r2, #32
 8001302:	619a      	str	r2, [r3, #24]
 8001304:	699a      	ldr	r2, [r3, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001306:	2400      	movs	r4, #0
	__HAL_RCC_GPIOD_CLK_ENABLE()
 8001308:	f002 0220 	and.w	r2, r2, #32
 800130c:	9201      	str	r2, [sp, #4]
 800130e:	9a01      	ldr	r2, [sp, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE()
 8001310:	699a      	ldr	r2, [r3, #24]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001312:	2601      	movs	r6, #1
	__HAL_RCC_GPIOC_CLK_ENABLE()
 8001314:	f042 0210 	orr.w	r2, r2, #16
 8001318:	619a      	str	r2, [r3, #24]
 800131a:	699a      	ldr	r2, [r3, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800131c:	2502      	movs	r5, #2
	__HAL_RCC_GPIOC_CLK_ENABLE()
 800131e:	f002 0210 	and.w	r2, r2, #16
 8001322:	9202      	str	r2, [sp, #8]
 8001324:	9a02      	ldr	r2, [sp, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE()
 8001326:	699a      	ldr	r2, [r3, #24]
	hi2c1.Init.ClockSpeed = 100000;
 8001328:	4f75      	ldr	r7, [pc, #468]	; (8001500 <main+0x220>)
	__HAL_RCC_GPIOA_CLK_ENABLE()
 800132a:	f042 0204 	orr.w	r2, r2, #4
 800132e:	619a      	str	r2, [r3, #24]
 8001330:	699a      	ldr	r2, [r3, #24]
 8001332:	f002 0204 	and.w	r2, r2, #4
 8001336:	9203      	str	r2, [sp, #12]
 8001338:	9a03      	ldr	r2, [sp, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE()
 800133a:	699a      	ldr	r2, [r3, #24]
 800133c:	f042 0208 	orr.w	r2, r2, #8
 8001340:	619a      	str	r2, [r3, #24]
 8001342:	699b      	ldr	r3, [r3, #24]
	HAL_GPIO_WritePin(GPIOA, CSN_Pin | CE_Pin, GPIO_PIN_RESET);
 8001344:	2200      	movs	r2, #0
	__HAL_RCC_GPIOB_CLK_ENABLE()
 8001346:	f003 0308 	and.w	r3, r3, #8
 800134a:	9304      	str	r3, [sp, #16]
 800134c:	9b04      	ldr	r3, [sp, #16]
	HAL_GPIO_WritePin(GPIOA, CSN_Pin | CE_Pin, GPIO_PIN_RESET);
 800134e:	f7ff fa3b 	bl	80007c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, RC_PWR_Pin | OLED_PWR_Pin | BUZZ_Pin,
 8001352:	2200      	movs	r2, #0
 8001354:	f44f 4103 	mov.w	r1, #33536	; 0x8300
 8001358:	486a      	ldr	r0, [pc, #424]	; (8001504 <main+0x224>)
 800135a:	f7ff fa35 	bl	80007c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, LED_BAT_Pin | LED_EXT_Pin | LED_MODE_Pin,
 800135e:	2200      	movs	r2, #0
 8001360:	f44f 7160 	mov.w	r1, #896	; 0x380
 8001364:	4868      	ldr	r0, [pc, #416]	; (8001508 <main+0x228>)
 8001366:	f7ff fa2f 	bl	80007c8 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = CSN_Pin | CE_Pin;
 800136a:	2312      	movs	r3, #18
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800136c:	a907      	add	r1, sp, #28
 800136e:	4863      	ldr	r0, [pc, #396]	; (80014fc <main+0x21c>)
	GPIO_InitStruct.Pin = CSN_Pin | CE_Pin;
 8001370:	9307      	str	r3, [sp, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001372:	9608      	str	r6, [sp, #32]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001374:	950a      	str	r5, [sp, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001376:	9409      	str	r4, [sp, #36]	; 0x24
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001378:	f7ff f93a 	bl	80005f0 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = JOY1_PB_Pin | JOY2_PB_Pin;
 800137c:	2306      	movs	r3, #6
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800137e:	a907      	add	r1, sp, #28
 8001380:	4860      	ldr	r0, [pc, #384]	; (8001504 <main+0x224>)
	GPIO_InitStruct.Pin = JOY1_PB_Pin | JOY2_PB_Pin;
 8001382:	9307      	str	r3, [sp, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001384:	9408      	str	r4, [sp, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001386:	9409      	str	r4, [sp, #36]	; 0x24
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001388:	f7ff f932 	bl	80005f0 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = RC_PWR_Pin | OLED_PWR_Pin | BUZZ_Pin;
 800138c:	f44f 4303 	mov.w	r3, #33536	; 0x8300
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001390:	a907      	add	r1, sp, #28
 8001392:	485c      	ldr	r0, [pc, #368]	; (8001504 <main+0x224>)
	GPIO_InitStruct.Pin = RC_PWR_Pin | OLED_PWR_Pin | BUZZ_Pin;
 8001394:	9307      	str	r3, [sp, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001396:	9608      	str	r6, [sp, #32]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001398:	950a      	str	r5, [sp, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139a:	9409      	str	r4, [sp, #36]	; 0x24
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800139c:	f7ff f928 	bl	80005f0 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = MPU_INT_Pin;
 80013a0:	2340      	movs	r3, #64	; 0x40
	HAL_GPIO_Init(MPU_INT_GPIO_Port, &GPIO_InitStruct);
 80013a2:	a907      	add	r1, sp, #28
 80013a4:	4858      	ldr	r0, [pc, #352]	; (8001508 <main+0x228>)
	GPIO_InitStruct.Pin = MPU_INT_Pin;
 80013a6:	9307      	str	r3, [sp, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013a8:	9408      	str	r4, [sp, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013aa:	9409      	str	r4, [sp, #36]	; 0x24
	HAL_GPIO_Init(MPU_INT_GPIO_Port, &GPIO_InitStruct);
 80013ac:	f7ff f920 	bl	80005f0 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = LED_BAT_Pin | LED_EXT_Pin | LED_MODE_Pin;
 80013b0:	f44f 7360 	mov.w	r3, #896	; 0x380
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013b4:	a907      	add	r1, sp, #28
 80013b6:	4854      	ldr	r0, [pc, #336]	; (8001508 <main+0x228>)
	GPIO_InitStruct.Pin = LED_BAT_Pin | LED_EXT_Pin | LED_MODE_Pin;
 80013b8:	9307      	str	r3, [sp, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ba:	9608      	str	r6, [sp, #32]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013bc:	950a      	str	r5, [sp, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013be:	9409      	str	r4, [sp, #36]	; 0x24
	hadc1.Instance = ADC1;
 80013c0:	4d52      	ldr	r5, [pc, #328]	; (800150c <main+0x22c>)
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013c2:	f7ff f915 	bl	80005f0 <HAL_GPIO_Init>
	hadc1.Instance = ADC1;
 80013c6:	4b52      	ldr	r3, [pc, #328]	; (8001510 <main+0x230>)
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 80013c8:	4628      	mov	r0, r5
	hadc1.Instance = ADC1;
 80013ca:	602b      	str	r3, [r5, #0]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013cc:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
	hadc1.Init.NbrOfConversion = 1;
 80013d0:	612e      	str	r6, [r5, #16]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013d2:	61eb      	str	r3, [r5, #28]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80013d4:	60ac      	str	r4, [r5, #8]
	hadc1.Init.ContinuousConvMode = DISABLE;
 80013d6:	732c      	strb	r4, [r5, #12]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 80013d8:	752c      	strb	r4, [r5, #20]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013da:	606c      	str	r4, [r5, #4]
	ADC_ChannelConfTypeDef sConfig = { 0 };
 80013dc:	9407      	str	r4, [sp, #28]
 80013de:	9408      	str	r4, [sp, #32]
 80013e0:	9409      	str	r4, [sp, #36]	; 0x24
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 80013e2:	f7ff f81f 	bl	8000424 <HAL_ADC_Init>
	sConfig.Channel = ADC_CHANNEL_5;
 80013e6:	2305      	movs	r3, #5
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80013e8:	4628      	mov	r0, r5
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013ea:	f44f 4580 	mov.w	r5, #16384	; 0x4000
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80013ee:	a907      	add	r1, sp, #28
	sConfig.Channel = ADC_CHANNEL_5;
 80013f0:	9307      	str	r3, [sp, #28]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80013f2:	9608      	str	r6, [sp, #32]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80013f4:	9409      	str	r4, [sp, #36]	; 0x24
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80013f6:	f7fe ff6f 	bl	80002d8 <HAL_ADC_ConfigChannel>
	hi2c1.Instance = I2C1;
 80013fa:	4846      	ldr	r0, [pc, #280]	; (8001514 <main+0x234>)
	hi2c1.Init.ClockSpeed = 100000;
 80013fc:	4b46      	ldr	r3, [pc, #280]	; (8001518 <main+0x238>)
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013fe:	6105      	str	r5, [r0, #16]
	hi2c1.Init.ClockSpeed = 100000;
 8001400:	e880 0088 	stmia.w	r0, {r3, r7}
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001404:	6084      	str	r4, [r0, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8001406:	60c4      	str	r4, [r0, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001408:	6144      	str	r4, [r0, #20]
	hi2c1.Init.OwnAddress2 = 0;
 800140a:	6184      	str	r4, [r0, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800140c:	61c4      	str	r4, [r0, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800140e:	6204      	str	r4, [r0, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8001410:	f7ff f9e6 	bl	80007e0 <HAL_I2C_Init>
	hi2c2.Instance = I2C2;
 8001414:	4841      	ldr	r0, [pc, #260]	; (800151c <main+0x23c>)
 8001416:	4b42      	ldr	r3, [pc, #264]	; (8001520 <main+0x240>)
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001418:	6105      	str	r5, [r0, #16]
	hi2c2.Init.ClockSpeed = 100000;
 800141a:	e880 0088 	stmia.w	r0, {r3, r7}
	hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800141e:	6084      	str	r4, [r0, #8]
	hi2c2.Init.OwnAddress1 = 0;
 8001420:	60c4      	str	r4, [r0, #12]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001422:	6144      	str	r4, [r0, #20]
	hi2c2.Init.OwnAddress2 = 0;
 8001424:	6184      	str	r4, [r0, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001426:	61c4      	str	r4, [r0, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001428:	6204      	str	r4, [r0, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK) {
 800142a:	f7ff f9d9 	bl	80007e0 <HAL_I2C_Init>
	hspi1.Init.Mode = SPI_MODE_MASTER;
 800142e:	f44f 7382 	mov.w	r3, #260	; 0x104
	hspi1.Instance = SPI1;
 8001432:	483c      	ldr	r0, [pc, #240]	; (8001524 <main+0x244>)
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8001434:	4a3c      	ldr	r2, [pc, #240]	; (8001528 <main+0x248>)
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001436:	6084      	str	r4, [r0, #8]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8001438:	e880 000c 	stmia.w	r0, {r2, r3}
	hspi1.Init.NSS = SPI_NSS_SOFT;
 800143c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001440:	6183      	str	r3, [r0, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001442:	2318      	movs	r3, #24
 8001444:	61c3      	str	r3, [r0, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_LSB;
 8001446:	2380      	movs	r3, #128	; 0x80
 8001448:	6203      	str	r3, [r0, #32]
	hspi1.Init.CRCPolynomial = 10;
 800144a:	230a      	movs	r3, #10
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800144c:	60c4      	str	r4, [r0, #12]
	hspi1.Init.CRCPolynomial = 10;
 800144e:	62c3      	str	r3, [r0, #44]	; 0x2c
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001450:	6104      	str	r4, [r0, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001452:	6144      	str	r4, [r0, #20]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001454:	6244      	str	r4, [r0, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001456:	6284      	str	r4, [r0, #40]	; 0x28
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8001458:	f7ff fd76 	bl	8000f48 <HAL_SPI_Init>
	TIM_Encoder_InitTypeDef sConfig = { 0 };
 800145c:	2224      	movs	r2, #36	; 0x24
 800145e:	4621      	mov	r1, r4
 8001460:	a807      	add	r0, sp, #28
 8001462:	f000 fab3 	bl	80019cc <memset>
	htim1.Instance = TIM1;
 8001466:	4d31      	ldr	r5, [pc, #196]	; (800152c <main+0x24c>)
 8001468:	4b31      	ldr	r3, [pc, #196]	; (8001530 <main+0x250>)
	if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK) {
 800146a:	a907      	add	r1, sp, #28
	htim1.Init.Prescaler = 0;
 800146c:	e885 0018 	stmia.w	r5, {r3, r4}
	htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED3;
 8001470:	2360      	movs	r3, #96	; 0x60
	if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK) {
 8001472:	4628      	mov	r0, r5
	htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED3;
 8001474:	60ab      	str	r3, [r5, #8]
	htim1.Init.Period = 0;
 8001476:	60ec      	str	r4, [r5, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001478:	612c      	str	r4, [r5, #16]
	htim1.Init.RepetitionCounter = 0;
 800147a:	616c      	str	r4, [r5, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800147c:	61ac      	str	r4, [r5, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800147e:	9607      	str	r6, [sp, #28]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001480:	9609      	str	r6, [sp, #36]	; 0x24
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001482:	960d      	str	r6, [sp, #52]	; 0x34
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001484:	9405      	str	r4, [sp, #20]
 8001486:	9406      	str	r4, [sp, #24]
	if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK) {
 8001488:	f7ff fe00 	bl	800108c <HAL_TIM_Encoder_Init>
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 800148c:	a905      	add	r1, sp, #20
 800148e:	4628      	mov	r0, r5
	htim6.Instance = TIM6;
 8001490:	4d28      	ldr	r5, [pc, #160]	; (8001534 <main+0x254>)
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001492:	9405      	str	r4, [sp, #20]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001494:	9406      	str	r4, [sp, #24]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8001496:	f7ff fe44 	bl	8001122 <HAL_TIMEx_MasterConfigSynchronization>
	htim6.Instance = TIM6;
 800149a:	4b27      	ldr	r3, [pc, #156]	; (8001538 <main+0x258>)
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK) {
 800149c:	4628      	mov	r0, r5
	htim6.Init.Prescaler = 0;
 800149e:	e885 0018 	stmia.w	r5, {r3, r4}
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014a2:	60ac      	str	r4, [r5, #8]
	htim6.Init.Period = 0;
 80014a4:	60ec      	str	r4, [r5, #12]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014a6:	61ac      	str	r4, [r5, #24]
	huart2.Init.BaudRate = 115200;
 80014a8:	f44f 36e1 	mov.w	r6, #115200	; 0x1c200
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80014ac:	9407      	str	r4, [sp, #28]
 80014ae:	9408      	str	r4, [sp, #32]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK) {
 80014b0:	f7ff fdd2 	bl	8001058 <HAL_TIM_Base_Init>
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig)
 80014b4:	4628      	mov	r0, r5
	huart2.Init.Mode = UART_MODE_TX_RX;
 80014b6:	250c      	movs	r5, #12
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig)
 80014b8:	a907      	add	r1, sp, #28
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014ba:	9407      	str	r4, [sp, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014bc:	9408      	str	r4, [sp, #32]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig)
 80014be:	f7ff fe30 	bl	8001122 <HAL_TIMEx_MasterConfigSynchronization>
	huart2.Instance = USART2;
 80014c2:	481e      	ldr	r0, [pc, #120]	; (800153c <main+0x25c>)
	huart2.Init.BaudRate = 115200;
 80014c4:	4b1e      	ldr	r3, [pc, #120]	; (8001540 <main+0x260>)
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80014c6:	6084      	str	r4, [r0, #8]
	huart2.Init.BaudRate = 115200;
 80014c8:	e880 0048 	stmia.w	r0, {r3, r6}
	huart2.Init.StopBits = UART_STOPBITS_1;
 80014cc:	60c4      	str	r4, [r0, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80014ce:	6104      	str	r4, [r0, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80014d0:	6145      	str	r5, [r0, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014d2:	6184      	str	r4, [r0, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014d4:	61c4      	str	r4, [r0, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 80014d6:	f7ff fe7d 	bl	80011d4 <HAL_UART_Init>
	huart3.Instance = USART3;
 80014da:	481a      	ldr	r0, [pc, #104]	; (8001544 <main+0x264>)
 80014dc:	4b1a      	ldr	r3, [pc, #104]	; (8001548 <main+0x268>)
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80014de:	6084      	str	r4, [r0, #8]
	huart3.Init.BaudRate = 115200;
 80014e0:	e880 0048 	stmia.w	r0, {r3, r6}
	huart3.Init.StopBits = UART_STOPBITS_1;
 80014e4:	60c4      	str	r4, [r0, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 80014e6:	6104      	str	r4, [r0, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 80014e8:	6145      	str	r5, [r0, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014ea:	6184      	str	r4, [r0, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80014ec:	61c4      	str	r4, [r0, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 80014ee:	f7ff fe71 	bl	80011d4 <HAL_UART_Init>
		IdleLoop();
 80014f2:	f7ff fed5 	bl	80012a0 <IdleLoop>
 80014f6:	e7fc      	b.n	80014f2 <main+0x212>
 80014f8:	40021000 	.word	0x40021000
 80014fc:	40010800 	.word	0x40010800
 8001500:	000186a0 	.word	0x000186a0
 8001504:	40010c00 	.word	0x40010c00
 8001508:	40011000 	.word	0x40011000
 800150c:	20000114 	.word	0x20000114
 8001510:	40012400 	.word	0x40012400
 8001514:	2000006c 	.word	0x2000006c
 8001518:	40005400 	.word	0x40005400
 800151c:	200000c0 	.word	0x200000c0
 8001520:	40005800 	.word	0x40005800
 8001524:	200001c4 	.word	0x200001c4
 8001528:	40013000 	.word	0x40013000
 800152c:	20000184 	.word	0x20000184
 8001530:	40012c00 	.word	0x40012c00
 8001534:	20000144 	.word	0x20000144
 8001538:	40001000 	.word	0x40001000
 800153c:	2000021c 	.word	0x2000021c
 8001540:	40004400 	.word	0x40004400
 8001544:	2000002c 	.word	0x2000002c
 8001548:	40004800 	.word	0x40004800

0800154c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800154c:	4b0e      	ldr	r3, [pc, #56]	; (8001588 <HAL_MspInit+0x3c>)
{
 800154e:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001550:	699a      	ldr	r2, [r3, #24]
 8001552:	f042 0201 	orr.w	r2, r2, #1
 8001556:	619a      	str	r2, [r3, #24]
 8001558:	699a      	ldr	r2, [r3, #24]
 800155a:	f002 0201 	and.w	r2, r2, #1
 800155e:	9200      	str	r2, [sp, #0]
 8001560:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001562:	69da      	ldr	r2, [r3, #28]
 8001564:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001568:	61da      	str	r2, [r3, #28]
 800156a:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800156c:	4a07      	ldr	r2, [pc, #28]	; (800158c <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800156e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001572:	9301      	str	r3, [sp, #4]
 8001574:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001576:	6853      	ldr	r3, [r2, #4]
 8001578:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800157c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001580:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001582:	b002      	add	sp, #8
 8001584:	4770      	bx	lr
 8001586:	bf00      	nop
 8001588:	40021000 	.word	0x40021000
 800158c:	40010000 	.word	0x40010000

08001590 <HAL_ADC_MspInit>:
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001590:	2210      	movs	r2, #16
{
 8001592:	b510      	push	{r4, lr}
 8001594:	4604      	mov	r4, r0
 8001596:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001598:	eb0d 0002 	add.w	r0, sp, r2
 800159c:	2100      	movs	r1, #0
 800159e:	f000 fa15 	bl	80019cc <memset>
  if(hadc->Instance==ADC1)
 80015a2:	6822      	ldr	r2, [r4, #0]
 80015a4:	4b20      	ldr	r3, [pc, #128]	; (8001628 <HAL_ADC_MspInit+0x98>)
 80015a6:	429a      	cmp	r2, r3
 80015a8:	d13b      	bne.n	8001622 <HAL_ADC_MspInit+0x92>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80015aa:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 80015ae:	699a      	ldr	r2, [r3, #24]
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8 
    */
    GPIO_InitStruct.Pin = JOY1_X_Pin|JO1_Y_Pin|JOY2_X_Pin|JOY2_Y_Pin 
                          |SW3_Pin|SW4_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015b0:	2403      	movs	r4, #3
    __HAL_RCC_ADC1_CLK_ENABLE();
 80015b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80015b6:	619a      	str	r2, [r3, #24]
 80015b8:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015ba:	a904      	add	r1, sp, #16
    __HAL_RCC_ADC1_CLK_ENABLE();
 80015bc:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80015c0:	9200      	str	r2, [sp, #0]
 80015c2:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015c4:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015c6:	4819      	ldr	r0, [pc, #100]	; (800162c <HAL_ADC_MspInit+0x9c>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015c8:	f042 0210 	orr.w	r2, r2, #16
 80015cc:	619a      	str	r2, [r3, #24]
 80015ce:	699a      	ldr	r2, [r3, #24]
 80015d0:	f002 0210 	and.w	r2, r2, #16
 80015d4:	9201      	str	r2, [sp, #4]
 80015d6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015d8:	699a      	ldr	r2, [r3, #24]
 80015da:	f042 0204 	orr.w	r2, r2, #4
 80015de:	619a      	str	r2, [r3, #24]
 80015e0:	699a      	ldr	r2, [r3, #24]
 80015e2:	f002 0204 	and.w	r2, r2, #4
 80015e6:	9202      	str	r2, [sp, #8]
 80015e8:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015ea:	699a      	ldr	r2, [r3, #24]
 80015ec:	f042 0208 	orr.w	r2, r2, #8
 80015f0:	619a      	str	r2, [r3, #24]
 80015f2:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015f4:	9405      	str	r4, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015f6:	f003 0308 	and.w	r3, r3, #8
 80015fa:	9303      	str	r3, [sp, #12]
 80015fc:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = JOY1_X_Pin|JO1_Y_Pin|JOY2_X_Pin|JOY2_Y_Pin 
 80015fe:	233f      	movs	r3, #63	; 0x3f
 8001600:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001602:	f7fe fff5 	bl	80005f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = POT1_Pin|POT2_Pin|SW1_Pin|SW2_Pin;
 8001606:	23e1      	movs	r3, #225	; 0xe1
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001608:	a904      	add	r1, sp, #16
 800160a:	4809      	ldr	r0, [pc, #36]	; (8001630 <HAL_ADC_MspInit+0xa0>)
    GPIO_InitStruct.Pin = POT1_Pin|POT2_Pin|SW1_Pin|SW2_Pin;
 800160c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800160e:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001610:	f7fe ffee 	bl	80005f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BAT_LEVEL_Pin;
 8001614:	2301      	movs	r3, #1
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(BAT_LEVEL_GPIO_Port, &GPIO_InitStruct);
 8001616:	a904      	add	r1, sp, #16
 8001618:	4806      	ldr	r0, [pc, #24]	; (8001634 <HAL_ADC_MspInit+0xa4>)
    GPIO_InitStruct.Pin = BAT_LEVEL_Pin;
 800161a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800161c:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(BAT_LEVEL_GPIO_Port, &GPIO_InitStruct);
 800161e:	f7fe ffe7 	bl	80005f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001622:	b008      	add	sp, #32
 8001624:	bd10      	pop	{r4, pc}
 8001626:	bf00      	nop
 8001628:	40012400 	.word	0x40012400
 800162c:	40011000 	.word	0x40011000
 8001630:	40010800 	.word	0x40010800
 8001634:	40010c00 	.word	0x40010c00

08001638 <HAL_I2C_MspInit>:
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001638:	2210      	movs	r2, #16
{
 800163a:	b510      	push	{r4, lr}
 800163c:	4604      	mov	r4, r0
 800163e:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001640:	eb0d 0002 	add.w	r0, sp, r2
 8001644:	2100      	movs	r1, #0
 8001646:	f000 f9c1 	bl	80019cc <memset>
  if(hi2c->Instance==I2C1)
 800164a:	6823      	ldr	r3, [r4, #0]
 800164c:	4a21      	ldr	r2, [pc, #132]	; (80016d4 <HAL_I2C_MspInit+0x9c>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d11e      	bne.n	8001690 <HAL_I2C_MspInit+0x58>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001652:	4c21      	ldr	r4, [pc, #132]	; (80016d8 <HAL_I2C_MspInit+0xa0>)
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001654:	a904      	add	r1, sp, #16
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001656:	69a3      	ldr	r3, [r4, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001658:	4820      	ldr	r0, [pc, #128]	; (80016dc <HAL_I2C_MspInit+0xa4>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800165a:	f043 0308 	orr.w	r3, r3, #8
 800165e:	61a3      	str	r3, [r4, #24]
 8001660:	69a3      	ldr	r3, [r4, #24]
 8001662:	f003 0308 	and.w	r3, r3, #8
 8001666:	9300      	str	r3, [sp, #0]
 8001668:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800166a:	23c0      	movs	r3, #192	; 0xc0
 800166c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800166e:	2312      	movs	r3, #18
 8001670:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001672:	2303      	movs	r3, #3
 8001674:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001676:	f7fe ffbb 	bl	80005f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800167a:	69e3      	ldr	r3, [r4, #28]
 800167c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001680:	61e3      	str	r3, [r4, #28]
 8001682:	69e3      	ldr	r3, [r4, #28]
 8001684:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001688:	9301      	str	r3, [sp, #4]
 800168a:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800168c:	b008      	add	sp, #32
 800168e:	bd10      	pop	{r4, pc}
  else if(hi2c->Instance==I2C2)
 8001690:	4a13      	ldr	r2, [pc, #76]	; (80016e0 <HAL_I2C_MspInit+0xa8>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d1fa      	bne.n	800168c <HAL_I2C_MspInit+0x54>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001696:	4c10      	ldr	r4, [pc, #64]	; (80016d8 <HAL_I2C_MspInit+0xa0>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001698:	a904      	add	r1, sp, #16
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800169a:	69a3      	ldr	r3, [r4, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800169c:	480f      	ldr	r0, [pc, #60]	; (80016dc <HAL_I2C_MspInit+0xa4>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800169e:	f043 0308 	orr.w	r3, r3, #8
 80016a2:	61a3      	str	r3, [r4, #24]
 80016a4:	69a3      	ldr	r3, [r4, #24]
 80016a6:	f003 0308 	and.w	r3, r3, #8
 80016aa:	9302      	str	r3, [sp, #8]
 80016ac:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80016ae:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80016b2:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016b4:	2312      	movs	r3, #18
 80016b6:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016b8:	2303      	movs	r3, #3
 80016ba:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016bc:	f7fe ff98 	bl	80005f0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80016c0:	69e3      	ldr	r3, [r4, #28]
 80016c2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80016c6:	61e3      	str	r3, [r4, #28]
 80016c8:	69e3      	ldr	r3, [r4, #28]
 80016ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016ce:	9303      	str	r3, [sp, #12]
 80016d0:	9b03      	ldr	r3, [sp, #12]
}
 80016d2:	e7db      	b.n	800168c <HAL_I2C_MspInit+0x54>
 80016d4:	40005400 	.word	0x40005400
 80016d8:	40021000 	.word	0x40021000
 80016dc:	40010c00 	.word	0x40010c00
 80016e0:	40005800 	.word	0x40005800

080016e4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80016e4:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e6:	2410      	movs	r4, #16
{
 80016e8:	4605      	mov	r5, r0
 80016ea:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ec:	4622      	mov	r2, r4
 80016ee:	2100      	movs	r1, #0
 80016f0:	a802      	add	r0, sp, #8
 80016f2:	f000 f96b 	bl	80019cc <memset>
  if(hspi->Instance==SPI1)
 80016f6:	682a      	ldr	r2, [r5, #0]
 80016f8:	4b18      	ldr	r3, [pc, #96]	; (800175c <HAL_SPI_MspInit+0x78>)
 80016fa:	429a      	cmp	r2, r3
 80016fc:	d12c      	bne.n	8001758 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80016fe:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
 8001702:	699a      	ldr	r2, [r3, #24]
    PB5     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001704:	a902      	add	r1, sp, #8
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001706:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800170a:	619a      	str	r2, [r3, #24]
 800170c:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800170e:	4814      	ldr	r0, [pc, #80]	; (8001760 <HAL_SPI_MspInit+0x7c>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001710:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001714:	9200      	str	r2, [sp, #0]
 8001716:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001718:	699a      	ldr	r2, [r3, #24]
 800171a:	f042 0208 	orr.w	r2, r2, #8
 800171e:	619a      	str	r2, [r3, #24]
 8001720:	699b      	ldr	r3, [r3, #24]
 8001722:	f003 0308 	and.w	r3, r3, #8
 8001726:	9301      	str	r3, [sp, #4]
 8001728:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 800172a:	2328      	movs	r3, #40	; 0x28
 800172c:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800172e:	2302      	movs	r3, #2
 8001730:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001732:	2303      	movs	r3, #3
 8001734:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001736:	f7fe ff5b 	bl	80005f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800173a:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800173c:	a902      	add	r1, sp, #8
 800173e:	4808      	ldr	r0, [pc, #32]	; (8001760 <HAL_SPI_MspInit+0x7c>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001740:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001742:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001744:	9402      	str	r4, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001746:	f7fe ff53 	bl	80005f0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 800174a:	4a06      	ldr	r2, [pc, #24]	; (8001764 <HAL_SPI_MspInit+0x80>)
 800174c:	6853      	ldr	r3, [r2, #4]
 800174e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001752:	f043 0301 	orr.w	r3, r3, #1
 8001756:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001758:	b007      	add	sp, #28
 800175a:	bd30      	pop	{r4, r5, pc}
 800175c:	40013000 	.word	0x40013000
 8001760:	40010c00 	.word	0x40010c00
 8001764:	40010000 	.word	0x40010000

08001768 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001768:	b510      	push	{r4, lr}
 800176a:	4604      	mov	r4, r0
 800176c:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800176e:	2210      	movs	r2, #16
 8001770:	2100      	movs	r1, #0
 8001772:	a802      	add	r0, sp, #8
 8001774:	f000 f92a 	bl	80019cc <memset>
  if(htim_encoder->Instance==TIM1)
 8001778:	6822      	ldr	r2, [r4, #0]
 800177a:	4b10      	ldr	r3, [pc, #64]	; (80017bc <HAL_TIM_Encoder_MspInit+0x54>)
 800177c:	429a      	cmp	r2, r3
 800177e:	d11a      	bne.n	80017b6 <HAL_TIM_Encoder_MspInit+0x4e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001780:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8001784:	699a      	ldr	r2, [r3, #24]
    PA9     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = ENC_B_Pin|ENC_A_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001786:	a902      	add	r1, sp, #8
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001788:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800178c:	619a      	str	r2, [r3, #24]
 800178e:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001790:	480b      	ldr	r0, [pc, #44]	; (80017c0 <HAL_TIM_Encoder_MspInit+0x58>)
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001792:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001796:	9200      	str	r2, [sp, #0]
 8001798:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800179a:	699a      	ldr	r2, [r3, #24]
 800179c:	f042 0204 	orr.w	r2, r2, #4
 80017a0:	619a      	str	r2, [r3, #24]
 80017a2:	699b      	ldr	r3, [r3, #24]
 80017a4:	f003 0304 	and.w	r3, r3, #4
 80017a8:	9301      	str	r3, [sp, #4]
 80017aa:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = ENC_B_Pin|ENC_A_Pin;
 80017ac:	f44f 7340 	mov.w	r3, #768	; 0x300
 80017b0:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017b2:	f7fe ff1d 	bl	80005f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80017b6:	b006      	add	sp, #24
 80017b8:	bd10      	pop	{r4, pc}
 80017ba:	bf00      	nop
 80017bc:	40012c00 	.word	0x40012c00
 80017c0:	40010800 	.word	0x40010800

080017c4 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM6)
 80017c4:	6802      	ldr	r2, [r0, #0]
 80017c6:	4b08      	ldr	r3, [pc, #32]	; (80017e8 <HAL_TIM_Base_MspInit+0x24>)
{
 80017c8:	b082      	sub	sp, #8
  if(htim_base->Instance==TIM6)
 80017ca:	429a      	cmp	r2, r3
 80017cc:	d10a      	bne.n	80017e4 <HAL_TIM_Base_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80017ce:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80017d2:	69da      	ldr	r2, [r3, #28]
 80017d4:	f042 0210 	orr.w	r2, r2, #16
 80017d8:	61da      	str	r2, [r3, #28]
 80017da:	69db      	ldr	r3, [r3, #28]
 80017dc:	f003 0310 	and.w	r3, r3, #16
 80017e0:	9301      	str	r3, [sp, #4]
 80017e2:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80017e4:	b002      	add	sp, #8
 80017e6:	4770      	bx	lr
 80017e8:	40001000 	.word	0x40001000

080017ec <HAL_UART_MspInit>:
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ec:	2210      	movs	r2, #16
{
 80017ee:	b510      	push	{r4, lr}
 80017f0:	4604      	mov	r4, r0
 80017f2:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017f4:	eb0d 0002 	add.w	r0, sp, r2
 80017f8:	2100      	movs	r1, #0
 80017fa:	f000 f8e7 	bl	80019cc <memset>
  if(huart->Instance==USART2)
 80017fe:	6823      	ldr	r3, [r4, #0]
 8001800:	4a2f      	ldr	r2, [pc, #188]	; (80018c0 <HAL_UART_MspInit+0xd4>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d127      	bne.n	8001856 <HAL_UART_MspInit+0x6a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001806:	4b2f      	ldr	r3, [pc, #188]	; (80018c4 <HAL_UART_MspInit+0xd8>)
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001808:	a904      	add	r1, sp, #16
    __HAL_RCC_USART2_CLK_ENABLE();
 800180a:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800180c:	482e      	ldr	r0, [pc, #184]	; (80018c8 <HAL_UART_MspInit+0xdc>)
    __HAL_RCC_USART2_CLK_ENABLE();
 800180e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001812:	61da      	str	r2, [r3, #28]
 8001814:	69da      	ldr	r2, [r3, #28]
 8001816:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800181a:	9200      	str	r2, [sp, #0]
 800181c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800181e:	699a      	ldr	r2, [r3, #24]
 8001820:	f042 0204 	orr.w	r2, r2, #4
 8001824:	619a      	str	r2, [r3, #24]
 8001826:	699b      	ldr	r3, [r3, #24]
 8001828:	f003 0304 	and.w	r3, r3, #4
 800182c:	9301      	str	r3, [sp, #4]
 800182e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001830:	2304      	movs	r3, #4
 8001832:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001834:	2302      	movs	r3, #2
 8001836:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001838:	2303      	movs	r3, #3
 800183a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800183c:	f7fe fed8 	bl	80005f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001840:	2308      	movs	r3, #8
 8001842:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001844:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001846:	a904      	add	r1, sp, #16
 8001848:	481f      	ldr	r0, [pc, #124]	; (80018c8 <HAL_UART_MspInit+0xdc>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800184a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184c:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800184e:	f7fe fecf 	bl	80005f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001852:	b008      	add	sp, #32
 8001854:	bd10      	pop	{r4, pc}
  else if(huart->Instance==USART3)
 8001856:	4a1d      	ldr	r2, [pc, #116]	; (80018cc <HAL_UART_MspInit+0xe0>)
 8001858:	4293      	cmp	r3, r2
 800185a:	d1fa      	bne.n	8001852 <HAL_UART_MspInit+0x66>
    __HAL_RCC_USART3_CLK_ENABLE();
 800185c:	4b19      	ldr	r3, [pc, #100]	; (80018c4 <HAL_UART_MspInit+0xd8>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800185e:	a904      	add	r1, sp, #16
    __HAL_RCC_USART3_CLK_ENABLE();
 8001860:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001862:	481b      	ldr	r0, [pc, #108]	; (80018d0 <HAL_UART_MspInit+0xe4>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8001864:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001868:	61da      	str	r2, [r3, #28]
 800186a:	69da      	ldr	r2, [r3, #28]
 800186c:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8001870:	9202      	str	r2, [sp, #8]
 8001872:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001874:	699a      	ldr	r2, [r3, #24]
 8001876:	f042 0210 	orr.w	r2, r2, #16
 800187a:	619a      	str	r2, [r3, #24]
 800187c:	699b      	ldr	r3, [r3, #24]
 800187e:	f003 0310 	and.w	r3, r3, #16
 8001882:	9303      	str	r3, [sp, #12]
 8001884:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001886:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800188a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800188c:	2302      	movs	r3, #2
 800188e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001890:	2303      	movs	r3, #3
 8001892:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001894:	f7fe feac 	bl	80005f0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001898:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800189c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800189e:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018a0:	a904      	add	r1, sp, #16
 80018a2:	480b      	ldr	r0, [pc, #44]	; (80018d0 <HAL_UART_MspInit+0xe4>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018a4:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a6:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018a8:	f7fe fea2 	bl	80005f0 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_USART3_PARTIAL();
 80018ac:	4a09      	ldr	r2, [pc, #36]	; (80018d4 <HAL_UART_MspInit+0xe8>)
 80018ae:	6853      	ldr	r3, [r2, #4]
 80018b0:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80018b4:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80018b8:	f043 0310 	orr.w	r3, r3, #16
 80018bc:	6053      	str	r3, [r2, #4]
}
 80018be:	e7c8      	b.n	8001852 <HAL_UART_MspInit+0x66>
 80018c0:	40004400 	.word	0x40004400
 80018c4:	40021000 	.word	0x40021000
 80018c8:	40010800 	.word	0x40010800
 80018cc:	40004800 	.word	0x40004800
 80018d0:	40011000 	.word	0x40011000
 80018d4:	40010000 	.word	0x40010000

080018d8 <NMI_Handler>:
 80018d8:	4770      	bx	lr

080018da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018da:	e7fe      	b.n	80018da <HardFault_Handler>

080018dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018dc:	e7fe      	b.n	80018dc <MemManage_Handler>

080018de <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018de:	e7fe      	b.n	80018de <BusFault_Handler>

080018e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018e0:	e7fe      	b.n	80018e0 <UsageFault_Handler>

080018e2 <SVC_Handler>:
 80018e2:	4770      	bx	lr

080018e4 <DebugMon_Handler>:
 80018e4:	4770      	bx	lr

080018e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018e6:	4770      	bx	lr

080018e8 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018e8:	f7fe bcd2 	b.w	8000290 <HAL_IncTick>

080018ec <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80018ec:	4b0f      	ldr	r3, [pc, #60]	; (800192c <SystemInit+0x40>)
 80018ee:	681a      	ldr	r2, [r3, #0]
 80018f0:	f042 0201 	orr.w	r2, r2, #1
 80018f4:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80018f6:	6859      	ldr	r1, [r3, #4]
 80018f8:	4a0d      	ldr	r2, [pc, #52]	; (8001930 <SystemInit+0x44>)
 80018fa:	400a      	ands	r2, r1
 80018fc:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001904:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001908:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800190a:	681a      	ldr	r2, [r3, #0]
 800190c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001910:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001912:	685a      	ldr	r2, [r3, #4]
 8001914:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8001918:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800191a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800191e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001920:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001924:	4b03      	ldr	r3, [pc, #12]	; (8001934 <SystemInit+0x48>)
 8001926:	609a      	str	r2, [r3, #8]
 8001928:	4770      	bx	lr
 800192a:	bf00      	nop
 800192c:	40021000 	.word	0x40021000
 8001930:	f8ff0000 	.word	0xf8ff0000
 8001934:	e000ed00 	.word	0xe000ed00

08001938 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001938:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800193a:	e003      	b.n	8001944 <LoopCopyDataInit>

0800193c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800193c:	4b0b      	ldr	r3, [pc, #44]	; (800196c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800193e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001940:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001942:	3104      	adds	r1, #4

08001944 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001944:	480a      	ldr	r0, [pc, #40]	; (8001970 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001946:	4b0b      	ldr	r3, [pc, #44]	; (8001974 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001948:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800194a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800194c:	d3f6      	bcc.n	800193c <CopyDataInit>
  ldr r2, =_sbss
 800194e:	4a0a      	ldr	r2, [pc, #40]	; (8001978 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001950:	e002      	b.n	8001958 <LoopFillZerobss>

08001952 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001952:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001954:	f842 3b04 	str.w	r3, [r2], #4

08001958 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001958:	4b08      	ldr	r3, [pc, #32]	; (800197c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800195a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800195c:	d3f9      	bcc.n	8001952 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800195e:	f7ff ffc5 	bl	80018ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001962:	f000 f80f 	bl	8001984 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001966:	f7ff fcbb 	bl	80012e0 <main>
  bx lr
 800196a:	4770      	bx	lr
  ldr r3, =_sidata
 800196c:	08001a24 	.word	0x08001a24
  ldr r0, =_sdata
 8001970:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001974:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8001978:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 800197c:	2000025c 	.word	0x2000025c

08001980 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001980:	e7fe      	b.n	8001980 <ADC1_2_IRQHandler>
	...

08001984 <__libc_init_array>:
 8001984:	b570      	push	{r4, r5, r6, lr}
 8001986:	2500      	movs	r5, #0
 8001988:	4e0c      	ldr	r6, [pc, #48]	; (80019bc <__libc_init_array+0x38>)
 800198a:	4c0d      	ldr	r4, [pc, #52]	; (80019c0 <__libc_init_array+0x3c>)
 800198c:	1ba4      	subs	r4, r4, r6
 800198e:	10a4      	asrs	r4, r4, #2
 8001990:	42a5      	cmp	r5, r4
 8001992:	d109      	bne.n	80019a8 <__libc_init_array+0x24>
 8001994:	f000 f822 	bl	80019dc <_init>
 8001998:	2500      	movs	r5, #0
 800199a:	4e0a      	ldr	r6, [pc, #40]	; (80019c4 <__libc_init_array+0x40>)
 800199c:	4c0a      	ldr	r4, [pc, #40]	; (80019c8 <__libc_init_array+0x44>)
 800199e:	1ba4      	subs	r4, r4, r6
 80019a0:	10a4      	asrs	r4, r4, #2
 80019a2:	42a5      	cmp	r5, r4
 80019a4:	d105      	bne.n	80019b2 <__libc_init_array+0x2e>
 80019a6:	bd70      	pop	{r4, r5, r6, pc}
 80019a8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80019ac:	4798      	blx	r3
 80019ae:	3501      	adds	r5, #1
 80019b0:	e7ee      	b.n	8001990 <__libc_init_array+0xc>
 80019b2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80019b6:	4798      	blx	r3
 80019b8:	3501      	adds	r5, #1
 80019ba:	e7f2      	b.n	80019a2 <__libc_init_array+0x1e>
 80019bc:	08001a1c 	.word	0x08001a1c
 80019c0:	08001a1c 	.word	0x08001a1c
 80019c4:	08001a1c 	.word	0x08001a1c
 80019c8:	08001a20 	.word	0x08001a20

080019cc <memset>:
 80019cc:	4603      	mov	r3, r0
 80019ce:	4402      	add	r2, r0
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d100      	bne.n	80019d6 <memset+0xa>
 80019d4:	4770      	bx	lr
 80019d6:	f803 1b01 	strb.w	r1, [r3], #1
 80019da:	e7f9      	b.n	80019d0 <memset+0x4>

080019dc <_init>:
 80019dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019de:	bf00      	nop
 80019e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80019e2:	bc08      	pop	{r3}
 80019e4:	469e      	mov	lr, r3
 80019e6:	4770      	bx	lr

080019e8 <_fini>:
 80019e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019ea:	bf00      	nop
 80019ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80019ee:	bc08      	pop	{r3}
 80019f0:	469e      	mov	lr, r3
 80019f2:	4770      	bx	lr
