
RC_CONTORLER_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005638  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000010f4  0800581c  0800581c  0001581c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08006910  08006910  00016910  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08006914  08006914  00016914  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000080  20000000  08006918  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000790  20000080  08006998  00020080  2**3
                  ALLOC
  7 ._user_heap_stack 00000600  20000810  08006998  00020810  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001ec79  00000000  00000000  000200a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00003bf6  00000000  00000000  0003ed22  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000dfb0  00000000  00000000  00042918  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001188  00000000  00000000  000508c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001958  00000000  00000000  00051a50  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000a28f  00000000  00000000  000533a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00006154  00000000  00000000  0005d637  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0006378b  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000040dc  00000000  00000000  00063808  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000080 	.word	0x20000080
 8000200:	00000000 	.word	0x00000000
 8000204:	08005804 	.word	0x08005804

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000084 	.word	0x20000084
 8000220:	08005804 	.word	0x08005804

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000234:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000236:	4b0e      	ldr	r3, [pc, #56]	; (8000270 <HAL_InitTick+0x3c>)
{
 8000238:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800023a:	7818      	ldrb	r0, [r3, #0]
 800023c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000240:	fbb3 f3f0 	udiv	r3, r3, r0
 8000244:	4a0b      	ldr	r2, [pc, #44]	; (8000274 <HAL_InitTick+0x40>)
 8000246:	6810      	ldr	r0, [r2, #0]
 8000248:	fbb0 f0f3 	udiv	r0, r0, r3
 800024c:	f000 fad2 	bl	80007f4 <HAL_SYSTICK_Config>
 8000250:	4604      	mov	r4, r0
 8000252:	b958      	cbnz	r0, 800026c <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000254:	2d0f      	cmp	r5, #15
 8000256:	d809      	bhi.n	800026c <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000258:	4602      	mov	r2, r0
 800025a:	4629      	mov	r1, r5
 800025c:	f04f 30ff 	mov.w	r0, #4294967295
 8000260:	f000 fa86 	bl	8000770 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000264:	4b04      	ldr	r3, [pc, #16]	; (8000278 <HAL_InitTick+0x44>)
 8000266:	4620      	mov	r0, r4
 8000268:	601d      	str	r5, [r3, #0]
 800026a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800026c:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800026e:	bd38      	pop	{r3, r4, r5, pc}
 8000270:	20000000 	.word	0x20000000
 8000274:	20000018 	.word	0x20000018
 8000278:	20000004 	.word	0x20000004

0800027c <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800027c:	4a07      	ldr	r2, [pc, #28]	; (800029c <HAL_Init+0x20>)
{
 800027e:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000280:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000282:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000284:	f043 0310 	orr.w	r3, r3, #16
 8000288:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800028a:	f000 fa5f 	bl	800074c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800028e:	2000      	movs	r0, #0
 8000290:	f7ff ffd0 	bl	8000234 <HAL_InitTick>
  HAL_MspInit();
 8000294:	f003 fec8 	bl	8004028 <HAL_MspInit>
}
 8000298:	2000      	movs	r0, #0
 800029a:	bd08      	pop	{r3, pc}
 800029c:	40022000 	.word	0x40022000

080002a0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80002a0:	4a03      	ldr	r2, [pc, #12]	; (80002b0 <HAL_IncTick+0x10>)
 80002a2:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <HAL_IncTick+0x14>)
 80002a4:	6811      	ldr	r1, [r2, #0]
 80002a6:	781b      	ldrb	r3, [r3, #0]
 80002a8:	440b      	add	r3, r1
 80002aa:	6013      	str	r3, [r2, #0]
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop
 80002b0:	2000055c 	.word	0x2000055c
 80002b4:	20000000 	.word	0x20000000

080002b8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80002b8:	4b01      	ldr	r3, [pc, #4]	; (80002c0 <HAL_GetTick+0x8>)
 80002ba:	6818      	ldr	r0, [r3, #0]
}
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop
 80002c0:	2000055c 	.word	0x2000055c

080002c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80002c4:	b538      	push	{r3, r4, r5, lr}
 80002c6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80002c8:	f7ff fff6 	bl	80002b8 <HAL_GetTick>
 80002cc:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80002ce:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80002d0:	bf1e      	ittt	ne
 80002d2:	4b04      	ldrne	r3, [pc, #16]	; (80002e4 <HAL_Delay+0x20>)
 80002d4:	781b      	ldrbne	r3, [r3, #0]
 80002d6:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80002d8:	f7ff ffee 	bl	80002b8 <HAL_GetTick>
 80002dc:	1b40      	subs	r0, r0, r5
 80002de:	4284      	cmp	r4, r0
 80002e0:	d8fa      	bhi.n	80002d8 <HAL_Delay+0x14>
  {
  }
}
 80002e2:	bd38      	pop	{r3, r4, r5, pc}
 80002e4:	20000000 	.word	0x20000000

080002e8 <HAL_ADC_ConvCpltCallback>:
 80002e8:	4770      	bx	lr

080002ea <ADC_DMAConvCplt>:
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80002ea:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 80002ec:	b510      	push	{r4, lr}
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80002ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80002f0:	f012 0f50 	tst.w	r2, #80	; 0x50
 80002f4:	d11b      	bne.n	800032e <ADC_DMAConvCplt+0x44>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80002f6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80002f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80002fc:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80002fe:	681a      	ldr	r2, [r3, #0]
 8000300:	6892      	ldr	r2, [r2, #8]
 8000302:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8000306:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 800030a:	d10c      	bne.n	8000326 <ADC_DMAConvCplt+0x3c>
 800030c:	7b1a      	ldrb	r2, [r3, #12]
 800030e:	b952      	cbnz	r2, 8000326 <ADC_DMAConvCplt+0x3c>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000310:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000312:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000316:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000318:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800031a:	04d2      	lsls	r2, r2, #19
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800031c:	bf5e      	ittt	pl
 800031e:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
 8000320:	f042 0201 	orrpl.w	r2, r2, #1
 8000324:	629a      	strpl	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8000326:	4618      	mov	r0, r3
 8000328:	f7ff ffde 	bl	80002e8 <HAL_ADC_ConvCpltCallback>
 800032c:	bd10      	pop	{r4, pc}
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800032e:	6a1b      	ldr	r3, [r3, #32]
  }
}
 8000330:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8000334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000336:	4718      	bx	r3

08000338 <HAL_ADC_ConvHalfCpltCallback>:
 8000338:	4770      	bx	lr

0800033a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800033a:	b508      	push	{r3, lr}
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800033c:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800033e:	f7ff fffb 	bl	8000338 <HAL_ADC_ConvHalfCpltCallback>
 8000342:	bd08      	pop	{r3, pc}

08000344 <HAL_ADC_ErrorCallback>:
{
 8000344:	4770      	bx	lr

08000346 <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000346:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 8000348:	b508      	push	{r3, lr}
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800034a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800034c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000350:	6283      	str	r3, [r0, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8000352:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000354:	f043 0304 	orr.w	r3, r3, #4
 8000358:	62c3      	str	r3, [r0, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800035a:	f7ff fff3 	bl	8000344 <HAL_ADC_ErrorCallback>
 800035e:	bd08      	pop	{r3, pc}

08000360 <HAL_ADC_ConfigChannel>:
  __IO uint32_t wait_loop_index = 0U;
 8000360:	2300      	movs	r3, #0
{ 
 8000362:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 8000364:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8000366:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 800036a:	2b01      	cmp	r3, #1
 800036c:	d074      	beq.n	8000458 <HAL_ADC_ConfigChannel+0xf8>
 800036e:	2301      	movs	r3, #1
  if (sConfig->Rank < 7U)
 8000370:	684d      	ldr	r5, [r1, #4]
  __HAL_LOCK(hadc);
 8000372:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  if (sConfig->Rank < 7U)
 8000376:	2d06      	cmp	r5, #6
 8000378:	6802      	ldr	r2, [r0, #0]
 800037a:	ea4f 0385 	mov.w	r3, r5, lsl #2
 800037e:	680c      	ldr	r4, [r1, #0]
 8000380:	d825      	bhi.n	80003ce <HAL_ADC_ConfigChannel+0x6e>
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000382:	442b      	add	r3, r5
 8000384:	251f      	movs	r5, #31
 8000386:	6b56      	ldr	r6, [r2, #52]	; 0x34
 8000388:	3b05      	subs	r3, #5
 800038a:	409d      	lsls	r5, r3
 800038c:	ea26 0505 	bic.w	r5, r6, r5
 8000390:	fa04 f303 	lsl.w	r3, r4, r3
 8000394:	432b      	orrs	r3, r5
 8000396:	6353      	str	r3, [r2, #52]	; 0x34
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000398:	2c09      	cmp	r4, #9
 800039a:	ea4f 0344 	mov.w	r3, r4, lsl #1
 800039e:	688d      	ldr	r5, [r1, #8]
 80003a0:	d92f      	bls.n	8000402 <HAL_ADC_ConfigChannel+0xa2>
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80003a2:	2607      	movs	r6, #7
 80003a4:	4423      	add	r3, r4
 80003a6:	68d1      	ldr	r1, [r2, #12]
 80003a8:	3b1e      	subs	r3, #30
 80003aa:	409e      	lsls	r6, r3
 80003ac:	ea21 0106 	bic.w	r1, r1, r6
 80003b0:	fa05 f303 	lsl.w	r3, r5, r3
 80003b4:	430b      	orrs	r3, r1
 80003b6:	60d3      	str	r3, [r2, #12]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80003b8:	f1a4 0310 	sub.w	r3, r4, #16
 80003bc:	2b01      	cmp	r3, #1
 80003be:	d92b      	bls.n	8000418 <HAL_ADC_ConfigChannel+0xb8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80003c0:	2300      	movs	r3, #0
  __HAL_UNLOCK(hadc);
 80003c2:	2200      	movs	r2, #0
 80003c4:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
}
 80003c8:	4618      	mov	r0, r3
 80003ca:	b002      	add	sp, #8
 80003cc:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13U)
 80003ce:	2d0c      	cmp	r5, #12
 80003d0:	d80b      	bhi.n	80003ea <HAL_ADC_ConfigChannel+0x8a>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80003d2:	442b      	add	r3, r5
 80003d4:	251f      	movs	r5, #31
 80003d6:	6b16      	ldr	r6, [r2, #48]	; 0x30
 80003d8:	3b23      	subs	r3, #35	; 0x23
 80003da:	409d      	lsls	r5, r3
 80003dc:	ea26 0505 	bic.w	r5, r6, r5
 80003e0:	fa04 f303 	lsl.w	r3, r4, r3
 80003e4:	432b      	orrs	r3, r5
 80003e6:	6313      	str	r3, [r2, #48]	; 0x30
 80003e8:	e7d6      	b.n	8000398 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80003ea:	442b      	add	r3, r5
 80003ec:	251f      	movs	r5, #31
 80003ee:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
 80003f0:	3b41      	subs	r3, #65	; 0x41
 80003f2:	409d      	lsls	r5, r3
 80003f4:	ea26 0505 	bic.w	r5, r6, r5
 80003f8:	fa04 f303 	lsl.w	r3, r4, r3
 80003fc:	432b      	orrs	r3, r5
 80003fe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000400:	e7ca      	b.n	8000398 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000402:	2607      	movs	r6, #7
 8000404:	6911      	ldr	r1, [r2, #16]
 8000406:	4423      	add	r3, r4
 8000408:	409e      	lsls	r6, r3
 800040a:	ea21 0106 	bic.w	r1, r1, r6
 800040e:	fa05 f303 	lsl.w	r3, r5, r3
 8000412:	430b      	orrs	r3, r1
 8000414:	6113      	str	r3, [r2, #16]
 8000416:	e7cf      	b.n	80003b8 <HAL_ADC_ConfigChannel+0x58>
    if (hadc->Instance == ADC1)
 8000418:	4b10      	ldr	r3, [pc, #64]	; (800045c <HAL_ADC_ConfigChannel+0xfc>)
 800041a:	429a      	cmp	r2, r3
 800041c:	d116      	bne.n	800044c <HAL_ADC_ConfigChannel+0xec>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800041e:	6893      	ldr	r3, [r2, #8]
 8000420:	021b      	lsls	r3, r3, #8
 8000422:	d4cd      	bmi.n	80003c0 <HAL_ADC_ConfigChannel+0x60>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000424:	6893      	ldr	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000426:	2c10      	cmp	r4, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000428:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800042c:	6093      	str	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800042e:	d1c7      	bne.n	80003c0 <HAL_ADC_ConfigChannel+0x60>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000430:	4b0b      	ldr	r3, [pc, #44]	; (8000460 <HAL_ADC_ConfigChannel+0x100>)
 8000432:	4a0c      	ldr	r2, [pc, #48]	; (8000464 <HAL_ADC_ConfigChannel+0x104>)
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	fbb3 f2f2 	udiv	r2, r3, r2
 800043a:	230a      	movs	r3, #10
 800043c:	4353      	muls	r3, r2
            wait_loop_index--;
 800043e:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8000440:	9b01      	ldr	r3, [sp, #4]
 8000442:	2b00      	cmp	r3, #0
 8000444:	d0bc      	beq.n	80003c0 <HAL_ADC_ConfigChannel+0x60>
            wait_loop_index--;
 8000446:	9b01      	ldr	r3, [sp, #4]
 8000448:	3b01      	subs	r3, #1
 800044a:	e7f8      	b.n	800043e <HAL_ADC_ConfigChannel+0xde>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800044c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800044e:	f043 0320 	orr.w	r3, r3, #32
 8000452:	6283      	str	r3, [r0, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 8000454:	2301      	movs	r3, #1
 8000456:	e7b4      	b.n	80003c2 <HAL_ADC_ConfigChannel+0x62>
  __HAL_LOCK(hadc);
 8000458:	2302      	movs	r3, #2
 800045a:	e7b5      	b.n	80003c8 <HAL_ADC_ConfigChannel+0x68>
 800045c:	40012400 	.word	0x40012400
 8000460:	20000018 	.word	0x20000018
 8000464:	000f4240 	.word	0x000f4240

08000468 <ADC_Enable>:
  __IO uint32_t wait_loop_index = 0U;
 8000468:	2300      	movs	r3, #0
{
 800046a:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 800046c:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 800046e:	6803      	ldr	r3, [r0, #0]
{
 8000470:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000472:	689a      	ldr	r2, [r3, #8]
 8000474:	07d2      	lsls	r2, r2, #31
 8000476:	d502      	bpl.n	800047e <ADC_Enable+0x16>
  return HAL_OK;
 8000478:	2000      	movs	r0, #0
}
 800047a:	b002      	add	sp, #8
 800047c:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_ADC_ENABLE(hadc);
 800047e:	689a      	ldr	r2, [r3, #8]
 8000480:	f042 0201 	orr.w	r2, r2, #1
 8000484:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000486:	4b12      	ldr	r3, [pc, #72]	; (80004d0 <ADC_Enable+0x68>)
 8000488:	4a12      	ldr	r2, [pc, #72]	; (80004d4 <ADC_Enable+0x6c>)
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	fbb3 f3f2 	udiv	r3, r3, r2
      wait_loop_index--;
 8000490:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8000492:	9b01      	ldr	r3, [sp, #4]
 8000494:	b9c3      	cbnz	r3, 80004c8 <ADC_Enable+0x60>
    tickstart = HAL_GetTick();
 8000496:	f7ff ff0f 	bl	80002b8 <HAL_GetTick>
 800049a:	4606      	mov	r6, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 800049c:	6823      	ldr	r3, [r4, #0]
 800049e:	689d      	ldr	r5, [r3, #8]
 80004a0:	f015 0501 	ands.w	r5, r5, #1
 80004a4:	d1e8      	bne.n	8000478 <ADC_Enable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80004a6:	f7ff ff07 	bl	80002b8 <HAL_GetTick>
 80004aa:	1b80      	subs	r0, r0, r6
 80004ac:	2802      	cmp	r0, #2
 80004ae:	d9f5      	bls.n	800049c <ADC_Enable+0x34>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80004b0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        __HAL_UNLOCK(hadc);
 80004b2:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80004b6:	f043 0310 	orr.w	r3, r3, #16
 80004ba:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80004bc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        __HAL_UNLOCK(hadc);
 80004be:	2001      	movs	r0, #1
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80004c0:	f043 0301 	orr.w	r3, r3, #1
 80004c4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80004c6:	e7d8      	b.n	800047a <ADC_Enable+0x12>
      wait_loop_index--;
 80004c8:	9b01      	ldr	r3, [sp, #4]
 80004ca:	3b01      	subs	r3, #1
 80004cc:	e7e0      	b.n	8000490 <ADC_Enable+0x28>
 80004ce:	bf00      	nop
 80004d0:	20000018 	.word	0x20000018
 80004d4:	000f4240 	.word	0x000f4240

080004d8 <HAL_ADC_Start_DMA>:
{
 80004d8:	e92d 41d8 	stmdb	sp!, {r3, r4, r6, r7, r8, lr}
 80004dc:	4690      	mov	r8, r2
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80004de:	4b40      	ldr	r3, [pc, #256]	; (80005e0 <HAL_ADC_Start_DMA+0x108>)
 80004e0:	6802      	ldr	r2, [r0, #0]
{
 80004e2:	4604      	mov	r4, r0
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80004e4:	429a      	cmp	r2, r3
{
 80004e6:	460f      	mov	r7, r1
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80004e8:	d002      	beq.n	80004f0 <HAL_ADC_Start_DMA+0x18>
 80004ea:	493e      	ldr	r1, [pc, #248]	; (80005e4 <HAL_ADC_Start_DMA+0x10c>)
 80004ec:	428a      	cmp	r2, r1
 80004ee:	d103      	bne.n	80004f8 <HAL_ADC_Start_DMA+0x20>
 80004f0:	685b      	ldr	r3, [r3, #4]
 80004f2:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 80004f6:	d16e      	bne.n	80005d6 <HAL_ADC_Start_DMA+0xfe>
    __HAL_LOCK(hadc);
 80004f8:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80004fc:	2b01      	cmp	r3, #1
 80004fe:	d06c      	beq.n	80005da <HAL_ADC_Start_DMA+0x102>
 8000500:	2301      	movs	r3, #1
    tmp_hal_status = ADC_Enable(hadc);
 8000502:	4620      	mov	r0, r4
    __HAL_LOCK(hadc);
 8000504:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    tmp_hal_status = ADC_Enable(hadc);
 8000508:	f7ff ffae 	bl	8000468 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 800050c:	4606      	mov	r6, r0
 800050e:	2800      	cmp	r0, #0
 8000510:	d15d      	bne.n	80005ce <HAL_ADC_Start_DMA+0xf6>
      ADC_STATE_CLR_SET(hadc->State,
 8000512:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000514:	6821      	ldr	r1, [r4, #0]
      ADC_STATE_CLR_SET(hadc->State,
 8000516:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800051a:	4b32      	ldr	r3, [pc, #200]	; (80005e4 <HAL_ADC_Start_DMA+0x10c>)
      ADC_STATE_CLR_SET(hadc->State,
 800051c:	f020 0001 	bic.w	r0, r0, #1
 8000520:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000524:	4299      	cmp	r1, r3
      ADC_STATE_CLR_SET(hadc->State,
 8000526:	62a0      	str	r0, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000528:	d104      	bne.n	8000534 <HAL_ADC_Start_DMA+0x5c>
 800052a:	4a2d      	ldr	r2, [pc, #180]	; (80005e0 <HAL_ADC_Start_DMA+0x108>)
 800052c:	6853      	ldr	r3, [r2, #4]
 800052e:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 8000532:	d13e      	bne.n	80005b2 <HAL_ADC_Start_DMA+0xda>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000534:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000536:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800053a:	62a3      	str	r3, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800053c:	684b      	ldr	r3, [r1, #4]
 800053e:	055a      	lsls	r2, r3, #21
 8000540:	d505      	bpl.n	800054e <HAL_ADC_Start_DMA+0x76>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000542:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000544:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000548:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800054c:	62a3      	str	r3, [r4, #40]	; 0x28
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800054e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000550:	6a20      	ldr	r0, [r4, #32]
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000552:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000556:	bf18      	it	ne
 8000558:	6ae3      	ldrne	r3, [r4, #44]	; 0x2c
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800055a:	463a      	mov	r2, r7
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800055c:	bf18      	it	ne
 800055e:	f023 0306 	bicne.w	r3, r3, #6
        ADC_CLEAR_ERRORCODE(hadc);
 8000562:	62e3      	str	r3, [r4, #44]	; 0x2c
      __HAL_UNLOCK(hadc);
 8000564:	2300      	movs	r3, #0
 8000566:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800056a:	4b1f      	ldr	r3, [pc, #124]	; (80005e8 <HAL_ADC_Start_DMA+0x110>)
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800056c:	314c      	adds	r1, #76	; 0x4c
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800056e:	6283      	str	r3, [r0, #40]	; 0x28
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000570:	4b1e      	ldr	r3, [pc, #120]	; (80005ec <HAL_ADC_Start_DMA+0x114>)
 8000572:	62c3      	str	r3, [r0, #44]	; 0x2c
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000574:	4b1e      	ldr	r3, [pc, #120]	; (80005f0 <HAL_ADC_Start_DMA+0x118>)
 8000576:	6303      	str	r3, [r0, #48]	; 0x30
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000578:	f06f 0302 	mvn.w	r3, #2
 800057c:	f841 3c4c 	str.w	r3, [r1, #-76]
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8000580:	f851 3c44 	ldr.w	r3, [r1, #-68]
 8000584:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000588:	f841 3c44 	str.w	r3, [r1, #-68]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800058c:	4643      	mov	r3, r8
 800058e:	f000 f987 	bl	80008a0 <HAL_DMA_Start_IT>
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8000592:	6823      	ldr	r3, [r4, #0]
 8000594:	689a      	ldr	r2, [r3, #8]
 8000596:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 800059a:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800059e:	689a      	ldr	r2, [r3, #8]
 80005a0:	bf0c      	ite	eq
 80005a2:	f442 02a0 	orreq.w	r2, r2, #5242880	; 0x500000
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80005a6:	f442 1280 	orrne.w	r2, r2, #1048576	; 0x100000
 80005aa:	609a      	str	r2, [r3, #8]
}
 80005ac:	4630      	mov	r0, r6
 80005ae:	e8bd 81d8 	ldmia.w	sp!, {r3, r4, r6, r7, r8, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80005b2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80005b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005b8:	62a3      	str	r3, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80005ba:	6853      	ldr	r3, [r2, #4]
 80005bc:	055b      	lsls	r3, r3, #21
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80005be:	bf41      	itttt	mi
 80005c0:	6aa0      	ldrmi	r0, [r4, #40]	; 0x28
 80005c2:	f420 5040 	bicmi.w	r0, r0, #12288	; 0x3000
 80005c6:	f440 5080 	orrmi.w	r0, r0, #4096	; 0x1000
 80005ca:	62a0      	strmi	r0, [r4, #40]	; 0x28
 80005cc:	e7bf      	b.n	800054e <HAL_ADC_Start_DMA+0x76>
      __HAL_UNLOCK(hadc);
 80005ce:	2300      	movs	r3, #0
 80005d0:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 80005d4:	e7ea      	b.n	80005ac <HAL_ADC_Start_DMA+0xd4>
    tmp_hal_status = HAL_ERROR;
 80005d6:	2601      	movs	r6, #1
 80005d8:	e7e8      	b.n	80005ac <HAL_ADC_Start_DMA+0xd4>
    __HAL_LOCK(hadc);
 80005da:	2602      	movs	r6, #2
 80005dc:	e7e6      	b.n	80005ac <HAL_ADC_Start_DMA+0xd4>
 80005de:	bf00      	nop
 80005e0:	40012400 	.word	0x40012400
 80005e4:	40012800 	.word	0x40012800
 80005e8:	080002eb 	.word	0x080002eb
 80005ec:	0800033b 	.word	0x0800033b
 80005f0:	08000347 	.word	0x08000347

080005f4 <ADC_ConversionStop_Disable>:
{
 80005f4:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) != RESET)
 80005f6:	6803      	ldr	r3, [r0, #0]
{
 80005f8:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 80005fa:	689a      	ldr	r2, [r3, #8]
 80005fc:	07d2      	lsls	r2, r2, #31
 80005fe:	d401      	bmi.n	8000604 <ADC_ConversionStop_Disable+0x10>
  return HAL_OK;
 8000600:	2000      	movs	r0, #0
 8000602:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 8000604:	689a      	ldr	r2, [r3, #8]
 8000606:	f022 0201 	bic.w	r2, r2, #1
 800060a:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 800060c:	f7ff fe54 	bl	80002b8 <HAL_GetTick>
 8000610:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000612:	6823      	ldr	r3, [r4, #0]
 8000614:	689b      	ldr	r3, [r3, #8]
 8000616:	07db      	lsls	r3, r3, #31
 8000618:	d5f2      	bpl.n	8000600 <ADC_ConversionStop_Disable+0xc>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800061a:	f7ff fe4d 	bl	80002b8 <HAL_GetTick>
 800061e:	1b40      	subs	r0, r0, r5
 8000620:	2802      	cmp	r0, #2
 8000622:	d9f6      	bls.n	8000612 <ADC_ConversionStop_Disable+0x1e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000624:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000626:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000628:	f043 0310 	orr.w	r3, r3, #16
 800062c:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800062e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000630:	f043 0301 	orr.w	r3, r3, #1
 8000634:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000636:	bd38      	pop	{r3, r4, r5, pc}

08000638 <HAL_ADC_Init>:
{
 8000638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(hadc == NULL)
 800063a:	4604      	mov	r4, r0
 800063c:	2800      	cmp	r0, #0
 800063e:	d077      	beq.n	8000730 <HAL_ADC_Init+0xf8>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000640:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000642:	b923      	cbnz	r3, 800064e <HAL_ADC_Init+0x16>
    ADC_CLEAR_ERRORCODE(hadc);
 8000644:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 8000646:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 800064a:	f003 fd0f 	bl	800406c <HAL_ADC_MspInit>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800064e:	4620      	mov	r0, r4
 8000650:	f7ff ffd0 	bl	80005f4 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000654:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000656:	f013 0310 	ands.w	r3, r3, #16
 800065a:	d16b      	bne.n	8000734 <HAL_ADC_Init+0xfc>
 800065c:	2800      	cmp	r0, #0
 800065e:	d169      	bne.n	8000734 <HAL_ADC_Init+0xfc>
    ADC_STATE_CLR_SET(hadc->State,
 8000660:	6aa2      	ldr	r2, [r4, #40]	; 0x28
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000662:	4937      	ldr	r1, [pc, #220]	; (8000740 <HAL_ADC_Init+0x108>)
    ADC_STATE_CLR_SET(hadc->State,
 8000664:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 8000668:	f022 0202 	bic.w	r2, r2, #2
 800066c:	f042 0202 	orr.w	r2, r2, #2
 8000670:	62a2      	str	r2, [r4, #40]	; 0x28
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000672:	e894 0024 	ldmia.w	r4, {r2, r5}
 8000676:	428a      	cmp	r2, r1
 8000678:	69e1      	ldr	r1, [r4, #28]
 800067a:	d104      	bne.n	8000686 <HAL_ADC_Init+0x4e>
 800067c:	f5b1 2f40 	cmp.w	r1, #786432	; 0xc0000
 8000680:	bf08      	it	eq
 8000682:	f44f 2100 	moveq.w	r1, #524288	; 0x80000
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000686:	7b26      	ldrb	r6, [r4, #12]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000688:	ea45 0546 	orr.w	r5, r5, r6, lsl #1
 800068c:	4329      	orrs	r1, r5
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800068e:	68a5      	ldr	r5, [r4, #8]
 8000690:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8000694:	d035      	beq.n	8000702 <HAL_ADC_Init+0xca>
 8000696:	2d01      	cmp	r5, #1
 8000698:	bf08      	it	eq
 800069a:	f44f 7380 	moveq.w	r3, #256	; 0x100
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800069e:	7d27      	ldrb	r7, [r4, #20]
 80006a0:	2f01      	cmp	r7, #1
 80006a2:	d106      	bne.n	80006b2 <HAL_ADC_Init+0x7a>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80006a4:	bb7e      	cbnz	r6, 8000706 <HAL_ADC_Init+0xce>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80006a6:	69a6      	ldr	r6, [r4, #24]
 80006a8:	3e01      	subs	r6, #1
 80006aa:	ea43 3346 	orr.w	r3, r3, r6, lsl #13
 80006ae:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
      MODIFY_REG(hadc->Instance->CR1,
 80006b2:	6856      	ldr	r6, [r2, #4]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80006b4:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR1,
 80006b8:	f426 4669 	bic.w	r6, r6, #59648	; 0xe900
 80006bc:	ea43 0306 	orr.w	r3, r3, r6
 80006c0:	6053      	str	r3, [r2, #4]
      MODIFY_REG(hadc->Instance->CR2,
 80006c2:	6896      	ldr	r6, [r2, #8]
 80006c4:	4b1f      	ldr	r3, [pc, #124]	; (8000744 <HAL_ADC_Init+0x10c>)
 80006c6:	ea03 0306 	and.w	r3, r3, r6
 80006ca:	ea43 0301 	orr.w	r3, r3, r1
 80006ce:	6093      	str	r3, [r2, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80006d0:	d001      	beq.n	80006d6 <HAL_ADC_Init+0x9e>
 80006d2:	2d01      	cmp	r5, #1
 80006d4:	d120      	bne.n	8000718 <HAL_ADC_Init+0xe0>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80006d6:	6923      	ldr	r3, [r4, #16]
 80006d8:	3b01      	subs	r3, #1
 80006da:	051b      	lsls	r3, r3, #20
    MODIFY_REG(hadc->Instance->SQR1,
 80006dc:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
 80006de:	f425 0570 	bic.w	r5, r5, #15728640	; 0xf00000
 80006e2:	432b      	orrs	r3, r5
 80006e4:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80006e6:	6892      	ldr	r2, [r2, #8]
 80006e8:	4b17      	ldr	r3, [pc, #92]	; (8000748 <HAL_ADC_Init+0x110>)
 80006ea:	4013      	ands	r3, r2
 80006ec:	4299      	cmp	r1, r3
 80006ee:	d115      	bne.n	800071c <HAL_ADC_Init+0xe4>
      ADC_CLEAR_ERRORCODE(hadc);
 80006f0:	2300      	movs	r3, #0
 80006f2:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 80006f4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80006f6:	f023 0303 	bic.w	r3, r3, #3
 80006fa:	f043 0301 	orr.w	r3, r3, #1
 80006fe:	62a3      	str	r3, [r4, #40]	; 0x28
 8000700:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000702:	462b      	mov	r3, r5
 8000704:	e7cb      	b.n	800069e <HAL_ADC_Init+0x66>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000706:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8000708:	f046 0620 	orr.w	r6, r6, #32
 800070c:	62a6      	str	r6, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800070e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000710:	f046 0601 	orr.w	r6, r6, #1
 8000714:	62e6      	str	r6, [r4, #44]	; 0x2c
 8000716:	e7cc      	b.n	80006b2 <HAL_ADC_Init+0x7a>
  uint32_t tmp_sqr1 = 0U;
 8000718:	2300      	movs	r3, #0
 800071a:	e7df      	b.n	80006dc <HAL_ADC_Init+0xa4>
      ADC_STATE_CLR_SET(hadc->State,
 800071c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800071e:	f023 0312 	bic.w	r3, r3, #18
 8000722:	f043 0310 	orr.w	r3, r3, #16
 8000726:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000728:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800072a:	f043 0301 	orr.w	r3, r3, #1
 800072e:	62e3      	str	r3, [r4, #44]	; 0x2c
    return HAL_ERROR;
 8000730:	2001      	movs	r0, #1
}
 8000732:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000734:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000736:	f043 0310 	orr.w	r3, r3, #16
 800073a:	62a3      	str	r3, [r4, #40]	; 0x28
 800073c:	e7f8      	b.n	8000730 <HAL_ADC_Init+0xf8>
 800073e:	bf00      	nop
 8000740:	40013c00 	.word	0x40013c00
 8000744:	ffe1f7fd 	.word	0xffe1f7fd
 8000748:	ff1f0efe 	.word	0xff1f0efe

0800074c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800074c:	4a07      	ldr	r2, [pc, #28]	; (800076c <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800074e:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000750:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000752:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000756:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800075a:	041b      	lsls	r3, r3, #16
 800075c:	0c1b      	lsrs	r3, r3, #16
 800075e:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000762:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8000766:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000768:	60d3      	str	r3, [r2, #12]
 800076a:	4770      	bx	lr
 800076c:	e000ed00 	.word	0xe000ed00

08000770 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000770:	4b17      	ldr	r3, [pc, #92]	; (80007d0 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	68dc      	ldr	r4, [r3, #12]
 8000776:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800077a:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800077e:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000780:	2b04      	cmp	r3, #4
 8000782:	bf28      	it	cs
 8000784:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000786:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000788:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800078c:	bf98      	it	ls
 800078e:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000790:	fa05 f303 	lsl.w	r3, r5, r3
 8000794:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000798:	bf88      	it	hi
 800079a:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800079c:	4019      	ands	r1, r3
 800079e:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007a0:	fa05 f404 	lsl.w	r4, r5, r4
 80007a4:	3c01      	subs	r4, #1
 80007a6:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 80007a8:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007aa:	ea42 0201 	orr.w	r2, r2, r1
 80007ae:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007b2:	bfa9      	itett	ge
 80007b4:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007b8:	4b06      	ldrlt	r3, [pc, #24]	; (80007d4 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007ba:	b2d2      	uxtbge	r2, r2
 80007bc:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007c0:	bfbb      	ittet	lt
 80007c2:	f000 000f 	andlt.w	r0, r0, #15
 80007c6:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007c8:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007cc:	541a      	strblt	r2, [r3, r0]
 80007ce:	bd30      	pop	{r4, r5, pc}
 80007d0:	e000ed00 	.word	0xe000ed00
 80007d4:	e000ed14 	.word	0xe000ed14

080007d8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80007d8:	2800      	cmp	r0, #0
 80007da:	db08      	blt.n	80007ee <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007dc:	2301      	movs	r3, #1
 80007de:	0942      	lsrs	r2, r0, #5
 80007e0:	f000 001f 	and.w	r0, r0, #31
 80007e4:	fa03 f000 	lsl.w	r0, r3, r0
 80007e8:	4b01      	ldr	r3, [pc, #4]	; (80007f0 <HAL_NVIC_EnableIRQ+0x18>)
 80007ea:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80007ee:	4770      	bx	lr
 80007f0:	e000e100 	.word	0xe000e100

080007f4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007f4:	3801      	subs	r0, #1
 80007f6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80007fa:	d20a      	bcs.n	8000812 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007fc:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007fe:	4b06      	ldr	r3, [pc, #24]	; (8000818 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000800:	4a06      	ldr	r2, [pc, #24]	; (800081c <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000802:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000804:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000808:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800080a:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800080c:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800080e:	601a      	str	r2, [r3, #0]
 8000810:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000812:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000814:	4770      	bx	lr
 8000816:	bf00      	nop
 8000818:	e000e010 	.word	0xe000e010
 800081c:	e000ed00 	.word	0xe000ed00

08000820 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000820:	b510      	push	{r4, lr}
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000822:	2800      	cmp	r0, #0
 8000824:	d032      	beq.n	800088c <HAL_DMA_Init+0x6c>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000826:	6801      	ldr	r1, [r0, #0]
 8000828:	4b19      	ldr	r3, [pc, #100]	; (8000890 <HAL_DMA_Init+0x70>)
 800082a:	2414      	movs	r4, #20
 800082c:	4299      	cmp	r1, r3
 800082e:	d825      	bhi.n	800087c <HAL_DMA_Init+0x5c>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000830:	4a18      	ldr	r2, [pc, #96]	; (8000894 <HAL_DMA_Init+0x74>)
    hdma->DmaBaseAddress = DMA1;
 8000832:	f2a3 4307 	subw	r3, r3, #1031	; 0x407
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000836:	440a      	add	r2, r1
 8000838:	fbb2 f2f4 	udiv	r2, r2, r4
 800083c:	0092      	lsls	r2, r2, #2
 800083e:	6402      	str	r2, [r0, #64]	; 0x40
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000840:	6884      	ldr	r4, [r0, #8]
    hdma->DmaBaseAddress = DMA2;
 8000842:	63c3      	str	r3, [r0, #60]	; 0x3c
  tmp |=  hdma->Init.Direction        |
 8000844:	6843      	ldr	r3, [r0, #4]
  tmp = hdma->Instance->CCR;
 8000846:	680a      	ldr	r2, [r1, #0]
  tmp |=  hdma->Init.Direction        |
 8000848:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800084a:	68c4      	ldr	r4, [r0, #12]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800084c:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000850:	4323      	orrs	r3, r4
 8000852:	6904      	ldr	r4, [r0, #16]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000854:	f022 0230 	bic.w	r2, r2, #48	; 0x30
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000858:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800085a:	6944      	ldr	r4, [r0, #20]
 800085c:	4323      	orrs	r3, r4
 800085e:	6984      	ldr	r4, [r0, #24]
 8000860:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 8000862:	69c4      	ldr	r4, [r0, #28]
 8000864:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 8000866:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000868:	600b      	str	r3, [r1, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800086a:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800086c:	2300      	movs	r3, #0
  hdma->State = HAL_DMA_STATE_READY;
 800086e:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000872:	6383      	str	r3, [r0, #56]	; 0x38
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000874:	f880 3020 	strb.w	r3, [r0, #32]

  return HAL_OK;
 8000878:	4618      	mov	r0, r3
 800087a:	bd10      	pop	{r4, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800087c:	4b06      	ldr	r3, [pc, #24]	; (8000898 <HAL_DMA_Init+0x78>)
 800087e:	440b      	add	r3, r1
 8000880:	fbb3 f3f4 	udiv	r3, r3, r4
 8000884:	009b      	lsls	r3, r3, #2
 8000886:	6403      	str	r3, [r0, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8000888:	4b04      	ldr	r3, [pc, #16]	; (800089c <HAL_DMA_Init+0x7c>)
 800088a:	e7d9      	b.n	8000840 <HAL_DMA_Init+0x20>
    return HAL_ERROR;
 800088c:	2001      	movs	r0, #1
}
 800088e:	bd10      	pop	{r4, pc}
 8000890:	40020407 	.word	0x40020407
 8000894:	bffdfff8 	.word	0xbffdfff8
 8000898:	bffdfbf8 	.word	0xbffdfbf8
 800089c:	40020400 	.word	0x40020400

080008a0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80008a0:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80008a2:	f890 4020 	ldrb.w	r4, [r0, #32]
 80008a6:	2c01      	cmp	r4, #1
 80008a8:	d035      	beq.n	8000916 <HAL_DMA_Start_IT+0x76>
 80008aa:	2401      	movs	r4, #1
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80008ac:	f890 5021 	ldrb.w	r5, [r0, #33]	; 0x21
  __HAL_LOCK(hdma);
 80008b0:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 80008b4:	42a5      	cmp	r5, r4
 80008b6:	f04f 0600 	mov.w	r6, #0
 80008ba:	f04f 0402 	mov.w	r4, #2
 80008be:	d128      	bne.n	8000912 <HAL_DMA_Start_IT+0x72>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80008c0:	f880 4021 	strb.w	r4, [r0, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80008c4:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80008c6:	6386      	str	r6, [r0, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 80008c8:	6826      	ldr	r6, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80008ca:	6c07      	ldr	r7, [r0, #64]	; 0x40
    __HAL_DMA_DISABLE(hdma);
 80008cc:	f026 0601 	bic.w	r6, r6, #1
 80008d0:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80008d2:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
 80008d4:	40bd      	lsls	r5, r7
 80008d6:	6075      	str	r5, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80008d8:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80008da:	6843      	ldr	r3, [r0, #4]
 80008dc:	6805      	ldr	r5, [r0, #0]
 80008de:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback)
 80008e0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80008e2:	bf0b      	itete	eq
 80008e4:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 80008e6:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 80008e8:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 80008ea:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 80008ec:	b14b      	cbz	r3, 8000902 <HAL_DMA_Start_IT+0x62>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80008ee:	6823      	ldr	r3, [r4, #0]
 80008f0:	f043 030e 	orr.w	r3, r3, #14
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80008f4:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 80008f6:	682b      	ldr	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80008f8:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 80008fa:	f043 0301 	orr.w	r3, r3, #1
 80008fe:	602b      	str	r3, [r5, #0]
 8000900:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000902:	6823      	ldr	r3, [r4, #0]
 8000904:	f023 0304 	bic.w	r3, r3, #4
 8000908:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800090a:	6823      	ldr	r3, [r4, #0]
 800090c:	f043 030a 	orr.w	r3, r3, #10
 8000910:	e7f0      	b.n	80008f4 <HAL_DMA_Start_IT+0x54>
    __HAL_UNLOCK(hdma); 
 8000912:	f880 6020 	strb.w	r6, [r0, #32]
  __HAL_LOCK(hdma);
 8000916:	2002      	movs	r0, #2
}
 8000918:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800091c <HAL_DMA_IRQHandler>:
{
 800091c:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800091e:	2504      	movs	r5, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000920:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000922:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000924:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8000926:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000928:	4095      	lsls	r5, r2
 800092a:	4225      	tst	r5, r4
  uint32_t source_it = hdma->Instance->CCR;
 800092c:	6819      	ldr	r1, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800092e:	d055      	beq.n	80009dc <HAL_DMA_IRQHandler+0xc0>
 8000930:	074d      	lsls	r5, r1, #29
 8000932:	d553      	bpl.n	80009dc <HAL_DMA_IRQHandler+0xc0>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000934:	681a      	ldr	r2, [r3, #0]
 8000936:	0696      	lsls	r6, r2, #26
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000938:	bf5e      	ittt	pl
 800093a:	681a      	ldrpl	r2, [r3, #0]
 800093c:	f022 0204 	bicpl.w	r2, r2, #4
 8000940:	601a      	strpl	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000942:	4a60      	ldr	r2, [pc, #384]	; (8000ac4 <HAL_DMA_IRQHandler+0x1a8>)
 8000944:	4293      	cmp	r3, r2
 8000946:	d91f      	bls.n	8000988 <HAL_DMA_IRQHandler+0x6c>
 8000948:	f502 7262 	add.w	r2, r2, #904	; 0x388
 800094c:	4293      	cmp	r3, r2
 800094e:	d014      	beq.n	800097a <HAL_DMA_IRQHandler+0x5e>
 8000950:	3214      	adds	r2, #20
 8000952:	4293      	cmp	r3, r2
 8000954:	d013      	beq.n	800097e <HAL_DMA_IRQHandler+0x62>
 8000956:	3214      	adds	r2, #20
 8000958:	4293      	cmp	r3, r2
 800095a:	d012      	beq.n	8000982 <HAL_DMA_IRQHandler+0x66>
 800095c:	3214      	adds	r2, #20
 800095e:	4293      	cmp	r3, r2
 8000960:	bf0c      	ite	eq
 8000962:	f44f 4380 	moveq.w	r3, #16384	; 0x4000
 8000966:	f44f 2380 	movne.w	r3, #262144	; 0x40000
 800096a:	4a57      	ldr	r2, [pc, #348]	; (8000ac8 <HAL_DMA_IRQHandler+0x1ac>)
 800096c:	6053      	str	r3, [r2, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 800096e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (hdma->XferErrorCallback != NULL)
 8000970:	2b00      	cmp	r3, #0
 8000972:	f000 80a5 	beq.w	8000ac0 <HAL_DMA_IRQHandler+0x1a4>
}
 8000976:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8000978:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800097a:	2304      	movs	r3, #4
 800097c:	e7f5      	b.n	800096a <HAL_DMA_IRQHandler+0x4e>
 800097e:	2340      	movs	r3, #64	; 0x40
 8000980:	e7f3      	b.n	800096a <HAL_DMA_IRQHandler+0x4e>
 8000982:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000986:	e7f0      	b.n	800096a <HAL_DMA_IRQHandler+0x4e>
 8000988:	4950      	ldr	r1, [pc, #320]	; (8000acc <HAL_DMA_IRQHandler+0x1b0>)
 800098a:	428b      	cmp	r3, r1
 800098c:	d016      	beq.n	80009bc <HAL_DMA_IRQHandler+0xa0>
 800098e:	3114      	adds	r1, #20
 8000990:	428b      	cmp	r3, r1
 8000992:	d015      	beq.n	80009c0 <HAL_DMA_IRQHandler+0xa4>
 8000994:	3114      	adds	r1, #20
 8000996:	428b      	cmp	r3, r1
 8000998:	d014      	beq.n	80009c4 <HAL_DMA_IRQHandler+0xa8>
 800099a:	3114      	adds	r1, #20
 800099c:	428b      	cmp	r3, r1
 800099e:	d014      	beq.n	80009ca <HAL_DMA_IRQHandler+0xae>
 80009a0:	3114      	adds	r1, #20
 80009a2:	428b      	cmp	r3, r1
 80009a4:	d014      	beq.n	80009d0 <HAL_DMA_IRQHandler+0xb4>
 80009a6:	3114      	adds	r1, #20
 80009a8:	428b      	cmp	r3, r1
 80009aa:	d014      	beq.n	80009d6 <HAL_DMA_IRQHandler+0xba>
 80009ac:	4293      	cmp	r3, r2
 80009ae:	bf14      	ite	ne
 80009b0:	f44f 2380 	movne.w	r3, #262144	; 0x40000
 80009b4:	f04f 6380 	moveq.w	r3, #67108864	; 0x4000000
 80009b8:	4a45      	ldr	r2, [pc, #276]	; (8000ad0 <HAL_DMA_IRQHandler+0x1b4>)
 80009ba:	e7d7      	b.n	800096c <HAL_DMA_IRQHandler+0x50>
 80009bc:	2304      	movs	r3, #4
 80009be:	e7fb      	b.n	80009b8 <HAL_DMA_IRQHandler+0x9c>
 80009c0:	2340      	movs	r3, #64	; 0x40
 80009c2:	e7f9      	b.n	80009b8 <HAL_DMA_IRQHandler+0x9c>
 80009c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009c8:	e7f6      	b.n	80009b8 <HAL_DMA_IRQHandler+0x9c>
 80009ca:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80009ce:	e7f3      	b.n	80009b8 <HAL_DMA_IRQHandler+0x9c>
 80009d0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80009d4:	e7f0      	b.n	80009b8 <HAL_DMA_IRQHandler+0x9c>
 80009d6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80009da:	e7ed      	b.n	80009b8 <HAL_DMA_IRQHandler+0x9c>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80009dc:	2502      	movs	r5, #2
 80009de:	4095      	lsls	r5, r2
 80009e0:	4225      	tst	r5, r4
 80009e2:	d057      	beq.n	8000a94 <HAL_DMA_IRQHandler+0x178>
 80009e4:	078d      	lsls	r5, r1, #30
 80009e6:	d555      	bpl.n	8000a94 <HAL_DMA_IRQHandler+0x178>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80009e8:	681a      	ldr	r2, [r3, #0]
 80009ea:	0694      	lsls	r4, r2, #26
 80009ec:	d406      	bmi.n	80009fc <HAL_DMA_IRQHandler+0xe0>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80009ee:	681a      	ldr	r2, [r3, #0]
 80009f0:	f022 020a 	bic.w	r2, r2, #10
 80009f4:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 80009f6:	2201      	movs	r2, #1
 80009f8:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80009fc:	4a31      	ldr	r2, [pc, #196]	; (8000ac4 <HAL_DMA_IRQHandler+0x1a8>)
 80009fe:	4293      	cmp	r3, r2
 8000a00:	d91e      	bls.n	8000a40 <HAL_DMA_IRQHandler+0x124>
 8000a02:	f502 7262 	add.w	r2, r2, #904	; 0x388
 8000a06:	4293      	cmp	r3, r2
 8000a08:	d013      	beq.n	8000a32 <HAL_DMA_IRQHandler+0x116>
 8000a0a:	3214      	adds	r2, #20
 8000a0c:	4293      	cmp	r3, r2
 8000a0e:	d012      	beq.n	8000a36 <HAL_DMA_IRQHandler+0x11a>
 8000a10:	3214      	adds	r2, #20
 8000a12:	4293      	cmp	r3, r2
 8000a14:	d011      	beq.n	8000a3a <HAL_DMA_IRQHandler+0x11e>
 8000a16:	3214      	adds	r2, #20
 8000a18:	4293      	cmp	r3, r2
 8000a1a:	bf0c      	ite	eq
 8000a1c:	f44f 5300 	moveq.w	r3, #8192	; 0x2000
 8000a20:	f44f 3300 	movne.w	r3, #131072	; 0x20000
 8000a24:	4a28      	ldr	r2, [pc, #160]	; (8000ac8 <HAL_DMA_IRQHandler+0x1ac>)
 8000a26:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 8000a28:	2300      	movs	r3, #0
 8000a2a:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8000a2e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000a30:	e79e      	b.n	8000970 <HAL_DMA_IRQHandler+0x54>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000a32:	2302      	movs	r3, #2
 8000a34:	e7f6      	b.n	8000a24 <HAL_DMA_IRQHandler+0x108>
 8000a36:	2320      	movs	r3, #32
 8000a38:	e7f4      	b.n	8000a24 <HAL_DMA_IRQHandler+0x108>
 8000a3a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a3e:	e7f1      	b.n	8000a24 <HAL_DMA_IRQHandler+0x108>
 8000a40:	4922      	ldr	r1, [pc, #136]	; (8000acc <HAL_DMA_IRQHandler+0x1b0>)
 8000a42:	428b      	cmp	r3, r1
 8000a44:	d016      	beq.n	8000a74 <HAL_DMA_IRQHandler+0x158>
 8000a46:	3114      	adds	r1, #20
 8000a48:	428b      	cmp	r3, r1
 8000a4a:	d015      	beq.n	8000a78 <HAL_DMA_IRQHandler+0x15c>
 8000a4c:	3114      	adds	r1, #20
 8000a4e:	428b      	cmp	r3, r1
 8000a50:	d014      	beq.n	8000a7c <HAL_DMA_IRQHandler+0x160>
 8000a52:	3114      	adds	r1, #20
 8000a54:	428b      	cmp	r3, r1
 8000a56:	d014      	beq.n	8000a82 <HAL_DMA_IRQHandler+0x166>
 8000a58:	3114      	adds	r1, #20
 8000a5a:	428b      	cmp	r3, r1
 8000a5c:	d014      	beq.n	8000a88 <HAL_DMA_IRQHandler+0x16c>
 8000a5e:	3114      	adds	r1, #20
 8000a60:	428b      	cmp	r3, r1
 8000a62:	d014      	beq.n	8000a8e <HAL_DMA_IRQHandler+0x172>
 8000a64:	4293      	cmp	r3, r2
 8000a66:	bf14      	ite	ne
 8000a68:	f44f 3300 	movne.w	r3, #131072	; 0x20000
 8000a6c:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 8000a70:	4a17      	ldr	r2, [pc, #92]	; (8000ad0 <HAL_DMA_IRQHandler+0x1b4>)
 8000a72:	e7d8      	b.n	8000a26 <HAL_DMA_IRQHandler+0x10a>
 8000a74:	2302      	movs	r3, #2
 8000a76:	e7fb      	b.n	8000a70 <HAL_DMA_IRQHandler+0x154>
 8000a78:	2320      	movs	r3, #32
 8000a7a:	e7f9      	b.n	8000a70 <HAL_DMA_IRQHandler+0x154>
 8000a7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a80:	e7f6      	b.n	8000a70 <HAL_DMA_IRQHandler+0x154>
 8000a82:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a86:	e7f3      	b.n	8000a70 <HAL_DMA_IRQHandler+0x154>
 8000a88:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000a8c:	e7f0      	b.n	8000a70 <HAL_DMA_IRQHandler+0x154>
 8000a8e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000a92:	e7ed      	b.n	8000a70 <HAL_DMA_IRQHandler+0x154>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000a94:	2508      	movs	r5, #8
 8000a96:	4095      	lsls	r5, r2
 8000a98:	4225      	tst	r5, r4
 8000a9a:	d011      	beq.n	8000ac0 <HAL_DMA_IRQHandler+0x1a4>
 8000a9c:	0709      	lsls	r1, r1, #28
 8000a9e:	d50f      	bpl.n	8000ac0 <HAL_DMA_IRQHandler+0x1a4>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000aa0:	6819      	ldr	r1, [r3, #0]
 8000aa2:	f021 010e 	bic.w	r1, r1, #14
 8000aa6:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	fa03 f202 	lsl.w	r2, r3, r2
 8000aae:	6072      	str	r2, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000ab0:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 8000ab2:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 8000abc:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8000abe:	e757      	b.n	8000970 <HAL_DMA_IRQHandler+0x54>
}
 8000ac0:	bc70      	pop	{r4, r5, r6}
 8000ac2:	4770      	bx	lr
 8000ac4:	40020080 	.word	0x40020080
 8000ac8:	40020400 	.word	0x40020400
 8000acc:	40020008 	.word	0x40020008
 8000ad0:	40020000 	.word	0x40020000

08000ad4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ad4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000ad8:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 8000ada:	4626      	mov	r6, r4
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000adc:	4f6c      	ldr	r7, [pc, #432]	; (8000c90 <HAL_GPIO_Init+0x1bc>)
 8000ade:	4b6d      	ldr	r3, [pc, #436]	; (8000c94 <HAL_GPIO_Init+0x1c0>)
        temp = AFIO->EXTICR[position >> 2u];
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000ae0:	f8df e1b8 	ldr.w	lr, [pc, #440]	; 8000c9c <HAL_GPIO_Init+0x1c8>
      switch (GPIO_Init->Mode)
 8000ae4:	f8df c1b8 	ldr.w	ip, [pc, #440]	; 8000ca0 <HAL_GPIO_Init+0x1cc>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ae8:	680a      	ldr	r2, [r1, #0]
 8000aea:	fa32 f506 	lsrs.w	r5, r2, r6
 8000aee:	d102      	bne.n	8000af6 <HAL_GPIO_Init+0x22>
      }
    }

	position++;
  }
}
 8000af0:	b003      	add	sp, #12
 8000af2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 8000af6:	f04f 0801 	mov.w	r8, #1
 8000afa:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000afe:	ea02 0208 	and.w	r2, r2, r8
    if (iocurrent == ioposition)
 8000b02:	4590      	cmp	r8, r2
 8000b04:	f040 8084 	bne.w	8000c10 <HAL_GPIO_Init+0x13c>
      switch (GPIO_Init->Mode)
 8000b08:	684d      	ldr	r5, [r1, #4]
 8000b0a:	2d12      	cmp	r5, #18
 8000b0c:	f000 80b1 	beq.w	8000c72 <HAL_GPIO_Init+0x19e>
 8000b10:	f200 8087 	bhi.w	8000c22 <HAL_GPIO_Init+0x14e>
 8000b14:	2d02      	cmp	r5, #2
 8000b16:	f000 80a9 	beq.w	8000c6c <HAL_GPIO_Init+0x198>
 8000b1a:	d87b      	bhi.n	8000c14 <HAL_GPIO_Init+0x140>
 8000b1c:	2d00      	cmp	r5, #0
 8000b1e:	f000 808c 	beq.w	8000c3a <HAL_GPIO_Init+0x166>
 8000b22:	2d01      	cmp	r5, #1
 8000b24:	f000 80a0 	beq.w	8000c68 <HAL_GPIO_Init+0x194>
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000b28:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000b2c:	2aff      	cmp	r2, #255	; 0xff
 8000b2e:	bf93      	iteet	ls
 8000b30:	4682      	movls	sl, r0
 8000b32:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 8000b36:	3d08      	subhi	r5, #8
 8000b38:	f8d0 b000 	ldrls.w	fp, [r0]
 8000b3c:	bf92      	itee	ls
 8000b3e:	00b5      	lslls	r5, r6, #2
 8000b40:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8000b44:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000b46:	fa09 f805 	lsl.w	r8, r9, r5
 8000b4a:	ea2b 0808 	bic.w	r8, fp, r8
 8000b4e:	fa04 f505 	lsl.w	r5, r4, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000b52:	bf88      	it	hi
 8000b54:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000b58:	ea48 0505 	orr.w	r5, r8, r5
 8000b5c:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b60:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8000b64:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8000b68:	d052      	beq.n	8000c10 <HAL_GPIO_Init+0x13c>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000b6a:	69bd      	ldr	r5, [r7, #24]
 8000b6c:	f026 0803 	bic.w	r8, r6, #3
 8000b70:	f045 0501 	orr.w	r5, r5, #1
 8000b74:	61bd      	str	r5, [r7, #24]
 8000b76:	69bd      	ldr	r5, [r7, #24]
 8000b78:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8000b7c:	f005 0501 	and.w	r5, r5, #1
 8000b80:	9501      	str	r5, [sp, #4]
 8000b82:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000b86:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000b8a:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000b8c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8000b90:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000b94:	fa09 f90b 	lsl.w	r9, r9, fp
 8000b98:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000b9c:	4d3e      	ldr	r5, [pc, #248]	; (8000c98 <HAL_GPIO_Init+0x1c4>)
 8000b9e:	42a8      	cmp	r0, r5
 8000ba0:	d06c      	beq.n	8000c7c <HAL_GPIO_Init+0x1a8>
 8000ba2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000ba6:	42a8      	cmp	r0, r5
 8000ba8:	d06a      	beq.n	8000c80 <HAL_GPIO_Init+0x1ac>
 8000baa:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000bae:	42a8      	cmp	r0, r5
 8000bb0:	d068      	beq.n	8000c84 <HAL_GPIO_Init+0x1b0>
 8000bb2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000bb6:	42a8      	cmp	r0, r5
 8000bb8:	d066      	beq.n	8000c88 <HAL_GPIO_Init+0x1b4>
 8000bba:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000bbe:	42a8      	cmp	r0, r5
 8000bc0:	d064      	beq.n	8000c8c <HAL_GPIO_Init+0x1b8>
 8000bc2:	4570      	cmp	r0, lr
 8000bc4:	bf0c      	ite	eq
 8000bc6:	2505      	moveq	r5, #5
 8000bc8:	2506      	movne	r5, #6
 8000bca:	fa05 f50b 	lsl.w	r5, r5, fp
 8000bce:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 8000bd2:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 8000bd6:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000bd8:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8000bdc:	bf14      	ite	ne
 8000bde:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000be0:	4395      	biceq	r5, r2
 8000be2:	601d      	str	r5, [r3, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 8000be4:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000be6:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8000bea:	bf14      	ite	ne
 8000bec:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000bee:	4395      	biceq	r5, r2
 8000bf0:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 8000bf2:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000bf4:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8000bf8:	bf14      	ite	ne
 8000bfa:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000bfc:	4395      	biceq	r5, r2
 8000bfe:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8000c00:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c02:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8000c06:	bf14      	ite	ne
 8000c08:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000c0a:	ea25 0202 	biceq.w	r2, r5, r2
 8000c0e:	60da      	str	r2, [r3, #12]
	position++;
 8000c10:	3601      	adds	r6, #1
 8000c12:	e769      	b.n	8000ae8 <HAL_GPIO_Init+0x14>
      switch (GPIO_Init->Mode)
 8000c14:	2d03      	cmp	r5, #3
 8000c16:	d025      	beq.n	8000c64 <HAL_GPIO_Init+0x190>
 8000c18:	2d11      	cmp	r5, #17
 8000c1a:	d185      	bne.n	8000b28 <HAL_GPIO_Init+0x54>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000c1c:	68cc      	ldr	r4, [r1, #12]
 8000c1e:	3404      	adds	r4, #4
          break;
 8000c20:	e782      	b.n	8000b28 <HAL_GPIO_Init+0x54>
      switch (GPIO_Init->Mode)
 8000c22:	4565      	cmp	r5, ip
 8000c24:	d009      	beq.n	8000c3a <HAL_GPIO_Init+0x166>
 8000c26:	d812      	bhi.n	8000c4e <HAL_GPIO_Init+0x17a>
 8000c28:	f8df 9078 	ldr.w	r9, [pc, #120]	; 8000ca4 <HAL_GPIO_Init+0x1d0>
 8000c2c:	454d      	cmp	r5, r9
 8000c2e:	d004      	beq.n	8000c3a <HAL_GPIO_Init+0x166>
 8000c30:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8000c34:	454d      	cmp	r5, r9
 8000c36:	f47f af77 	bne.w	8000b28 <HAL_GPIO_Init+0x54>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000c3a:	688c      	ldr	r4, [r1, #8]
 8000c3c:	b1e4      	cbz	r4, 8000c78 <HAL_GPIO_Init+0x1a4>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000c3e:	2c01      	cmp	r4, #1
            GPIOx->BSRR = ioposition;
 8000c40:	bf0c      	ite	eq
 8000c42:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8000c46:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c4a:	2408      	movs	r4, #8
 8000c4c:	e76c      	b.n	8000b28 <HAL_GPIO_Init+0x54>
      switch (GPIO_Init->Mode)
 8000c4e:	f8df 9058 	ldr.w	r9, [pc, #88]	; 8000ca8 <HAL_GPIO_Init+0x1d4>
 8000c52:	454d      	cmp	r5, r9
 8000c54:	d0f1      	beq.n	8000c3a <HAL_GPIO_Init+0x166>
 8000c56:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8000c5a:	454d      	cmp	r5, r9
 8000c5c:	d0ed      	beq.n	8000c3a <HAL_GPIO_Init+0x166>
 8000c5e:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 8000c62:	e7e7      	b.n	8000c34 <HAL_GPIO_Init+0x160>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000c64:	2400      	movs	r4, #0
 8000c66:	e75f      	b.n	8000b28 <HAL_GPIO_Init+0x54>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000c68:	68cc      	ldr	r4, [r1, #12]
          break;
 8000c6a:	e75d      	b.n	8000b28 <HAL_GPIO_Init+0x54>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000c6c:	68cc      	ldr	r4, [r1, #12]
 8000c6e:	3408      	adds	r4, #8
          break;
 8000c70:	e75a      	b.n	8000b28 <HAL_GPIO_Init+0x54>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000c72:	68cc      	ldr	r4, [r1, #12]
 8000c74:	340c      	adds	r4, #12
          break;
 8000c76:	e757      	b.n	8000b28 <HAL_GPIO_Init+0x54>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000c78:	2404      	movs	r4, #4
 8000c7a:	e755      	b.n	8000b28 <HAL_GPIO_Init+0x54>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000c7c:	2500      	movs	r5, #0
 8000c7e:	e7a4      	b.n	8000bca <HAL_GPIO_Init+0xf6>
 8000c80:	2501      	movs	r5, #1
 8000c82:	e7a2      	b.n	8000bca <HAL_GPIO_Init+0xf6>
 8000c84:	2502      	movs	r5, #2
 8000c86:	e7a0      	b.n	8000bca <HAL_GPIO_Init+0xf6>
 8000c88:	2503      	movs	r5, #3
 8000c8a:	e79e      	b.n	8000bca <HAL_GPIO_Init+0xf6>
 8000c8c:	2504      	movs	r5, #4
 8000c8e:	e79c      	b.n	8000bca <HAL_GPIO_Init+0xf6>
 8000c90:	40021000 	.word	0x40021000
 8000c94:	40010400 	.word	0x40010400
 8000c98:	40010800 	.word	0x40010800
 8000c9c:	40011c00 	.word	0x40011c00
 8000ca0:	10210000 	.word	0x10210000
 8000ca4:	10110000 	.word	0x10110000
 8000ca8:	10310000 	.word	0x10310000

08000cac <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000cac:	b10a      	cbz	r2, 8000cb2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000cae:	6101      	str	r1, [r0, #16]
 8000cb0:	4770      	bx	lr
 8000cb2:	0409      	lsls	r1, r1, #16
 8000cb4:	e7fb      	b.n	8000cae <HAL_GPIO_WritePin+0x2>

08000cb6 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8000cb6:	68c3      	ldr	r3, [r0, #12]
 8000cb8:	420b      	tst	r3, r1
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000cba:	bf14      	ite	ne
 8000cbc:	6141      	strne	r1, [r0, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000cbe:	6101      	streq	r1, [r0, #16]
 8000cc0:	4770      	bx	lr

08000cc2 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000cc2:	6801      	ldr	r1, [r0, #0]
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	694b      	ldr	r3, [r1, #20]
 8000cc8:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 8000ccc:	d010      	beq.n	8000cf0 <I2C_IsAcknowledgeFailed+0x2e>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000cce:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8000cd2:	614b      	str	r3, [r1, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 8000cd4:	2320      	movs	r3, #32
    hi2c->PreviousState       = I2C_STATE_NONE;
 8000cd6:	6302      	str	r2, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8000cd8:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000cdc:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8000ce0:	6c03      	ldr	r3, [r0, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000ce2:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8000ce6:	f043 0304 	orr.w	r3, r3, #4
 8000cea:	6403      	str	r3, [r0, #64]	; 0x40

    return HAL_ERROR;
 8000cec:	2001      	movs	r0, #1
 8000cee:	4770      	bx	lr
  }
  return HAL_OK;
 8000cf0:	4618      	mov	r0, r3
}
 8000cf2:	4770      	bx	lr

08000cf4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8000cf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000cf8:	4604      	mov	r4, r0
 8000cfa:	4617      	mov	r7, r2
 8000cfc:	4699      	mov	r9, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8000cfe:	f3c1 4807 	ubfx	r8, r1, #16, #8
 8000d02:	b28e      	uxth	r6, r1
 8000d04:	6825      	ldr	r5, [r4, #0]
 8000d06:	f1b8 0f01 	cmp.w	r8, #1
 8000d0a:	bf0c      	ite	eq
 8000d0c:	696b      	ldreq	r3, [r5, #20]
 8000d0e:	69ab      	ldrne	r3, [r5, #24]
 8000d10:	ea36 0303 	bics.w	r3, r6, r3
 8000d14:	bf14      	ite	ne
 8000d16:	2001      	movne	r0, #1
 8000d18:	2000      	moveq	r0, #0
 8000d1a:	b908      	cbnz	r0, 8000d20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x2c>
}
 8000d1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000d20:	696b      	ldr	r3, [r5, #20]
 8000d22:	055a      	lsls	r2, r3, #21
 8000d24:	d516      	bpl.n	8000d54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x60>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000d26:	682b      	ldr	r3, [r5, #0]
      hi2c->State               = HAL_I2C_STATE_READY;
 8000d28:	2220      	movs	r2, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000d2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d2e:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000d30:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8000d34:	616b      	str	r3, [r5, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8000d36:	2300      	movs	r3, #0
 8000d38:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8000d3a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000d3e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8000d42:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000d44:	f042 0204 	orr.w	r2, r2, #4
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000d48:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8000d4a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8000d4e:	2001      	movs	r0, #1
 8000d50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (Timeout != HAL_MAX_DELAY)
 8000d54:	1c7b      	adds	r3, r7, #1
 8000d56:	d0d5      	beq.n	8000d04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000d58:	f7ff faae 	bl	80002b8 <HAL_GetTick>
 8000d5c:	eba0 0009 	sub.w	r0, r0, r9
 8000d60:	4287      	cmp	r7, r0
 8000d62:	d301      	bcc.n	8000d68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x74>
 8000d64:	2f00      	cmp	r7, #0
 8000d66:	d1cd      	bne.n	8000d04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8000d68:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8000d6a:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8000d6c:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8000d6e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000d72:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000d76:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000d78:	f042 0220 	orr.w	r2, r2, #32
 8000d7c:	e7e4      	b.n	8000d48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x54>

08000d7e <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8000d7e:	b570      	push	{r4, r5, r6, lr}
 8000d80:	4604      	mov	r4, r0
 8000d82:	460d      	mov	r5, r1
 8000d84:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8000d86:	6823      	ldr	r3, [r4, #0]
 8000d88:	695b      	ldr	r3, [r3, #20]
 8000d8a:	075b      	lsls	r3, r3, #29
 8000d8c:	d501      	bpl.n	8000d92 <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 8000d8e:	2000      	movs	r0, #0
 8000d90:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8000d92:	4620      	mov	r0, r4
 8000d94:	f7ff ff95 	bl	8000cc2 <I2C_IsAcknowledgeFailed>
 8000d98:	b9a8      	cbnz	r0, 8000dc6 <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 8000d9a:	1c6a      	adds	r2, r5, #1
 8000d9c:	d0f3      	beq.n	8000d86 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000d9e:	f7ff fa8b 	bl	80002b8 <HAL_GetTick>
 8000da2:	1b80      	subs	r0, r0, r6
 8000da4:	4285      	cmp	r5, r0
 8000da6:	d301      	bcc.n	8000dac <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 8000da8:	2d00      	cmp	r5, #0
 8000daa:	d1ec      	bne.n	8000d86 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8000dac:	2300      	movs	r3, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 8000dae:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8000db0:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8000db2:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000db6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000dba:	6c22      	ldr	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8000dbc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000dc0:	f042 0220 	orr.w	r2, r2, #32
 8000dc4:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 8000dc6:	2001      	movs	r0, #1
}
 8000dc8:	bd70      	pop	{r4, r5, r6, pc}

08000dca <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8000dca:	b570      	push	{r4, r5, r6, lr}
 8000dcc:	4604      	mov	r4, r0
 8000dce:	460d      	mov	r5, r1
 8000dd0:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8000dd2:	6820      	ldr	r0, [r4, #0]
 8000dd4:	6943      	ldr	r3, [r0, #20]
 8000dd6:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8000dda:	d001      	beq.n	8000de0 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
  return HAL_OK;
 8000ddc:	2000      	movs	r0, #0
}
 8000dde:	bd70      	pop	{r4, r5, r6, pc}
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8000de0:	6942      	ldr	r2, [r0, #20]
 8000de2:	06d2      	lsls	r2, r2, #27
 8000de4:	d50e      	bpl.n	8000e04 <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000de6:	f06f 0210 	mvn.w	r2, #16
 8000dea:	6142      	str	r2, [r0, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 8000dec:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8000dee:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8000df0:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000df4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8000df8:	6c22      	ldr	r2, [r4, #64]	; 0x40
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000dfa:	6422      	str	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8000dfc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8000e00:	2001      	movs	r0, #1
 8000e02:	bd70      	pop	{r4, r5, r6, pc}
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000e04:	f7ff fa58 	bl	80002b8 <HAL_GetTick>
 8000e08:	1b80      	subs	r0, r0, r6
 8000e0a:	42a8      	cmp	r0, r5
 8000e0c:	d801      	bhi.n	8000e12 <I2C_WaitOnRXNEFlagUntilTimeout+0x48>
 8000e0e:	2d00      	cmp	r5, #0
 8000e10:	d1df      	bne.n	8000dd2 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8000e12:	2300      	movs	r3, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 8000e14:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8000e16:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8000e18:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000e1c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000e20:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000e22:	f042 0220 	orr.w	r2, r2, #32
 8000e26:	e7e8      	b.n	8000dfa <I2C_WaitOnRXNEFlagUntilTimeout+0x30>

08000e28 <I2C_WaitOnFlagUntilTimeout>:
{
 8000e28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000e2c:	4604      	mov	r4, r0
 8000e2e:	4690      	mov	r8, r2
 8000e30:	461f      	mov	r7, r3
 8000e32:	9e08      	ldr	r6, [sp, #32]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8000e34:	f3c1 4907 	ubfx	r9, r1, #16, #8
 8000e38:	b28d      	uxth	r5, r1
 8000e3a:	6823      	ldr	r3, [r4, #0]
 8000e3c:	f1b9 0f01 	cmp.w	r9, #1
 8000e40:	bf0c      	ite	eq
 8000e42:	695b      	ldreq	r3, [r3, #20]
 8000e44:	699b      	ldrne	r3, [r3, #24]
 8000e46:	ea35 0303 	bics.w	r3, r5, r3
 8000e4a:	bf0c      	ite	eq
 8000e4c:	2301      	moveq	r3, #1
 8000e4e:	2300      	movne	r3, #0
 8000e50:	4543      	cmp	r3, r8
 8000e52:	d002      	beq.n	8000e5a <I2C_WaitOnFlagUntilTimeout+0x32>
  return HAL_OK;
 8000e54:	2000      	movs	r0, #0
}
 8000e56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (Timeout != HAL_MAX_DELAY)
 8000e5a:	1c7b      	adds	r3, r7, #1
 8000e5c:	d0ed      	beq.n	8000e3a <I2C_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000e5e:	f7ff fa2b 	bl	80002b8 <HAL_GetTick>
 8000e62:	1b80      	subs	r0, r0, r6
 8000e64:	4287      	cmp	r7, r0
 8000e66:	d301      	bcc.n	8000e6c <I2C_WaitOnFlagUntilTimeout+0x44>
 8000e68:	2f00      	cmp	r7, #0
 8000e6a:	d1e6      	bne.n	8000e3a <I2C_WaitOnFlagUntilTimeout+0x12>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8000e6c:	2300      	movs	r3, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 8000e6e:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8000e70:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8000e72:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000e76:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000e7a:	6c22      	ldr	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8000e7c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000e80:	f042 0220 	orr.w	r2, r2, #32
 8000e84:	6422      	str	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8000e86:	2001      	movs	r0, #1
 8000e88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08000e8c <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8000e8c:	b570      	push	{r4, r5, r6, lr}
 8000e8e:	4604      	mov	r4, r0
 8000e90:	460d      	mov	r5, r1
 8000e92:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8000e94:	6823      	ldr	r3, [r4, #0]
 8000e96:	695b      	ldr	r3, [r3, #20]
 8000e98:	061b      	lsls	r3, r3, #24
 8000e9a:	d501      	bpl.n	8000ea0 <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;
 8000e9c:	2000      	movs	r0, #0
 8000e9e:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8000ea0:	4620      	mov	r0, r4
 8000ea2:	f7ff ff0e 	bl	8000cc2 <I2C_IsAcknowledgeFailed>
 8000ea6:	b9a8      	cbnz	r0, 8000ed4 <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 8000ea8:	1c6a      	adds	r2, r5, #1
 8000eaa:	d0f3      	beq.n	8000e94 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000eac:	f7ff fa04 	bl	80002b8 <HAL_GetTick>
 8000eb0:	1b80      	subs	r0, r0, r6
 8000eb2:	4285      	cmp	r5, r0
 8000eb4:	d301      	bcc.n	8000eba <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 8000eb6:	2d00      	cmp	r5, #0
 8000eb8:	d1ec      	bne.n	8000e94 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8000eba:	2300      	movs	r3, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 8000ebc:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8000ebe:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8000ec0:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000ec4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000ec8:	6c22      	ldr	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8000eca:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000ece:	f042 0220 	orr.w	r2, r2, #32
 8000ed2:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 8000ed4:	2001      	movs	r0, #1
}
 8000ed6:	bd70      	pop	{r4, r5, r6, pc}

08000ed8 <HAL_I2C_Init>:
{
 8000ed8:	b570      	push	{r4, r5, r6, lr}
  if (hi2c == NULL)
 8000eda:	4604      	mov	r4, r0
 8000edc:	b908      	cbnz	r0, 8000ee2 <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 8000ede:	2001      	movs	r0, #1
 8000ee0:	bd70      	pop	{r4, r5, r6, pc}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000ee2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8000ee6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000eea:	b91b      	cbnz	r3, 8000ef4 <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 8000eec:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8000ef0:	f003 f92c 	bl	800414c <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8000ef4:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 8000ef6:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8000ef8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8000efc:	6813      	ldr	r3, [r2, #0]
 8000efe:	f023 0301 	bic.w	r3, r3, #1
 8000f02:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000f04:	f000 fdf4 	bl	8001af0 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000f08:	6865      	ldr	r5, [r4, #4]
 8000f0a:	4b41      	ldr	r3, [pc, #260]	; (8001010 <HAL_I2C_Init+0x138>)
 8000f0c:	429d      	cmp	r5, r3
 8000f0e:	d84d      	bhi.n	8000fac <HAL_I2C_Init+0xd4>
 8000f10:	4b40      	ldr	r3, [pc, #256]	; (8001014 <HAL_I2C_Init+0x13c>)
 8000f12:	4298      	cmp	r0, r3
 8000f14:	d9e3      	bls.n	8000ede <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 8000f16:	4940      	ldr	r1, [pc, #256]	; (8001018 <HAL_I2C_Init+0x140>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000f18:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8000f1a:	fbb0 f1f1 	udiv	r1, r0, r1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000f1e:	6853      	ldr	r3, [r2, #4]
 8000f20:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000f24:	430b      	orrs	r3, r1
 8000f26:	6053      	str	r3, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000f28:	6a13      	ldr	r3, [r2, #32]
 8000f2a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000f2e:	3101      	adds	r1, #1
 8000f30:	4319      	orrs	r1, r3
 8000f32:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000f34:	69d1      	ldr	r1, [r2, #28]
 8000f36:	4b36      	ldr	r3, [pc, #216]	; (8001010 <HAL_I2C_Init+0x138>)
 8000f38:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8000f3c:	429d      	cmp	r5, r3
 8000f3e:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8000f42:	f100 30ff 	add.w	r0, r0, #4294967295
 8000f46:	d848      	bhi.n	8000fda <HAL_I2C_Init+0x102>
 8000f48:	006d      	lsls	r5, r5, #1
 8000f4a:	fbb0 f0f5 	udiv	r0, r0, r5
 8000f4e:	3001      	adds	r0, #1
 8000f50:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8000f54:	2b04      	cmp	r3, #4
 8000f56:	bf38      	it	cc
 8000f58:	2304      	movcc	r3, #4
 8000f5a:	430b      	orrs	r3, r1
 8000f5c:	61d3      	str	r3, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8000f5e:	6811      	ldr	r1, [r2, #0]
 8000f60:	6a20      	ldr	r0, [r4, #32]
 8000f62:	69e3      	ldr	r3, [r4, #28]
 8000f64:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8000f68:	4303      	orrs	r3, r0
 8000f6a:	430b      	orrs	r3, r1
 8000f6c:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8000f6e:	6891      	ldr	r1, [r2, #8]
 8000f70:	68e0      	ldr	r0, [r4, #12]
 8000f72:	6923      	ldr	r3, [r4, #16]
 8000f74:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 8000f78:	4303      	orrs	r3, r0
 8000f7a:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8000f7e:	430b      	orrs	r3, r1
 8000f80:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8000f82:	68d1      	ldr	r1, [r2, #12]
 8000f84:	69a0      	ldr	r0, [r4, #24]
 8000f86:	6963      	ldr	r3, [r4, #20]
 8000f88:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8000f8c:	4303      	orrs	r3, r0
 8000f8e:	430b      	orrs	r3, r1
 8000f90:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 8000f92:	6813      	ldr	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000f94:	2000      	movs	r0, #0
  __HAL_I2C_ENABLE(hi2c);
 8000f96:	f043 0301 	orr.w	r3, r3, #1
 8000f9a:	6013      	str	r3, [r2, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8000f9c:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000f9e:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000fa0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000fa4:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000fa6:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 8000faa:	bd70      	pop	{r4, r5, r6, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000fac:	4b1b      	ldr	r3, [pc, #108]	; (800101c <HAL_I2C_Init+0x144>)
 8000fae:	4298      	cmp	r0, r3
 8000fb0:	d995      	bls.n	8000ede <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 8000fb2:	4e19      	ldr	r6, [pc, #100]	; (8001018 <HAL_I2C_Init+0x140>)
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000fb4:	f44f 7196 	mov.w	r1, #300	; 0x12c
  freqrange = I2C_FREQRANGE(pclk1);
 8000fb8:	fbb0 f6f6 	udiv	r6, r0, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000fbc:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000fbe:	4371      	muls	r1, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000fc0:	6853      	ldr	r3, [r2, #4]
 8000fc2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000fc6:	4333      	orrs	r3, r6
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000fc8:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000fcc:	6053      	str	r3, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000fce:	6a13      	ldr	r3, [r2, #32]
 8000fd0:	fbb1 f1f6 	udiv	r1, r1, r6
 8000fd4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000fd8:	e7a9      	b.n	8000f2e <HAL_I2C_Init+0x56>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000fda:	68a3      	ldr	r3, [r4, #8]
 8000fdc:	b953      	cbnz	r3, 8000ff4 <HAL_I2C_Init+0x11c>
 8000fde:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8000fe2:	fbb0 f0f3 	udiv	r0, r0, r3
 8000fe6:	1c43      	adds	r3, r0, #1
 8000fe8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000fec:	b16b      	cbz	r3, 800100a <HAL_I2C_Init+0x132>
 8000fee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ff2:	e7b2      	b.n	8000f5a <HAL_I2C_Init+0x82>
 8000ff4:	2319      	movs	r3, #25
 8000ff6:	436b      	muls	r3, r5
 8000ff8:	fbb0 f0f3 	udiv	r0, r0, r3
 8000ffc:	1c43      	adds	r3, r0, #1
 8000ffe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001002:	b113      	cbz	r3, 800100a <HAL_I2C_Init+0x132>
 8001004:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001008:	e7a7      	b.n	8000f5a <HAL_I2C_Init+0x82>
 800100a:	2301      	movs	r3, #1
 800100c:	e7a5      	b.n	8000f5a <HAL_I2C_Init+0x82>
 800100e:	bf00      	nop
 8001010:	000186a0 	.word	0x000186a0
 8001014:	001e847f 	.word	0x001e847f
 8001018:	000f4240 	.word	0x000f4240
 800101c:	003d08ff 	.word	0x003d08ff

08001020 <HAL_I2C_Master_Transmit>:
{
 8001020:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8001024:	4604      	mov	r4, r0
 8001026:	461f      	mov	r7, r3
 8001028:	460d      	mov	r5, r1
 800102a:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 800102c:	f7ff f944 	bl	80002b8 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001030:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  uint32_t tickstart = HAL_GetTick();
 8001034:	4606      	mov	r6, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001036:	2b20      	cmp	r3, #32
 8001038:	d004      	beq.n	8001044 <HAL_I2C_Master_Transmit+0x24>
    return HAL_BUSY;
 800103a:	2502      	movs	r5, #2
}
 800103c:	4628      	mov	r0, r5
 800103e:	b004      	add	sp, #16
 8001040:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001044:	9000      	str	r0, [sp, #0]
 8001046:	2319      	movs	r3, #25
 8001048:	2201      	movs	r2, #1
 800104a:	4958      	ldr	r1, [pc, #352]	; (80011ac <HAL_I2C_Master_Transmit+0x18c>)
 800104c:	4620      	mov	r0, r4
 800104e:	f7ff feeb 	bl	8000e28 <I2C_WaitOnFlagUntilTimeout>
 8001052:	2800      	cmp	r0, #0
 8001054:	d1f1      	bne.n	800103a <HAL_I2C_Master_Transmit+0x1a>
    __HAL_LOCK(hi2c);
 8001056:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800105a:	2b01      	cmp	r3, #1
 800105c:	d0ed      	beq.n	800103a <HAL_I2C_Master_Transmit+0x1a>
 800105e:	2301      	movs	r3, #1
 8001060:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001064:	6823      	ldr	r3, [r4, #0]
 8001066:	681a      	ldr	r2, [r3, #0]
 8001068:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 800106a:	bf5e      	ittt	pl
 800106c:	681a      	ldrpl	r2, [r3, #0]
 800106e:	f042 0201 	orrpl.w	r2, r2, #1
 8001072:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001074:	681a      	ldr	r2, [r3, #0]
 8001076:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800107a:	601a      	str	r2, [r3, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800107c:	2221      	movs	r2, #33	; 0x21
 800107e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001082:	2210      	movs	r2, #16
 8001084:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001088:	2200      	movs	r2, #0
 800108a:	6422      	str	r2, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 800108c:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800108e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
 8001090:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferSize    = hi2c->XferCount;
 8001094:	8522      	strh	r2, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001096:	4a46      	ldr	r2, [pc, #280]	; (80011b0 <HAL_I2C_Master_Transmit+0x190>)
 8001098:	62e2      	str	r2, [r4, #44]	; 0x2c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800109a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800109c:	2a08      	cmp	r2, #8
 800109e:	d004      	beq.n	80010aa <HAL_I2C_Master_Transmit+0x8a>
 80010a0:	2a01      	cmp	r2, #1
 80010a2:	d002      	beq.n	80010aa <HAL_I2C_Master_Transmit+0x8a>
 80010a4:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 80010a8:	d104      	bne.n	80010b4 <HAL_I2C_Master_Transmit+0x94>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80010aa:	681a      	ldr	r2, [r3, #0]
 80010ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80010b0:	601a      	str	r2, [r3, #0]
 80010b2:	e002      	b.n	80010ba <HAL_I2C_Master_Transmit+0x9a>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80010b4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80010b6:	2a12      	cmp	r2, #18
 80010b8:	d0f7      	beq.n	80010aa <HAL_I2C_Master_Transmit+0x8a>
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80010ba:	9600      	str	r6, [sp, #0]
 80010bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80010be:	2200      	movs	r2, #0
 80010c0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80010c4:	4620      	mov	r0, r4
 80010c6:	f7ff feaf 	bl	8000e28 <I2C_WaitOnFlagUntilTimeout>
 80010ca:	b108      	cbz	r0, 80010d0 <HAL_I2C_Master_Transmit+0xb0>
        return HAL_ERROR;
 80010cc:	2501      	movs	r5, #1
 80010ce:	e7b5      	b.n	800103c <HAL_I2C_Master_Transmit+0x1c>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80010d0:	6923      	ldr	r3, [r4, #16]
 80010d2:	6822      	ldr	r2, [r4, #0]
 80010d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80010d8:	d113      	bne.n	8001102 <HAL_I2C_Master_Transmit+0xe2>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80010da:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 80010de:	6115      	str	r5, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80010e0:	4633      	mov	r3, r6
 80010e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80010e4:	4933      	ldr	r1, [pc, #204]	; (80011b4 <HAL_I2C_Master_Transmit+0x194>)
 80010e6:	4620      	mov	r0, r4
 80010e8:	f7ff fe04 	bl	8000cf4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80010ec:	4605      	mov	r5, r0
 80010ee:	2800      	cmp	r0, #0
 80010f0:	d1ec      	bne.n	80010cc <HAL_I2C_Master_Transmit+0xac>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80010f2:	6823      	ldr	r3, [r4, #0]
 80010f4:	9003      	str	r0, [sp, #12]
 80010f6:	695a      	ldr	r2, [r3, #20]
 80010f8:	9203      	str	r2, [sp, #12]
 80010fa:	699b      	ldr	r3, [r3, #24]
 80010fc:	9303      	str	r3, [sp, #12]
 80010fe:	9b03      	ldr	r3, [sp, #12]
    while (hi2c->XferSize > 0U)
 8001100:	e044      	b.n	800118c <HAL_I2C_Master_Transmit+0x16c>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001102:	11eb      	asrs	r3, r5, #7
 8001104:	f003 0306 	and.w	r3, r3, #6
 8001108:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 800110c:	6113      	str	r3, [r2, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800110e:	492a      	ldr	r1, [pc, #168]	; (80011b8 <HAL_I2C_Master_Transmit+0x198>)
 8001110:	4633      	mov	r3, r6
 8001112:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001114:	4620      	mov	r0, r4
 8001116:	f7ff fded 	bl	8000cf4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800111a:	2800      	cmp	r0, #0
 800111c:	d1d6      	bne.n	80010cc <HAL_I2C_Master_Transmit+0xac>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800111e:	6823      	ldr	r3, [r4, #0]
 8001120:	b2ed      	uxtb	r5, r5
 8001122:	611d      	str	r5, [r3, #16]
 8001124:	e7dc      	b.n	80010e0 <HAL_I2C_Master_Transmit+0xc0>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001126:	4632      	mov	r2, r6
 8001128:	990a      	ldr	r1, [sp, #40]	; 0x28
 800112a:	4620      	mov	r0, r4
 800112c:	f7ff feae 	bl	8000e8c <I2C_WaitOnTXEFlagUntilTimeout>
 8001130:	b140      	cbz	r0, 8001144 <HAL_I2C_Master_Transmit+0x124>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001132:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001134:	2b04      	cmp	r3, #4
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001136:	bf01      	itttt	eq
 8001138:	6822      	ldreq	r2, [r4, #0]
 800113a:	6813      	ldreq	r3, [r2, #0]
 800113c:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 8001140:	6013      	streq	r3, [r2, #0]
 8001142:	e7c3      	b.n	80010cc <HAL_I2C_Master_Transmit+0xac>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001144:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001146:	6820      	ldr	r0, [r4, #0]
 8001148:	461a      	mov	r2, r3
 800114a:	f812 1b01 	ldrb.w	r1, [r2], #1
 800114e:	6101      	str	r1, [r0, #16]
      hi2c->pBuffPtr++;
 8001150:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8001152:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001154:	3a01      	subs	r2, #1
 8001156:	b292      	uxth	r2, r2
 8001158:	8562      	strh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800115a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800115c:	6947      	ldr	r7, [r0, #20]
      hi2c->XferSize--;
 800115e:	1e51      	subs	r1, r2, #1
 8001160:	b289      	uxth	r1, r1
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001162:	077f      	lsls	r7, r7, #29
      hi2c->XferSize--;
 8001164:	8521      	strh	r1, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001166:	d50a      	bpl.n	800117e <HAL_I2C_Master_Transmit+0x15e>
 8001168:	b149      	cbz	r1, 800117e <HAL_I2C_Master_Transmit+0x15e>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800116a:	7859      	ldrb	r1, [r3, #1]
        hi2c->pBuffPtr++;
 800116c:	3302      	adds	r3, #2
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800116e:	6101      	str	r1, [r0, #16]
        hi2c->pBuffPtr++;
 8001170:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8001172:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8001174:	3a02      	subs	r2, #2
        hi2c->XferCount--;
 8001176:	3b01      	subs	r3, #1
 8001178:	b29b      	uxth	r3, r3
 800117a:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 800117c:	8522      	strh	r2, [r4, #40]	; 0x28
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800117e:	4632      	mov	r2, r6
 8001180:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001182:	4620      	mov	r0, r4
 8001184:	f7ff fdfb 	bl	8000d7e <I2C_WaitOnBTFFlagUntilTimeout>
 8001188:	2800      	cmp	r0, #0
 800118a:	d1d2      	bne.n	8001132 <HAL_I2C_Master_Transmit+0x112>
    while (hi2c->XferSize > 0U)
 800118c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800118e:	2b00      	cmp	r3, #0
 8001190:	d1c9      	bne.n	8001126 <HAL_I2C_Master_Transmit+0x106>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001192:	6821      	ldr	r1, [r4, #0]
 8001194:	680a      	ldr	r2, [r1, #0]
 8001196:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800119a:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800119c:	2220      	movs	r2, #32
    __HAL_UNLOCK(hi2c);
 800119e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 80011a2:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80011a6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 80011aa:	e747      	b.n	800103c <HAL_I2C_Master_Transmit+0x1c>
 80011ac:	00100002 	.word	0x00100002
 80011b0:	ffff0000 	.word	0xffff0000
 80011b4:	00010002 	.word	0x00010002
 80011b8:	00010008 	.word	0x00010008

080011bc <HAL_I2C_Master_Receive>:
{
 80011bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80011c0:	4604      	mov	r4, r0
 80011c2:	b089      	sub	sp, #36	; 0x24
 80011c4:	4698      	mov	r8, r3
 80011c6:	460f      	mov	r7, r1
 80011c8:	4691      	mov	r9, r2
 80011ca:	9e10      	ldr	r6, [sp, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 80011cc:	f7ff f874 	bl	80002b8 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80011d0:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  uint32_t tickstart = HAL_GetTick();
 80011d4:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 80011d6:	2b20      	cmp	r3, #32
 80011d8:	d004      	beq.n	80011e4 <HAL_I2C_Master_Receive+0x28>
    return HAL_BUSY;
 80011da:	2702      	movs	r7, #2
}
 80011dc:	4638      	mov	r0, r7
 80011de:	b009      	add	sp, #36	; 0x24
 80011e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80011e4:	9000      	str	r0, [sp, #0]
 80011e6:	2319      	movs	r3, #25
 80011e8:	2201      	movs	r2, #1
 80011ea:	499c      	ldr	r1, [pc, #624]	; (800145c <HAL_I2C_Master_Receive+0x2a0>)
 80011ec:	4620      	mov	r0, r4
 80011ee:	f7ff fe1b 	bl	8000e28 <I2C_WaitOnFlagUntilTimeout>
 80011f2:	2800      	cmp	r0, #0
 80011f4:	d1f1      	bne.n	80011da <HAL_I2C_Master_Receive+0x1e>
    __HAL_LOCK(hi2c);
 80011f6:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80011fa:	2b01      	cmp	r3, #1
 80011fc:	d0ed      	beq.n	80011da <HAL_I2C_Master_Receive+0x1e>
 80011fe:	2301      	movs	r3, #1
 8001200:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001204:	6823      	ldr	r3, [r4, #0]
 8001206:	681a      	ldr	r2, [r3, #0]
 8001208:	07d0      	lsls	r0, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 800120a:	bf5e      	ittt	pl
 800120c:	681a      	ldrpl	r2, [r3, #0]
 800120e:	f042 0201 	orrpl.w	r2, r2, #1
 8001212:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001214:	681a      	ldr	r2, [r3, #0]
 8001216:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800121a:	601a      	str	r2, [r3, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800121c:	2222      	movs	r2, #34	; 0x22
 800121e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001222:	2210      	movs	r2, #16
 8001224:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001228:	2200      	movs	r2, #0
 800122a:	6422      	str	r2, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 800122c:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001230:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
 8001232:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    hi2c->XferSize    = hi2c->XferCount;
 8001236:	8522      	strh	r2, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001238:	4a89      	ldr	r2, [pc, #548]	; (8001460 <HAL_I2C_Master_Receive+0x2a4>)
 800123a:	62e2      	str	r2, [r4, #44]	; 0x2c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800123c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800123e:	6819      	ldr	r1, [r3, #0]
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001240:	2a08      	cmp	r2, #8
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001242:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8001246:	6019      	str	r1, [r3, #0]
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001248:	d004      	beq.n	8001254 <HAL_I2C_Master_Receive+0x98>
 800124a:	2a01      	cmp	r2, #1
 800124c:	d002      	beq.n	8001254 <HAL_I2C_Master_Receive+0x98>
 800124e:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8001252:	d104      	bne.n	800125e <HAL_I2C_Master_Receive+0xa2>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001254:	681a      	ldr	r2, [r3, #0]
 8001256:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800125a:	601a      	str	r2, [r3, #0]
 800125c:	e002      	b.n	8001264 <HAL_I2C_Master_Receive+0xa8>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800125e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001260:	2a11      	cmp	r2, #17
 8001262:	d0f7      	beq.n	8001254 <HAL_I2C_Master_Receive+0x98>
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001264:	9500      	str	r5, [sp, #0]
 8001266:	4633      	mov	r3, r6
 8001268:	2200      	movs	r2, #0
 800126a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800126e:	4620      	mov	r0, r4
 8001270:	f7ff fdda 	bl	8000e28 <I2C_WaitOnFlagUntilTimeout>
 8001274:	b108      	cbz	r0, 800127a <HAL_I2C_Master_Receive+0xbe>
      return HAL_ERROR;
 8001276:	2701      	movs	r7, #1
 8001278:	e7b0      	b.n	80011dc <HAL_I2C_Master_Receive+0x20>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800127a:	6923      	ldr	r3, [r4, #16]
 800127c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001280:	6823      	ldr	r3, [r4, #0]
 8001282:	d143      	bne.n	800130c <HAL_I2C_Master_Receive+0x150>
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001284:	f047 0701 	orr.w	r7, r7, #1
 8001288:	b2ff      	uxtb	r7, r7
 800128a:	611f      	str	r7, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800128c:	462b      	mov	r3, r5
 800128e:	4632      	mov	r2, r6
 8001290:	4974      	ldr	r1, [pc, #464]	; (8001464 <HAL_I2C_Master_Receive+0x2a8>)
 8001292:	4620      	mov	r0, r4
 8001294:	f7ff fd2e 	bl	8000cf4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001298:	4607      	mov	r7, r0
 800129a:	2800      	cmp	r0, #0
 800129c:	d1eb      	bne.n	8001276 <HAL_I2C_Master_Receive+0xba>
    if (hi2c->XferSize == 0U)
 800129e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 80012a0:	6823      	ldr	r3, [r4, #0]
 80012a2:	2a00      	cmp	r2, #0
 80012a4:	d066      	beq.n	8001374 <HAL_I2C_Master_Receive+0x1b8>
    else if (hi2c->XferSize == 1U)
 80012a6:	2a01      	cmp	r2, #1
 80012a8:	d177      	bne.n	800139a <HAL_I2C_Master_Receive+0x1de>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80012aa:	681a      	ldr	r2, [r3, #0]
 80012ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80012b0:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012b2:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80012b4:	6823      	ldr	r3, [r4, #0]
 80012b6:	9704      	str	r7, [sp, #16]
 80012b8:	695a      	ldr	r2, [r3, #20]
 80012ba:	9204      	str	r2, [sp, #16]
 80012bc:	699a      	ldr	r2, [r3, #24]
 80012be:	9204      	str	r2, [sp, #16]
 80012c0:	9a04      	ldr	r2, [sp, #16]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80012c2:	681a      	ldr	r2, [r3, #0]
 80012c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80012c8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80012ca:	b662      	cpsie	i
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80012cc:	f8df 819c 	ldr.w	r8, [pc, #412]	; 800146c <HAL_I2C_Master_Receive+0x2b0>
    while (hi2c->XferSize > 0U)
 80012d0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d058      	beq.n	8001388 <HAL_I2C_Master_Receive+0x1cc>
      if (hi2c->XferSize <= 3U)
 80012d6:	2b03      	cmp	r3, #3
 80012d8:	f200 80ca 	bhi.w	8001470 <HAL_I2C_Master_Receive+0x2b4>
        if (hi2c->XferSize == 1U)
 80012dc:	2b01      	cmp	r3, #1
 80012de:	d178      	bne.n	80013d2 <HAL_I2C_Master_Receive+0x216>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80012e0:	462a      	mov	r2, r5
 80012e2:	4631      	mov	r1, r6
 80012e4:	4620      	mov	r0, r4
 80012e6:	f7ff fd70 	bl	8000dca <I2C_WaitOnRXNEFlagUntilTimeout>
 80012ea:	2800      	cmp	r0, #0
 80012ec:	d1c3      	bne.n	8001276 <HAL_I2C_Master_Receive+0xba>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80012ee:	6822      	ldr	r2, [r4, #0]
 80012f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80012f2:	6912      	ldr	r2, [r2, #16]
 80012f4:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80012f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80012f8:	3301      	adds	r3, #1
 80012fa:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80012fc:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80012fe:	3b01      	subs	r3, #1
 8001300:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8001302:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001304:	3b01      	subs	r3, #1
 8001306:	b29b      	uxth	r3, r3
 8001308:	8563      	strh	r3, [r4, #42]	; 0x2a
 800130a:	e7e1      	b.n	80012d0 <HAL_I2C_Master_Receive+0x114>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800130c:	ea4f 18e7 	mov.w	r8, r7, asr #7
 8001310:	f008 0806 	and.w	r8, r8, #6
 8001314:	f048 02f0 	orr.w	r2, r8, #240	; 0xf0
 8001318:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800131a:	4953      	ldr	r1, [pc, #332]	; (8001468 <HAL_I2C_Master_Receive+0x2ac>)
 800131c:	462b      	mov	r3, r5
 800131e:	4632      	mov	r2, r6
 8001320:	4620      	mov	r0, r4
 8001322:	f7ff fce7 	bl	8000cf4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001326:	2800      	cmp	r0, #0
 8001328:	d1a5      	bne.n	8001276 <HAL_I2C_Master_Receive+0xba>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800132a:	6823      	ldr	r3, [r4, #0]
 800132c:	b2ff      	uxtb	r7, r7
 800132e:	611f      	str	r7, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001330:	4632      	mov	r2, r6
 8001332:	462b      	mov	r3, r5
 8001334:	494b      	ldr	r1, [pc, #300]	; (8001464 <HAL_I2C_Master_Receive+0x2a8>)
 8001336:	4620      	mov	r0, r4
 8001338:	f7ff fcdc 	bl	8000cf4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800133c:	4602      	mov	r2, r0
 800133e:	2800      	cmp	r0, #0
 8001340:	d199      	bne.n	8001276 <HAL_I2C_Master_Receive+0xba>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001342:	6823      	ldr	r3, [r4, #0]
 8001344:	9007      	str	r0, [sp, #28]
 8001346:	6959      	ldr	r1, [r3, #20]
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001348:	4620      	mov	r0, r4
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800134a:	9107      	str	r1, [sp, #28]
 800134c:	6999      	ldr	r1, [r3, #24]
 800134e:	9107      	str	r1, [sp, #28]
 8001350:	9907      	ldr	r1, [sp, #28]
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001352:	6819      	ldr	r1, [r3, #0]
 8001354:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8001358:	6019      	str	r1, [r3, #0]
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800135a:	9500      	str	r5, [sp, #0]
 800135c:	4633      	mov	r3, r6
 800135e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001362:	f7ff fd61 	bl	8000e28 <I2C_WaitOnFlagUntilTimeout>
 8001366:	2800      	cmp	r0, #0
 8001368:	d185      	bne.n	8001276 <HAL_I2C_Master_Receive+0xba>
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800136a:	6822      	ldr	r2, [r4, #0]
 800136c:	f048 03f1 	orr.w	r3, r8, #241	; 0xf1
 8001370:	6113      	str	r3, [r2, #16]
 8001372:	e78b      	b.n	800128c <HAL_I2C_Master_Receive+0xd0>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001374:	9703      	str	r7, [sp, #12]
 8001376:	695a      	ldr	r2, [r3, #20]
 8001378:	9203      	str	r2, [sp, #12]
 800137a:	699a      	ldr	r2, [r3, #24]
 800137c:	9203      	str	r2, [sp, #12]
 800137e:	9a03      	ldr	r2, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001380:	681a      	ldr	r2, [r3, #0]
 8001382:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001386:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8001388:	2320      	movs	r3, #32
 800138a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800138e:	2300      	movs	r3, #0
 8001390:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8001394:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8001398:	e720      	b.n	80011dc <HAL_I2C_Master_Receive+0x20>
    else if (hi2c->XferSize == 2U)
 800139a:	2a02      	cmp	r2, #2
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800139c:	681a      	ldr	r2, [r3, #0]
    else if (hi2c->XferSize == 2U)
 800139e:	d10e      	bne.n	80013be <HAL_I2C_Master_Receive+0x202>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80013a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80013a4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80013a6:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80013a8:	6823      	ldr	r3, [r4, #0]
 80013aa:	9705      	str	r7, [sp, #20]
 80013ac:	695a      	ldr	r2, [r3, #20]
 80013ae:	9205      	str	r2, [sp, #20]
 80013b0:	699a      	ldr	r2, [r3, #24]
 80013b2:	9205      	str	r2, [sp, #20]
 80013b4:	9a05      	ldr	r2, [sp, #20]
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80013b6:	681a      	ldr	r2, [r3, #0]
 80013b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80013bc:	e784      	b.n	80012c8 <HAL_I2C_Master_Receive+0x10c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80013be:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80013c2:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80013c4:	9706      	str	r7, [sp, #24]
 80013c6:	695a      	ldr	r2, [r3, #20]
 80013c8:	9206      	str	r2, [sp, #24]
 80013ca:	699b      	ldr	r3, [r3, #24]
 80013cc:	9306      	str	r3, [sp, #24]
 80013ce:	9b06      	ldr	r3, [sp, #24]
 80013d0:	e77c      	b.n	80012cc <HAL_I2C_Master_Receive+0x110>
        else if (hi2c->XferSize == 2U)
 80013d2:	2b02      	cmp	r3, #2
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80013d4:	9500      	str	r5, [sp, #0]
 80013d6:	4633      	mov	r3, r6
 80013d8:	f04f 0200 	mov.w	r2, #0
 80013dc:	4641      	mov	r1, r8
 80013de:	4620      	mov	r0, r4
        else if (hi2c->XferSize == 2U)
 80013e0:	d119      	bne.n	8001416 <HAL_I2C_Master_Receive+0x25a>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80013e2:	f7ff fd21 	bl	8000e28 <I2C_WaitOnFlagUntilTimeout>
 80013e6:	2800      	cmp	r0, #0
 80013e8:	f47f af45 	bne.w	8001276 <HAL_I2C_Master_Receive+0xba>
 80013ec:	b672      	cpsid	i
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80013ee:	6823      	ldr	r3, [r4, #0]
 80013f0:	681a      	ldr	r2, [r3, #0]
 80013f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80013f6:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80013f8:	691b      	ldr	r3, [r3, #16]
 80013fa:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80013fc:	7013      	strb	r3, [r2, #0]
          hi2c->pBuffPtr++;
 80013fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001400:	3301      	adds	r3, #1
 8001402:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8001404:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001406:	3b01      	subs	r3, #1
 8001408:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800140a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800140c:	3b01      	subs	r3, #1
 800140e:	b29b      	uxth	r3, r3
 8001410:	8563      	strh	r3, [r4, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001412:	b662      	cpsie	i
 8001414:	e76b      	b.n	80012ee <HAL_I2C_Master_Receive+0x132>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001416:	f7ff fd07 	bl	8000e28 <I2C_WaitOnFlagUntilTimeout>
 800141a:	4602      	mov	r2, r0
 800141c:	2800      	cmp	r0, #0
 800141e:	f47f af2a 	bne.w	8001276 <HAL_I2C_Master_Receive+0xba>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001422:	6821      	ldr	r1, [r4, #0]
 8001424:	680b      	ldr	r3, [r1, #0]
 8001426:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800142a:	600b      	str	r3, [r1, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800142c:	b672      	cpsid	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800142e:	6821      	ldr	r1, [r4, #0]
 8001430:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001432:	6909      	ldr	r1, [r1, #16]
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001434:	4620      	mov	r0, r4
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001436:	7019      	strb	r1, [r3, #0]
          hi2c->pBuffPtr++;
 8001438:	6a63      	ldr	r3, [r4, #36]	; 0x24
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800143a:	9500      	str	r5, [sp, #0]
          hi2c->pBuffPtr++;
 800143c:	3301      	adds	r3, #1
 800143e:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8001440:	8d23      	ldrh	r3, [r4, #40]	; 0x28
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001442:	4641      	mov	r1, r8
          hi2c->XferSize--;
 8001444:	3b01      	subs	r3, #1
 8001446:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8001448:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800144a:	3b01      	subs	r3, #1
 800144c:	b29b      	uxth	r3, r3
 800144e:	8563      	strh	r3, [r4, #42]	; 0x2a
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001450:	4633      	mov	r3, r6
 8001452:	f7ff fce9 	bl	8000e28 <I2C_WaitOnFlagUntilTimeout>
 8001456:	2800      	cmp	r0, #0
 8001458:	d0c9      	beq.n	80013ee <HAL_I2C_Master_Receive+0x232>
 800145a:	e70c      	b.n	8001276 <HAL_I2C_Master_Receive+0xba>
 800145c:	00100002 	.word	0x00100002
 8001460:	ffff0000 	.word	0xffff0000
 8001464:	00010002 	.word	0x00010002
 8001468:	00010008 	.word	0x00010008
 800146c:	00010004 	.word	0x00010004
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001470:	462a      	mov	r2, r5
 8001472:	4631      	mov	r1, r6
 8001474:	4620      	mov	r0, r4
 8001476:	f7ff fca8 	bl	8000dca <I2C_WaitOnRXNEFlagUntilTimeout>
 800147a:	2800      	cmp	r0, #0
 800147c:	f47f aefb 	bne.w	8001276 <HAL_I2C_Master_Receive+0xba>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001480:	6822      	ldr	r2, [r4, #0]
 8001482:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001484:	6912      	ldr	r2, [r2, #16]
 8001486:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8001488:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800148a:	1c53      	adds	r3, r2, #1
 800148c:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 800148e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001490:	3b01      	subs	r3, #1
 8001492:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8001494:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001496:	3b01      	subs	r3, #1
 8001498:	b29b      	uxth	r3, r3
 800149a:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800149c:	6823      	ldr	r3, [r4, #0]
 800149e:	6959      	ldr	r1, [r3, #20]
 80014a0:	0749      	lsls	r1, r1, #29
 80014a2:	f57f af15 	bpl.w	80012d0 <HAL_I2C_Master_Receive+0x114>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80014a6:	691b      	ldr	r3, [r3, #16]
 80014a8:	7053      	strb	r3, [r2, #1]
 80014aa:	e724      	b.n	80012f6 <HAL_I2C_Master_Receive+0x13a>

080014ac <HAL_I2C_IsDeviceReady>:
{
 80014ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80014b0:	4604      	mov	r4, r0
 80014b2:	b085      	sub	sp, #20
 80014b4:	4698      	mov	r8, r3
 80014b6:	4689      	mov	r9, r1
 80014b8:	4692      	mov	sl, r2
  uint32_t tickstart = HAL_GetTick();
 80014ba:	f7fe fefd 	bl	80002b8 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80014be:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  uint32_t tickstart = HAL_GetTick();
 80014c2:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 80014c4:	2b20      	cmp	r3, #32
 80014c6:	d003      	beq.n	80014d0 <HAL_I2C_IsDeviceReady+0x24>
    return HAL_BUSY;
 80014c8:	2002      	movs	r0, #2
}
 80014ca:	b005      	add	sp, #20
 80014cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80014d0:	9000      	str	r0, [sp, #0]
 80014d2:	2319      	movs	r3, #25
 80014d4:	2201      	movs	r2, #1
 80014d6:	4949      	ldr	r1, [pc, #292]	; (80015fc <HAL_I2C_IsDeviceReady+0x150>)
 80014d8:	4620      	mov	r0, r4
 80014da:	f7ff fca5 	bl	8000e28 <I2C_WaitOnFlagUntilTimeout>
 80014de:	2800      	cmp	r0, #0
 80014e0:	d1f2      	bne.n	80014c8 <HAL_I2C_IsDeviceReady+0x1c>
    __HAL_LOCK(hi2c);
 80014e2:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80014e6:	2b01      	cmp	r3, #1
 80014e8:	d0ee      	beq.n	80014c8 <HAL_I2C_IsDeviceReady+0x1c>
 80014ea:	2301      	movs	r3, #1
 80014ec:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80014f0:	6823      	ldr	r3, [r4, #0]
  uint32_t I2C_Trials = 1U;
 80014f2:	2701      	movs	r7, #1
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80014f4:	681a      	ldr	r2, [r3, #0]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80014f6:	f8df b104 	ldr.w	fp, [pc, #260]	; 80015fc <HAL_I2C_IsDeviceReady+0x150>
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80014fa:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 80014fc:	bf58      	it	pl
 80014fe:	681a      	ldrpl	r2, [r3, #0]
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001500:	f009 09fe 	and.w	r9, r9, #254	; 0xfe
      __HAL_I2C_ENABLE(hi2c);
 8001504:	bf5c      	itt	pl
 8001506:	f042 0201 	orrpl.w	r2, r2, #1
 800150a:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800150c:	681a      	ldr	r2, [r3, #0]
 800150e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001512:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8001514:	2324      	movs	r3, #36	; 0x24
 8001516:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800151a:	2300      	movs	r3, #0
 800151c:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800151e:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 8001522:	62e3      	str	r3, [r4, #44]	; 0x2c
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001524:	6822      	ldr	r2, [r4, #0]
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001526:	f04f 1101 	mov.w	r1, #65537	; 0x10001
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800152a:	6813      	ldr	r3, [r2, #0]
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800152c:	4620      	mov	r0, r4
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800152e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001532:	6013      	str	r3, [r2, #0]
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001534:	9500      	str	r5, [sp, #0]
 8001536:	4643      	mov	r3, r8
 8001538:	2200      	movs	r2, #0
 800153a:	f7ff fc75 	bl	8000e28 <I2C_WaitOnFlagUntilTimeout>
 800153e:	b108      	cbz	r0, 8001544 <HAL_I2C_IsDeviceReady+0x98>
    return HAL_ERROR;
 8001540:	2001      	movs	r0, #1
 8001542:	e7c2      	b.n	80014ca <HAL_I2C_IsDeviceReady+0x1e>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001544:	6823      	ldr	r3, [r4, #0]
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8001546:	26a0      	movs	r6, #160	; 0xa0
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001548:	f8c3 9010 	str.w	r9, [r3, #16]
      tickstart = HAL_GetTick();
 800154c:	f7fe feb4 	bl	80002b8 <HAL_GetTick>
 8001550:	4605      	mov	r5, r0
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001552:	6823      	ldr	r3, [r4, #0]
 8001554:	695a      	ldr	r2, [r3, #20]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001556:	695b      	ldr	r3, [r3, #20]
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001558:	f3c2 0240 	ubfx	r2, r2, #1, #1
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800155c:	f3c3 2380 	ubfx	r3, r3, #10, #1
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001560:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 8001564:	29a0      	cmp	r1, #160	; 0xa0
 8001566:	d001      	beq.n	800156c <HAL_I2C_IsDeviceReady+0xc0>
 8001568:	b902      	cbnz	r2, 800156c <HAL_I2C_IsDeviceReady+0xc0>
 800156a:	b303      	cbz	r3, 80015ae <HAL_I2C_IsDeviceReady+0x102>
      hi2c->State = HAL_I2C_STATE_READY;
 800156c:	2620      	movs	r6, #32
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800156e:	6823      	ldr	r3, [r4, #0]
      hi2c->State = HAL_I2C_STATE_READY;
 8001570:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001574:	695a      	ldr	r2, [r3, #20]
 8001576:	f012 0f02 	tst.w	r2, #2
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001580:	601a      	str	r2, [r3, #0]
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001582:	d026      	beq.n	80015d2 <HAL_I2C_IsDeviceReady+0x126>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001584:	2200      	movs	r2, #0
 8001586:	9203      	str	r2, [sp, #12]
 8001588:	695a      	ldr	r2, [r3, #20]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800158a:	491c      	ldr	r1, [pc, #112]	; (80015fc <HAL_I2C_IsDeviceReady+0x150>)
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800158c:	9203      	str	r2, [sp, #12]
 800158e:	699b      	ldr	r3, [r3, #24]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001590:	2201      	movs	r2, #1
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001592:	9303      	str	r3, [sp, #12]
 8001594:	9b03      	ldr	r3, [sp, #12]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001596:	9500      	str	r5, [sp, #0]
 8001598:	2319      	movs	r3, #25
 800159a:	4620      	mov	r0, r4
 800159c:	f7ff fc44 	bl	8000e28 <I2C_WaitOnFlagUntilTimeout>
 80015a0:	2800      	cmp	r0, #0
 80015a2:	d1cd      	bne.n	8001540 <HAL_I2C_IsDeviceReady+0x94>
        hi2c->State = HAL_I2C_STATE_READY;
 80015a4:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 80015a8:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
        return HAL_OK;
 80015ac:	e78d      	b.n	80014ca <HAL_I2C_IsDeviceReady+0x1e>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80015ae:	f7fe fe83 	bl	80002b8 <HAL_GetTick>
 80015b2:	1b40      	subs	r0, r0, r5
 80015b4:	4580      	cmp	r8, r0
 80015b6:	d302      	bcc.n	80015be <HAL_I2C_IsDeviceReady+0x112>
 80015b8:	f1b8 0f00 	cmp.w	r8, #0
 80015bc:	d101      	bne.n	80015c2 <HAL_I2C_IsDeviceReady+0x116>
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80015be:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80015c2:	6823      	ldr	r3, [r4, #0]
 80015c4:	695a      	ldr	r2, [r3, #20]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80015c6:	695b      	ldr	r3, [r3, #20]
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80015c8:	f3c2 0240 	ubfx	r2, r2, #1, #1
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80015cc:	f3c3 2380 	ubfx	r3, r3, #10, #1
 80015d0:	e7c6      	b.n	8001560 <HAL_I2C_IsDeviceReady+0xb4>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80015d2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80015d6:	4659      	mov	r1, fp
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80015d8:	615a      	str	r2, [r3, #20]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80015da:	4620      	mov	r0, r4
 80015dc:	9500      	str	r5, [sp, #0]
 80015de:	2319      	movs	r3, #25
 80015e0:	2201      	movs	r2, #1
 80015e2:	f7ff fc21 	bl	8000e28 <I2C_WaitOnFlagUntilTimeout>
 80015e6:	2800      	cmp	r0, #0
 80015e8:	d1aa      	bne.n	8001540 <HAL_I2C_IsDeviceReady+0x94>
      I2C_Trials++;
 80015ea:	3701      	adds	r7, #1
    while (I2C_Trials < Trials);
 80015ec:	4557      	cmp	r7, sl
 80015ee:	d399      	bcc.n	8001524 <HAL_I2C_IsDeviceReady+0x78>
    hi2c->State = HAL_I2C_STATE_READY;
 80015f0:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 80015f4:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
 80015f8:	e7a2      	b.n	8001540 <HAL_I2C_IsDeviceReady+0x94>
 80015fa:	bf00      	nop
 80015fc:	00100002 	.word	0x00100002

08001600 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001600:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001604:	4605      	mov	r5, r0
 8001606:	b908      	cbnz	r0, 800160c <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 8001608:	2001      	movs	r0, #1
 800160a:	e03c      	b.n	8001686 <HAL_RCC_OscConfig+0x86>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800160c:	6803      	ldr	r3, [r0, #0]
 800160e:	07db      	lsls	r3, r3, #31
 8001610:	d410      	bmi.n	8001634 <HAL_RCC_OscConfig+0x34>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001612:	682b      	ldr	r3, [r5, #0]
 8001614:	079f      	lsls	r7, r3, #30
 8001616:	d45d      	bmi.n	80016d4 <HAL_RCC_OscConfig+0xd4>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001618:	682b      	ldr	r3, [r5, #0]
 800161a:	0719      	lsls	r1, r3, #28
 800161c:	f100 8094 	bmi.w	8001748 <HAL_RCC_OscConfig+0x148>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001620:	682b      	ldr	r3, [r5, #0]
 8001622:	075a      	lsls	r2, r3, #29
 8001624:	f100 80be 	bmi.w	80017a4 <HAL_RCC_OscConfig+0x1a4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001628:	69e8      	ldr	r0, [r5, #28]
 800162a:	2800      	cmp	r0, #0
 800162c:	f040 812c 	bne.w	8001888 <HAL_RCC_OscConfig+0x288>
        }
      }
    }
  }

  return HAL_OK;
 8001630:	2000      	movs	r0, #0
 8001632:	e028      	b.n	8001686 <HAL_RCC_OscConfig+0x86>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001634:	4c8f      	ldr	r4, [pc, #572]	; (8001874 <HAL_RCC_OscConfig+0x274>)
 8001636:	6863      	ldr	r3, [r4, #4]
 8001638:	f003 030c 	and.w	r3, r3, #12
 800163c:	2b04      	cmp	r3, #4
 800163e:	d007      	beq.n	8001650 <HAL_RCC_OscConfig+0x50>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001640:	6863      	ldr	r3, [r4, #4]
 8001642:	f003 030c 	and.w	r3, r3, #12
 8001646:	2b08      	cmp	r3, #8
 8001648:	d109      	bne.n	800165e <HAL_RCC_OscConfig+0x5e>
 800164a:	6863      	ldr	r3, [r4, #4]
 800164c:	03de      	lsls	r6, r3, #15
 800164e:	d506      	bpl.n	800165e <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001650:	6823      	ldr	r3, [r4, #0]
 8001652:	039c      	lsls	r4, r3, #14
 8001654:	d5dd      	bpl.n	8001612 <HAL_RCC_OscConfig+0x12>
 8001656:	686b      	ldr	r3, [r5, #4]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d1da      	bne.n	8001612 <HAL_RCC_OscConfig+0x12>
 800165c:	e7d4      	b.n	8001608 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800165e:	686b      	ldr	r3, [r5, #4]
 8001660:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001664:	d112      	bne.n	800168c <HAL_RCC_OscConfig+0x8c>
 8001666:	6823      	ldr	r3, [r4, #0]
 8001668:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800166c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800166e:	f7fe fe23 	bl	80002b8 <HAL_GetTick>
 8001672:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001674:	6823      	ldr	r3, [r4, #0]
 8001676:	0398      	lsls	r0, r3, #14
 8001678:	d4cb      	bmi.n	8001612 <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800167a:	f7fe fe1d 	bl	80002b8 <HAL_GetTick>
 800167e:	1b80      	subs	r0, r0, r6
 8001680:	2864      	cmp	r0, #100	; 0x64
 8001682:	d9f7      	bls.n	8001674 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8001684:	2003      	movs	r0, #3
}
 8001686:	b002      	add	sp, #8
 8001688:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800168c:	b99b      	cbnz	r3, 80016b6 <HAL_RCC_OscConfig+0xb6>
 800168e:	6823      	ldr	r3, [r4, #0]
 8001690:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001694:	6023      	str	r3, [r4, #0]
 8001696:	6823      	ldr	r3, [r4, #0]
 8001698:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800169c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800169e:	f7fe fe0b 	bl	80002b8 <HAL_GetTick>
 80016a2:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016a4:	6823      	ldr	r3, [r4, #0]
 80016a6:	0399      	lsls	r1, r3, #14
 80016a8:	d5b3      	bpl.n	8001612 <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016aa:	f7fe fe05 	bl	80002b8 <HAL_GetTick>
 80016ae:	1b80      	subs	r0, r0, r6
 80016b0:	2864      	cmp	r0, #100	; 0x64
 80016b2:	d9f7      	bls.n	80016a4 <HAL_RCC_OscConfig+0xa4>
 80016b4:	e7e6      	b.n	8001684 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016b6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016ba:	6823      	ldr	r3, [r4, #0]
 80016bc:	d103      	bne.n	80016c6 <HAL_RCC_OscConfig+0xc6>
 80016be:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016c2:	6023      	str	r3, [r4, #0]
 80016c4:	e7cf      	b.n	8001666 <HAL_RCC_OscConfig+0x66>
 80016c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016ca:	6023      	str	r3, [r4, #0]
 80016cc:	6823      	ldr	r3, [r4, #0]
 80016ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016d2:	e7cb      	b.n	800166c <HAL_RCC_OscConfig+0x6c>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80016d4:	4c67      	ldr	r4, [pc, #412]	; (8001874 <HAL_RCC_OscConfig+0x274>)
 80016d6:	6863      	ldr	r3, [r4, #4]
 80016d8:	f013 0f0c 	tst.w	r3, #12
 80016dc:	d007      	beq.n	80016ee <HAL_RCC_OscConfig+0xee>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80016de:	6863      	ldr	r3, [r4, #4]
 80016e0:	f003 030c 	and.w	r3, r3, #12
 80016e4:	2b08      	cmp	r3, #8
 80016e6:	d110      	bne.n	800170a <HAL_RCC_OscConfig+0x10a>
 80016e8:	6863      	ldr	r3, [r4, #4]
 80016ea:	03da      	lsls	r2, r3, #15
 80016ec:	d40d      	bmi.n	800170a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016ee:	6823      	ldr	r3, [r4, #0]
 80016f0:	079b      	lsls	r3, r3, #30
 80016f2:	d502      	bpl.n	80016fa <HAL_RCC_OscConfig+0xfa>
 80016f4:	692b      	ldr	r3, [r5, #16]
 80016f6:	2b01      	cmp	r3, #1
 80016f8:	d186      	bne.n	8001608 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016fa:	6823      	ldr	r3, [r4, #0]
 80016fc:	696a      	ldr	r2, [r5, #20]
 80016fe:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001702:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001706:	6023      	str	r3, [r4, #0]
 8001708:	e786      	b.n	8001618 <HAL_RCC_OscConfig+0x18>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800170a:	692a      	ldr	r2, [r5, #16]
 800170c:	4b5a      	ldr	r3, [pc, #360]	; (8001878 <HAL_RCC_OscConfig+0x278>)
 800170e:	b16a      	cbz	r2, 800172c <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_ENABLE();
 8001710:	2201      	movs	r2, #1
 8001712:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001714:	f7fe fdd0 	bl	80002b8 <HAL_GetTick>
 8001718:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800171a:	6823      	ldr	r3, [r4, #0]
 800171c:	079f      	lsls	r7, r3, #30
 800171e:	d4ec      	bmi.n	80016fa <HAL_RCC_OscConfig+0xfa>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001720:	f7fe fdca 	bl	80002b8 <HAL_GetTick>
 8001724:	1b80      	subs	r0, r0, r6
 8001726:	2802      	cmp	r0, #2
 8001728:	d9f7      	bls.n	800171a <HAL_RCC_OscConfig+0x11a>
 800172a:	e7ab      	b.n	8001684 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 800172c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800172e:	f7fe fdc3 	bl	80002b8 <HAL_GetTick>
 8001732:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001734:	6823      	ldr	r3, [r4, #0]
 8001736:	0798      	lsls	r0, r3, #30
 8001738:	f57f af6e 	bpl.w	8001618 <HAL_RCC_OscConfig+0x18>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800173c:	f7fe fdbc 	bl	80002b8 <HAL_GetTick>
 8001740:	1b80      	subs	r0, r0, r6
 8001742:	2802      	cmp	r0, #2
 8001744:	d9f6      	bls.n	8001734 <HAL_RCC_OscConfig+0x134>
 8001746:	e79d      	b.n	8001684 <HAL_RCC_OscConfig+0x84>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001748:	69aa      	ldr	r2, [r5, #24]
 800174a:	4c4a      	ldr	r4, [pc, #296]	; (8001874 <HAL_RCC_OscConfig+0x274>)
 800174c:	4b4b      	ldr	r3, [pc, #300]	; (800187c <HAL_RCC_OscConfig+0x27c>)
 800174e:	b1da      	cbz	r2, 8001788 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 8001750:	2201      	movs	r2, #1
 8001752:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001754:	f7fe fdb0 	bl	80002b8 <HAL_GetTick>
 8001758:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800175a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800175c:	079b      	lsls	r3, r3, #30
 800175e:	d50d      	bpl.n	800177c <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001760:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001764:	4b46      	ldr	r3, [pc, #280]	; (8001880 <HAL_RCC_OscConfig+0x280>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	fbb3 f3f2 	udiv	r3, r3, r2
 800176c:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 800176e:	bf00      	nop
  }
  while (Delay --);
 8001770:	9b01      	ldr	r3, [sp, #4]
 8001772:	1e5a      	subs	r2, r3, #1
 8001774:	9201      	str	r2, [sp, #4]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d1f9      	bne.n	800176e <HAL_RCC_OscConfig+0x16e>
 800177a:	e751      	b.n	8001620 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800177c:	f7fe fd9c 	bl	80002b8 <HAL_GetTick>
 8001780:	1b80      	subs	r0, r0, r6
 8001782:	2802      	cmp	r0, #2
 8001784:	d9e9      	bls.n	800175a <HAL_RCC_OscConfig+0x15a>
 8001786:	e77d      	b.n	8001684 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8001788:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800178a:	f7fe fd95 	bl	80002b8 <HAL_GetTick>
 800178e:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001790:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001792:	079f      	lsls	r7, r3, #30
 8001794:	f57f af44 	bpl.w	8001620 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001798:	f7fe fd8e 	bl	80002b8 <HAL_GetTick>
 800179c:	1b80      	subs	r0, r0, r6
 800179e:	2802      	cmp	r0, #2
 80017a0:	d9f6      	bls.n	8001790 <HAL_RCC_OscConfig+0x190>
 80017a2:	e76f      	b.n	8001684 <HAL_RCC_OscConfig+0x84>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017a4:	4c33      	ldr	r4, [pc, #204]	; (8001874 <HAL_RCC_OscConfig+0x274>)
 80017a6:	69e3      	ldr	r3, [r4, #28]
 80017a8:	00d8      	lsls	r0, r3, #3
 80017aa:	d424      	bmi.n	80017f6 <HAL_RCC_OscConfig+0x1f6>
      pwrclkchanged = SET;
 80017ac:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80017ae:	69e3      	ldr	r3, [r4, #28]
 80017b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017b4:	61e3      	str	r3, [r4, #28]
 80017b6:	69e3      	ldr	r3, [r4, #28]
 80017b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017bc:	9300      	str	r3, [sp, #0]
 80017be:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017c0:	4e30      	ldr	r6, [pc, #192]	; (8001884 <HAL_RCC_OscConfig+0x284>)
 80017c2:	6833      	ldr	r3, [r6, #0]
 80017c4:	05d9      	lsls	r1, r3, #23
 80017c6:	d518      	bpl.n	80017fa <HAL_RCC_OscConfig+0x1fa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017c8:	68eb      	ldr	r3, [r5, #12]
 80017ca:	2b01      	cmp	r3, #1
 80017cc:	d126      	bne.n	800181c <HAL_RCC_OscConfig+0x21c>
 80017ce:	6a23      	ldr	r3, [r4, #32]
 80017d0:	f043 0301 	orr.w	r3, r3, #1
 80017d4:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80017d6:	f7fe fd6f 	bl	80002b8 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017da:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80017de:	4680      	mov	r8, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017e0:	6a23      	ldr	r3, [r4, #32]
 80017e2:	079b      	lsls	r3, r3, #30
 80017e4:	d53f      	bpl.n	8001866 <HAL_RCC_OscConfig+0x266>
    if (pwrclkchanged == SET)
 80017e6:	2f00      	cmp	r7, #0
 80017e8:	f43f af1e 	beq.w	8001628 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 80017ec:	69e3      	ldr	r3, [r4, #28]
 80017ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017f2:	61e3      	str	r3, [r4, #28]
 80017f4:	e718      	b.n	8001628 <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 80017f6:	2700      	movs	r7, #0
 80017f8:	e7e2      	b.n	80017c0 <HAL_RCC_OscConfig+0x1c0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017fa:	6833      	ldr	r3, [r6, #0]
 80017fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001800:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001802:	f7fe fd59 	bl	80002b8 <HAL_GetTick>
 8001806:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001808:	6833      	ldr	r3, [r6, #0]
 800180a:	05da      	lsls	r2, r3, #23
 800180c:	d4dc      	bmi.n	80017c8 <HAL_RCC_OscConfig+0x1c8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800180e:	f7fe fd53 	bl	80002b8 <HAL_GetTick>
 8001812:	eba0 0008 	sub.w	r0, r0, r8
 8001816:	2864      	cmp	r0, #100	; 0x64
 8001818:	d9f6      	bls.n	8001808 <HAL_RCC_OscConfig+0x208>
 800181a:	e733      	b.n	8001684 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800181c:	b9ab      	cbnz	r3, 800184a <HAL_RCC_OscConfig+0x24a>
 800181e:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001820:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001824:	f023 0301 	bic.w	r3, r3, #1
 8001828:	6223      	str	r3, [r4, #32]
 800182a:	6a23      	ldr	r3, [r4, #32]
 800182c:	f023 0304 	bic.w	r3, r3, #4
 8001830:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001832:	f7fe fd41 	bl	80002b8 <HAL_GetTick>
 8001836:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001838:	6a23      	ldr	r3, [r4, #32]
 800183a:	0798      	lsls	r0, r3, #30
 800183c:	d5d3      	bpl.n	80017e6 <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800183e:	f7fe fd3b 	bl	80002b8 <HAL_GetTick>
 8001842:	1b80      	subs	r0, r0, r6
 8001844:	4540      	cmp	r0, r8
 8001846:	d9f7      	bls.n	8001838 <HAL_RCC_OscConfig+0x238>
 8001848:	e71c      	b.n	8001684 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800184a:	2b05      	cmp	r3, #5
 800184c:	6a23      	ldr	r3, [r4, #32]
 800184e:	d103      	bne.n	8001858 <HAL_RCC_OscConfig+0x258>
 8001850:	f043 0304 	orr.w	r3, r3, #4
 8001854:	6223      	str	r3, [r4, #32]
 8001856:	e7ba      	b.n	80017ce <HAL_RCC_OscConfig+0x1ce>
 8001858:	f023 0301 	bic.w	r3, r3, #1
 800185c:	6223      	str	r3, [r4, #32]
 800185e:	6a23      	ldr	r3, [r4, #32]
 8001860:	f023 0304 	bic.w	r3, r3, #4
 8001864:	e7b6      	b.n	80017d4 <HAL_RCC_OscConfig+0x1d4>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001866:	f7fe fd27 	bl	80002b8 <HAL_GetTick>
 800186a:	eba0 0008 	sub.w	r0, r0, r8
 800186e:	42b0      	cmp	r0, r6
 8001870:	d9b6      	bls.n	80017e0 <HAL_RCC_OscConfig+0x1e0>
 8001872:	e707      	b.n	8001684 <HAL_RCC_OscConfig+0x84>
 8001874:	40021000 	.word	0x40021000
 8001878:	42420000 	.word	0x42420000
 800187c:	42420480 	.word	0x42420480
 8001880:	20000018 	.word	0x20000018
 8001884:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001888:	4b2a      	ldr	r3, [pc, #168]	; (8001934 <HAL_RCC_OscConfig+0x334>)
 800188a:	685a      	ldr	r2, [r3, #4]
 800188c:	461c      	mov	r4, r3
 800188e:	f002 020c 	and.w	r2, r2, #12
 8001892:	2a08      	cmp	r2, #8
 8001894:	d03d      	beq.n	8001912 <HAL_RCC_OscConfig+0x312>
 8001896:	2300      	movs	r3, #0
 8001898:	4e27      	ldr	r6, [pc, #156]	; (8001938 <HAL_RCC_OscConfig+0x338>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800189a:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 800189c:	6033      	str	r3, [r6, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800189e:	d12b      	bne.n	80018f8 <HAL_RCC_OscConfig+0x2f8>
        tickstart = HAL_GetTick();
 80018a0:	f7fe fd0a 	bl	80002b8 <HAL_GetTick>
 80018a4:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018a6:	6823      	ldr	r3, [r4, #0]
 80018a8:	0199      	lsls	r1, r3, #6
 80018aa:	d41f      	bmi.n	80018ec <HAL_RCC_OscConfig+0x2ec>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80018ac:	6a2b      	ldr	r3, [r5, #32]
 80018ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018b2:	d105      	bne.n	80018c0 <HAL_RCC_OscConfig+0x2c0>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80018b4:	6862      	ldr	r2, [r4, #4]
 80018b6:	68a9      	ldr	r1, [r5, #8]
 80018b8:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80018bc:	430a      	orrs	r2, r1
 80018be:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018c0:	6a69      	ldr	r1, [r5, #36]	; 0x24
 80018c2:	6862      	ldr	r2, [r4, #4]
 80018c4:	430b      	orrs	r3, r1
 80018c6:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 80018ca:	4313      	orrs	r3, r2
 80018cc:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 80018ce:	2301      	movs	r3, #1
 80018d0:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80018d2:	f7fe fcf1 	bl	80002b8 <HAL_GetTick>
 80018d6:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018d8:	6823      	ldr	r3, [r4, #0]
 80018da:	019a      	lsls	r2, r3, #6
 80018dc:	f53f aea8 	bmi.w	8001630 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018e0:	f7fe fcea 	bl	80002b8 <HAL_GetTick>
 80018e4:	1b40      	subs	r0, r0, r5
 80018e6:	2802      	cmp	r0, #2
 80018e8:	d9f6      	bls.n	80018d8 <HAL_RCC_OscConfig+0x2d8>
 80018ea:	e6cb      	b.n	8001684 <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018ec:	f7fe fce4 	bl	80002b8 <HAL_GetTick>
 80018f0:	1bc0      	subs	r0, r0, r7
 80018f2:	2802      	cmp	r0, #2
 80018f4:	d9d7      	bls.n	80018a6 <HAL_RCC_OscConfig+0x2a6>
 80018f6:	e6c5      	b.n	8001684 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 80018f8:	f7fe fcde 	bl	80002b8 <HAL_GetTick>
 80018fc:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018fe:	6823      	ldr	r3, [r4, #0]
 8001900:	019b      	lsls	r3, r3, #6
 8001902:	f57f ae95 	bpl.w	8001630 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001906:	f7fe fcd7 	bl	80002b8 <HAL_GetTick>
 800190a:	1b40      	subs	r0, r0, r5
 800190c:	2802      	cmp	r0, #2
 800190e:	d9f6      	bls.n	80018fe <HAL_RCC_OscConfig+0x2fe>
 8001910:	e6b8      	b.n	8001684 <HAL_RCC_OscConfig+0x84>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001912:	2801      	cmp	r0, #1
 8001914:	f43f aeb7 	beq.w	8001686 <HAL_RCC_OscConfig+0x86>
        pll_config = RCC->CFGR;
 8001918:	6858      	ldr	r0, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800191a:	6a2b      	ldr	r3, [r5, #32]
 800191c:	f400 3280 	and.w	r2, r0, #65536	; 0x10000
 8001920:	429a      	cmp	r2, r3
 8001922:	f47f ae71 	bne.w	8001608 <HAL_RCC_OscConfig+0x8>
 8001926:	6a6b      	ldr	r3, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001928:	f400 1070 	and.w	r0, r0, #3932160	; 0x3c0000
    return HAL_ERROR;
 800192c:	1ac0      	subs	r0, r0, r3
 800192e:	bf18      	it	ne
 8001930:	2001      	movne	r0, #1
 8001932:	e6a8      	b.n	8001686 <HAL_RCC_OscConfig+0x86>
 8001934:	40021000 	.word	0x40021000
 8001938:	42420060 	.word	0x42420060

0800193c <HAL_RCC_GetSysClockFreq>:
{
 800193c:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800193e:	4b19      	ldr	r3, [pc, #100]	; (80019a4 <HAL_RCC_GetSysClockFreq+0x68>)
{
 8001940:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001942:	ac02      	add	r4, sp, #8
 8001944:	f103 0510 	add.w	r5, r3, #16
 8001948:	4622      	mov	r2, r4
 800194a:	6818      	ldr	r0, [r3, #0]
 800194c:	6859      	ldr	r1, [r3, #4]
 800194e:	3308      	adds	r3, #8
 8001950:	c203      	stmia	r2!, {r0, r1}
 8001952:	42ab      	cmp	r3, r5
 8001954:	4614      	mov	r4, r2
 8001956:	d1f7      	bne.n	8001948 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001958:	2301      	movs	r3, #1
 800195a:	f88d 3004 	strb.w	r3, [sp, #4]
 800195e:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 8001960:	4911      	ldr	r1, [pc, #68]	; (80019a8 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001962:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 8001966:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001968:	f003 020c 	and.w	r2, r3, #12
 800196c:	2a08      	cmp	r2, #8
 800196e:	d117      	bne.n	80019a0 <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001970:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8001974:	a806      	add	r0, sp, #24
 8001976:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001978:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800197a:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800197e:	d50c      	bpl.n	800199a <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001980:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001982:	480a      	ldr	r0, [pc, #40]	; (80019ac <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001984:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001988:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800198a:	aa06      	add	r2, sp, #24
 800198c:	4413      	add	r3, r2
 800198e:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001992:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8001996:	b007      	add	sp, #28
 8001998:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800199a:	4805      	ldr	r0, [pc, #20]	; (80019b0 <HAL_RCC_GetSysClockFreq+0x74>)
 800199c:	4350      	muls	r0, r2
 800199e:	e7fa      	b.n	8001996 <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 80019a0:	4802      	ldr	r0, [pc, #8]	; (80019ac <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 80019a2:	e7f8      	b.n	8001996 <HAL_RCC_GetSysClockFreq+0x5a>
 80019a4:	0800581c 	.word	0x0800581c
 80019a8:	40021000 	.word	0x40021000
 80019ac:	007a1200 	.word	0x007a1200
 80019b0:	003d0900 	.word	0x003d0900

080019b4 <HAL_RCC_ClockConfig>:
{
 80019b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80019b8:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 80019ba:	4604      	mov	r4, r0
 80019bc:	b910      	cbnz	r0, 80019c4 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80019be:	2001      	movs	r0, #1
 80019c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80019c4:	4a45      	ldr	r2, [pc, #276]	; (8001adc <HAL_RCC_ClockConfig+0x128>)
 80019c6:	6813      	ldr	r3, [r2, #0]
 80019c8:	f003 0307 	and.w	r3, r3, #7
 80019cc:	428b      	cmp	r3, r1
 80019ce:	d329      	bcc.n	8001a24 <HAL_RCC_ClockConfig+0x70>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019d0:	6821      	ldr	r1, [r4, #0]
 80019d2:	078e      	lsls	r6, r1, #30
 80019d4:	d431      	bmi.n	8001a3a <HAL_RCC_ClockConfig+0x86>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019d6:	07ca      	lsls	r2, r1, #31
 80019d8:	d444      	bmi.n	8001a64 <HAL_RCC_ClockConfig+0xb0>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80019da:	4a40      	ldr	r2, [pc, #256]	; (8001adc <HAL_RCC_ClockConfig+0x128>)
 80019dc:	6813      	ldr	r3, [r2, #0]
 80019de:	f003 0307 	and.w	r3, r3, #7
 80019e2:	429d      	cmp	r5, r3
 80019e4:	d367      	bcc.n	8001ab6 <HAL_RCC_ClockConfig+0x102>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019e6:	6822      	ldr	r2, [r4, #0]
 80019e8:	4d3d      	ldr	r5, [pc, #244]	; (8001ae0 <HAL_RCC_ClockConfig+0x12c>)
 80019ea:	f012 0f04 	tst.w	r2, #4
 80019ee:	d16e      	bne.n	8001ace <HAL_RCC_ClockConfig+0x11a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019f0:	0713      	lsls	r3, r2, #28
 80019f2:	d506      	bpl.n	8001a02 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80019f4:	686b      	ldr	r3, [r5, #4]
 80019f6:	6922      	ldr	r2, [r4, #16]
 80019f8:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80019fc:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001a00:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a02:	f7ff ff9b 	bl	800193c <HAL_RCC_GetSysClockFreq>
 8001a06:	686b      	ldr	r3, [r5, #4]
 8001a08:	4a36      	ldr	r2, [pc, #216]	; (8001ae4 <HAL_RCC_ClockConfig+0x130>)
 8001a0a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001a0e:	5cd3      	ldrb	r3, [r2, r3]
 8001a10:	40d8      	lsrs	r0, r3
 8001a12:	4b35      	ldr	r3, [pc, #212]	; (8001ae8 <HAL_RCC_ClockConfig+0x134>)
 8001a14:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8001a16:	4b35      	ldr	r3, [pc, #212]	; (8001aec <HAL_RCC_ClockConfig+0x138>)
 8001a18:	6818      	ldr	r0, [r3, #0]
 8001a1a:	f7fe fc0b 	bl	8000234 <HAL_InitTick>
  return HAL_OK;
 8001a1e:	2000      	movs	r0, #0
 8001a20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a24:	6813      	ldr	r3, [r2, #0]
 8001a26:	f023 0307 	bic.w	r3, r3, #7
 8001a2a:	430b      	orrs	r3, r1
 8001a2c:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a2e:	6813      	ldr	r3, [r2, #0]
 8001a30:	f003 0307 	and.w	r3, r3, #7
 8001a34:	4299      	cmp	r1, r3
 8001a36:	d1c2      	bne.n	80019be <HAL_RCC_ClockConfig+0xa>
 8001a38:	e7ca      	b.n	80019d0 <HAL_RCC_ClockConfig+0x1c>
 8001a3a:	4b29      	ldr	r3, [pc, #164]	; (8001ae0 <HAL_RCC_ClockConfig+0x12c>)
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a3c:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a40:	bf1e      	ittt	ne
 8001a42:	685a      	ldrne	r2, [r3, #4]
 8001a44:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8001a48:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a4a:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a4c:	bf42      	ittt	mi
 8001a4e:	685a      	ldrmi	r2, [r3, #4]
 8001a50:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8001a54:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a56:	685a      	ldr	r2, [r3, #4]
 8001a58:	68a0      	ldr	r0, [r4, #8]
 8001a5a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001a5e:	4302      	orrs	r2, r0
 8001a60:	605a      	str	r2, [r3, #4]
 8001a62:	e7b8      	b.n	80019d6 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a64:	6862      	ldr	r2, [r4, #4]
 8001a66:	4e1e      	ldr	r6, [pc, #120]	; (8001ae0 <HAL_RCC_ClockConfig+0x12c>)
 8001a68:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a6a:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a6c:	d11b      	bne.n	8001aa6 <HAL_RCC_ClockConfig+0xf2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a6e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a72:	d0a4      	beq.n	80019be <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a74:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a76:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a7a:	f023 0303 	bic.w	r3, r3, #3
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8001a82:	f7fe fc19 	bl	80002b8 <HAL_GetTick>
 8001a86:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a88:	6873      	ldr	r3, [r6, #4]
 8001a8a:	6862      	ldr	r2, [r4, #4]
 8001a8c:	f003 030c 	and.w	r3, r3, #12
 8001a90:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001a94:	d0a1      	beq.n	80019da <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a96:	f7fe fc0f 	bl	80002b8 <HAL_GetTick>
 8001a9a:	1bc0      	subs	r0, r0, r7
 8001a9c:	4540      	cmp	r0, r8
 8001a9e:	d9f3      	bls.n	8001a88 <HAL_RCC_ClockConfig+0xd4>
        return HAL_TIMEOUT;
 8001aa0:	2003      	movs	r0, #3
}
 8001aa2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001aa6:	2a02      	cmp	r2, #2
 8001aa8:	d102      	bne.n	8001ab0 <HAL_RCC_ClockConfig+0xfc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001aaa:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001aae:	e7e0      	b.n	8001a72 <HAL_RCC_ClockConfig+0xbe>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ab0:	f013 0f02 	tst.w	r3, #2
 8001ab4:	e7dd      	b.n	8001a72 <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ab6:	6813      	ldr	r3, [r2, #0]
 8001ab8:	f023 0307 	bic.w	r3, r3, #7
 8001abc:	432b      	orrs	r3, r5
 8001abe:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ac0:	6813      	ldr	r3, [r2, #0]
 8001ac2:	f003 0307 	and.w	r3, r3, #7
 8001ac6:	429d      	cmp	r5, r3
 8001ac8:	f47f af79 	bne.w	80019be <HAL_RCC_ClockConfig+0xa>
 8001acc:	e78b      	b.n	80019e6 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ace:	686b      	ldr	r3, [r5, #4]
 8001ad0:	68e1      	ldr	r1, [r4, #12]
 8001ad2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001ad6:	430b      	orrs	r3, r1
 8001ad8:	606b      	str	r3, [r5, #4]
 8001ada:	e789      	b.n	80019f0 <HAL_RCC_ClockConfig+0x3c>
 8001adc:	40022000 	.word	0x40022000
 8001ae0:	40021000 	.word	0x40021000
 8001ae4:	0800685f 	.word	0x0800685f
 8001ae8:	20000018 	.word	0x20000018
 8001aec:	20000004 	.word	0x20000004

08001af0 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001af0:	4b04      	ldr	r3, [pc, #16]	; (8001b04 <HAL_RCC_GetPCLK1Freq+0x14>)
 8001af2:	4a05      	ldr	r2, [pc, #20]	; (8001b08 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8001afa:	5cd3      	ldrb	r3, [r2, r3]
 8001afc:	4a03      	ldr	r2, [pc, #12]	; (8001b0c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001afe:	6810      	ldr	r0, [r2, #0]
}
 8001b00:	40d8      	lsrs	r0, r3
 8001b02:	4770      	bx	lr
 8001b04:	40021000 	.word	0x40021000
 8001b08:	0800686f 	.word	0x0800686f
 8001b0c:	20000018 	.word	0x20000018

08001b10 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001b10:	4b04      	ldr	r3, [pc, #16]	; (8001b24 <HAL_RCC_GetPCLK2Freq+0x14>)
 8001b12:	4a05      	ldr	r2, [pc, #20]	; (8001b28 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8001b1a:	5cd3      	ldrb	r3, [r2, r3]
 8001b1c:	4a03      	ldr	r2, [pc, #12]	; (8001b2c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001b1e:	6810      	ldr	r0, [r2, #0]
}
 8001b20:	40d8      	lsrs	r0, r3
 8001b22:	4770      	bx	lr
 8001b24:	40021000 	.word	0x40021000
 8001b28:	0800686f 	.word	0x0800686f
 8001b2c:	20000018 	.word	0x20000018

08001b30 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001b30:	6803      	ldr	r3, [r0, #0]
{
 8001b32:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001b36:	07d9      	lsls	r1, r3, #31
{
 8001b38:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001b3a:	d520      	bpl.n	8001b7e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b3c:	4c35      	ldr	r4, [pc, #212]	; (8001c14 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8001b3e:	69e3      	ldr	r3, [r4, #28]
 8001b40:	00da      	lsls	r2, r3, #3
 8001b42:	d432      	bmi.n	8001baa <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8001b44:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b46:	69e3      	ldr	r3, [r4, #28]
 8001b48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b4c:	61e3      	str	r3, [r4, #28]
 8001b4e:	69e3      	ldr	r3, [r4, #28]
 8001b50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b54:	9301      	str	r3, [sp, #4]
 8001b56:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b58:	4e2f      	ldr	r6, [pc, #188]	; (8001c18 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8001b5a:	6833      	ldr	r3, [r6, #0]
 8001b5c:	05db      	lsls	r3, r3, #23
 8001b5e:	d526      	bpl.n	8001bae <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001b60:	6a23      	ldr	r3, [r4, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001b62:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001b66:	d136      	bne.n	8001bd6 <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001b68:	6a23      	ldr	r3, [r4, #32]
 8001b6a:	686a      	ldr	r2, [r5, #4]
 8001b6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b70:	4313      	orrs	r3, r2
 8001b72:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001b74:	b11f      	cbz	r7, 8001b7e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b76:	69e3      	ldr	r3, [r4, #28]
 8001b78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b7c:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001b7e:	6828      	ldr	r0, [r5, #0]
 8001b80:	0783      	lsls	r3, r0, #30
 8001b82:	d506      	bpl.n	8001b92 <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001b84:	4a23      	ldr	r2, [pc, #140]	; (8001c14 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8001b86:	68a9      	ldr	r1, [r5, #8]
 8001b88:	6853      	ldr	r3, [r2, #4]
 8001b8a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001b8e:	430b      	orrs	r3, r1
 8001b90:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001b92:	f010 0010 	ands.w	r0, r0, #16
 8001b96:	d01b      	beq.n	8001bd0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001b98:	4a1e      	ldr	r2, [pc, #120]	; (8001c14 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8001b9a:	6969      	ldr	r1, [r5, #20]
 8001b9c:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001b9e:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001ba0:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001ba4:	430b      	orrs	r3, r1
 8001ba6:	6053      	str	r3, [r2, #4]
 8001ba8:	e012      	b.n	8001bd0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;
 8001baa:	2700      	movs	r7, #0
 8001bac:	e7d4      	b.n	8001b58 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001bae:	6833      	ldr	r3, [r6, #0]
 8001bb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bb4:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001bb6:	f7fe fb7f 	bl	80002b8 <HAL_GetTick>
 8001bba:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bbc:	6833      	ldr	r3, [r6, #0]
 8001bbe:	05d8      	lsls	r0, r3, #23
 8001bc0:	d4ce      	bmi.n	8001b60 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bc2:	f7fe fb79 	bl	80002b8 <HAL_GetTick>
 8001bc6:	eba0 0008 	sub.w	r0, r0, r8
 8001bca:	2864      	cmp	r0, #100	; 0x64
 8001bcc:	d9f6      	bls.n	8001bbc <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 8001bce:	2003      	movs	r0, #3
}
 8001bd0:	b002      	add	sp, #8
 8001bd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001bd6:	686a      	ldr	r2, [r5, #4]
 8001bd8:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d0c3      	beq.n	8001b68 <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 8001be0:	2001      	movs	r0, #1
 8001be2:	4a0e      	ldr	r2, [pc, #56]	; (8001c1c <HAL_RCCEx_PeriphCLKConfig+0xec>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001be4:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8001be6:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001be8:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001bea:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001bee:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 8001bf0:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001bf2:	07d9      	lsls	r1, r3, #31
 8001bf4:	d5b8      	bpl.n	8001b68 <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 8001bf6:	f7fe fb5f 	bl	80002b8 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bfa:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8001bfe:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c00:	6a23      	ldr	r3, [r4, #32]
 8001c02:	079a      	lsls	r2, r3, #30
 8001c04:	d4b0      	bmi.n	8001b68 <HAL_RCCEx_PeriphCLKConfig+0x38>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c06:	f7fe fb57 	bl	80002b8 <HAL_GetTick>
 8001c0a:	1b80      	subs	r0, r0, r6
 8001c0c:	4540      	cmp	r0, r8
 8001c0e:	d9f7      	bls.n	8001c00 <HAL_RCCEx_PeriphCLKConfig+0xd0>
 8001c10:	e7dd      	b.n	8001bce <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8001c12:	bf00      	nop
 8001c14:	40021000 	.word	0x40021000
 8001c18:	40007000 	.word	0x40007000
 8001c1c:	42420440 	.word	0x42420440

08001c20 <SPI_WaitFlagStateUntilTimeout.constprop.8>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8001c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c22:	4604      	mov	r4, r0
 8001c24:	460e      	mov	r6, r1
 8001c26:	4615      	mov	r5, r2
 8001c28:	461f      	mov	r7, r3
                                                       uint32_t Timeout, uint32_t Tickstart)
{
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001c2a:	6821      	ldr	r1, [r4, #0]
 8001c2c:	688a      	ldr	r2, [r1, #8]
 8001c2e:	ea36 0302 	bics.w	r3, r6, r2
 8001c32:	d001      	beq.n	8001c38 <SPI_WaitFlagStateUntilTimeout.constprop.8+0x18>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8001c34:	2000      	movs	r0, #0
}
 8001c36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (Timeout != HAL_MAX_DELAY)
 8001c38:	1c6b      	adds	r3, r5, #1
 8001c3a:	d0f7      	beq.n	8001c2c <SPI_WaitFlagStateUntilTimeout.constprop.8+0xc>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8001c3c:	f7fe fb3c 	bl	80002b8 <HAL_GetTick>
 8001c40:	1bc0      	subs	r0, r0, r7
 8001c42:	4285      	cmp	r5, r0
 8001c44:	d8f1      	bhi.n	8001c2a <SPI_WaitFlagStateUntilTimeout.constprop.8+0xa>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001c46:	6823      	ldr	r3, [r4, #0]
 8001c48:	685a      	ldr	r2, [r3, #4]
 8001c4a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001c4e:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001c50:	6862      	ldr	r2, [r4, #4]
 8001c52:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8001c56:	d10a      	bne.n	8001c6e <SPI_WaitFlagStateUntilTimeout.constprop.8+0x4e>
 8001c58:	68a2      	ldr	r2, [r4, #8]
 8001c5a:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001c5e:	d002      	beq.n	8001c66 <SPI_WaitFlagStateUntilTimeout.constprop.8+0x46>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001c60:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8001c64:	d103      	bne.n	8001c6e <SPI_WaitFlagStateUntilTimeout.constprop.8+0x4e>
          __HAL_SPI_DISABLE(hspi);
 8001c66:	681a      	ldr	r2, [r3, #0]
 8001c68:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001c6c:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001c6e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001c70:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8001c74:	d107      	bne.n	8001c86 <SPI_WaitFlagStateUntilTimeout.constprop.8+0x66>
          SPI_RESET_CRC(hspi);
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001c7c:	601a      	str	r2, [r3, #0]
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001c84:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8001c86:	2301      	movs	r3, #1
 8001c88:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	2003      	movs	r0, #3
 8001c90:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 8001c94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001c96 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8001c96:	b538      	push	{r3, r4, r5, lr}
 8001c98:	4613      	mov	r3, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001c9a:	6842      	ldr	r2, [r0, #4]
{
 8001c9c:	4604      	mov	r4, r0
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001c9e:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8001ca2:	d116      	bne.n	8001cd2 <SPI_EndRxTransaction+0x3c>
 8001ca4:	6880      	ldr	r0, [r0, #8]
 8001ca6:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8001caa:	d002      	beq.n	8001cb2 <SPI_EndRxTransaction+0x1c>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001cac:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8001cb0:	d10f      	bne.n	8001cd2 <SPI_EndRxTransaction+0x3c>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8001cb2:	6822      	ldr	r2, [r4, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8001cb4:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
    __HAL_SPI_DISABLE(hspi);
 8001cb8:	6815      	ldr	r5, [r2, #0]
 8001cba:	f025 0540 	bic.w	r5, r5, #64	; 0x40
 8001cbe:	6015      	str	r5, [r2, #0]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8001cc0:	d107      	bne.n	8001cd2 <SPI_EndRxTransaction+0x3c>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8001cc2:	460a      	mov	r2, r1
 8001cc4:	2101      	movs	r1, #1
 8001cc6:	4620      	mov	r0, r4
 8001cc8:	f7ff ffaa 	bl	8001c20 <SPI_WaitFlagStateUntilTimeout.constprop.8>
 8001ccc:	b920      	cbnz	r0, 8001cd8 <SPI_EndRxTransaction+0x42>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
 8001cce:	2000      	movs	r0, #0
 8001cd0:	bd38      	pop	{r3, r4, r5, pc}
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001cd2:	460a      	mov	r2, r1
 8001cd4:	2180      	movs	r1, #128	; 0x80
 8001cd6:	e7f6      	b.n	8001cc6 <SPI_EndRxTransaction+0x30>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001cd8:	6d63      	ldr	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8001cda:	2003      	movs	r0, #3
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001cdc:	f043 0320 	orr.w	r3, r3, #32
 8001ce0:	6563      	str	r3, [r4, #84]	; 0x54
}
 8001ce2:	bd38      	pop	{r3, r4, r5, pc}

08001ce4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001ce4:	b510      	push	{r4, lr}
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001ce6:	4613      	mov	r3, r2
 8001ce8:	460a      	mov	r2, r1
 8001cea:	2180      	movs	r1, #128	; 0x80
{
 8001cec:	4604      	mov	r4, r0
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001cee:	f7ff ff97 	bl	8001c20 <SPI_WaitFlagStateUntilTimeout.constprop.8>
 8001cf2:	b120      	cbz	r0, 8001cfe <SPI_EndRxTxTransaction+0x1a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
 8001cf4:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001cf6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001cf8:	f043 0320 	orr.w	r3, r3, #32
 8001cfc:	6563      	str	r3, [r4, #84]	; 0x54
  }
  return HAL_OK;
}
 8001cfe:	bd10      	pop	{r4, pc}

08001d00 <HAL_SPI_Init>:
{
 8001d00:	b510      	push	{r4, lr}
  if (hspi == NULL)
 8001d02:	4604      	mov	r4, r0
 8001d04:	2800      	cmp	r0, #0
 8001d06:	d034      	beq.n	8001d72 <HAL_SPI_Init+0x72>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8001d0c:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8001d10:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001d14:	b91b      	cbnz	r3, 8001d1e <HAL_SPI_Init+0x1e>
    hspi->Lock = HAL_UNLOCKED;
 8001d16:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8001d1a:	f002 fa6d 	bl	80041f8 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 8001d1e:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 8001d20:	6822      	ldr	r2, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8001d22:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8001d26:	6813      	ldr	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001d28:	68a0      	ldr	r0, [r4, #8]
  __HAL_SPI_DISABLE(hspi);
 8001d2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001d2e:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001d30:	6863      	ldr	r3, [r4, #4]
 8001d32:	69a1      	ldr	r1, [r4, #24]
 8001d34:	4303      	orrs	r3, r0
 8001d36:	68e0      	ldr	r0, [r4, #12]
 8001d38:	4303      	orrs	r3, r0
 8001d3a:	6920      	ldr	r0, [r4, #16]
 8001d3c:	4303      	orrs	r3, r0
 8001d3e:	6960      	ldr	r0, [r4, #20]
 8001d40:	4303      	orrs	r3, r0
 8001d42:	69e0      	ldr	r0, [r4, #28]
 8001d44:	4303      	orrs	r3, r0
 8001d46:	6a20      	ldr	r0, [r4, #32]
 8001d48:	4303      	orrs	r3, r0
 8001d4a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001d4c:	4303      	orrs	r3, r0
 8001d4e:	f401 7000 	and.w	r0, r1, #512	; 0x200
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001d52:	0c09      	lsrs	r1, r1, #16
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001d54:	4303      	orrs	r3, r0
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001d56:	f001 0104 	and.w	r1, r1, #4
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001d5a:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001d5c:	6051      	str	r1, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001d5e:	69d3      	ldr	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001d60:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001d62:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001d66:	61d3      	str	r3, [r2, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 8001d68:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001d6a:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001d6c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  return HAL_OK;
 8001d70:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001d72:	2001      	movs	r0, #1
}
 8001d74:	bd10      	pop	{r4, pc}

08001d76 <HAL_SPI_Transmit>:
{
 8001d76:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8001d7a:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8001d7c:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 8001d80:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 8001d82:	2b01      	cmp	r3, #1
{
 8001d84:	460d      	mov	r5, r1
 8001d86:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 8001d88:	f000 809c 	beq.w	8001ec4 <HAL_SPI_Transmit+0x14e>
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8001d92:	f7fe fa91 	bl	80002b8 <HAL_GetTick>
 8001d96:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8001d98:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 8001d9c:	b2c0      	uxtb	r0, r0
 8001d9e:	2801      	cmp	r0, #1
 8001da0:	f040 808e 	bne.w	8001ec0 <HAL_SPI_Transmit+0x14a>
  if ((pData == NULL) || (Size == 0U))
 8001da4:	2d00      	cmp	r5, #0
 8001da6:	d05e      	beq.n	8001e66 <HAL_SPI_Transmit+0xf0>
 8001da8:	f1b8 0f00 	cmp.w	r8, #0
 8001dac:	d05b      	beq.n	8001e66 <HAL_SPI_Transmit+0xf0>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001dae:	2303      	movs	r3, #3
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001db0:	2000      	movs	r0, #0
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001db2:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001db6:	68a3      	ldr	r3, [r4, #8]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001db8:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001dba:	63a0      	str	r0, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 8001dbc:	f8a4 8036 	strh.w	r8, [r4, #54]	; 0x36
  hspi->RxXferSize  = 0U;
 8001dc0:	87a0      	strh	r0, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001dc2:	87e0      	strh	r0, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001dc4:	6460      	str	r0, [r4, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001dc6:	6420      	str	r0, [r4, #64]	; 0x40
 8001dc8:	6820      	ldr	r0, [r4, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001dca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    SPI_1LINE_TX(hspi);
 8001dce:	bf08      	it	eq
 8001dd0:	6803      	ldreq	r3, [r0, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001dd2:	6325      	str	r5, [r4, #48]	; 0x30
    SPI_1LINE_TX(hspi);
 8001dd4:	bf08      	it	eq
 8001dd6:	f443 4380 	orreq.w	r3, r3, #16384	; 0x4000
  hspi->TxXferSize  = Size;
 8001dda:	f8a4 8034 	strh.w	r8, [r4, #52]	; 0x34
    SPI_1LINE_TX(hspi);
 8001dde:	bf08      	it	eq
 8001de0:	6003      	streq	r3, [r0, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001de2:	6803      	ldr	r3, [r0, #0]
 8001de4:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 8001de6:	bf5e      	ittt	pl
 8001de8:	6803      	ldrpl	r3, [r0, #0]
 8001dea:	f043 0340 	orrpl.w	r3, r3, #64	; 0x40
 8001dee:	6003      	strpl	r3, [r0, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001df0:	68e3      	ldr	r3, [r4, #12]
 8001df2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001df6:	6863      	ldr	r3, [r4, #4]
 8001df8:	d13e      	bne.n	8001e78 <HAL_SPI_Transmit+0x102>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001dfa:	b113      	cbz	r3, 8001e02 <HAL_SPI_Transmit+0x8c>
 8001dfc:	f1b8 0f01 	cmp.w	r8, #1
 8001e00:	d107      	bne.n	8001e12 <HAL_SPI_Transmit+0x9c>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001e02:	f835 3b02 	ldrh.w	r3, [r5], #2
 8001e06:	60c3      	str	r3, [r0, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001e08:	6325      	str	r5, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8001e0a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001e0c:	3b01      	subs	r3, #1
 8001e0e:	b29b      	uxth	r3, r3
 8001e10:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8001e12:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001e14:	b29b      	uxth	r3, r3
 8001e16:	b9a3      	cbnz	r3, 8001e42 <HAL_SPI_Transmit+0xcc>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001e18:	463a      	mov	r2, r7
 8001e1a:	4631      	mov	r1, r6
 8001e1c:	4620      	mov	r0, r4
 8001e1e:	f7ff ff61 	bl	8001ce4 <SPI_EndRxTxTransaction>
 8001e22:	2800      	cmp	r0, #0
 8001e24:	d149      	bne.n	8001eba <HAL_SPI_Transmit+0x144>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001e26:	68a3      	ldr	r3, [r4, #8]
 8001e28:	b933      	cbnz	r3, 8001e38 <HAL_SPI_Transmit+0xc2>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001e2a:	9301      	str	r3, [sp, #4]
 8001e2c:	6823      	ldr	r3, [r4, #0]
 8001e2e:	68da      	ldr	r2, [r3, #12]
 8001e30:	9201      	str	r2, [sp, #4]
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	9301      	str	r3, [sp, #4]
 8001e36:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001e38:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 8001e3a:	3000      	adds	r0, #0
 8001e3c:	bf18      	it	ne
 8001e3e:	2001      	movne	r0, #1
 8001e40:	e011      	b.n	8001e66 <HAL_SPI_Transmit+0xf0>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001e42:	6822      	ldr	r2, [r4, #0]
 8001e44:	6893      	ldr	r3, [r2, #8]
 8001e46:	0798      	lsls	r0, r3, #30
 8001e48:	d505      	bpl.n	8001e56 <HAL_SPI_Transmit+0xe0>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001e4a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001e4c:	f833 1b02 	ldrh.w	r1, [r3], #2
 8001e50:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001e52:	6323      	str	r3, [r4, #48]	; 0x30
 8001e54:	e7d9      	b.n	8001e0a <HAL_SPI_Transmit+0x94>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001e56:	f7fe fa2f 	bl	80002b8 <HAL_GetTick>
 8001e5a:	1bc0      	subs	r0, r0, r7
 8001e5c:	42b0      	cmp	r0, r6
 8001e5e:	d3d8      	bcc.n	8001e12 <HAL_SPI_Transmit+0x9c>
 8001e60:	1c71      	adds	r1, r6, #1
 8001e62:	d0d6      	beq.n	8001e12 <HAL_SPI_Transmit+0x9c>
          errorcode = HAL_TIMEOUT;
 8001e64:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8001e66:	2301      	movs	r3, #1
 8001e68:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8001e72:	b002      	add	sp, #8
 8001e74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001e78:	b113      	cbz	r3, 8001e80 <HAL_SPI_Transmit+0x10a>
 8001e7a:	f1b8 0f01 	cmp.w	r8, #1
 8001e7e:	d108      	bne.n	8001e92 <HAL_SPI_Transmit+0x11c>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001e80:	782b      	ldrb	r3, [r5, #0]
 8001e82:	7303      	strb	r3, [r0, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001e84:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001e86:	3301      	adds	r3, #1
 8001e88:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8001e8a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001e8c:	3b01      	subs	r3, #1
 8001e8e:	b29b      	uxth	r3, r3
 8001e90:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8001e92:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001e94:	b29b      	uxth	r3, r3
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d0be      	beq.n	8001e18 <HAL_SPI_Transmit+0xa2>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001e9a:	6823      	ldr	r3, [r4, #0]
 8001e9c:	689a      	ldr	r2, [r3, #8]
 8001e9e:	0792      	lsls	r2, r2, #30
 8001ea0:	d503      	bpl.n	8001eaa <HAL_SPI_Transmit+0x134>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001ea2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001ea4:	7812      	ldrb	r2, [r2, #0]
 8001ea6:	731a      	strb	r2, [r3, #12]
 8001ea8:	e7ec      	b.n	8001e84 <HAL_SPI_Transmit+0x10e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001eaa:	f7fe fa05 	bl	80002b8 <HAL_GetTick>
 8001eae:	1bc0      	subs	r0, r0, r7
 8001eb0:	4286      	cmp	r6, r0
 8001eb2:	d8ee      	bhi.n	8001e92 <HAL_SPI_Transmit+0x11c>
 8001eb4:	1c73      	adds	r3, r6, #1
 8001eb6:	d0ec      	beq.n	8001e92 <HAL_SPI_Transmit+0x11c>
 8001eb8:	e7d4      	b.n	8001e64 <HAL_SPI_Transmit+0xee>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001eba:	2320      	movs	r3, #32
 8001ebc:	6563      	str	r3, [r4, #84]	; 0x54
 8001ebe:	e7b2      	b.n	8001e26 <HAL_SPI_Transmit+0xb0>
    errorcode = HAL_BUSY;
 8001ec0:	2002      	movs	r0, #2
 8001ec2:	e7d0      	b.n	8001e66 <HAL_SPI_Transmit+0xf0>
  __HAL_LOCK(hspi);
 8001ec4:	2002      	movs	r0, #2
 8001ec6:	e7d4      	b.n	8001e72 <HAL_SPI_Transmit+0xfc>

08001ec8 <HAL_SPI_TransmitReceive>:
{
 8001ec8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8001ecc:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8001ece:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 8001ed2:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 8001ed4:	2b01      	cmp	r3, #1
{
 8001ed6:	460d      	mov	r5, r1
 8001ed8:	4691      	mov	r9, r2
 8001eda:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  __HAL_LOCK(hspi);
 8001edc:	f000 80e2 	beq.w	80020a4 <HAL_SPI_TransmitReceive+0x1dc>
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8001ee6:	f7fe f9e7 	bl	80002b8 <HAL_GetTick>
  tmp_state           = hspi->State;
 8001eea:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  tickstart = HAL_GetTick();
 8001eee:	4680      	mov	r8, r0
  tmp_state           = hspi->State;
 8001ef0:	b2db      	uxtb	r3, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001ef2:	2b01      	cmp	r3, #1
  tmp_mode            = hspi->Init.Mode;
 8001ef4:	6861      	ldr	r1, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001ef6:	d00a      	beq.n	8001f0e <HAL_SPI_TransmitReceive+0x46>
 8001ef8:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 8001efc:	f040 80d0 	bne.w	80020a0 <HAL_SPI_TransmitReceive+0x1d8>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001f00:	68a0      	ldr	r0, [r4, #8]
 8001f02:	2800      	cmp	r0, #0
 8001f04:	f040 80cc 	bne.w	80020a0 <HAL_SPI_TransmitReceive+0x1d8>
 8001f08:	2b04      	cmp	r3, #4
 8001f0a:	f040 80c9 	bne.w	80020a0 <HAL_SPI_TransmitReceive+0x1d8>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001f0e:	2d00      	cmp	r5, #0
 8001f10:	f000 80c4 	beq.w	800209c <HAL_SPI_TransmitReceive+0x1d4>
 8001f14:	f1b9 0f00 	cmp.w	r9, #0
 8001f18:	f000 80c0 	beq.w	800209c <HAL_SPI_TransmitReceive+0x1d4>
 8001f1c:	2e00      	cmp	r6, #0
 8001f1e:	f000 80bd 	beq.w	800209c <HAL_SPI_TransmitReceive+0x1d4>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001f22:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001f26:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001f2a:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001f2c:	bf1c      	itt	ne
 8001f2e:	2305      	movne	r3, #5
 8001f30:	f884 3051 	strbne.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001f34:	2300      	movs	r3, #0
 8001f36:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->RxISR       = NULL;
 8001f38:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001f3a:	6463      	str	r3, [r4, #68]	; 0x44
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001f3c:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 8001f3e:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 8001f40:	86e6      	strh	r6, [r4, #54]	; 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001f42:	681a      	ldr	r2, [r3, #0]
  hspi->RxXferSize  = Size;
 8001f44:	87a6      	strh	r6, [r4, #60]	; 0x3c
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001f46:	0650      	lsls	r0, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8001f48:	bf58      	it	pl
 8001f4a:	681a      	ldrpl	r2, [r3, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001f4c:	6325      	str	r5, [r4, #48]	; 0x30
    __HAL_SPI_ENABLE(hspi);
 8001f4e:	bf58      	it	pl
 8001f50:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
  hspi->TxXferSize  = Size;
 8001f54:	86a6      	strh	r6, [r4, #52]	; 0x34
    __HAL_SPI_ENABLE(hspi);
 8001f56:	bf58      	it	pl
 8001f58:	601a      	strpl	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001f5a:	68e2      	ldr	r2, [r4, #12]
 8001f5c:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8001f60:	d158      	bne.n	8002014 <HAL_SPI_TransmitReceive+0x14c>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001f62:	b109      	cbz	r1, 8001f68 <HAL_SPI_TransmitReceive+0xa0>
 8001f64:	2e01      	cmp	r6, #1
 8001f66:	d107      	bne.n	8001f78 <HAL_SPI_TransmitReceive+0xb0>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001f68:	f835 2b02 	ldrh.w	r2, [r5], #2
 8001f6c:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8001f6e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001f70:	6325      	str	r5, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8001f72:	3b01      	subs	r3, #1
 8001f74:	b29b      	uxth	r3, r3
 8001f76:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8001f78:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001f7a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001f7c:	b29b      	uxth	r3, r3
 8001f7e:	b9ab      	cbnz	r3, 8001fac <HAL_SPI_TransmitReceive+0xe4>
 8001f80:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001f82:	b29b      	uxth	r3, r3
 8001f84:	b993      	cbnz	r3, 8001fac <HAL_SPI_TransmitReceive+0xe4>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001f86:	4642      	mov	r2, r8
 8001f88:	4639      	mov	r1, r7
 8001f8a:	4620      	mov	r0, r4
 8001f8c:	f7ff feaa 	bl	8001ce4 <SPI_EndRxTxTransaction>
 8001f90:	2800      	cmp	r0, #0
 8001f92:	f040 8081 	bne.w	8002098 <HAL_SPI_TransmitReceive+0x1d0>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001f96:	68a3      	ldr	r3, [r4, #8]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d132      	bne.n	8002002 <HAL_SPI_TransmitReceive+0x13a>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001f9c:	6823      	ldr	r3, [r4, #0]
 8001f9e:	9001      	str	r0, [sp, #4]
 8001fa0:	68da      	ldr	r2, [r3, #12]
 8001fa2:	9201      	str	r2, [sp, #4]
 8001fa4:	689b      	ldr	r3, [r3, #8]
 8001fa6:	9301      	str	r3, [sp, #4]
 8001fa8:	9b01      	ldr	r3, [sp, #4]
 8001faa:	e02a      	b.n	8002002 <HAL_SPI_TransmitReceive+0x13a>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001fac:	6822      	ldr	r2, [r4, #0]
 8001fae:	6893      	ldr	r3, [r2, #8]
 8001fb0:	0799      	lsls	r1, r3, #30
 8001fb2:	d50d      	bpl.n	8001fd0 <HAL_SPI_TransmitReceive+0x108>
 8001fb4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001fb6:	b29b      	uxth	r3, r3
 8001fb8:	b153      	cbz	r3, 8001fd0 <HAL_SPI_TransmitReceive+0x108>
 8001fba:	b14d      	cbz	r5, 8001fd0 <HAL_SPI_TransmitReceive+0x108>
        txallowed = 0U;
 8001fbc:	2500      	movs	r5, #0
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001fbe:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001fc0:	f833 1b02 	ldrh.w	r1, [r3], #2
 8001fc4:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001fc6:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8001fc8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001fca:	3b01      	subs	r3, #1
 8001fcc:	b29b      	uxth	r3, r3
 8001fce:	86e3      	strh	r3, [r4, #54]	; 0x36
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001fd0:	6893      	ldr	r3, [r2, #8]
 8001fd2:	07db      	lsls	r3, r3, #31
 8001fd4:	d50c      	bpl.n	8001ff0 <HAL_SPI_TransmitReceive+0x128>
 8001fd6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001fd8:	b29b      	uxth	r3, r3
 8001fda:	b14b      	cbz	r3, 8001ff0 <HAL_SPI_TransmitReceive+0x128>
        txallowed = 1U;
 8001fdc:	2501      	movs	r5, #1
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001fde:	68d2      	ldr	r2, [r2, #12]
 8001fe0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001fe2:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001fe6:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8001fe8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001fea:	3b01      	subs	r3, #1
 8001fec:	b29b      	uxth	r3, r3
 8001fee:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001ff0:	f7fe f962 	bl	80002b8 <HAL_GetTick>
 8001ff4:	eba0 0008 	sub.w	r0, r0, r8
 8001ff8:	4287      	cmp	r7, r0
 8001ffa:	d8be      	bhi.n	8001f7a <HAL_SPI_TransmitReceive+0xb2>
 8001ffc:	1c7e      	adds	r6, r7, #1
 8001ffe:	d0bc      	beq.n	8001f7a <HAL_SPI_TransmitReceive+0xb2>
        errorcode = HAL_TIMEOUT;
 8002000:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8002002:	2301      	movs	r3, #1
 8002004:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002008:	2300      	movs	r3, #0
 800200a:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 800200e:	b003      	add	sp, #12
 8002010:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002014:	b109      	cbz	r1, 800201a <HAL_SPI_TransmitReceive+0x152>
 8002016:	2e01      	cmp	r6, #1
 8002018:	d108      	bne.n	800202c <HAL_SPI_TransmitReceive+0x164>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800201a:	782a      	ldrb	r2, [r5, #0]
 800201c:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800201e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002020:	3301      	adds	r3, #1
 8002022:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8002024:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002026:	3b01      	subs	r3, #1
 8002028:	b29b      	uxth	r3, r3
 800202a:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 800202c:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800202e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002030:	b29b      	uxth	r3, r3
 8002032:	b91b      	cbnz	r3, 800203c <HAL_SPI_TransmitReceive+0x174>
 8002034:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002036:	b29b      	uxth	r3, r3
 8002038:	2b00      	cmp	r3, #0
 800203a:	d0a4      	beq.n	8001f86 <HAL_SPI_TransmitReceive+0xbe>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800203c:	6822      	ldr	r2, [r4, #0]
 800203e:	6893      	ldr	r3, [r2, #8]
 8002040:	0798      	lsls	r0, r3, #30
 8002042:	d50e      	bpl.n	8002062 <HAL_SPI_TransmitReceive+0x19a>
 8002044:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002046:	b29b      	uxth	r3, r3
 8002048:	b15b      	cbz	r3, 8002062 <HAL_SPI_TransmitReceive+0x19a>
 800204a:	b155      	cbz	r5, 8002062 <HAL_SPI_TransmitReceive+0x19a>
        txallowed = 0U;
 800204c:	2500      	movs	r5, #0
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800204e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002050:	781b      	ldrb	r3, [r3, #0]
 8002052:	7313      	strb	r3, [r2, #12]
        hspi->pTxBuffPtr++;
 8002054:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002056:	3301      	adds	r3, #1
 8002058:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800205a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800205c:	3b01      	subs	r3, #1
 800205e:	b29b      	uxth	r3, r3
 8002060:	86e3      	strh	r3, [r4, #54]	; 0x36
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002062:	6822      	ldr	r2, [r4, #0]
 8002064:	6893      	ldr	r3, [r2, #8]
 8002066:	07d9      	lsls	r1, r3, #31
 8002068:	d50d      	bpl.n	8002086 <HAL_SPI_TransmitReceive+0x1be>
 800206a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800206c:	b29b      	uxth	r3, r3
 800206e:	b153      	cbz	r3, 8002086 <HAL_SPI_TransmitReceive+0x1be>
        txallowed = 1U;
 8002070:	2501      	movs	r5, #1
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002072:	68d2      	ldr	r2, [r2, #12]
 8002074:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002076:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002078:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800207a:	3301      	adds	r3, #1
 800207c:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 800207e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002080:	3b01      	subs	r3, #1
 8002082:	b29b      	uxth	r3, r3
 8002084:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002086:	f7fe f917 	bl	80002b8 <HAL_GetTick>
 800208a:	eba0 0008 	sub.w	r0, r0, r8
 800208e:	4287      	cmp	r7, r0
 8002090:	d8cd      	bhi.n	800202e <HAL_SPI_TransmitReceive+0x166>
 8002092:	1c7b      	adds	r3, r7, #1
 8002094:	d0cb      	beq.n	800202e <HAL_SPI_TransmitReceive+0x166>
 8002096:	e7b3      	b.n	8002000 <HAL_SPI_TransmitReceive+0x138>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002098:	2320      	movs	r3, #32
 800209a:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 800209c:	2001      	movs	r0, #1
 800209e:	e7b0      	b.n	8002002 <HAL_SPI_TransmitReceive+0x13a>
    errorcode = HAL_BUSY;
 80020a0:	2002      	movs	r0, #2
 80020a2:	e7ae      	b.n	8002002 <HAL_SPI_TransmitReceive+0x13a>
  __HAL_LOCK(hspi);
 80020a4:	2002      	movs	r0, #2
 80020a6:	e7b2      	b.n	800200e <HAL_SPI_TransmitReceive+0x146>

080020a8 <HAL_SPI_Receive>:
{
 80020a8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80020ac:	461d      	mov	r5, r3
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80020ae:	6843      	ldr	r3, [r0, #4]
{
 80020b0:	4604      	mov	r4, r0
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80020b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
{
 80020b6:	4688      	mov	r8, r1
 80020b8:	4617      	mov	r7, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80020ba:	d10c      	bne.n	80020d6 <HAL_SPI_Receive+0x2e>
 80020bc:	6883      	ldr	r3, [r0, #8]
 80020be:	b953      	cbnz	r3, 80020d6 <HAL_SPI_Receive+0x2e>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80020c0:	2304      	movs	r3, #4
 80020c2:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80020c6:	4613      	mov	r3, r2
 80020c8:	9500      	str	r5, [sp, #0]
 80020ca:	460a      	mov	r2, r1
 80020cc:	f7ff fefc 	bl	8001ec8 <HAL_SPI_TransmitReceive>
}
 80020d0:	b002      	add	sp, #8
 80020d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hspi);
 80020d6:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 80020da:	2b01      	cmp	r3, #1
 80020dc:	d079      	beq.n	80021d2 <HAL_SPI_Receive+0x12a>
 80020de:	2301      	movs	r3, #1
 80020e0:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  tickstart = HAL_GetTick();
 80020e4:	f7fe f8e8 	bl	80002b8 <HAL_GetTick>
 80020e8:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 80020ea:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 80020ee:	b2c0      	uxtb	r0, r0
 80020f0:	2801      	cmp	r0, #1
 80020f2:	d16c      	bne.n	80021ce <HAL_SPI_Receive+0x126>
  if ((pData == NULL) || (Size == 0U))
 80020f4:	f1b8 0f00 	cmp.w	r8, #0
 80020f8:	d057      	beq.n	80021aa <HAL_SPI_Receive+0x102>
 80020fa:	2f00      	cmp	r7, #0
 80020fc:	d055      	beq.n	80021aa <HAL_SPI_Receive+0x102>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80020fe:	2304      	movs	r3, #4
 8002100:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002104:	2300      	movs	r3, #0
 8002106:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002108:	6323      	str	r3, [r4, #48]	; 0x30
  hspi->RxXferCount = Size;
 800210a:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->TxXferSize  = 0U;
 800210c:	86a3      	strh	r3, [r4, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800210e:	86e3      	strh	r3, [r4, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002110:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002112:	6463      	str	r3, [r4, #68]	; 0x44
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002114:	68a3      	ldr	r3, [r4, #8]
  hspi->RxXferSize  = Size;
 8002116:	87a7      	strh	r7, [r4, #60]	; 0x3c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002118:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800211c:	6823      	ldr	r3, [r4, #0]
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800211e:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
    SPI_1LINE_RX(hspi);
 8002122:	bf02      	ittt	eq
 8002124:	681a      	ldreq	r2, [r3, #0]
 8002126:	f422 4280 	biceq.w	r2, r2, #16384	; 0x4000
 800212a:	601a      	streq	r2, [r3, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	0657      	lsls	r7, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8002130:	bf5e      	ittt	pl
 8002132:	681a      	ldrpl	r2, [r3, #0]
 8002134:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 8002138:	601a      	strpl	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800213a:	68e3      	ldr	r3, [r4, #12]
 800213c:	b1f3      	cbz	r3, 800217c <HAL_SPI_Receive+0xd4>
    while (hspi->RxXferCount > 0U)
 800213e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002140:	b29b      	uxth	r3, r3
 8002142:	b1fb      	cbz	r3, 8002184 <HAL_SPI_Receive+0xdc>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002144:	6823      	ldr	r3, [r4, #0]
 8002146:	689a      	ldr	r2, [r3, #8]
 8002148:	07d2      	lsls	r2, r2, #31
 800214a:	d535      	bpl.n	80021b8 <HAL_SPI_Receive+0x110>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800214c:	68da      	ldr	r2, [r3, #12]
 800214e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002150:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002154:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8002156:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002158:	3b01      	subs	r3, #1
 800215a:	b29b      	uxth	r3, r3
 800215c:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800215e:	e7ee      	b.n	800213e <HAL_SPI_Receive+0x96>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002160:	6823      	ldr	r3, [r4, #0]
 8002162:	689a      	ldr	r2, [r3, #8]
 8002164:	07d0      	lsls	r0, r2, #31
 8002166:	d518      	bpl.n	800219a <HAL_SPI_Receive+0xf2>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002168:	7b1b      	ldrb	r3, [r3, #12]
 800216a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800216c:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800216e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002170:	3301      	adds	r3, #1
 8002172:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8002174:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002176:	3b01      	subs	r3, #1
 8002178:	b29b      	uxth	r3, r3
 800217a:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->RxXferCount > 0U)
 800217c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800217e:	b29b      	uxth	r3, r3
 8002180:	2b00      	cmp	r3, #0
 8002182:	d1ed      	bne.n	8002160 <HAL_SPI_Receive+0xb8>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002184:	4632      	mov	r2, r6
 8002186:	4629      	mov	r1, r5
 8002188:	4620      	mov	r0, r4
 800218a:	f7ff fd84 	bl	8001c96 <SPI_EndRxTransaction>
 800218e:	b9d8      	cbnz	r0, 80021c8 <HAL_SPI_Receive+0x120>
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002190:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 8002192:	3000      	adds	r0, #0
 8002194:	bf18      	it	ne
 8002196:	2001      	movne	r0, #1
 8002198:	e007      	b.n	80021aa <HAL_SPI_Receive+0x102>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800219a:	f7fe f88d 	bl	80002b8 <HAL_GetTick>
 800219e:	1b80      	subs	r0, r0, r6
 80021a0:	4285      	cmp	r5, r0
 80021a2:	d8eb      	bhi.n	800217c <HAL_SPI_Receive+0xd4>
 80021a4:	1c69      	adds	r1, r5, #1
 80021a6:	d0e9      	beq.n	800217c <HAL_SPI_Receive+0xd4>
          errorcode = HAL_TIMEOUT;
 80021a8:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 80021aa:	2301      	movs	r3, #1
 80021ac:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80021b0:	2300      	movs	r3, #0
 80021b2:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  return errorcode;
 80021b6:	e78b      	b.n	80020d0 <HAL_SPI_Receive+0x28>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80021b8:	f7fe f87e 	bl	80002b8 <HAL_GetTick>
 80021bc:	1b80      	subs	r0, r0, r6
 80021be:	4285      	cmp	r5, r0
 80021c0:	d8bd      	bhi.n	800213e <HAL_SPI_Receive+0x96>
 80021c2:	1c6b      	adds	r3, r5, #1
 80021c4:	d0bb      	beq.n	800213e <HAL_SPI_Receive+0x96>
 80021c6:	e7ef      	b.n	80021a8 <HAL_SPI_Receive+0x100>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80021c8:	2320      	movs	r3, #32
 80021ca:	6563      	str	r3, [r4, #84]	; 0x54
 80021cc:	e7e0      	b.n	8002190 <HAL_SPI_Receive+0xe8>
    errorcode = HAL_BUSY;
 80021ce:	2002      	movs	r0, #2
 80021d0:	e7eb      	b.n	80021aa <HAL_SPI_Receive+0x102>
  __HAL_LOCK(hspi);
 80021d2:	2002      	movs	r0, #2
 80021d4:	e77c      	b.n	80020d0 <HAL_SPI_Receive+0x28>

080021d6 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80021d6:	6803      	ldr	r3, [r0, #0]
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
}
 80021d8:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80021da:	68da      	ldr	r2, [r3, #12]
 80021dc:	f042 0201 	orr.w	r2, r2, #1
 80021e0:	60da      	str	r2, [r3, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80021e2:	689a      	ldr	r2, [r3, #8]
 80021e4:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021e8:	2a06      	cmp	r2, #6
    __HAL_TIM_ENABLE(htim);
 80021ea:	bf1e      	ittt	ne
 80021ec:	681a      	ldrne	r2, [r3, #0]
 80021ee:	f042 0201 	orrne.w	r2, r2, #1
 80021f2:	601a      	strne	r2, [r3, #0]
}
 80021f4:	4770      	bx	lr

080021f6 <HAL_TIM_OC_DelayElapsedCallback>:
 80021f6:	4770      	bx	lr

080021f8 <HAL_TIM_IC_CaptureCallback>:
 80021f8:	4770      	bx	lr

080021fa <HAL_TIM_PWM_PulseFinishedCallback>:
 80021fa:	4770      	bx	lr

080021fc <HAL_TIM_TriggerCallback>:
 80021fc:	4770      	bx	lr

080021fe <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80021fe:	6803      	ldr	r3, [r0, #0]
{
 8002200:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002202:	691a      	ldr	r2, [r3, #16]
{
 8002204:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002206:	0791      	lsls	r1, r2, #30
 8002208:	d50e      	bpl.n	8002228 <HAL_TIM_IRQHandler+0x2a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800220a:	68da      	ldr	r2, [r3, #12]
 800220c:	0792      	lsls	r2, r2, #30
 800220e:	d50b      	bpl.n	8002228 <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002210:	f06f 0202 	mvn.w	r2, #2
 8002214:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002216:	2201      	movs	r2, #1

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002218:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800221a:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800221c:	079b      	lsls	r3, r3, #30
 800221e:	d077      	beq.n	8002310 <HAL_TIM_IRQHandler+0x112>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002220:	f7ff ffea 	bl	80021f8 <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002224:	2300      	movs	r3, #0
 8002226:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002228:	6823      	ldr	r3, [r4, #0]
 800222a:	691a      	ldr	r2, [r3, #16]
 800222c:	0750      	lsls	r0, r2, #29
 800222e:	d510      	bpl.n	8002252 <HAL_TIM_IRQHandler+0x54>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002230:	68da      	ldr	r2, [r3, #12]
 8002232:	0751      	lsls	r1, r2, #29
 8002234:	d50d      	bpl.n	8002252 <HAL_TIM_IRQHandler+0x54>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002236:	f06f 0204 	mvn.w	r2, #4
 800223a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800223c:	2202      	movs	r2, #2
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800223e:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002240:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002242:	f413 7f40 	tst.w	r3, #768	; 0x300
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002246:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002248:	d068      	beq.n	800231c <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 800224a:	f7ff ffd5 	bl	80021f8 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800224e:	2300      	movs	r3, #0
 8002250:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002252:	6823      	ldr	r3, [r4, #0]
 8002254:	691a      	ldr	r2, [r3, #16]
 8002256:	0712      	lsls	r2, r2, #28
 8002258:	d50f      	bpl.n	800227a <HAL_TIM_IRQHandler+0x7c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800225a:	68da      	ldr	r2, [r3, #12]
 800225c:	0710      	lsls	r0, r2, #28
 800225e:	d50c      	bpl.n	800227a <HAL_TIM_IRQHandler+0x7c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002260:	f06f 0208 	mvn.w	r2, #8
 8002264:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002266:	2204      	movs	r2, #4
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002268:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800226a:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800226c:	0799      	lsls	r1, r3, #30
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800226e:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002270:	d05a      	beq.n	8002328 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8002272:	f7ff ffc1 	bl	80021f8 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002276:	2300      	movs	r3, #0
 8002278:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800227a:	6823      	ldr	r3, [r4, #0]
 800227c:	691a      	ldr	r2, [r3, #16]
 800227e:	06d2      	lsls	r2, r2, #27
 8002280:	d510      	bpl.n	80022a4 <HAL_TIM_IRQHandler+0xa6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002282:	68da      	ldr	r2, [r3, #12]
 8002284:	06d0      	lsls	r0, r2, #27
 8002286:	d50d      	bpl.n	80022a4 <HAL_TIM_IRQHandler+0xa6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002288:	f06f 0210 	mvn.w	r2, #16
 800228c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800228e:	2208      	movs	r2, #8
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002290:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002292:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002294:	f413 7f40 	tst.w	r3, #768	; 0x300
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002298:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800229a:	d04b      	beq.n	8002334 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 800229c:	f7ff ffac 	bl	80021f8 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022a0:	2300      	movs	r3, #0
 80022a2:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80022a4:	6823      	ldr	r3, [r4, #0]
 80022a6:	691a      	ldr	r2, [r3, #16]
 80022a8:	07d1      	lsls	r1, r2, #31
 80022aa:	d508      	bpl.n	80022be <HAL_TIM_IRQHandler+0xc0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80022ac:	68da      	ldr	r2, [r3, #12]
 80022ae:	07d2      	lsls	r2, r2, #31
 80022b0:	d505      	bpl.n	80022be <HAL_TIM_IRQHandler+0xc0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80022b2:	f06f 0201 	mvn.w	r2, #1
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80022b6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80022b8:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80022ba:	f000 fd61 	bl	8002d80 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80022be:	6823      	ldr	r3, [r4, #0]
 80022c0:	691a      	ldr	r2, [r3, #16]
 80022c2:	0610      	lsls	r0, r2, #24
 80022c4:	d508      	bpl.n	80022d8 <HAL_TIM_IRQHandler+0xda>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80022c6:	68da      	ldr	r2, [r3, #12]
 80022c8:	0611      	lsls	r1, r2, #24
 80022ca:	d505      	bpl.n	80022d8 <HAL_TIM_IRQHandler+0xda>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80022cc:	f06f 0280 	mvn.w	r2, #128	; 0x80
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80022d0:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80022d2:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80022d4:	f000 f906 	bl	80024e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80022d8:	6823      	ldr	r3, [r4, #0]
 80022da:	691a      	ldr	r2, [r3, #16]
 80022dc:	0652      	lsls	r2, r2, #25
 80022de:	d508      	bpl.n	80022f2 <HAL_TIM_IRQHandler+0xf4>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80022e0:	68da      	ldr	r2, [r3, #12]
 80022e2:	0650      	lsls	r0, r2, #25
 80022e4:	d505      	bpl.n	80022f2 <HAL_TIM_IRQHandler+0xf4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80022e6:	f06f 0240 	mvn.w	r2, #64	; 0x40
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80022ea:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80022ec:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80022ee:	f7ff ff85 	bl	80021fc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80022f2:	6823      	ldr	r3, [r4, #0]
 80022f4:	691a      	ldr	r2, [r3, #16]
 80022f6:	0691      	lsls	r1, r2, #26
 80022f8:	d522      	bpl.n	8002340 <HAL_TIM_IRQHandler+0x142>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80022fa:	68da      	ldr	r2, [r3, #12]
 80022fc:	0692      	lsls	r2, r2, #26
 80022fe:	d51f      	bpl.n	8002340 <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002300:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002304:	4620      	mov	r0, r4
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002306:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800230a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 800230c:	f000 b8e9 	b.w	80024e2 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002310:	f7ff ff71 	bl	80021f6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002314:	4620      	mov	r0, r4
 8002316:	f7ff ff70 	bl	80021fa <HAL_TIM_PWM_PulseFinishedCallback>
 800231a:	e783      	b.n	8002224 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800231c:	f7ff ff6b 	bl	80021f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002320:	4620      	mov	r0, r4
 8002322:	f7ff ff6a 	bl	80021fa <HAL_TIM_PWM_PulseFinishedCallback>
 8002326:	e792      	b.n	800224e <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002328:	f7ff ff65 	bl	80021f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800232c:	4620      	mov	r0, r4
 800232e:	f7ff ff64 	bl	80021fa <HAL_TIM_PWM_PulseFinishedCallback>
 8002332:	e7a0      	b.n	8002276 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002334:	f7ff ff5f 	bl	80021f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002338:	4620      	mov	r0, r4
 800233a:	f7ff ff5e 	bl	80021fa <HAL_TIM_PWM_PulseFinishedCallback>
 800233e:	e7af      	b.n	80022a0 <HAL_TIM_IRQHandler+0xa2>
 8002340:	bd10      	pop	{r4, pc}
	...

08002344 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002344:	4a24      	ldr	r2, [pc, #144]	; (80023d8 <TIM_Base_SetConfig+0x94>)
  tmpcr1 = TIMx->CR1;
 8002346:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002348:	4290      	cmp	r0, r2
 800234a:	d012      	beq.n	8002372 <TIM_Base_SetConfig+0x2e>
 800234c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002350:	4290      	cmp	r0, r2
 8002352:	d00e      	beq.n	8002372 <TIM_Base_SetConfig+0x2e>
 8002354:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002358:	d00b      	beq.n	8002372 <TIM_Base_SetConfig+0x2e>
 800235a:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 800235e:	4290      	cmp	r0, r2
 8002360:	d007      	beq.n	8002372 <TIM_Base_SetConfig+0x2e>
 8002362:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002366:	4290      	cmp	r0, r2
 8002368:	d003      	beq.n	8002372 <TIM_Base_SetConfig+0x2e>
 800236a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800236e:	4290      	cmp	r0, r2
 8002370:	d11d      	bne.n	80023ae <TIM_Base_SetConfig+0x6a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8002372:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002374:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002378:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800237a:	4a17      	ldr	r2, [pc, #92]	; (80023d8 <TIM_Base_SetConfig+0x94>)
 800237c:	4290      	cmp	r0, r2
 800237e:	d012      	beq.n	80023a6 <TIM_Base_SetConfig+0x62>
 8002380:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002384:	4290      	cmp	r0, r2
 8002386:	d00e      	beq.n	80023a6 <TIM_Base_SetConfig+0x62>
 8002388:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800238c:	d00b      	beq.n	80023a6 <TIM_Base_SetConfig+0x62>
 800238e:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8002392:	4290      	cmp	r0, r2
 8002394:	d007      	beq.n	80023a6 <TIM_Base_SetConfig+0x62>
 8002396:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800239a:	4290      	cmp	r0, r2
 800239c:	d003      	beq.n	80023a6 <TIM_Base_SetConfig+0x62>
 800239e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80023a2:	4290      	cmp	r0, r2
 80023a4:	d103      	bne.n	80023ae <TIM_Base_SetConfig+0x6a>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80023a6:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80023a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80023ac:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80023ae:	694a      	ldr	r2, [r1, #20]
 80023b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80023b4:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 80023b6:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80023b8:	688b      	ldr	r3, [r1, #8]
 80023ba:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80023bc:	680b      	ldr	r3, [r1, #0]
 80023be:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80023c0:	4b05      	ldr	r3, [pc, #20]	; (80023d8 <TIM_Base_SetConfig+0x94>)
 80023c2:	4298      	cmp	r0, r3
 80023c4:	d003      	beq.n	80023ce <TIM_Base_SetConfig+0x8a>
 80023c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023ca:	4298      	cmp	r0, r3
 80023cc:	d101      	bne.n	80023d2 <TIM_Base_SetConfig+0x8e>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80023ce:	690b      	ldr	r3, [r1, #16]
 80023d0:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80023d2:	2301      	movs	r3, #1
 80023d4:	6143      	str	r3, [r0, #20]
 80023d6:	4770      	bx	lr
 80023d8:	40012c00 	.word	0x40012c00

080023dc <HAL_TIM_Base_Init>:
{
 80023dc:	b510      	push	{r4, lr}
  if (htim == NULL)
 80023de:	4604      	mov	r4, r0
 80023e0:	b1a0      	cbz	r0, 800240c <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 80023e2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80023e6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80023ea:	b91b      	cbnz	r3, 80023f4 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80023ec:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80023f0:	f001 ff72 	bl	80042d8 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80023f4:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023f6:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80023f8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023fc:	1d21      	adds	r1, r4, #4
 80023fe:	f7ff ffa1 	bl	8002344 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8002402:	2301      	movs	r3, #1
  return HAL_OK;
 8002404:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002406:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800240a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800240c:	2001      	movs	r0, #1
}
 800240e:	bd10      	pop	{r4, pc}

08002410 <HAL_TIM_Encoder_Init>:
{
 8002410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002412:	460c      	mov	r4, r1
  if (htim == NULL)
 8002414:	4605      	mov	r5, r0
 8002416:	2800      	cmp	r0, #0
 8002418:	d043      	beq.n	80024a2 <HAL_TIM_Encoder_Init+0x92>
  if (htim->State == HAL_TIM_STATE_RESET)
 800241a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800241e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002422:	b91b      	cbnz	r3, 800242c <HAL_TIM_Encoder_Init+0x1c>
    htim->Lock = HAL_UNLOCKED;
 8002424:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Encoder_MspInit(htim);
 8002428:	f001 ff28 	bl	800427c <HAL_TIM_Encoder_MspInit>
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800242c:	4629      	mov	r1, r5
  htim->State = HAL_TIM_STATE_BUSY;
 800242e:	2302      	movs	r3, #2
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002430:	f851 0b04 	ldr.w	r0, [r1], #4
  htim->State = HAL_TIM_STATE_BUSY;
 8002434:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002438:	6883      	ldr	r3, [r0, #8]
 800243a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800243e:	f023 0307 	bic.w	r3, r3, #7
 8002442:	6083      	str	r3, [r0, #8]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002444:	f7ff ff7e 	bl	8002344 <TIM_Base_SetConfig>
  tmpsmcr = htim->Instance->SMCR;
 8002448:	6828      	ldr	r0, [r5, #0]
  tmpsmcr |= sConfig->EncoderMode;
 800244a:	6823      	ldr	r3, [r4, #0]
  tmpsmcr = htim->Instance->SMCR;
 800244c:	6886      	ldr	r6, [r0, #8]
  tmpccmr1 = htim->Instance->CCMR1;
 800244e:	6982      	ldr	r2, [r0, #24]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002450:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr |= sConfig->EncoderMode;
 8002452:	431e      	orrs	r6, r3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002454:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002456:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800245a:	f022 0203 	bic.w	r2, r2, #3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800245e:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
 8002462:	4313      	orrs	r3, r2
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002464:	f423 427c 	bic.w	r2, r3, #64512	; 0xfc00
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002468:	6923      	ldr	r3, [r4, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800246a:	69e1      	ldr	r1, [r4, #28]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800246c:	011b      	lsls	r3, r3, #4
 800246e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002472:	68e1      	ldr	r1, [r4, #12]
  tmpccer = htim->Instance->CCER;
 8002474:	6a07      	ldr	r7, [r0, #32]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002476:	430b      	orrs	r3, r1
 8002478:	6a21      	ldr	r1, [r4, #32]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800247a:	f022 02fc 	bic.w	r2, r2, #252	; 0xfc
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800247e:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
 8002482:	4313      	orrs	r3, r2
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002484:	6961      	ldr	r1, [r4, #20]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002486:	f027 0222 	bic.w	r2, r7, #34	; 0x22
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800248a:	6867      	ldr	r7, [r4, #4]
  htim->Instance->SMCR = tmpsmcr;
 800248c:	6086      	str	r6, [r0, #8]
  htim->Instance->CCMR1 = tmpccmr1;
 800248e:	6183      	str	r3, [r0, #24]
  htim->State = HAL_TIM_STATE_READY;
 8002490:	2301      	movs	r3, #1
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002492:	ea47 1701 	orr.w	r7, r7, r1, lsl #4
 8002496:	4317      	orrs	r7, r2
  htim->Instance->CCER = tmpccer;
 8002498:	6207      	str	r7, [r0, #32]
  htim->State = HAL_TIM_STATE_READY;
 800249a:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
  return HAL_OK;
 800249e:	2000      	movs	r0, #0
 80024a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 80024a2:	2001      	movs	r0, #1
}
 80024a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080024a6 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80024a6:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 80024aa:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 80024ac:	2b01      	cmp	r3, #1
 80024ae:	f04f 0302 	mov.w	r3, #2
 80024b2:	d014      	beq.n	80024de <HAL_TIMEx_MasterConfigSynchronization+0x38>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80024b4:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80024b6:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 80024ba:	6862      	ldr	r2, [r4, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80024bc:	68a3      	ldr	r3, [r4, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80024be:	680d      	ldr	r5, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80024c0:	6849      	ldr	r1, [r1, #4]
  tmpcr2 &= ~TIM_CR2_MMS;
 80024c2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr &= ~TIM_SMCR_MSM;
 80024c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80024ca:	430b      	orrs	r3, r1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80024cc:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80024ce:	6062      	str	r2, [r4, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80024d0:	60a3      	str	r3, [r4, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80024d2:	2301      	movs	r3, #1
 80024d4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80024d8:	2300      	movs	r3, #0
 80024da:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 80024de:	4618      	mov	r0, r3

  return HAL_OK;
}
 80024e0:	bd30      	pop	{r4, r5, pc}

080024e2 <HAL_TIMEx_CommutCallback>:
 80024e2:	4770      	bx	lr

080024e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80024e4:	4770      	bx	lr
	...

080024e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80024e8:	b538      	push	{r3, r4, r5, lr}
 80024ea:	4605      	mov	r5, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80024ec:	6803      	ldr	r3, [r0, #0]
 80024ee:	68c1      	ldr	r1, [r0, #12]
 80024f0:	691a      	ldr	r2, [r3, #16]
 80024f2:	2419      	movs	r4, #25
 80024f4:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80024f8:	430a      	orrs	r2, r1
 80024fa:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80024fc:	6882      	ldr	r2, [r0, #8]
 80024fe:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 8002500:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002502:	4302      	orrs	r2, r0
 8002504:	6968      	ldr	r0, [r5, #20]
  MODIFY_REG(huart->Instance->CR1,
 8002506:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 800250a:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800250e:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8002510:	430a      	orrs	r2, r1
 8002512:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002514:	695a      	ldr	r2, [r3, #20]
 8002516:	69a9      	ldr	r1, [r5, #24]
 8002518:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800251c:	430a      	orrs	r2, r1
 800251e:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8002520:	4a0d      	ldr	r2, [pc, #52]	; (8002558 <UART_SetConfig+0x70>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d114      	bne.n	8002550 <UART_SetConfig+0x68>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002526:	f7ff faf3 	bl	8001b10 <HAL_RCC_GetPCLK2Freq>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800252a:	4360      	muls	r0, r4
 800252c:	686c      	ldr	r4, [r5, #4]
 800252e:	2264      	movs	r2, #100	; 0x64
 8002530:	00a4      	lsls	r4, r4, #2
 8002532:	fbb0 f0f4 	udiv	r0, r0, r4
 8002536:	fbb0 f4f2 	udiv	r4, r0, r2
 800253a:	fb02 0314 	mls	r3, r2, r4, r0
 800253e:	011b      	lsls	r3, r3, #4
 8002540:	3332      	adds	r3, #50	; 0x32
 8002542:	fbb3 f3f2 	udiv	r3, r3, r2
 8002546:	6829      	ldr	r1, [r5, #0]
 8002548:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 800254c:	608b      	str	r3, [r1, #8]
 800254e:	bd38      	pop	{r3, r4, r5, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 8002550:	f7ff face 	bl	8001af0 <HAL_RCC_GetPCLK1Freq>
 8002554:	e7e9      	b.n	800252a <UART_SetConfig+0x42>
 8002556:	bf00      	nop
 8002558:	40013800 	.word	0x40013800

0800255c <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 800255c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800255e:	4604      	mov	r4, r0
 8002560:	460e      	mov	r6, r1
 8002562:	4617      	mov	r7, r2
 8002564:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002566:	6821      	ldr	r1, [r4, #0]
 8002568:	680b      	ldr	r3, [r1, #0]
 800256a:	ea36 0303 	bics.w	r3, r6, r3
 800256e:	d101      	bne.n	8002574 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8002570:	2000      	movs	r0, #0
}
 8002572:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (Timeout != HAL_MAX_DELAY)
 8002574:	1c6b      	adds	r3, r5, #1
 8002576:	d0f7      	beq.n	8002568 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002578:	b995      	cbnz	r5, 80025a0 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800257a:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 800257c:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800257e:	68da      	ldr	r2, [r3, #12]
 8002580:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002584:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002586:	695a      	ldr	r2, [r3, #20]
 8002588:	f022 0201 	bic.w	r2, r2, #1
 800258c:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 800258e:	2320      	movs	r3, #32
 8002590:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002594:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8002598:	2300      	movs	r3, #0
 800259a:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 800259e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80025a0:	f7fd fe8a 	bl	80002b8 <HAL_GetTick>
 80025a4:	1bc0      	subs	r0, r0, r7
 80025a6:	4285      	cmp	r5, r0
 80025a8:	d2dd      	bcs.n	8002566 <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 80025aa:	e7e6      	b.n	800257a <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

080025ac <HAL_UART_Init>:
{
 80025ac:	b510      	push	{r4, lr}
  if (huart == NULL)
 80025ae:	4604      	mov	r4, r0
 80025b0:	b340      	cbz	r0, 8002604 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 80025b2:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80025b6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80025ba:	b91b      	cbnz	r3, 80025c4 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80025bc:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80025c0:	f001 fea8 	bl	8004314 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 80025c4:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 80025c6:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80025c8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80025cc:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 80025ce:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 80025d0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80025d4:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80025d6:	f7ff ff87 	bl	80024e8 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80025da:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025dc:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80025de:	691a      	ldr	r2, [r3, #16]
 80025e0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80025e4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80025e6:	695a      	ldr	r2, [r3, #20]
 80025e8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80025ec:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80025ee:	68da      	ldr	r2, [r3, #12]
 80025f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80025f4:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 80025f6:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025f8:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80025fa:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80025fe:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8002602:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002604:	2001      	movs	r0, #1
}
 8002606:	bd10      	pop	{r4, pc}

08002608 <HAL_UART_Transmit>:
{
 8002608:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800260c:	461f      	mov	r7, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800260e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
{
 8002612:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 8002614:	2b20      	cmp	r3, #32
{
 8002616:	460d      	mov	r5, r1
 8002618:	4690      	mov	r8, r2
  if (huart->gState == HAL_UART_STATE_READY)
 800261a:	d14e      	bne.n	80026ba <HAL_UART_Transmit+0xb2>
    if ((pData == NULL) || (Size == 0U))
 800261c:	2900      	cmp	r1, #0
 800261e:	d049      	beq.n	80026b4 <HAL_UART_Transmit+0xac>
 8002620:	2a00      	cmp	r2, #0
 8002622:	d047      	beq.n	80026b4 <HAL_UART_Transmit+0xac>
    __HAL_LOCK(huart);
 8002624:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002628:	2b01      	cmp	r3, #1
 800262a:	d046      	beq.n	80026ba <HAL_UART_Transmit+0xb2>
 800262c:	2301      	movs	r3, #1
 800262e:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002632:	2300      	movs	r3, #0
 8002634:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002636:	2321      	movs	r3, #33	; 0x21
 8002638:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 800263c:	f7fd fe3c 	bl	80002b8 <HAL_GetTick>
 8002640:	4606      	mov	r6, r0
    huart->TxXferSize = Size;
 8002642:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8002646:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800264a:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800264c:	b29b      	uxth	r3, r3
 800264e:	b96b      	cbnz	r3, 800266c <HAL_UART_Transmit+0x64>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002650:	463b      	mov	r3, r7
 8002652:	4632      	mov	r2, r6
 8002654:	2140      	movs	r1, #64	; 0x40
 8002656:	4620      	mov	r0, r4
 8002658:	f7ff ff80 	bl	800255c <UART_WaitOnFlagUntilTimeout.constprop.3>
 800265c:	b9a8      	cbnz	r0, 800268a <HAL_UART_Transmit+0x82>
    huart->gState = HAL_UART_STATE_READY;
 800265e:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 8002660:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    huart->gState = HAL_UART_STATE_READY;
 8002664:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 8002668:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 800266c:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800266e:	4632      	mov	r2, r6
      huart->TxXferCount--;
 8002670:	3b01      	subs	r3, #1
 8002672:	b29b      	uxth	r3, r3
 8002674:	84e3      	strh	r3, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002676:	68a3      	ldr	r3, [r4, #8]
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002678:	2180      	movs	r1, #128	; 0x80
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800267a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800267e:	4620      	mov	r0, r4
 8002680:	463b      	mov	r3, r7
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002682:	d10e      	bne.n	80026a2 <HAL_UART_Transmit+0x9a>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002684:	f7ff ff6a 	bl	800255c <UART_WaitOnFlagUntilTimeout.constprop.3>
 8002688:	b110      	cbz	r0, 8002690 <HAL_UART_Transmit+0x88>
          return HAL_TIMEOUT;
 800268a:	2003      	movs	r0, #3
 800268c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002690:	882b      	ldrh	r3, [r5, #0]
 8002692:	6822      	ldr	r2, [r4, #0]
 8002694:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002698:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800269a:	6923      	ldr	r3, [r4, #16]
 800269c:	b943      	cbnz	r3, 80026b0 <HAL_UART_Transmit+0xa8>
          pData += 2U;
 800269e:	3502      	adds	r5, #2
 80026a0:	e7d3      	b.n	800264a <HAL_UART_Transmit+0x42>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80026a2:	f7ff ff5b 	bl	800255c <UART_WaitOnFlagUntilTimeout.constprop.3>
 80026a6:	2800      	cmp	r0, #0
 80026a8:	d1ef      	bne.n	800268a <HAL_UART_Transmit+0x82>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80026aa:	6823      	ldr	r3, [r4, #0]
 80026ac:	782a      	ldrb	r2, [r5, #0]
 80026ae:	605a      	str	r2, [r3, #4]
 80026b0:	3501      	adds	r5, #1
 80026b2:	e7ca      	b.n	800264a <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 80026b4:	2001      	movs	r0, #1
 80026b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 80026ba:	2002      	movs	r0, #2
}
 80026bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080026c0 <MPU6050_SetDataRate>:
	/* Return OK */
	return MPU6050_Result_Ok;
}

MPU6050_Result MPU6050_SetDataRate(I2C_HandleTypeDef* I2Cx,MPU6050* DataStruct, uint8_t rate)
{
 80026c0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint8_t d[2];
	I2C_HandleTypeDef* Handle = I2Cx;
	uint8_t address = DataStruct->Address;
	/* Format array to send */
	d[0] = MPU6050_SMPLRT_DIV;
 80026c2:	2319      	movs	r3, #25
{
 80026c4:	4605      	mov	r5, r0
	d[1] = rate;

	/* Set data sample rate */
	while(HAL_I2C_Master_Transmit(Handle,(uint16_t)address,(uint8_t *)d,2,1000)!=HAL_OK);
 80026c6:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
	uint8_t address = DataStruct->Address;
 80026ca:	780c      	ldrb	r4, [r1, #0]
	d[0] = MPU6050_SMPLRT_DIV;
 80026cc:	f88d 300c 	strb.w	r3, [sp, #12]
	d[1] = rate;
 80026d0:	f88d 200d 	strb.w	r2, [sp, #13]
	while(HAL_I2C_Master_Transmit(Handle,(uint16_t)address,(uint8_t *)d,2,1000)!=HAL_OK);
 80026d4:	b2a4      	uxth	r4, r4
 80026d6:	9600      	str	r6, [sp, #0]
 80026d8:	2302      	movs	r3, #2
 80026da:	aa03      	add	r2, sp, #12
 80026dc:	4621      	mov	r1, r4
 80026de:	4628      	mov	r0, r5
 80026e0:	f7fe fc9e 	bl	8001020 <HAL_I2C_Master_Transmit>
 80026e4:	2800      	cmp	r0, #0
 80026e6:	d1f6      	bne.n	80026d6 <MPU6050_SetDataRate+0x16>
				return MPU6050_Result_Error;
	}*/

	/* Return OK */
	return MPU6050_Result_Ok;
}
 80026e8:	b004      	add	sp, #16
 80026ea:	bd70      	pop	{r4, r5, r6, pc}

080026ec <MPU6050_SetAccelerometer>:
MPU6050_Result MPU6050_SetAccelerometer(I2C_HandleTypeDef* I2Cx,MPU6050* DataStruct, MPU6050_Accelerometer AccelerometerSensitivity)
{
	uint8_t temp;
	I2C_HandleTypeDef* Handle = I2Cx;
	uint8_t address = DataStruct->Address;
	uint8_t regAdd =(uint8_t )MPU6050_ACCEL_CONFIG;
 80026ec:	231c      	movs	r3, #28
{
 80026ee:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80026f2:	4607      	mov	r7, r0
 80026f4:	460c      	mov	r4, r1
 80026f6:	4616      	mov	r6, r2

	/* Config accelerometer */
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address,&regAdd, 1, 1000) != HAL_OK);
 80026f8:	f44f 797a 	mov.w	r9, #1000	; 0x3e8
{
 80026fc:	b085      	sub	sp, #20
	uint8_t address = DataStruct->Address;
 80026fe:	780d      	ldrb	r5, [r1, #0]
	uint8_t regAdd =(uint8_t )MPU6050_ACCEL_CONFIG;
 8002700:	f10d 0810 	add.w	r8, sp, #16
 8002704:	f808 3d01 	strb.w	r3, [r8, #-1]!
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address,&regAdd, 1, 1000) != HAL_OK);
 8002708:	b2ad      	uxth	r5, r5
 800270a:	f8cd 9000 	str.w	r9, [sp]
 800270e:	2301      	movs	r3, #1
 8002710:	4642      	mov	r2, r8
 8002712:	4629      	mov	r1, r5
 8002714:	4638      	mov	r0, r7
 8002716:	f7fe fc83 	bl	8001020 <HAL_I2C_Master_Transmit>
 800271a:	2800      	cmp	r0, #0
 800271c:	d1f5      	bne.n	800270a <MPU6050_SetAccelerometer+0x1e>
	/*{
				return MPU6050_Result_Error;
	}*/
	while(HAL_I2C_Master_Receive(Handle, (uint16_t)address, &temp, 1, 1000) != HAL_OK);
 800271e:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
 8002722:	f8cd 8000 	str.w	r8, [sp]
 8002726:	2301      	movs	r3, #1
 8002728:	f10d 020e 	add.w	r2, sp, #14
 800272c:	4629      	mov	r1, r5
 800272e:	4638      	mov	r0, r7
 8002730:	f7fe fd44 	bl	80011bc <HAL_I2C_Master_Receive>
 8002734:	2800      	cmp	r0, #0
 8002736:	d1f4      	bne.n	8002722 <MPU6050_SetAccelerometer+0x36>
	/*{
				return MPU6050_Result_Error;
	}*/
	temp = (temp & 0xE7) | (uint8_t)AccelerometerSensitivity << 3;
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address,&temp, 1, 1000) != HAL_OK);
 8002738:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
	temp = (temp & 0xE7) | (uint8_t)AccelerometerSensitivity << 3;
 800273c:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8002740:	f023 0318 	bic.w	r3, r3, #24
 8002744:	ea43 03c6 	orr.w	r3, r3, r6, lsl #3
 8002748:	f88d 300e 	strb.w	r3, [sp, #14]
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address,&temp, 1, 1000) != HAL_OK);
 800274c:	f8cd 8000 	str.w	r8, [sp]
 8002750:	2301      	movs	r3, #1
 8002752:	f10d 020e 	add.w	r2, sp, #14
 8002756:	4629      	mov	r1, r5
 8002758:	4638      	mov	r0, r7
 800275a:	f7fe fc61 	bl	8001020 <HAL_I2C_Master_Transmit>
 800275e:	2800      	cmp	r0, #0
 8002760:	d1f4      	bne.n	800274c <MPU6050_SetAccelerometer+0x60>
	/*{
				return MPU6050_Result_Error;
	}*/

	/* Set sensitivities for multiplying gyro and accelerometer data */
	switch (AccelerometerSensitivity) {
 8002762:	2e03      	cmp	r6, #3
 8002764:	d806      	bhi.n	8002774 <MPU6050_SetAccelerometer+0x88>
 8002766:	e8df f006 	tbb	[pc, r6]
 800276a:	0902      	.short	0x0902
 800276c:	0f0c      	.short	0x0f0c
		case MPU6050_Accelerometer_2G:
			DataStruct->Acce_Mult = (float)1 / MPU6050_ACCE_SENS_2;
 800276e:	f04f 5362 	mov.w	r3, #947912704	; 0x38800000
			break;
		case MPU6050_Accelerometer_8G:
			DataStruct->Acce_Mult = (float)1 / MPU6050_ACCE_SENS_8;
			break;
		case MPU6050_Accelerometer_16G:
			DataStruct->Acce_Mult = (float)1 / MPU6050_ACCE_SENS_16;
 8002772:	60a3      	str	r3, [r4, #8]
			break;
		}

	/* Return OK */
	return MPU6050_Result_Ok;
}
 8002774:	2000      	movs	r0, #0
 8002776:	b005      	add	sp, #20
 8002778:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			DataStruct->Acce_Mult = (float)1 / MPU6050_ACCE_SENS_4;
 800277c:	f04f 5364 	mov.w	r3, #956301312	; 0x39000000
 8002780:	e7f7      	b.n	8002772 <MPU6050_SetAccelerometer+0x86>
			DataStruct->Acce_Mult = (float)1 / MPU6050_ACCE_SENS_8;
 8002782:	f04f 5366 	mov.w	r3, #964689920	; 0x39800000
 8002786:	e7f4      	b.n	8002772 <MPU6050_SetAccelerometer+0x86>
			DataStruct->Acce_Mult = (float)1 / MPU6050_ACCE_SENS_16;
 8002788:	f04f 5368 	mov.w	r3, #973078528	; 0x3a000000
 800278c:	e7f1      	b.n	8002772 <MPU6050_SetAccelerometer+0x86>
	...

08002790 <MPU6050_SetGyroscope>:
MPU6050_Result MPU6050_SetGyroscope(I2C_HandleTypeDef* I2Cx,MPU6050* DataStruct, MPU6050_Gyroscope GyroscopeSensitivity)
{
	uint8_t temp;
	I2C_HandleTypeDef* Handle = I2Cx;
	uint8_t address = DataStruct->Address;
	uint8_t regAdd =(uint8_t )MPU6050_GYRO_CONFIG;
 8002790:	231b      	movs	r3, #27
{
 8002792:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002796:	4607      	mov	r7, r0
 8002798:	460c      	mov	r4, r1
 800279a:	4616      	mov	r6, r2

	/* Config gyroscope */
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address,&regAdd, 1, 1000) != HAL_OK);
 800279c:	f44f 797a 	mov.w	r9, #1000	; 0x3e8
{
 80027a0:	b085      	sub	sp, #20
	uint8_t address = DataStruct->Address;
 80027a2:	780d      	ldrb	r5, [r1, #0]
	uint8_t regAdd =(uint8_t )MPU6050_GYRO_CONFIG;
 80027a4:	f10d 0810 	add.w	r8, sp, #16
 80027a8:	f808 3d01 	strb.w	r3, [r8, #-1]!
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address,&regAdd, 1, 1000) != HAL_OK);
 80027ac:	b2ad      	uxth	r5, r5
 80027ae:	f8cd 9000 	str.w	r9, [sp]
 80027b2:	2301      	movs	r3, #1
 80027b4:	4642      	mov	r2, r8
 80027b6:	4629      	mov	r1, r5
 80027b8:	4638      	mov	r0, r7
 80027ba:	f7fe fc31 	bl	8001020 <HAL_I2C_Master_Transmit>
 80027be:	2800      	cmp	r0, #0
 80027c0:	d1f5      	bne.n	80027ae <MPU6050_SetGyroscope+0x1e>
	/*{
				return MPU6050_Result_Error;
	}*/
	while(HAL_I2C_Master_Receive(Handle, (uint16_t)address, &temp, 1, 1000) != HAL_OK);
 80027c2:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
 80027c6:	f8cd 8000 	str.w	r8, [sp]
 80027ca:	2301      	movs	r3, #1
 80027cc:	f10d 020e 	add.w	r2, sp, #14
 80027d0:	4629      	mov	r1, r5
 80027d2:	4638      	mov	r0, r7
 80027d4:	f7fe fcf2 	bl	80011bc <HAL_I2C_Master_Receive>
 80027d8:	2800      	cmp	r0, #0
 80027da:	d1f4      	bne.n	80027c6 <MPU6050_SetGyroscope+0x36>
	/*{
				return MPU6050_Result_Error;
	}*/
	temp = (temp & 0xE7) | (uint8_t)GyroscopeSensitivity << 3;
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address,&temp, 1, 1000) != HAL_OK);
 80027dc:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
	temp = (temp & 0xE7) | (uint8_t)GyroscopeSensitivity << 3;
 80027e0:	f89d 300e 	ldrb.w	r3, [sp, #14]
 80027e4:	f023 0318 	bic.w	r3, r3, #24
 80027e8:	ea43 03c6 	orr.w	r3, r3, r6, lsl #3
 80027ec:	f88d 300e 	strb.w	r3, [sp, #14]
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address,&temp, 1, 1000) != HAL_OK);
 80027f0:	f8cd 8000 	str.w	r8, [sp]
 80027f4:	2301      	movs	r3, #1
 80027f6:	f10d 020e 	add.w	r2, sp, #14
 80027fa:	4629      	mov	r1, r5
 80027fc:	4638      	mov	r0, r7
 80027fe:	f7fe fc0f 	bl	8001020 <HAL_I2C_Master_Transmit>
 8002802:	2800      	cmp	r0, #0
 8002804:	d1f4      	bne.n	80027f0 <MPU6050_SetGyroscope+0x60>
	/*{
				return MPU6050_Result_Error;
	}*/

	switch (GyroscopeSensitivity) {
 8002806:	2e03      	cmp	r6, #3
 8002808:	d805      	bhi.n	8002816 <MPU6050_SetGyroscope+0x86>
 800280a:	e8df f006 	tbb	[pc, r6]
 800280e:	0802      	.short	0x0802
 8002810:	0c0a      	.short	0x0c0a
			case MPU6050_Gyroscope_250s:
				DataStruct->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_250;
 8002812:	4b06      	ldr	r3, [pc, #24]	; (800282c <MPU6050_SetGyroscope+0x9c>)
				break;
			case MPU6050_Gyroscope_1000s:
				DataStruct->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_1000;
				break;
			case MPU6050_Gyroscope_2000s:
				DataStruct->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_2000;
 8002814:	6063      	str	r3, [r4, #4]
			default:
				break;
		}
	/* Return OK */
	return MPU6050_Result_Ok;
}
 8002816:	2000      	movs	r0, #0
 8002818:	b005      	add	sp, #20
 800281a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				DataStruct->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_500;
 800281e:	4b04      	ldr	r3, [pc, #16]	; (8002830 <MPU6050_SetGyroscope+0xa0>)
 8002820:	e7f8      	b.n	8002814 <MPU6050_SetGyroscope+0x84>
				DataStruct->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_1000;
 8002822:	4b04      	ldr	r3, [pc, #16]	; (8002834 <MPU6050_SetGyroscope+0xa4>)
 8002824:	e7f6      	b.n	8002814 <MPU6050_SetGyroscope+0x84>
				DataStruct->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_2000;
 8002826:	4b04      	ldr	r3, [pc, #16]	; (8002838 <MPU6050_SetGyroscope+0xa8>)
 8002828:	e7f4      	b.n	8002814 <MPU6050_SetGyroscope+0x84>
 800282a:	bf00      	nop
 800282c:	3bfa232d 	.word	0x3bfa232d
 8002830:	3c7a232d 	.word	0x3c7a232d
 8002834:	3cf9c190 	.word	0x3cf9c190
 8002838:	3d79c190 	.word	0x3d79c190

0800283c <MPU6050_Init>:
{
 800283c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8002840:	4698      	mov	r8, r3
	uint8_t WHO_AM_I = (uint8_t)MPU6050_WHO_AM_I;
 8002842:	2375      	movs	r3, #117	; 0x75
	DataStruct->Address = MPU6050_I2C_ADDR | (uint8_t)DeviceNumber;
 8002844:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
	if(HAL_I2C_IsDeviceReady(Handle,address,2,5)!=HAL_OK)
 8002848:	b294      	uxth	r4, r2
	DataStruct->Address = MPU6050_I2C_ADDR | (uint8_t)DeviceNumber;
 800284a:	700a      	strb	r2, [r1, #0]
{
 800284c:	460e      	mov	r6, r1
	uint8_t WHO_AM_I = (uint8_t)MPU6050_WHO_AM_I;
 800284e:	f88d 300a 	strb.w	r3, [sp, #10]
	if(HAL_I2C_IsDeviceReady(Handle,address,2,5)!=HAL_OK)
 8002852:	2202      	movs	r2, #2
 8002854:	2305      	movs	r3, #5
 8002856:	4621      	mov	r1, r4
{
 8002858:	4605      	mov	r5, r0
	if(HAL_I2C_IsDeviceReady(Handle,address,2,5)!=HAL_OK)
 800285a:	f7fe fe27 	bl	80014ac <HAL_I2C_IsDeviceReady>
 800285e:	b118      	cbz	r0, 8002868 <MPU6050_Init+0x2c>
				return MPU6050_Result_Error;
 8002860:	2001      	movs	r0, #1
}
 8002862:	b004      	add	sp, #16
 8002864:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if(HAL_I2C_Master_Transmit(Handle, address, &WHO_AM_I, 1, 1000) != HAL_OK)
 8002868:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
 800286c:	2301      	movs	r3, #1
 800286e:	9700      	str	r7, [sp, #0]
 8002870:	f10d 020a 	add.w	r2, sp, #10
 8002874:	4621      	mov	r1, r4
 8002876:	4628      	mov	r0, r5
 8002878:	f7fe fbd2 	bl	8001020 <HAL_I2C_Master_Transmit>
 800287c:	2800      	cmp	r0, #0
 800287e:	d1ef      	bne.n	8002860 <MPU6050_Init+0x24>
		if(HAL_I2C_Master_Receive(Handle, address, &temp, 1, 1000) != HAL_OK)
 8002880:	9700      	str	r7, [sp, #0]
 8002882:	2301      	movs	r3, #1
 8002884:	f10d 020b 	add.w	r2, sp, #11
 8002888:	4621      	mov	r1, r4
 800288a:	4628      	mov	r0, r5
 800288c:	f7fe fc96 	bl	80011bc <HAL_I2C_Master_Receive>
 8002890:	2800      	cmp	r0, #0
 8002892:	d1e5      	bne.n	8002860 <MPU6050_Init+0x24>
		while(temp != MPU6050_I_AM)
 8002894:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8002898:	2b68      	cmp	r3, #104	; 0x68
 800289a:	d120      	bne.n	80028de <MPU6050_Init+0xa2>
		d[0] = MPU6050_PWR_MGMT_1;
 800289c:	236b      	movs	r3, #107	; 0x6b
		d[1] = 0x00;
 800289e:	f88d 000d 	strb.w	r0, [sp, #13]
		d[0] = MPU6050_PWR_MGMT_1;
 80028a2:	f88d 300c 	strb.w	r3, [sp, #12]
		if(HAL_I2C_Master_Transmit(Handle,(uint16_t)address , (uint8_t *)d, 2, 1000) != HAL_OK)
 80028a6:	4621      	mov	r1, r4
 80028a8:	9700      	str	r7, [sp, #0]
 80028aa:	2302      	movs	r3, #2
 80028ac:	aa03      	add	r2, sp, #12
 80028ae:	4628      	mov	r0, r5
 80028b0:	f7fe fbb6 	bl	8001020 <HAL_I2C_Master_Transmit>
 80028b4:	4604      	mov	r4, r0
 80028b6:	2800      	cmp	r0, #0
 80028b8:	d1d2      	bne.n	8002860 <MPU6050_Init+0x24>
	MPU6050_SetDataRate(I2Cx,DataStruct, MPU6050_DataRate_1KHz);
 80028ba:	2207      	movs	r2, #7
 80028bc:	4631      	mov	r1, r6
 80028be:	4628      	mov	r0, r5
 80028c0:	f7ff fefe 	bl	80026c0 <MPU6050_SetDataRate>
	MPU6050_SetAccelerometer(I2Cx,DataStruct, AccelerometerSensitivity);
 80028c4:	4642      	mov	r2, r8
 80028c6:	4631      	mov	r1, r6
 80028c8:	4628      	mov	r0, r5
 80028ca:	f7ff ff0f 	bl	80026ec <MPU6050_SetAccelerometer>
	MPU6050_SetGyroscope(I2Cx,DataStruct, GyroscopeSensitivity);
 80028ce:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
 80028d2:	4631      	mov	r1, r6
 80028d4:	4628      	mov	r0, r5
 80028d6:	f7ff ff5b 	bl	8002790 <MPU6050_SetGyroscope>
	return MPU6050_Result_Ok;
 80028da:	4620      	mov	r0, r4
 80028dc:	e7c1      	b.n	8002862 <MPU6050_Init+0x26>
				return MPU6050_Result_DeviceInvalid;
 80028de:	2003      	movs	r0, #3
 80028e0:	e7bf      	b.n	8002862 <MPU6050_Init+0x26>

080028e2 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80028e2:	b510      	push	{r4, lr}
 80028e4:	b096      	sub	sp, #88	; 0x58
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80028e6:	2228      	movs	r2, #40	; 0x28
 80028e8:	2100      	movs	r1, #0
 80028ea:	a80c      	add	r0, sp, #48	; 0x30
 80028ec:	f001 fe53 	bl	8004596 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80028f0:	2214      	movs	r2, #20
 80028f2:	2100      	movs	r1, #0
 80028f4:	a801      	add	r0, sp, #4
 80028f6:	f001 fe4e 	bl	8004596 <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 80028fa:	2218      	movs	r2, #24
 80028fc:	2100      	movs	r1, #0
 80028fe:	eb0d 0002 	add.w	r0, sp, r2
 8002902:	f001 fe48 	bl	8004596 <memset>

	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002906:	f44f 3380 	mov.w	r3, #65536	; 0x10000
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800290a:	2201      	movs	r2, #1
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800290c:	2402      	movs	r4, #2
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800290e:	930d      	str	r3, [sp, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002910:	9314      	str	r3, [sp, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002912:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002916:	a80c      	add	r0, sp, #48	; 0x30
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002918:	920c      	str	r2, [sp, #48]	; 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800291a:	9210      	str	r2, [sp, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800291c:	9315      	str	r3, [sp, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800291e:	9413      	str	r4, [sp, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002920:	f7fe fe6e 	bl	8001600 <HAL_RCC_OscConfig>
		Error_Handler();
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8002924:	230f      	movs	r3, #15
 8002926:	9301      	str	r3, [sp, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002928:	2300      	movs	r3, #0
 800292a:	9303      	str	r3, [sp, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800292c:	f44f 6380 	mov.w	r3, #1024	; 0x400
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8002930:	4621      	mov	r1, r4
 8002932:	a801      	add	r0, sp, #4
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002934:	9304      	str	r3, [sp, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002936:	9305      	str	r3, [sp, #20]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002938:	9402      	str	r4, [sp, #8]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 800293a:	f7ff f83b 	bl	80019b4 <HAL_RCC_ClockConfig>
		Error_Handler();
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800293e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8002942:	a806      	add	r0, sp, #24
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002944:	9406      	str	r4, [sp, #24]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8002946:	9308      	str	r3, [sp, #32]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8002948:	f7ff f8f2 	bl	8001b30 <HAL_RCCEx_PeriphCLKConfig>
		Error_Handler();
	}
}
 800294c:	b016      	add	sp, #88	; 0x58
 800294e:	bd10      	pop	{r4, pc}

08002950 <IdleLoop>:

}

/* USER CODE BEGIN 4 */

void IdleLoop() {
 8002950:	b510      	push	{r4, lr}
	HAL_Delay(100);
	HAL_GPIO_TogglePin(LED_BAT_GPIO_Port, LED_BAT_Pin);
 8002952:	4c0d      	ldr	r4, [pc, #52]	; (8002988 <IdleLoop+0x38>)
	HAL_Delay(100);
 8002954:	2064      	movs	r0, #100	; 0x64
 8002956:	f7fd fcb5 	bl	80002c4 <HAL_Delay>
	HAL_GPIO_TogglePin(LED_BAT_GPIO_Port, LED_BAT_Pin);
 800295a:	2180      	movs	r1, #128	; 0x80
 800295c:	4620      	mov	r0, r4
 800295e:	f7fe f9aa 	bl	8000cb6 <HAL_GPIO_TogglePin>
	HAL_Delay(100);
 8002962:	2064      	movs	r0, #100	; 0x64
 8002964:	f7fd fcae 	bl	80002c4 <HAL_Delay>
	HAL_GPIO_TogglePin(LED_EXT_GPIO_Port, LED_EXT_Pin);
 8002968:	f44f 7180 	mov.w	r1, #256	; 0x100
 800296c:	4620      	mov	r0, r4
 800296e:	f7fe f9a2 	bl	8000cb6 <HAL_GPIO_TogglePin>
	HAL_Delay(100);
 8002972:	2064      	movs	r0, #100	; 0x64
 8002974:	f7fd fca6 	bl	80002c4 <HAL_Delay>
	HAL_GPIO_TogglePin(LED_MODE_GPIO_Port, LED_MODE_Pin);
 8002978:	4620      	mov	r0, r4
}
 800297a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_GPIO_TogglePin(LED_MODE_GPIO_Port, LED_MODE_Pin);
 800297e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002982:	f7fe b998 	b.w	8000cb6 <HAL_GPIO_TogglePin>
 8002986:	bf00      	nop
 8002988:	40011000 	.word	0x40011000

0800298c <main>:
int main(void) {
 800298c:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
	__HAL_RCC_GPIOD_CLK_ENABLE()
 8002990:	4db7      	ldr	r5, [pc, #732]	; (8002c70 <main+0x2e4>)
int main(void) {
 8002992:	b095      	sub	sp, #84	; 0x54
	HAL_Init();
 8002994:	f7fd fc72 	bl	800027c <HAL_Init>
	SystemClock_Config();
 8002998:	f7ff ffa3 	bl	80028e2 <SystemClock_Config>
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800299c:	2210      	movs	r2, #16
 800299e:	2100      	movs	r1, #0
 80029a0:	a80b      	add	r0, sp, #44	; 0x2c
 80029a2:	f001 fdf8 	bl	8004596 <memset>
	__HAL_RCC_GPIOD_CLK_ENABLE()
 80029a6:	69ab      	ldr	r3, [r5, #24]
	HAL_GPIO_WritePin(GPIOA, CSN_Pin | CE_Pin, GPIO_PIN_RESET);
 80029a8:	2200      	movs	r2, #0
	__HAL_RCC_GPIOD_CLK_ENABLE()
 80029aa:	f043 0320 	orr.w	r3, r3, #32
 80029ae:	61ab      	str	r3, [r5, #24]
 80029b0:	69ab      	ldr	r3, [r5, #24]
	HAL_GPIO_WritePin(GPIOA, CSN_Pin | CE_Pin, GPIO_PIN_RESET);
 80029b2:	2112      	movs	r1, #18
	__HAL_RCC_GPIOD_CLK_ENABLE()
 80029b4:	f003 0320 	and.w	r3, r3, #32
 80029b8:	9305      	str	r3, [sp, #20]
 80029ba:	9b05      	ldr	r3, [sp, #20]
	__HAL_RCC_GPIOC_CLK_ENABLE()
 80029bc:	69ab      	ldr	r3, [r5, #24]
	HAL_GPIO_WritePin(GPIOA, CSN_Pin | CE_Pin, GPIO_PIN_RESET);
 80029be:	48ad      	ldr	r0, [pc, #692]	; (8002c74 <main+0x2e8>)
	__HAL_RCC_GPIOC_CLK_ENABLE()
 80029c0:	f043 0310 	orr.w	r3, r3, #16
 80029c4:	61ab      	str	r3, [r5, #24]
 80029c6:	69ab      	ldr	r3, [r5, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029c8:	2400      	movs	r4, #0
	__HAL_RCC_GPIOC_CLK_ENABLE()
 80029ca:	f003 0310 	and.w	r3, r3, #16
 80029ce:	9306      	str	r3, [sp, #24]
 80029d0:	9b06      	ldr	r3, [sp, #24]
	__HAL_RCC_GPIOA_CLK_ENABLE()
 80029d2:	69ab      	ldr	r3, [r5, #24]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029d4:	2601      	movs	r6, #1
	__HAL_RCC_GPIOA_CLK_ENABLE()
 80029d6:	f043 0304 	orr.w	r3, r3, #4
 80029da:	61ab      	str	r3, [r5, #24]
 80029dc:	69ab      	ldr	r3, [r5, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029de:	2702      	movs	r7, #2
	__HAL_RCC_GPIOA_CLK_ENABLE()
 80029e0:	f003 0304 	and.w	r3, r3, #4
 80029e4:	9307      	str	r3, [sp, #28]
 80029e6:	9b07      	ldr	r3, [sp, #28]
	__HAL_RCC_GPIOB_CLK_ENABLE()
 80029e8:	69ab      	ldr	r3, [r5, #24]
	GPIO_InitStruct.Pin = JOY1_PB_Pin | JOY2_PB_Pin;
 80029ea:	f04f 0a06 	mov.w	sl, #6
	__HAL_RCC_GPIOB_CLK_ENABLE()
 80029ee:	f043 0308 	orr.w	r3, r3, #8
 80029f2:	61ab      	str	r3, [r5, #24]
 80029f4:	69ab      	ldr	r3, [r5, #24]
	hadc1.Init.NbrOfConversion = 11;
 80029f6:	f04f 090b 	mov.w	r9, #11
	__HAL_RCC_GPIOB_CLK_ENABLE()
 80029fa:	f003 0308 	and.w	r3, r3, #8
 80029fe:	9308      	str	r3, [sp, #32]
 8002a00:	9b08      	ldr	r3, [sp, #32]
	HAL_GPIO_WritePin(GPIOA, CSN_Pin | CE_Pin, GPIO_PIN_RESET);
 8002a02:	f7fe f953 	bl	8000cac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, MPU_PWR_Pin | RC_PWR_Pin | OLED_PWR_Pin | BUZZ_Pin,
 8002a06:	2200      	movs	r2, #0
 8002a08:	f44f 4143 	mov.w	r1, #49920	; 0xc300
 8002a0c:	489a      	ldr	r0, [pc, #616]	; (8002c78 <main+0x2ec>)
 8002a0e:	f7fe f94d 	bl	8000cac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, LED_BAT_Pin | LED_EXT_Pin | LED_MODE_Pin,
 8002a12:	2200      	movs	r2, #0
 8002a14:	f44f 7160 	mov.w	r1, #896	; 0x380
 8002a18:	4898      	ldr	r0, [pc, #608]	; (8002c7c <main+0x2f0>)
 8002a1a:	f7fe f947 	bl	8000cac <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = CSN_Pin | CE_Pin;
 8002a1e:	2312      	movs	r3, #18
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a20:	a90b      	add	r1, sp, #44	; 0x2c
 8002a22:	4894      	ldr	r0, [pc, #592]	; (8002c74 <main+0x2e8>)
	GPIO_InitStruct.Pin = CSN_Pin | CE_Pin;
 8002a24:	930b      	str	r3, [sp, #44]	; 0x2c
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a26:	940d      	str	r4, [sp, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a28:	970e      	str	r7, [sp, #56]	; 0x38
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a2a:	960c      	str	r6, [sp, #48]	; 0x30
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a2c:	f7fe f852 	bl	8000ad4 <HAL_GPIO_Init>
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a30:	a90b      	add	r1, sp, #44	; 0x2c
 8002a32:	4891      	ldr	r0, [pc, #580]	; (8002c78 <main+0x2ec>)
	GPIO_InitStruct.Pin = JOY1_PB_Pin | JOY2_PB_Pin;
 8002a34:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a38:	940c      	str	r4, [sp, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a3a:	940d      	str	r4, [sp, #52]	; 0x34
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a3c:	f7fe f84a 	bl	8000ad4 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = MPU_PWR_Pin | RC_PWR_Pin | OLED_PWR_Pin | BUZZ_Pin;
 8002a40:	f44f 4343 	mov.w	r3, #49920	; 0xc300
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a44:	a90b      	add	r1, sp, #44	; 0x2c
 8002a46:	488c      	ldr	r0, [pc, #560]	; (8002c78 <main+0x2ec>)
	GPIO_InitStruct.Pin = MPU_PWR_Pin | RC_PWR_Pin | OLED_PWR_Pin | BUZZ_Pin;
 8002a48:	930b      	str	r3, [sp, #44]	; 0x2c
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a4a:	940d      	str	r4, [sp, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a4c:	970e      	str	r7, [sp, #56]	; 0x38
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a4e:	960c      	str	r6, [sp, #48]	; 0x30
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a50:	f7fe f840 	bl	8000ad4 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = MPU_INT_Pin;
 8002a54:	2340      	movs	r3, #64	; 0x40
	HAL_GPIO_Init(MPU_INT_GPIO_Port, &GPIO_InitStruct);
 8002a56:	a90b      	add	r1, sp, #44	; 0x2c
 8002a58:	4888      	ldr	r0, [pc, #544]	; (8002c7c <main+0x2f0>)
	GPIO_InitStruct.Pin = MPU_INT_Pin;
 8002a5a:	930b      	str	r3, [sp, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a5c:	940c      	str	r4, [sp, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a5e:	940d      	str	r4, [sp, #52]	; 0x34
	HAL_GPIO_Init(MPU_INT_GPIO_Port, &GPIO_InitStruct);
 8002a60:	f7fe f838 	bl	8000ad4 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = LED_BAT_Pin | LED_EXT_Pin | LED_MODE_Pin;
 8002a64:	f44f 7360 	mov.w	r3, #896	; 0x380
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a68:	a90b      	add	r1, sp, #44	; 0x2c
 8002a6a:	4884      	ldr	r0, [pc, #528]	; (8002c7c <main+0x2f0>)
	GPIO_InitStruct.Pin = LED_BAT_Pin | LED_EXT_Pin | LED_MODE_Pin;
 8002a6c:	930b      	str	r3, [sp, #44]	; 0x2c
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a6e:	940d      	str	r4, [sp, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a70:	970e      	str	r7, [sp, #56]	; 0x38
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a72:	960c      	str	r6, [sp, #48]	; 0x30
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a74:	f7fe f82e 	bl	8000ad4 <HAL_GPIO_Init>
	__HAL_RCC_DMA1_CLK_ENABLE()
 8002a78:	696b      	ldr	r3, [r5, #20]
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002a7a:	4622      	mov	r2, r4
	__HAL_RCC_DMA1_CLK_ENABLE()
 8002a7c:	4333      	orrs	r3, r6
 8002a7e:	616b      	str	r3, [r5, #20]
 8002a80:	696b      	ldr	r3, [r5, #20]
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002a82:	4621      	mov	r1, r4
	__HAL_RCC_DMA1_CLK_ENABLE()
 8002a84:	4033      	ands	r3, r6
 8002a86:	9304      	str	r3, [sp, #16]
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002a88:	200b      	movs	r0, #11
	__HAL_RCC_DMA1_CLK_ENABLE()
 8002a8a:	9b04      	ldr	r3, [sp, #16]
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002a8c:	f7fd fe70 	bl	8000770 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002a90:	200b      	movs	r0, #11
	hadc1.Instance = ADC1;
 8002a92:	4d7b      	ldr	r5, [pc, #492]	; (8002c80 <main+0x2f4>)
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002a94:	f7fd fea0 	bl	80007d8 <HAL_NVIC_EnableIRQ>
	hadc1.Instance = ADC1;
 8002a98:	4b7a      	ldr	r3, [pc, #488]	; (8002c84 <main+0x2f8>)
	sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8002a9a:	f04f 0807 	mov.w	r8, #7
	hadc1.Instance = ADC1;
 8002a9e:	602b      	str	r3, [r5, #0]
	hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002aa0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002aa4:	60ab      	str	r3, [r5, #8]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002aa6:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8002aaa:	4628      	mov	r0, r5
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002aac:	61eb      	str	r3, [r5, #28]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002aae:	752c      	strb	r4, [r5, #20]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002ab0:	606c      	str	r4, [r5, #4]
	hadc1.Init.NbrOfConversion = 11;
 8002ab2:	f8c5 9010 	str.w	r9, [r5, #16]
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8002ab6:	940b      	str	r4, [sp, #44]	; 0x2c
 8002ab8:	940c      	str	r4, [sp, #48]	; 0x30
 8002aba:	940d      	str	r4, [sp, #52]	; 0x34
	hadc1.Init.ContinuousConvMode = ENABLE;
 8002abc:	732e      	strb	r6, [r5, #12]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8002abe:	f7fd fdbb 	bl	8000638 <HAL_ADC_Init>
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8002ac2:	a90b      	add	r1, sp, #44	; 0x2c
 8002ac4:	4628      	mov	r0, r5
	sConfig.Channel = ADC_CHANNEL_0;
 8002ac6:	940b      	str	r4, [sp, #44]	; 0x2c
	sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8002ac8:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8002acc:	960c      	str	r6, [sp, #48]	; 0x30
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8002ace:	f7fd fc47 	bl	8000360 <HAL_ADC_ConfigChannel>
	sConfig.Channel = ADC_CHANNEL_5;
 8002ad2:	2305      	movs	r3, #5
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8002ad4:	a90b      	add	r1, sp, #44	; 0x2c
 8002ad6:	4628      	mov	r0, r5
	sConfig.Channel = ADC_CHANNEL_5;
 8002ad8:	930b      	str	r3, [sp, #44]	; 0x2c
 8002ada:	9303      	str	r3, [sp, #12]
	sConfig.Rank = ADC_REGULAR_RANK_2;
 8002adc:	970c      	str	r7, [sp, #48]	; 0x30
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8002ade:	f7fd fc3f 	bl	8000360 <HAL_ADC_ConfigChannel>
	sConfig.Rank = ADC_REGULAR_RANK_3;
 8002ae2:	2203      	movs	r2, #3
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8002ae4:	a90b      	add	r1, sp, #44	; 0x2c
 8002ae6:	4628      	mov	r0, r5
	sConfig.Channel = ADC_CHANNEL_6;
 8002ae8:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
	sConfig.Rank = ADC_REGULAR_RANK_3;
 8002aec:	920c      	str	r2, [sp, #48]	; 0x30
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8002aee:	f7fd fc37 	bl	8000360 <HAL_ADC_ConfigChannel>
	sConfig.Rank = ADC_REGULAR_RANK_4;
 8002af2:	2204      	movs	r2, #4
	sConfig.Channel = ADC_CHANNEL_8;
 8002af4:	f04f 0b08 	mov.w	fp, #8
	sConfig.Channel = ADC_CHANNEL_10;
 8002af8:	270a      	movs	r7, #10
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8002afa:	a90b      	add	r1, sp, #44	; 0x2c
 8002afc:	4628      	mov	r0, r5
	sConfig.Rank = ADC_REGULAR_RANK_4;
 8002afe:	920c      	str	r2, [sp, #48]	; 0x30
	sConfig.Channel = ADC_CHANNEL_7;
 8002b00:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8002b04:	f7fd fc2c 	bl	8000360 <HAL_ADC_ConfigChannel>
	sConfig.Rank = ADC_REGULAR_RANK_5;
 8002b08:	9b03      	ldr	r3, [sp, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8002b0a:	a90b      	add	r1, sp, #44	; 0x2c
 8002b0c:	4628      	mov	r0, r5
	sConfig.Rank = ADC_REGULAR_RANK_5;
 8002b0e:	930c      	str	r3, [sp, #48]	; 0x30
	sConfig.Channel = ADC_CHANNEL_8;
 8002b10:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8002b14:	f7fd fc24 	bl	8000360 <HAL_ADC_ConfigChannel>
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8002b18:	a90b      	add	r1, sp, #44	; 0x2c
 8002b1a:	4628      	mov	r0, r5
	sConfig.Rank = ADC_REGULAR_RANK_6;
 8002b1c:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
	sConfig.Channel = ADC_CHANNEL_10;
 8002b20:	970b      	str	r7, [sp, #44]	; 0x2c
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8002b22:	f7fd fc1d 	bl	8000360 <HAL_ADC_ConfigChannel>
	sConfig.Rank = ADC_REGULAR_RANK_7;
 8002b26:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
	sConfig.Channel = ADC_CHANNEL_12;
 8002b2a:	f04f 080c 	mov.w	r8, #12
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8002b2e:	a90b      	add	r1, sp, #44	; 0x2c
 8002b30:	4628      	mov	r0, r5
	sConfig.Channel = ADC_CHANNEL_11;
 8002b32:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8002b36:	f7fd fc13 	bl	8000360 <HAL_ADC_ConfigChannel>
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8002b3a:	a90b      	add	r1, sp, #44	; 0x2c
 8002b3c:	4628      	mov	r0, r5
	sConfig.Channel = ADC_CHANNEL_12;
 8002b3e:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
	sConfig.Rank = ADC_REGULAR_RANK_8;
 8002b42:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8002b46:	f7fd fc0b 	bl	8000360 <HAL_ADC_ConfigChannel>
	sConfig.Channel = ADC_CHANNEL_13;
 8002b4a:	230d      	movs	r3, #13
 8002b4c:	930b      	str	r3, [sp, #44]	; 0x2c
	sConfig.Rank = ADC_REGULAR_RANK_9;
 8002b4e:	2309      	movs	r3, #9
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8002b50:	a90b      	add	r1, sp, #44	; 0x2c
 8002b52:	4628      	mov	r0, r5
	sConfig.Rank = ADC_REGULAR_RANK_9;
 8002b54:	930c      	str	r3, [sp, #48]	; 0x30
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8002b56:	f7fd fc03 	bl	8000360 <HAL_ADC_ConfigChannel>
	sConfig.Channel = ADC_CHANNEL_14;
 8002b5a:	230e      	movs	r3, #14
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8002b5c:	a90b      	add	r1, sp, #44	; 0x2c
 8002b5e:	4628      	mov	r0, r5
	sConfig.Channel = ADC_CHANNEL_14;
 8002b60:	930b      	str	r3, [sp, #44]	; 0x2c
	sConfig.Rank = ADC_REGULAR_RANK_10;
 8002b62:	970c      	str	r7, [sp, #48]	; 0x30
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8002b64:	f7fd fbfc 	bl	8000360 <HAL_ADC_ConfigChannel>
	sConfig.Channel = ADC_CHANNEL_15;
 8002b68:	230f      	movs	r3, #15
	sConfig.Rank = ADC_REGULAR_RANK_11;
 8002b6a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002b6e:	f44f 4980 	mov.w	r9, #16384	; 0x4000
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8002b72:	a90b      	add	r1, sp, #44	; 0x2c
 8002b74:	4628      	mov	r0, r5
	hi2c1.Init.ClockSpeed = 400000;
 8002b76:	f8df a138 	ldr.w	sl, [pc, #312]	; 8002cb0 <main+0x324>
	sConfig.Channel = ADC_CHANNEL_15;
 8002b7a:	930b      	str	r3, [sp, #44]	; 0x2c
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8002b7c:	f7fd fbf0 	bl	8000360 <HAL_ADC_ConfigChannel>
	hi2c1.Instance = I2C1;
 8002b80:	4841      	ldr	r0, [pc, #260]	; (8002c88 <main+0x2fc>)
	hi2c1.Init.ClockSpeed = 400000;
 8002b82:	4b42      	ldr	r3, [pc, #264]	; (8002c8c <main+0x300>)
	hi2c2.Instance = I2C2;
 8002b84:	4d42      	ldr	r5, [pc, #264]	; (8002c90 <main+0x304>)
	hi2c1.Init.ClockSpeed = 400000;
 8002b86:	e880 0408 	stmia.w	r0, {r3, sl}
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002b8a:	6084      	str	r4, [r0, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8002b8c:	60c4      	str	r4, [r0, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002b8e:	6144      	str	r4, [r0, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8002b90:	6184      	str	r4, [r0, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002b92:	61c4      	str	r4, [r0, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002b94:	6204      	str	r4, [r0, #32]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002b96:	f8c0 9010 	str.w	r9, [r0, #16]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8002b9a:	f7fe f99d 	bl	8000ed8 <HAL_I2C_Init>
	hi2c2.Instance = I2C2;
 8002b9e:	4b3d      	ldr	r3, [pc, #244]	; (8002c94 <main+0x308>)
	if (HAL_I2C_Init(&hi2c2) != HAL_OK) {
 8002ba0:	4628      	mov	r0, r5
	hi2c2.Init.ClockSpeed = 400000;
 8002ba2:	e885 0408 	stmia.w	r5, {r3, sl}
	hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002ba6:	60ac      	str	r4, [r5, #8]
	hi2c2.Init.OwnAddress1 = 0;
 8002ba8:	60ec      	str	r4, [r5, #12]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002baa:	616c      	str	r4, [r5, #20]
	hi2c2.Init.OwnAddress2 = 0;
 8002bac:	61ac      	str	r4, [r5, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002bae:	61ec      	str	r4, [r5, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002bb0:	622c      	str	r4, [r5, #32]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002bb2:	f8c5 9010 	str.w	r9, [r5, #16]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK) {
 8002bb6:	f7fe f98f 	bl	8000ed8 <HAL_I2C_Init>
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8002bba:	f44f 7382 	mov.w	r3, #260	; 0x104
	hspi1.Instance = SPI1;
 8002bbe:	4836      	ldr	r0, [pc, #216]	; (8002c98 <main+0x30c>)
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8002bc0:	4a36      	ldr	r2, [pc, #216]	; (8002c9c <main+0x310>)
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002bc2:	6084      	str	r4, [r0, #8]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8002bc4:	e880 000c 	stmia.w	r0, {r2, r3}
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8002bc8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002bcc:	6183      	str	r3, [r0, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8002bce:	2320      	movs	r3, #32
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002bd0:	60c4      	str	r4, [r0, #12]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8002bd2:	61c3      	str	r3, [r0, #28]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002bd4:	6104      	str	r4, [r0, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002bd6:	6144      	str	r4, [r0, #20]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002bd8:	6204      	str	r4, [r0, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002bda:	6244      	str	r4, [r0, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002bdc:	6284      	str	r4, [r0, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 8002bde:	62c7      	str	r7, [r0, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8002be0:	f7ff f88e 	bl	8001d00 <HAL_SPI_Init>
	TIM_Encoder_InitTypeDef sConfig = { 0 };
 8002be4:	2224      	movs	r2, #36	; 0x24
 8002be6:	4621      	mov	r1, r4
 8002be8:	a80b      	add	r0, sp, #44	; 0x2c
 8002bea:	f001 fcd4 	bl	8004596 <memset>
	htim1.Instance = TIM1;
 8002bee:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8002cb4 <main+0x328>
 8002bf2:	4b2b      	ldr	r3, [pc, #172]	; (8002ca0 <main+0x314>)
	if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK) {
 8002bf4:	a90b      	add	r1, sp, #44	; 0x2c
	htim1.Init.Prescaler = 0;
 8002bf6:	e88a 0018 	stmia.w	sl, {r3, r4}
	htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED3;
 8002bfa:	2360      	movs	r3, #96	; 0x60
	if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK) {
 8002bfc:	4650      	mov	r0, sl
	htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED3;
 8002bfe:	f8ca 3008 	str.w	r3, [sl, #8]
	htim1.Init.Period = 0;
 8002c02:	f8ca 400c 	str.w	r4, [sl, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c06:	f8ca 4010 	str.w	r4, [sl, #16]
	htim1.Init.RepetitionCounter = 0;
 8002c0a:	f8ca 4014 	str.w	r4, [sl, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c0e:	f8ca 4018 	str.w	r4, [sl, #24]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8002c12:	9409      	str	r4, [sp, #36]	; 0x24
 8002c14:	940a      	str	r4, [sp, #40]	; 0x28
	sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002c16:	960b      	str	r6, [sp, #44]	; 0x2c
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002c18:	960d      	str	r6, [sp, #52]	; 0x34
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002c1a:	9611      	str	r6, [sp, #68]	; 0x44
	if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK) {
 8002c1c:	f7ff fbf8 	bl	8002410 <HAL_TIM_Encoder_Init>
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8002c20:	a909      	add	r1, sp, #36	; 0x24
 8002c22:	4650      	mov	r0, sl
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c24:	9409      	str	r4, [sp, #36]	; 0x24
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c26:	940a      	str	r4, [sp, #40]	; 0x28
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8002c28:	f7ff fc3d 	bl	80024a6 <HAL_TIMEx_MasterConfigSynchronization>
	htim6.Init.Prescaler = 719;
 8002c2c:	f240 23cf 	movw	r3, #719	; 0x2cf
	htim6.Instance = TIM6;
 8002c30:	f8df a084 	ldr.w	sl, [pc, #132]	; 8002cb8 <main+0x32c>
	htim6.Init.Prescaler = 719;
 8002c34:	491b      	ldr	r1, [pc, #108]	; (8002ca4 <main+0x318>)
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK) {
 8002c36:	4650      	mov	r0, sl
	htim6.Init.Prescaler = 719;
 8002c38:	e88a 000a 	stmia.w	sl, {r1, r3}
	htim6.Init.Period = 5999;
 8002c3c:	f241 736f 	movw	r3, #5999	; 0x176f
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c40:	f8ca 4008 	str.w	r4, [sl, #8]
	htim6.Init.Period = 5999;
 8002c44:	f8ca 300c 	str.w	r3, [sl, #12]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c48:	f8ca 4018 	str.w	r4, [sl, #24]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8002c4c:	940b      	str	r4, [sp, #44]	; 0x2c
 8002c4e:	940c      	str	r4, [sp, #48]	; 0x30
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK) {
 8002c50:	f7ff fbc4 	bl	80023dc <HAL_TIM_Base_Init>
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig)
 8002c54:	4650      	mov	r0, sl
	huart2.Init.BaudRate = 115200;
 8002c56:	f44f 3ae1 	mov.w	sl, #115200	; 0x1c200
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig)
 8002c5a:	a90b      	add	r1, sp, #44	; 0x2c
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c5c:	940b      	str	r4, [sp, #44]	; 0x2c
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c5e:	940c      	str	r4, [sp, #48]	; 0x30
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig)
 8002c60:	f7ff fc21 	bl	80024a6 <HAL_TIMEx_MasterConfigSynchronization>
	huart2.Instance = USART2;
 8002c64:	4810      	ldr	r0, [pc, #64]	; (8002ca8 <main+0x31c>)
	huart2.Init.BaudRate = 115200;
 8002c66:	4b11      	ldr	r3, [pc, #68]	; (8002cac <main+0x320>)
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002c68:	6084      	str	r4, [r0, #8]
	huart2.Init.BaudRate = 115200;
 8002c6a:	e880 0408 	stmia.w	r0, {r3, sl}
 8002c6e:	e025      	b.n	8002cbc <main+0x330>
 8002c70:	40021000 	.word	0x40021000
 8002c74:	40010800 	.word	0x40010800
 8002c78:	40010c00 	.word	0x40010c00
 8002c7c:	40011000 	.word	0x40011000
 8002c80:	20000664 	.word	0x20000664
 8002c84:	40012400 	.word	0x40012400
 8002c88:	200005bc 	.word	0x200005bc
 8002c8c:	40005400 	.word	0x40005400
 8002c90:	20000610 	.word	0x20000610
 8002c94:	40005800 	.word	0x40005800
 8002c98:	20000758 	.word	0x20000758
 8002c9c:	40013000 	.word	0x40013000
 8002ca0:	40012c00 	.word	0x40012c00
 8002ca4:	40001000 	.word	0x40001000
 8002ca8:	200007b4 	.word	0x200007b4
 8002cac:	40004400 	.word	0x40004400
 8002cb0:	00061a80 	.word	0x00061a80
 8002cb4:	20000718 	.word	0x20000718
 8002cb8:	200006d8 	.word	0x200006d8
	huart2.Init.StopBits = UART_STOPBITS_1;
 8002cbc:	60c4      	str	r4, [r0, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8002cbe:	6104      	str	r4, [r0, #16]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002cc0:	6184      	str	r4, [r0, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002cc2:	61c4      	str	r4, [r0, #28]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8002cc4:	f8c0 8014 	str.w	r8, [r0, #20]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8002cc8:	f7ff fc70 	bl	80025ac <HAL_UART_Init>
	huart3.Instance = USART3;
 8002ccc:	481c      	ldr	r0, [pc, #112]	; (8002d40 <main+0x3b4>)
 8002cce:	4b1d      	ldr	r3, [pc, #116]	; (8002d44 <main+0x3b8>)
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002cd0:	6084      	str	r4, [r0, #8]
	huart3.Init.BaudRate = 115200;
 8002cd2:	e880 0408 	stmia.w	r0, {r3, sl}
	huart3.Init.StopBits = UART_STOPBITS_1;
 8002cd6:	60c4      	str	r4, [r0, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8002cd8:	6104      	str	r4, [r0, #16]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002cda:	6184      	str	r4, [r0, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002cdc:	61c4      	str	r4, [r0, #28]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8002cde:	f8c0 8014 	str.w	r8, [r0, #20]
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 8002ce2:	f7ff fc63 	bl	80025ac <HAL_UART_Init>
	oledInit();
 8002ce6:	f000 fdbf 	bl	8003868 <oledInit>
	oledPrintInitScreen();
 8002cea:	f000 fdcd 	bl	8003888 <oledPrintInitScreen>
	initNRF24andPrintStatus();
 8002cee:	f000 fd79 	bl	80037e4 <initNRF24andPrintStatus>
	HAL_GPIO_WritePin(MPU_PWR_GPIO_Port, MPU_PWR_Pin, SET);
 8002cf2:	4632      	mov	r2, r6
 8002cf4:	4649      	mov	r1, r9
 8002cf6:	4814      	ldr	r0, [pc, #80]	; (8002d48 <main+0x3bc>)
 8002cf8:	f7fd ffd8 	bl	8000cac <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8002cfc:	2064      	movs	r0, #100	; 0x64
 8002cfe:	f7fd fae1 	bl	80002c4 <HAL_Delay>
	mpu_result = MPU6050_Init(&hi2c2, &imu, MPU6050_Device_0,
 8002d02:	4623      	mov	r3, r4
 8002d04:	4622      	mov	r2, r4
 8002d06:	9400      	str	r4, [sp, #0]
 8002d08:	4910      	ldr	r1, [pc, #64]	; (8002d4c <main+0x3c0>)
 8002d0a:	4628      	mov	r0, r5
 8002d0c:	f7ff fd96 	bl	800283c <MPU6050_Init>
 8002d10:	4c0f      	ldr	r4, [pc, #60]	; (8002d50 <main+0x3c4>)
 8002d12:	7020      	strb	r0, [r4, #0]
	HAL_Delay(10);
 8002d14:	4638      	mov	r0, r7
 8002d16:	f7fd fad5 	bl	80002c4 <HAL_Delay>
	if (mpu_result == MPU6050_Result_Ok) {
 8002d1a:	7823      	ldrb	r3, [r4, #0]
 8002d1c:	b96b      	cbnz	r3, 8002d3a <main+0x3ae>
		printf("MPU6050  initialization SUCCESS!\n");
 8002d1e:	480d      	ldr	r0, [pc, #52]	; (8002d54 <main+0x3c8>)
		printf("MPU6050 initialization FAIL!\n");
 8002d20:	f001 fcb6 	bl	8004690 <puts>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adc_values, 11);
 8002d24:	220b      	movs	r2, #11
 8002d26:	490c      	ldr	r1, [pc, #48]	; (8002d58 <main+0x3cc>)
 8002d28:	480c      	ldr	r0, [pc, #48]	; (8002d5c <main+0x3d0>)
 8002d2a:	f7fd fbd5 	bl	80004d8 <HAL_ADC_Start_DMA>
	HAL_TIM_Base_Start_IT(&htim6);
 8002d2e:	480c      	ldr	r0, [pc, #48]	; (8002d60 <main+0x3d4>)
 8002d30:	f7ff fa51 	bl	80021d6 <HAL_TIM_Base_Start_IT>
		IdleLoop();
 8002d34:	f7ff fe0c 	bl	8002950 <IdleLoop>
 8002d38:	e7fc      	b.n	8002d34 <main+0x3a8>
		printf("MPU6050 initialization FAIL!\n");
 8002d3a:	480a      	ldr	r0, [pc, #40]	; (8002d64 <main+0x3d8>)
 8002d3c:	e7f0      	b.n	8002d20 <main+0x394>
 8002d3e:	bf00      	nop
 8002d40:	2000057c 	.word	0x2000057c
 8002d44:	40004800 	.word	0x40004800
 8002d48:	40010c00 	.word	0x40010c00
 8002d4c:	20000560 	.word	0x20000560
 8002d50:	200007b0 	.word	0x200007b0
 8002d54:	08005fc1 	.word	0x08005fc1
 8002d58:	200007f4 	.word	0x200007f4
 8002d5c:	20000664 	.word	0x20000664
 8002d60:	200006d8 	.word	0x200006d8
 8002d64:	08005fe2 	.word	0x08005fe2

08002d68 <_write>:

int _write(int fd, char *str, int len) {
 8002d68:	b510      	push	{r4, lr}
 8002d6a:	4614      	mov	r4, r2
	HAL_UART_Transmit(&DEBUG_UART, (uint8_t *) str, len, 10);  // usart2 - debug
 8002d6c:	230a      	movs	r3, #10
 8002d6e:	b292      	uxth	r2, r2
 8002d70:	4802      	ldr	r0, [pc, #8]	; (8002d7c <_write+0x14>)
 8002d72:	f7ff fc49 	bl	8002608 <HAL_UART_Transmit>
	return len;
}
 8002d76:	4620      	mov	r0, r4
 8002d78:	bd10      	pop	{r4, pc}
 8002d7a:	bf00      	nop
 8002d7c:	2000057c 	.word	0x2000057c

08002d80 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002d80:	b510      	push	{r4, lr}

	//HAL_GPIO_TogglePin(LED_EXT_GPIO_Port,LED_EXT_Pin);

	printf("%4d\t%4d\t%4d\t%4d\t%4d\t%4d\t%4d\t%4d\t%4d\t%4d\n", adc_values[0],adc_values[1],adc_values[2],adc_values[3],adc_values[4],adc_values[5],adc_values[6],adc_values[7],adc_values[8],adc_values[9]);
 8002d82:	4c0f      	ldr	r4, [pc, #60]	; (8002dc0 <HAL_TIM_PeriodElapsedCallback+0x40>)
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002d84:	b088      	sub	sp, #32
	printf("%4d\t%4d\t%4d\t%4d\t%4d\t%4d\t%4d\t%4d\t%4d\t%4d\n", adc_values[0],adc_values[1],adc_values[2],adc_values[3],adc_values[4],adc_values[5],adc_values[6],adc_values[7],adc_values[8],adc_values[9]);
 8002d86:	8a60      	ldrh	r0, [r4, #18]
 8002d88:	88a3      	ldrh	r3, [r4, #4]
 8002d8a:	9006      	str	r0, [sp, #24]
 8002d8c:	8a20      	ldrh	r0, [r4, #16]
 8002d8e:	8862      	ldrh	r2, [r4, #2]
 8002d90:	9005      	str	r0, [sp, #20]
 8002d92:	89e0      	ldrh	r0, [r4, #14]
 8002d94:	8821      	ldrh	r1, [r4, #0]
 8002d96:	9004      	str	r0, [sp, #16]
 8002d98:	89a0      	ldrh	r0, [r4, #12]
 8002d9a:	9003      	str	r0, [sp, #12]
 8002d9c:	8960      	ldrh	r0, [r4, #10]
 8002d9e:	9002      	str	r0, [sp, #8]
 8002da0:	8920      	ldrh	r0, [r4, #8]
 8002da2:	9001      	str	r0, [sp, #4]
 8002da4:	88e0      	ldrh	r0, [r4, #6]
 8002da6:	9000      	str	r0, [sp, #0]
 8002da8:	4806      	ldr	r0, [pc, #24]	; (8002dc4 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8002daa:	f001 fbfd 	bl	80045a8 <iprintf>
    oledDrawValueBar(adc_values[5],adc_values[6],adc_values[7],adc_values[8]); // Wartosci z Joysitckow
 8002dae:	8a23      	ldrh	r3, [r4, #16]
 8002db0:	89e2      	ldrh	r2, [r4, #14]
 8002db2:	89a1      	ldrh	r1, [r4, #12]
 8002db4:	8960      	ldrh	r0, [r4, #10]
	//printf("\n");

}
 8002db6:	b008      	add	sp, #32
 8002db8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    oledDrawValueBar(adc_values[5],adc_values[6],adc_values[7],adc_values[8]); // Wartosci z Joysitckow
 8002dbc:	f000 bdc4 	b.w	8003948 <oledDrawValueBar>
 8002dc0:	200007f4 	.word	0x200007f4
 8002dc4:	08005f98 	.word	0x08005f98

08002dc8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002dc8:	4770      	bx	lr
	...

08002dcc <NRF24_csn.part.0>:


//1. Chip Select function
void NRF24_csn(int state) {
	if (state)
		HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 8002dcc:	4b03      	ldr	r3, [pc, #12]	; (8002ddc <NRF24_csn.part.0+0x10>)
 8002dce:	2201      	movs	r2, #1
 8002dd0:	8819      	ldrh	r1, [r3, #0]
 8002dd2:	4b03      	ldr	r3, [pc, #12]	; (8002de0 <NRF24_csn.part.0+0x14>)
 8002dd4:	6818      	ldr	r0, [r3, #0]
 8002dd6:	f7fd bf69 	b.w	8000cac <HAL_GPIO_WritePin>
 8002dda:	bf00      	nop
 8002ddc:	2000009e 	.word	0x2000009e
 8002de0:	200000a0 	.word	0x200000a0

08002de4 <NRF24_ce.part.1>:
		HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
}
//2. Chip Enable
void NRF24_ce(int state) {
	if (state)
		HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 8002de4:	4b03      	ldr	r3, [pc, #12]	; (8002df4 <NRF24_ce.part.1+0x10>)
 8002de6:	2201      	movs	r2, #1
 8002de8:	8819      	ldrh	r1, [r3, #0]
 8002dea:	4b03      	ldr	r3, [pc, #12]	; (8002df8 <NRF24_ce.part.1+0x14>)
 8002dec:	6818      	ldr	r0, [r3, #0]
 8002dee:	f7fd bf5d 	b.w	8000cac <HAL_GPIO_WritePin>
 8002df2:	bf00      	nop
 8002df4:	2000009c 	.word	0x2000009c
 8002df8:	200000a0 	.word	0x200000a0

08002dfc <NRF24_csn>:
	if (state)
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	b108      	cbz	r0, 8002e04 <NRF24_csn+0x8>
 8002e00:	f7ff bfe4 	b.w	8002dcc <NRF24_csn.part.0>
		HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 8002e04:	4b02      	ldr	r3, [pc, #8]	; (8002e10 <NRF24_csn+0x14>)
 8002e06:	8819      	ldrh	r1, [r3, #0]
 8002e08:	4b02      	ldr	r3, [pc, #8]	; (8002e14 <NRF24_csn+0x18>)
 8002e0a:	6818      	ldr	r0, [r3, #0]
 8002e0c:	f7fd bf4e 	b.w	8000cac <HAL_GPIO_WritePin>
 8002e10:	2000009e 	.word	0x2000009e
 8002e14:	200000a0 	.word	0x200000a0

08002e18 <NRF24_ce>:
	if (state)
 8002e18:	4602      	mov	r2, r0
 8002e1a:	b108      	cbz	r0, 8002e20 <NRF24_ce+0x8>
 8002e1c:	f7ff bfe2 	b.w	8002de4 <NRF24_ce.part.1>
	else
		HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
 8002e20:	4b02      	ldr	r3, [pc, #8]	; (8002e2c <NRF24_ce+0x14>)
 8002e22:	8819      	ldrh	r1, [r3, #0]
 8002e24:	4b02      	ldr	r3, [pc, #8]	; (8002e30 <NRF24_ce+0x18>)
 8002e26:	6818      	ldr	r0, [r3, #0]
 8002e28:	f7fd bf40 	b.w	8000cac <HAL_GPIO_WritePin>
 8002e2c:	2000009c 	.word	0x2000009c
 8002e30:	200000a0 	.word	0x200000a0

08002e34 <NRF24_read_register>:
}
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg) {
 8002e34:	b513      	push	{r0, r1, r4, lr}
 8002e36:	4604      	mov	r4, r0
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(0);
 8002e38:	2000      	movs	r0, #0
 8002e3a:	f7ff ffdf 	bl	8002dfc <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg & 0x1F;
 8002e3e:	f004 041f 	and.w	r4, r4, #31
 8002e42:	a902      	add	r1, sp, #8
 8002e44:	f801 4d04 	strb.w	r4, [r1, #-4]!
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8002e48:	4c09      	ldr	r4, [pc, #36]	; (8002e70 <NRF24_read_register+0x3c>)
 8002e4a:	2364      	movs	r3, #100	; 0x64
 8002e4c:	2201      	movs	r2, #1
 8002e4e:	4620      	mov	r0, r4
 8002e50:	f7fe ff91 	bl	8001d76 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, &spiBuf[1], 1, 100);
 8002e54:	2364      	movs	r3, #100	; 0x64
 8002e56:	2201      	movs	r2, #1
 8002e58:	f10d 0105 	add.w	r1, sp, #5
 8002e5c:	4620      	mov	r0, r4
 8002e5e:	f7ff f923 	bl	80020a8 <HAL_SPI_Receive>
	retData = spiBuf[1];
 8002e62:	f89d 4005 	ldrb.w	r4, [sp, #5]
 8002e66:	f7ff ffb1 	bl	8002dcc <NRF24_csn.part.0>
	//Bring CSN high
	NRF24_csn(1);
	return retData;
}
 8002e6a:	4620      	mov	r0, r4
 8002e6c:	b002      	add	sp, #8
 8002e6e:	bd10      	pop	{r4, pc}
 8002e70:	200000a4 	.word	0x200000a4

08002e74 <NRF24_read_registerN>:
//4. Read multiple bytes register
void NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len) {
 8002e74:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002e76:	4604      	mov	r4, r0
 8002e78:	460d      	mov	r5, r1
 8002e7a:	4616      	mov	r6, r2
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8002e7c:	2000      	movs	r0, #0
 8002e7e:	f7ff ffbd 	bl	8002dfc <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg & 0x1F;
 8002e82:	f004 041f 	and.w	r4, r4, #31
 8002e86:	a902      	add	r1, sp, #8
 8002e88:	f801 4d04 	strb.w	r4, [r1, #-4]!
	//spiStatus = NRF24_SPI_Write(spiBuf, 1);
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8002e8c:	4c07      	ldr	r4, [pc, #28]	; (8002eac <NRF24_read_registerN+0x38>)
 8002e8e:	2364      	movs	r3, #100	; 0x64
 8002e90:	2201      	movs	r2, #1
 8002e92:	4620      	mov	r0, r4
 8002e94:	f7fe ff6f 	bl	8001d76 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, buf, len, 100);
 8002e98:	2364      	movs	r3, #100	; 0x64
 8002e9a:	4632      	mov	r2, r6
 8002e9c:	4629      	mov	r1, r5
 8002e9e:	4620      	mov	r0, r4
 8002ea0:	f7ff f902 	bl	80020a8 <HAL_SPI_Receive>
 8002ea4:	f7ff ff92 	bl	8002dcc <NRF24_csn.part.0>
	//Bring CSN high
	NRF24_csn(1);
}
 8002ea8:	b002      	add	sp, #8
 8002eaa:	bd70      	pop	{r4, r5, r6, pc}
 8002eac:	200000a4 	.word	0x200000a4

08002eb0 <NRF24_write_register>:
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value) {
 8002eb0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002eb2:	4604      	mov	r4, r0
 8002eb4:	460d      	mov	r5, r1
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8002eb6:	2000      	movs	r0, #0
 8002eb8:	f7ff ffa0 	bl	8002dfc <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg | 0x20;
 8002ebc:	f044 0420 	orr.w	r4, r4, #32
	spiBuf[1] = value;
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2, 100);
 8002ec0:	2364      	movs	r3, #100	; 0x64
 8002ec2:	2202      	movs	r2, #2
 8002ec4:	a901      	add	r1, sp, #4
 8002ec6:	4805      	ldr	r0, [pc, #20]	; (8002edc <NRF24_write_register+0x2c>)
	spiBuf[0] = reg | 0x20;
 8002ec8:	f88d 4004 	strb.w	r4, [sp, #4]
	spiBuf[1] = value;
 8002ecc:	f88d 5005 	strb.w	r5, [sp, #5]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2, 100);
 8002ed0:	f7fe ff51 	bl	8001d76 <HAL_SPI_Transmit>
 8002ed4:	f7ff ff7a 	bl	8002dcc <NRF24_csn.part.0>
	//Bring CSN high
	NRF24_csn(1);
}
 8002ed8:	b003      	add	sp, #12
 8002eda:	bd30      	pop	{r4, r5, pc}
 8002edc:	200000a4 	.word	0x200000a4

08002ee0 <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len) {
 8002ee0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002ee2:	4604      	mov	r4, r0
 8002ee4:	460d      	mov	r5, r1
 8002ee6:	4616      	mov	r6, r2
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8002ee8:	2000      	movs	r0, #0
 8002eea:	f7ff ff87 	bl	8002dfc <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg | 0x20;
 8002eee:	f044 0420 	orr.w	r4, r4, #32
 8002ef2:	a902      	add	r1, sp, #8
 8002ef4:	f801 4d04 	strb.w	r4, [r1, #-4]!
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8002ef8:	4c07      	ldr	r4, [pc, #28]	; (8002f18 <NRF24_write_registerN+0x38>)
 8002efa:	2364      	movs	r3, #100	; 0x64
 8002efc:	2201      	movs	r2, #1
 8002efe:	4620      	mov	r0, r4
 8002f00:	f7fe ff39 	bl	8001d76 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*) buf, len, 100);
 8002f04:	2364      	movs	r3, #100	; 0x64
 8002f06:	4632      	mov	r2, r6
 8002f08:	4629      	mov	r1, r5
 8002f0a:	4620      	mov	r0, r4
 8002f0c:	f7fe ff33 	bl	8001d76 <HAL_SPI_Transmit>
 8002f10:	f7ff ff5c 	bl	8002dcc <NRF24_csn.part.0>
	//Bring CSN high
	NRF24_csn(1);
}
 8002f14:	b002      	add	sp, #8
 8002f16:	bd70      	pop	{r4, r5, r6, pc}
 8002f18:	200000a4 	.word	0x200000a4

08002f1c <NRF24_flush_tx>:
	NRF24_csn(1);
}

//9. Flush Tx buffer
void NRF24_flush_tx(void) {
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 8002f1c:	21ff      	movs	r1, #255	; 0xff
 8002f1e:	20e1      	movs	r0, #225	; 0xe1
 8002f20:	f7ff bfc6 	b.w	8002eb0 <NRF24_write_register>

08002f24 <NRF24_flush_rx>:
}
//10. Flush Rx buffer
void NRF24_flush_rx(void) {
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 8002f24:	21ff      	movs	r1, #255	; 0xff
 8002f26:	20e2      	movs	r0, #226	; 0xe2
 8002f28:	f7ff bfc2 	b.w	8002eb0 <NRF24_write_register>

08002f2c <NRF24_startListening>:

	NRF24_powerDown();

}
//13. Listen on open pipes for reading (Must call NRF24_openReadingPipe() first)
void NRF24_startListening(void) {
 8002f2c:	b508      	push	{r3, lr}
	//Power up and set to RX mode
	NRF24_write_register(REG_CONFIG,
			NRF24_read_register(REG_CONFIG) | (1UL << 1) | (1UL << 0));
 8002f2e:	2000      	movs	r0, #0
 8002f30:	f7ff ff80 	bl	8002e34 <NRF24_read_register>
	NRF24_write_register(REG_CONFIG,
 8002f34:	f040 0103 	orr.w	r1, r0, #3
 8002f38:	b2c9      	uxtb	r1, r1
 8002f3a:	2000      	movs	r0, #0
 8002f3c:	f7ff ffb8 	bl	8002eb0 <NRF24_write_register>
	//Restore pipe 0 address if exists
	if (pipe0_reading_address)
 8002f40:	4908      	ldr	r1, [pc, #32]	; (8002f64 <NRF24_startListening+0x38>)
 8002f42:	e9d1 2300 	ldrd	r2, r3, [r1]
 8002f46:	4313      	orrs	r3, r2
 8002f48:	d003      	beq.n	8002f52 <NRF24_startListening+0x26>
		NRF24_write_registerN(REG_RX_ADDR_P0,
 8002f4a:	2205      	movs	r2, #5
 8002f4c:	200a      	movs	r0, #10
 8002f4e:	f7ff ffc7 	bl	8002ee0 <NRF24_write_registerN>
				(uint8_t *) (&pipe0_reading_address), 5);

	//Flush buffers
	NRF24_flush_tx();
 8002f52:	f7ff ffe3 	bl	8002f1c <NRF24_flush_tx>
	NRF24_flush_rx();
 8002f56:	f7ff ffe5 	bl	8002f24 <NRF24_flush_rx>
	//Set CE HIGH to start listenning
	NRF24_ce(1);
	//Wait for 130 uSec for the radio to come on
	NRF24_DelayMicroSeconds(150);
}
 8002f5a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8002f5e:	f7ff bf41 	b.w	8002de4 <NRF24_ce.part.1>
 8002f62:	bf00      	nop
 8002f64:	20000140 	.word	0x20000140

08002f68 <NRF24_openWritingPipe>:
	NRF24_flush_rx();
	NRF24_getDynamicPayloadSize();
	return rxStatus;
}
//18. Open Tx pipe for writing (Cannot perform this while Listenning, has to call NRF24_stopListening)
void NRF24_openWritingPipe(uint64_t address) {
 8002f68:	b513      	push	{r0, r1, r4, lr}
 8002f6a:	ac02      	add	r4, sp, #8
 8002f6c:	e964 0102 	strd	r0, r1, [r4, #-8]!
	NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *) (&address), 5);
 8002f70:	2205      	movs	r2, #5
 8002f72:	4621      	mov	r1, r4
 8002f74:	200a      	movs	r0, #10
 8002f76:	f7ff ffb3 	bl	8002ee0 <NRF24_write_registerN>
	NRF24_write_registerN(REG_TX_ADDR, (uint8_t *) (&address), 5);
 8002f7a:	2205      	movs	r2, #5
 8002f7c:	4621      	mov	r1, r4
 8002f7e:	2010      	movs	r0, #16
 8002f80:	f7ff ffae 	bl	8002ee0 <NRF24_write_registerN>

	const uint8_t max_payload_size = 32;
	NRF24_write_register(REG_RX_PW_P0, MIN(payload_size, max_payload_size));
 8002f84:	4b04      	ldr	r3, [pc, #16]	; (8002f98 <NRF24_openWritingPipe+0x30>)
 8002f86:	2011      	movs	r0, #17
 8002f88:	7819      	ldrb	r1, [r3, #0]
 8002f8a:	2920      	cmp	r1, #32
 8002f8c:	bf28      	it	cs
 8002f8e:	2120      	movcs	r1, #32
 8002f90:	f7ff ff8e 	bl	8002eb0 <NRF24_write_register>
}
 8002f94:	b002      	add	sp, #8
 8002f96:	bd10      	pop	{r4, pc}
 8002f98:	2000013c 	.word	0x2000013c

08002f9c <NRF24_setChannel>:
}

//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel) {
	const uint8_t max_channel = 127;
	NRF24_write_register(REG_RF_CH, MIN(channel, max_channel));
 8002f9c:	287f      	cmp	r0, #127	; 0x7f
 8002f9e:	4601      	mov	r1, r0
 8002fa0:	bf28      	it	cs
 8002fa2:	217f      	movcs	r1, #127	; 0x7f
 8002fa4:	2005      	movs	r0, #5
 8002fa6:	f7ff bf83 	b.w	8002eb0 <NRF24_write_register>

08002faa <NRF24_disableDynamicPayloads>:
			NRF24_read_register(
					REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
	dynamic_payloads_enabled = true;

}
void NRF24_disableDynamicPayloads(void) {
 8002faa:	b508      	push	{r3, lr}
	NRF24_write_register(REG_FEATURE,
			NRF24_read_register(REG_FEATURE) & ~(_BV(BIT_EN_DPL)));
 8002fac:	201d      	movs	r0, #29
 8002fae:	f7ff ff41 	bl	8002e34 <NRF24_read_register>
	NRF24_write_register(REG_FEATURE,
 8002fb2:	f000 01fb 	and.w	r1, r0, #251	; 0xfb
 8002fb6:	201d      	movs	r0, #29
 8002fb8:	f7ff ff7a 	bl	8002eb0 <NRF24_write_register>
	//Disable for all pipes
	NRF24_write_register(REG_DYNPD, 0);
	dynamic_payloads_enabled = false;
}
 8002fbc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	NRF24_write_register(REG_DYNPD, 0);
 8002fc0:	2100      	movs	r1, #0
 8002fc2:	201c      	movs	r0, #28
 8002fc4:	f7ff bf74 	b.w	8002eb0 <NRF24_write_register>

08002fc8 <NRF24_setPALevel>:
		}
		NRF24_write_register( REG_EN_AA, en_aa);
	}
}
//30. Set transmit power level
void NRF24_setPALevel(rf24_pa_dbm_e level) {
 8002fc8:	b510      	push	{r4, lr}
 8002fca:	4604      	mov	r4, r0
	uint8_t setup = NRF24_read_register(REG_RF_SETUP);
 8002fcc:	2006      	movs	r0, #6
 8002fce:	f7ff ff31 	bl	8002e34 <NRF24_read_register>
	setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH));

	// switch uses RAM (evil!)
	if (level == RF24_PA_0dB) {
 8002fd2:	2c03      	cmp	r4, #3
	setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH));
 8002fd4:	f000 01f9 	and.w	r1, r0, #249	; 0xf9
	if (level == RF24_PA_0dB) {
 8002fd8:	d102      	bne.n	8002fe0 <NRF24_setPALevel+0x18>
		setup |= _BV(RF_PWR_LOW);
	} else if (level == RF24_PA_m18dB) {
		// nothing
	} else if (level == RF24_PA_ERROR) {
		// On error, go to maximum PA
		setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH));
 8002fda:	f041 0106 	orr.w	r1, r1, #6
 8002fde:	e003      	b.n	8002fe8 <NRF24_setPALevel+0x20>
	} else if (level == RF24_PA_m6dB) {
 8002fe0:	2c02      	cmp	r4, #2
 8002fe2:	d106      	bne.n	8002ff2 <NRF24_setPALevel+0x2a>
		setup |= _BV(RF_PWR_HIGH);
 8002fe4:	f041 0104 	orr.w	r1, r1, #4
	}

	NRF24_write_register( REG_RF_SETUP, setup);
 8002fe8:	2006      	movs	r0, #6
}
 8002fea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	NRF24_write_register( REG_RF_SETUP, setup);
 8002fee:	f7ff bf5f 	b.w	8002eb0 <NRF24_write_register>
	} else if (level == RF24_PA_m12dB) {
 8002ff2:	2c01      	cmp	r4, #1
 8002ff4:	d102      	bne.n	8002ffc <NRF24_setPALevel+0x34>
		setup |= _BV(RF_PWR_LOW);
 8002ff6:	f041 0102 	orr.w	r1, r1, #2
 8002ffa:	e7f5      	b.n	8002fe8 <NRF24_setPALevel+0x20>
	} else if (level == RF24_PA_ERROR) {
 8002ffc:	2c04      	cmp	r4, #4
 8002ffe:	d1f3      	bne.n	8002fe8 <NRF24_setPALevel+0x20>
 8003000:	e7eb      	b.n	8002fda <NRF24_setPALevel+0x12>

08003002 <NRF24_setDataRate>:
	}

	return result;
}
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed) {
 8003002:	b538      	push	{r3, r4, r5, lr}
 8003004:	4605      	mov	r5, r0
	bool result = false;
	uint8_t setup = NRF24_read_register(REG_RF_SETUP);
 8003006:	2006      	movs	r0, #6
 8003008:	f7ff ff14 	bl	8002e34 <NRF24_read_register>

	// HIGH and LOW '00' is 1Mbs - our default
	wide_band = false;
	setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH));
	if (speed == RF24_250KBPS) {
 800300c:	2d02      	cmp	r5, #2
	setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH));
 800300e:	f000 04d7 	and.w	r4, r0, #215	; 0xd7
	if (speed == RF24_250KBPS) {
 8003012:	d10c      	bne.n	800302e <NRF24_setDataRate+0x2c>
		// Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
		// Making it '10'.
		wide_band = false;
		setup |= _BV(RF_DR_LOW);
 8003014:	f044 0420 	orr.w	r4, r4, #32
		} else {
			// 1Mbs
			wide_band = false;
		}
	}
	NRF24_write_register(REG_RF_SETUP, setup);
 8003018:	4621      	mov	r1, r4
 800301a:	2006      	movs	r0, #6
 800301c:	f7ff ff48 	bl	8002eb0 <NRF24_write_register>

	// Verify our result
	if (NRF24_read_register(REG_RF_SETUP) == setup) {
 8003020:	2006      	movs	r0, #6
 8003022:	f7ff ff07 	bl	8002e34 <NRF24_read_register>
	} else {
		wide_band = false;
	}

	return result;
}
 8003026:	1a23      	subs	r3, r4, r0
 8003028:	4258      	negs	r0, r3
 800302a:	4158      	adcs	r0, r3
 800302c:	bd38      	pop	{r3, r4, r5, pc}
		if (speed == RF24_2MBPS) {
 800302e:	2d01      	cmp	r5, #1
			setup |= _BV(RF_DR_HIGH);
 8003030:	bf08      	it	eq
 8003032:	f044 0408 	orreq.w	r4, r4, #8
 8003036:	e7ef      	b.n	8003018 <NRF24_setDataRate+0x16>

08003038 <NRF24_setCRCLength>:
		result = RF24_1MBPS;
	}
	return result;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length) {
 8003038:	b510      	push	{r4, lr}
 800303a:	4604      	mov	r4, r0
	uint8_t config = NRF24_read_register(REG_CONFIG)
 800303c:	2000      	movs	r0, #0
 800303e:	f7ff fef9 	bl	8002e34 <NRF24_read_register>
 8003042:	f000 01f3 	and.w	r1, r0, #243	; 0xf3
			& ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC));

	// switch uses RAM
	if (length == RF24_CRC_DISABLED) {
 8003046:	b12c      	cbz	r4, 8003054 <NRF24_setCRCLength+0x1c>
		// Do nothing, we turned it off above.
	} else if (length == RF24_CRC_8) {
 8003048:	2c01      	cmp	r4, #1
		config |= _BV(BIT_EN_CRC);
 800304a:	bf0c      	ite	eq
 800304c:	f041 0108 	orreq.w	r1, r1, #8
	} else {
		config |= _BV(BIT_EN_CRC);
		config |= _BV(BIT_CRCO);
 8003050:	f041 010c 	orrne.w	r1, r1, #12
	}
	NRF24_write_register( REG_CONFIG, config);
 8003054:	2000      	movs	r0, #0
}
 8003056:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	NRF24_write_register( REG_CONFIG, config);
 800305a:	f7ff bf29 	b.w	8002eb0 <NRF24_write_register>

0800305e <NRF24_powerDown>:
void NRF24_powerUp(void) {
	NRF24_write_register(REG_CONFIG,
			NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void) {
 800305e:	b508      	push	{r3, lr}
	NRF24_write_register(REG_CONFIG,
			NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 8003060:	2000      	movs	r0, #0
 8003062:	f7ff fee7 	bl	8002e34 <NRF24_read_register>
}
 8003066:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	NRF24_write_register(REG_CONFIG,
 800306a:	f000 01fd 	and.w	r1, r0, #253	; 0xfd
 800306e:	2000      	movs	r0, #0
 8003070:	f7ff bf1e 	b.w	8002eb0 <NRF24_write_register>

08003074 <NRF24_resetStatus>:
	return NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void NRF24_resetStatus(void) {
	NRF24_write_register(REG_STATUS,
 8003074:	2170      	movs	r1, #112	; 0x70
 8003076:	2007      	movs	r0, #7
 8003078:	f7ff bf1a 	b.w	8002eb0 <NRF24_write_register>

0800307c <NRF24_ACTIVATE_cmd>:
			_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT));
}

//47. ACTIVATE cmd
void NRF24_ACTIVATE_cmd(void) {
 800307c:	b507      	push	{r0, r1, r2, lr}
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(0);
 800307e:	2000      	movs	r0, #0
 8003080:	f7ff febc 	bl	8002dfc <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 8003084:	2350      	movs	r3, #80	; 0x50
 8003086:	f88d 3004 	strb.w	r3, [sp, #4]
	cmdRxBuf[1] = 0x73;
 800308a:	2373      	movs	r3, #115	; 0x73
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2, 100);
 800308c:	2202      	movs	r2, #2
	cmdRxBuf[1] = 0x73;
 800308e:	f88d 3005 	strb.w	r3, [sp, #5]
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2, 100);
 8003092:	a901      	add	r1, sp, #4
 8003094:	2364      	movs	r3, #100	; 0x64
 8003096:	4804      	ldr	r0, [pc, #16]	; (80030a8 <NRF24_ACTIVATE_cmd+0x2c>)
 8003098:	f7fe fe6d 	bl	8001d76 <HAL_SPI_Transmit>
 800309c:	f7ff fe96 	bl	8002dcc <NRF24_csn.part.0>
	NRF24_csn(1);
}
 80030a0:	b003      	add	sp, #12
 80030a2:	f85d fb04 	ldr.w	pc, [sp], #4
 80030a6:	bf00      	nop
 80030a8:	200000a4 	.word	0x200000a4

080030ac <NRF24_enableAckPayload>:
void NRF24_enableAckPayload(void) {
 80030ac:	b508      	push	{r3, lr}
			NRF24_read_register(
 80030ae:	201d      	movs	r0, #29
 80030b0:	f7ff fec0 	bl	8002e34 <NRF24_read_register>
	NRF24_write_register(REG_FEATURE,
 80030b4:	f040 0106 	orr.w	r1, r0, #6
 80030b8:	b2c9      	uxtb	r1, r1
 80030ba:	201d      	movs	r0, #29
 80030bc:	f7ff fef8 	bl	8002eb0 <NRF24_write_register>
	if (!NRF24_read_register(REG_FEATURE)) {
 80030c0:	201d      	movs	r0, #29
 80030c2:	f7ff feb7 	bl	8002e34 <NRF24_read_register>
 80030c6:	b950      	cbnz	r0, 80030de <NRF24_enableAckPayload+0x32>
		NRF24_ACTIVATE_cmd();
 80030c8:	f7ff ffd8 	bl	800307c <NRF24_ACTIVATE_cmd>
				NRF24_read_register(
 80030cc:	201d      	movs	r0, #29
 80030ce:	f7ff feb1 	bl	8002e34 <NRF24_read_register>
		NRF24_write_register(REG_FEATURE,
 80030d2:	f040 0106 	orr.w	r1, r0, #6
 80030d6:	b2c9      	uxtb	r1, r1
 80030d8:	201d      	movs	r0, #29
 80030da:	f7ff fee9 	bl	8002eb0 <NRF24_write_register>
			NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
 80030de:	201c      	movs	r0, #28
 80030e0:	f7ff fea8 	bl	8002e34 <NRF24_read_register>
}
 80030e4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	NRF24_write_register(REG_DYNPD,
 80030e8:	f040 0103 	orr.w	r1, r0, #3
 80030ec:	b2c9      	uxtb	r1, r1
 80030ee:	201c      	movs	r0, #28
 80030f0:	f7ff bede 	b.w	8002eb0 <NRF24_write_register>

080030f4 <NRF24_enableDynamicPayloads>:
void NRF24_enableDynamicPayloads(void) {
 80030f4:	b508      	push	{r3, lr}
			NRF24_read_register(REG_FEATURE) | _BV(BIT_EN_DPL));
 80030f6:	201d      	movs	r0, #29
 80030f8:	f7ff fe9c 	bl	8002e34 <NRF24_read_register>
	NRF24_write_register(REG_FEATURE,
 80030fc:	f040 0104 	orr.w	r1, r0, #4
 8003100:	b2c9      	uxtb	r1, r1
 8003102:	201d      	movs	r0, #29
 8003104:	f7ff fed4 	bl	8002eb0 <NRF24_write_register>
	if (!NRF24_read_register(REG_FEATURE)) {
 8003108:	201d      	movs	r0, #29
 800310a:	f7ff fe93 	bl	8002e34 <NRF24_read_register>
 800310e:	b950      	cbnz	r0, 8003126 <NRF24_enableDynamicPayloads+0x32>
		NRF24_ACTIVATE_cmd();
 8003110:	f7ff ffb4 	bl	800307c <NRF24_ACTIVATE_cmd>
				NRF24_read_register(REG_FEATURE) | _BV(BIT_EN_DPL));
 8003114:	201d      	movs	r0, #29
 8003116:	f7ff fe8d 	bl	8002e34 <NRF24_read_register>
		NRF24_write_register(REG_FEATURE,
 800311a:	f040 0104 	orr.w	r1, r0, #4
 800311e:	b2c9      	uxtb	r1, r1
 8003120:	201d      	movs	r0, #29
 8003122:	f7ff fec5 	bl	8002eb0 <NRF24_write_register>
			NRF24_read_register(
 8003126:	201c      	movs	r0, #28
 8003128:	f7ff fe84 	bl	8002e34 <NRF24_read_register>
}
 800312c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	NRF24_write_register(REG_DYNPD,
 8003130:	f040 013f 	orr.w	r1, r0, #63	; 0x3f
 8003134:	b2c9      	uxtb	r1, r1
 8003136:	201c      	movs	r0, #28
 8003138:	f7ff beba 	b.w	8002eb0 <NRF24_write_register>

0800313c <printRadioSettings>:
//48. Get AckPayload Size
uint8_t NRF24_GetAckPayloadSize(void) {
	return ack_payload_length;
}

void printRadioSettings(void) {
 800313c:	b510      	push	{r4, lr}
 800313e:	b0a0      	sub	sp, #128	; 0x80
	uint8_t reg8Val;
	char uartTxBuf[100];

	HAL_UART_Transmit(&nrf24_huart, (uint8_t *) uartTxBuf, strlen(uartTxBuf),
 8003140:	a807      	add	r0, sp, #28
 8003142:	f7fd f86f 	bl	8000224 <strlen>
 8003146:	230a      	movs	r3, #10
 8003148:	b282      	uxth	r2, r0
 800314a:	a907      	add	r1, sp, #28
 800314c:	48bc      	ldr	r0, [pc, #752]	; (8003440 <printRadioSettings+0x304>)
 800314e:	f7ff fa5b 	bl	8002608 <HAL_UART_Transmit>
			10);
	//a) Get CRC settings - Config Register
	reg8Val = NRF24_read_register(0x00);
 8003152:	2000      	movs	r0, #0
 8003154:	f7ff fe6e 	bl	8002e34 <NRF24_read_register>
	if (reg8Val & (1 << 3)) {
 8003158:	0704      	lsls	r4, r0, #28
 800315a:	f140 822f 	bpl.w	80035bc <printRadioSettings+0x480>
		if (reg8Val & (1 << 2))
 800315e:	0740      	lsls	r0, r0, #29
			sprintf(uartTxBuf, "CRC:\r\n		Enabled, 2 Bytes \r\n");
 8003160:	bf4c      	ite	mi
 8003162:	49b8      	ldrmi	r1, [pc, #736]	; (8003444 <printRadioSettings+0x308>)
		else
			sprintf(uartTxBuf, "CRC:\r\n		Enabled, 1 Byte \r\n");
 8003164:	49b8      	ldrpl	r1, [pc, #736]	; (8003448 <printRadioSettings+0x30c>)
	} else {
		sprintf(uartTxBuf, "CRC:\r\n		Disabled \r\n");
 8003166:	a807      	add	r0, sp, #28
 8003168:	f001 fabe 	bl	80046e8 <strcpy>
	}
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *) uartTxBuf, strlen(uartTxBuf),
 800316c:	a807      	add	r0, sp, #28
 800316e:	f7fd f859 	bl	8000224 <strlen>
 8003172:	230a      	movs	r3, #10
 8003174:	b282      	uxth	r2, r0
 8003176:	a907      	add	r1, sp, #28
 8003178:	48b1      	ldr	r0, [pc, #708]	; (8003440 <printRadioSettings+0x304>)
 800317a:	f7ff fa45 	bl	8002608 <HAL_UART_Transmit>
			10);
	//b) AutoAck on pipes
	reg8Val = NRF24_read_register(0x01);
 800317e:	2001      	movs	r0, #1
 8003180:	f7ff fe58 	bl	8002e34 <NRF24_read_register>
	sprintf(uartTxBuf,
 8003184:	f3c0 1340 	ubfx	r3, r0, #5, #1
 8003188:	9303      	str	r3, [sp, #12]
 800318a:	f3c0 1300 	ubfx	r3, r0, #4, #1
 800318e:	9302      	str	r3, [sp, #8]
 8003190:	f3c0 03c0 	ubfx	r3, r0, #3, #1
 8003194:	9301      	str	r3, [sp, #4]
 8003196:	f3c0 0380 	ubfx	r3, r0, #2, #1
 800319a:	f000 0201 	and.w	r2, r0, #1
 800319e:	49ab      	ldr	r1, [pc, #684]	; (800344c <printRadioSettings+0x310>)
 80031a0:	9300      	str	r3, [sp, #0]
 80031a2:	f3c0 0340 	ubfx	r3, r0, #1, #1
 80031a6:	a807      	add	r0, sp, #28
 80031a8:	f001 fa7a 	bl	80046a0 <siprintf>
			"ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
			_BOOL(reg8Val & (1 << 0)), _BOOL(reg8Val & (1 << 1)),
			_BOOL(reg8Val & (1 << 2)), _BOOL(reg8Val & (1 << 3)),
			_BOOL(reg8Val & (1 << 4)), _BOOL(reg8Val & (1 << 5)));
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *) uartTxBuf, strlen(uartTxBuf),
 80031ac:	a807      	add	r0, sp, #28
 80031ae:	f7fd f839 	bl	8000224 <strlen>
 80031b2:	230a      	movs	r3, #10
 80031b4:	b282      	uxth	r2, r0
 80031b6:	a907      	add	r1, sp, #28
 80031b8:	48a1      	ldr	r0, [pc, #644]	; (8003440 <printRadioSettings+0x304>)
 80031ba:	f7ff fa25 	bl	8002608 <HAL_UART_Transmit>
			10);
	//c) Enabled Rx addresses
	reg8Val = NRF24_read_register(0x02);
 80031be:	2002      	movs	r0, #2
 80031c0:	f7ff fe38 	bl	8002e34 <NRF24_read_register>
	sprintf(uartTxBuf,
 80031c4:	f3c0 1340 	ubfx	r3, r0, #5, #1
 80031c8:	9303      	str	r3, [sp, #12]
 80031ca:	f3c0 1300 	ubfx	r3, r0, #4, #1
 80031ce:	9302      	str	r3, [sp, #8]
 80031d0:	f3c0 03c0 	ubfx	r3, r0, #3, #1
 80031d4:	9301      	str	r3, [sp, #4]
 80031d6:	f3c0 0380 	ubfx	r3, r0, #2, #1
 80031da:	f000 0201 	and.w	r2, r0, #1
 80031de:	499c      	ldr	r1, [pc, #624]	; (8003450 <printRadioSettings+0x314>)
 80031e0:	9300      	str	r3, [sp, #0]
 80031e2:	f3c0 0340 	ubfx	r3, r0, #1, #1
 80031e6:	a807      	add	r0, sp, #28
 80031e8:	f001 fa5a 	bl	80046a0 <siprintf>
			"EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
			_BOOL(reg8Val & (1 << 0)), _BOOL(reg8Val & (1 << 1)),
			_BOOL(reg8Val & (1 << 2)), _BOOL(reg8Val & (1 << 3)),
			_BOOL(reg8Val & (1 << 4)), _BOOL(reg8Val & (1 << 5)));
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *) uartTxBuf, strlen(uartTxBuf),
 80031ec:	a807      	add	r0, sp, #28
 80031ee:	f7fd f819 	bl	8000224 <strlen>
 80031f2:	230a      	movs	r3, #10
 80031f4:	b282      	uxth	r2, r0
 80031f6:	a907      	add	r1, sp, #28
 80031f8:	4891      	ldr	r0, [pc, #580]	; (8003440 <printRadioSettings+0x304>)
 80031fa:	f7ff fa05 	bl	8002608 <HAL_UART_Transmit>
			10);
	//d) Address width
	reg8Val = NRF24_read_register(0x03) & 0x03;
 80031fe:	2003      	movs	r0, #3
 8003200:	f7ff fe18 	bl	8002e34 <NRF24_read_register>
 8003204:	f000 0203 	and.w	r2, r0, #3
	reg8Val += 2;
	sprintf(uartTxBuf, "SETUP_AW:\r\n		%d bytes \r\n", reg8Val);
 8003208:	3202      	adds	r2, #2
 800320a:	4992      	ldr	r1, [pc, #584]	; (8003454 <printRadioSettings+0x318>)
 800320c:	a807      	add	r0, sp, #28
 800320e:	f001 fa47 	bl	80046a0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *) uartTxBuf, strlen(uartTxBuf),
 8003212:	a807      	add	r0, sp, #28
 8003214:	f7fd f806 	bl	8000224 <strlen>
 8003218:	230a      	movs	r3, #10
 800321a:	b282      	uxth	r2, r0
 800321c:	a907      	add	r1, sp, #28
 800321e:	4888      	ldr	r0, [pc, #544]	; (8003440 <printRadioSettings+0x304>)
 8003220:	f7ff f9f2 	bl	8002608 <HAL_UART_Transmit>
			10);
	//e) RF channel
	reg8Val = NRF24_read_register(0x05);
 8003224:	2005      	movs	r0, #5
 8003226:	f7ff fe05 	bl	8002e34 <NRF24_read_register>
	sprintf(uartTxBuf, "RF_CH:\r\n		%d CH \r\n", reg8Val & 0x7F);
 800322a:	498b      	ldr	r1, [pc, #556]	; (8003458 <printRadioSettings+0x31c>)
 800322c:	f000 027f 	and.w	r2, r0, #127	; 0x7f
 8003230:	a807      	add	r0, sp, #28
 8003232:	f001 fa35 	bl	80046a0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *) uartTxBuf, strlen(uartTxBuf),
 8003236:	a807      	add	r0, sp, #28
 8003238:	f7fc fff4 	bl	8000224 <strlen>
 800323c:	a907      	add	r1, sp, #28
 800323e:	b282      	uxth	r2, r0
 8003240:	230a      	movs	r3, #10
 8003242:	487f      	ldr	r0, [pc, #508]	; (8003440 <printRadioSettings+0x304>)
 8003244:	f7ff f9e0 	bl	8002608 <HAL_UART_Transmit>
			10);
	//f) Data rate & RF_PWR
	reg8Val = NRF24_read_register(0x06);
 8003248:	2006      	movs	r0, #6
 800324a:	f7ff fdf3 	bl	8002e34 <NRF24_read_register>
	if (reg8Val & (1 << 3))
 800324e:	0701      	lsls	r1, r0, #28
		sprintf(uartTxBuf, "Data Rate:\r\n		2Mbps \r\n");
 8003250:	bf4c      	ite	mi
 8003252:	4982      	ldrmi	r1, [pc, #520]	; (800345c <printRadioSettings+0x320>)
	else
		sprintf(uartTxBuf, "Data Rate:\r\n		1Mbps \r\n");
 8003254:	4982      	ldrpl	r1, [pc, #520]	; (8003460 <printRadioSettings+0x324>)
	reg8Val = NRF24_read_register(0x06);
 8003256:	4604      	mov	r4, r0
		sprintf(uartTxBuf, "Data Rate:\r\n		1Mbps \r\n");
 8003258:	a807      	add	r0, sp, #28
 800325a:	f001 fa45 	bl	80046e8 <strcpy>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *) uartTxBuf, strlen(uartTxBuf),
 800325e:	a807      	add	r0, sp, #28
 8003260:	f7fc ffe0 	bl	8000224 <strlen>
			10);
	reg8Val &= (3 << 1);
	reg8Val = (reg8Val >> 1);
 8003264:	f3c4 0441 	ubfx	r4, r4, #1, #2
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *) uartTxBuf, strlen(uartTxBuf),
 8003268:	b282      	uxth	r2, r0
 800326a:	230a      	movs	r3, #10
 800326c:	a907      	add	r1, sp, #28
 800326e:	4874      	ldr	r0, [pc, #464]	; (8003440 <printRadioSettings+0x304>)
 8003270:	f7ff f9ca 	bl	8002608 <HAL_UART_Transmit>
	if (reg8Val == 0)
 8003274:	2c00      	cmp	r4, #0
 8003276:	f040 81a3 	bne.w	80035c0 <printRadioSettings+0x484>
		sprintf(uartTxBuf, "RF_PWR:\r\n		-18dB \r\n");
 800327a:	497a      	ldr	r1, [pc, #488]	; (8003464 <printRadioSettings+0x328>)
	else if (reg8Val == 1)
		sprintf(uartTxBuf, "RF_PWR:\r\n		-12dB \r\n");
	else if (reg8Val == 2)
		sprintf(uartTxBuf, "RF_PWR:\r\n		-6dB \r\n");
	else if (reg8Val == 3)
		sprintf(uartTxBuf, "RF_PWR:\r\n		0dB \r\n");
 800327c:	a807      	add	r0, sp, #28
 800327e:	f001 fa33 	bl	80046e8 <strcpy>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *) uartTxBuf, strlen(uartTxBuf),
 8003282:	a807      	add	r0, sp, #28
 8003284:	f7fc ffce 	bl	8000224 <strlen>
 8003288:	230a      	movs	r3, #10
 800328a:	b282      	uxth	r2, r0
 800328c:	a907      	add	r1, sp, #28
 800328e:	486c      	ldr	r0, [pc, #432]	; (8003440 <printRadioSettings+0x304>)
 8003290:	f7ff f9ba 	bl	8002608 <HAL_UART_Transmit>
			10);
	//g) RX pipes addresses
	uint8_t pipeAddrs[6];
	NRF24_read_registerN(0x0A, pipeAddrs, 5);
 8003294:	a905      	add	r1, sp, #20
 8003296:	2205      	movs	r2, #5
 8003298:	200a      	movs	r0, #10
 800329a:	f7ff fdeb 	bl	8002e74 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe0 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n",
 800329e:	f89d 1014 	ldrb.w	r1, [sp, #20]
 80032a2:	f89d 3017 	ldrb.w	r3, [sp, #23]
 80032a6:	9102      	str	r1, [sp, #8]
 80032a8:	f89d 1015 	ldrb.w	r1, [sp, #21]
 80032ac:	f89d 2018 	ldrb.w	r2, [sp, #24]
 80032b0:	9101      	str	r1, [sp, #4]
 80032b2:	f89d 1016 	ldrb.w	r1, [sp, #22]
 80032b6:	a807      	add	r0, sp, #28
 80032b8:	9100      	str	r1, [sp, #0]
 80032ba:	496b      	ldr	r1, [pc, #428]	; (8003468 <printRadioSettings+0x32c>)
 80032bc:	f001 f9f0 	bl	80046a0 <siprintf>
			pipeAddrs[4], pipeAddrs[3], pipeAddrs[2], pipeAddrs[1],
			pipeAddrs[0]);
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *) uartTxBuf, strlen(uartTxBuf),
 80032c0:	a807      	add	r0, sp, #28
 80032c2:	f7fc ffaf 	bl	8000224 <strlen>
 80032c6:	230a      	movs	r3, #10
 80032c8:	b282      	uxth	r2, r0
 80032ca:	a907      	add	r1, sp, #28
 80032cc:	485c      	ldr	r0, [pc, #368]	; (8003440 <printRadioSettings+0x304>)
 80032ce:	f7ff f99b 	bl	8002608 <HAL_UART_Transmit>
			10);

	NRF24_read_registerN(0x0A + 1, pipeAddrs, 5);
 80032d2:	a905      	add	r1, sp, #20
 80032d4:	2205      	movs	r2, #5
 80032d6:	200b      	movs	r0, #11
 80032d8:	f7ff fdcc 	bl	8002e74 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe1 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n",
 80032dc:	f89d 1014 	ldrb.w	r1, [sp, #20]
 80032e0:	f89d 3017 	ldrb.w	r3, [sp, #23]
 80032e4:	9102      	str	r1, [sp, #8]
 80032e6:	f89d 1015 	ldrb.w	r1, [sp, #21]
 80032ea:	f89d 2018 	ldrb.w	r2, [sp, #24]
 80032ee:	9101      	str	r1, [sp, #4]
 80032f0:	f89d 1016 	ldrb.w	r1, [sp, #22]
 80032f4:	a807      	add	r0, sp, #28
 80032f6:	9100      	str	r1, [sp, #0]
 80032f8:	495c      	ldr	r1, [pc, #368]	; (800346c <printRadioSettings+0x330>)
 80032fa:	f001 f9d1 	bl	80046a0 <siprintf>
			pipeAddrs[4], pipeAddrs[3], pipeAddrs[2], pipeAddrs[1],
			pipeAddrs[0]);
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *) uartTxBuf, strlen(uartTxBuf),
 80032fe:	a807      	add	r0, sp, #28
 8003300:	f7fc ff90 	bl	8000224 <strlen>
 8003304:	230a      	movs	r3, #10
 8003306:	b282      	uxth	r2, r0
 8003308:	a907      	add	r1, sp, #28
 800330a:	484d      	ldr	r0, [pc, #308]	; (8003440 <printRadioSettings+0x304>)
 800330c:	f7ff f97c 	bl	8002608 <HAL_UART_Transmit>
			10);

	NRF24_read_registerN(0x0A + 2, pipeAddrs, 1);
 8003310:	a905      	add	r1, sp, #20
 8003312:	2201      	movs	r2, #1
 8003314:	200c      	movs	r0, #12
 8003316:	f7ff fdad 	bl	8002e74 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe2 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n",
 800331a:	f89d 2014 	ldrb.w	r2, [sp, #20]
 800331e:	4954      	ldr	r1, [pc, #336]	; (8003470 <printRadioSettings+0x334>)
 8003320:	a807      	add	r0, sp, #28
 8003322:	f001 f9bd 	bl	80046a0 <siprintf>
			pipeAddrs[0]);
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *) uartTxBuf, strlen(uartTxBuf),
 8003326:	a807      	add	r0, sp, #28
 8003328:	f7fc ff7c 	bl	8000224 <strlen>
 800332c:	230a      	movs	r3, #10
 800332e:	b282      	uxth	r2, r0
 8003330:	a907      	add	r1, sp, #28
 8003332:	4843      	ldr	r0, [pc, #268]	; (8003440 <printRadioSettings+0x304>)
 8003334:	f7ff f968 	bl	8002608 <HAL_UART_Transmit>
			10);

	NRF24_read_registerN(0x0A + 3, pipeAddrs, 1);
 8003338:	a905      	add	r1, sp, #20
 800333a:	2201      	movs	r2, #1
 800333c:	200d      	movs	r0, #13
 800333e:	f7ff fd99 	bl	8002e74 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe3 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n",
 8003342:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8003346:	494b      	ldr	r1, [pc, #300]	; (8003474 <printRadioSettings+0x338>)
 8003348:	a807      	add	r0, sp, #28
 800334a:	f001 f9a9 	bl	80046a0 <siprintf>
			pipeAddrs[0]);
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *) uartTxBuf, strlen(uartTxBuf),
 800334e:	a807      	add	r0, sp, #28
 8003350:	f7fc ff68 	bl	8000224 <strlen>
 8003354:	230a      	movs	r3, #10
 8003356:	b282      	uxth	r2, r0
 8003358:	a907      	add	r1, sp, #28
 800335a:	4839      	ldr	r0, [pc, #228]	; (8003440 <printRadioSettings+0x304>)
 800335c:	f7ff f954 	bl	8002608 <HAL_UART_Transmit>
			10);

	NRF24_read_registerN(0x0A + 4, pipeAddrs, 1);
 8003360:	a905      	add	r1, sp, #20
 8003362:	2201      	movs	r2, #1
 8003364:	200e      	movs	r0, #14
 8003366:	f7ff fd85 	bl	8002e74 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe4 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n",
 800336a:	f89d 2014 	ldrb.w	r2, [sp, #20]
 800336e:	4942      	ldr	r1, [pc, #264]	; (8003478 <printRadioSettings+0x33c>)
 8003370:	a807      	add	r0, sp, #28
 8003372:	f001 f995 	bl	80046a0 <siprintf>
			pipeAddrs[0]);
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *) uartTxBuf, strlen(uartTxBuf),
 8003376:	a807      	add	r0, sp, #28
 8003378:	f7fc ff54 	bl	8000224 <strlen>
 800337c:	230a      	movs	r3, #10
 800337e:	b282      	uxth	r2, r0
 8003380:	a907      	add	r1, sp, #28
 8003382:	482f      	ldr	r0, [pc, #188]	; (8003440 <printRadioSettings+0x304>)
 8003384:	f7ff f940 	bl	8002608 <HAL_UART_Transmit>
			10);

	NRF24_read_registerN(0x0A + 5, pipeAddrs, 1);
 8003388:	a905      	add	r1, sp, #20
 800338a:	2201      	movs	r2, #1
 800338c:	200f      	movs	r0, #15
 800338e:	f7ff fd71 	bl	8002e74 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe5 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n",
 8003392:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8003396:	4939      	ldr	r1, [pc, #228]	; (800347c <printRadioSettings+0x340>)
 8003398:	a807      	add	r0, sp, #28
 800339a:	f001 f981 	bl	80046a0 <siprintf>
			pipeAddrs[0]);
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *) uartTxBuf, strlen(uartTxBuf),
 800339e:	a807      	add	r0, sp, #28
 80033a0:	f7fc ff40 	bl	8000224 <strlen>
 80033a4:	230a      	movs	r3, #10
 80033a6:	b282      	uxth	r2, r0
 80033a8:	a907      	add	r1, sp, #28
 80033aa:	4825      	ldr	r0, [pc, #148]	; (8003440 <printRadioSettings+0x304>)
 80033ac:	f7ff f92c 	bl	8002608 <HAL_UART_Transmit>
			10);

	NRF24_read_registerN(0x0A + 6, pipeAddrs, 5);
 80033b0:	a905      	add	r1, sp, #20
 80033b2:	2205      	movs	r2, #5
 80033b4:	2010      	movs	r0, #16
 80033b6:	f7ff fd5d 	bl	8002e74 <NRF24_read_registerN>
	sprintf(uartTxBuf, "TX Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n",
 80033ba:	f89d 1014 	ldrb.w	r1, [sp, #20]
 80033be:	f89d 3017 	ldrb.w	r3, [sp, #23]
 80033c2:	9102      	str	r1, [sp, #8]
 80033c4:	f89d 1015 	ldrb.w	r1, [sp, #21]
 80033c8:	f89d 2018 	ldrb.w	r2, [sp, #24]
 80033cc:	9101      	str	r1, [sp, #4]
 80033ce:	f89d 1016 	ldrb.w	r1, [sp, #22]
 80033d2:	a807      	add	r0, sp, #28
 80033d4:	9100      	str	r1, [sp, #0]
 80033d6:	492a      	ldr	r1, [pc, #168]	; (8003480 <printRadioSettings+0x344>)
 80033d8:	f001 f962 	bl	80046a0 <siprintf>
			pipeAddrs[4], pipeAddrs[3], pipeAddrs[2], pipeAddrs[1],
			pipeAddrs[0]);
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *) uartTxBuf, strlen(uartTxBuf),
 80033dc:	a807      	add	r0, sp, #28
 80033de:	f7fc ff21 	bl	8000224 <strlen>
 80033e2:	230a      	movs	r3, #10
 80033e4:	b282      	uxth	r2, r0
 80033e6:	a907      	add	r1, sp, #28
 80033e8:	4815      	ldr	r0, [pc, #84]	; (8003440 <printRadioSettings+0x304>)
 80033ea:	f7ff f90d 	bl	8002608 <HAL_UART_Transmit>
			10);

	//h) RX PW (Payload Width 0 - 32)
	reg8Val = NRF24_read_register(0x11);
 80033ee:	2011      	movs	r0, #17
 80033f0:	f7ff fd20 	bl	8002e34 <NRF24_read_register>
	sprintf(uartTxBuf, "RX_PW_P0:\r\n		%d bytes \r\n", reg8Val & 0x3F);
 80033f4:	4923      	ldr	r1, [pc, #140]	; (8003484 <printRadioSettings+0x348>)
 80033f6:	f000 023f 	and.w	r2, r0, #63	; 0x3f
 80033fa:	a807      	add	r0, sp, #28
 80033fc:	f001 f950 	bl	80046a0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *) uartTxBuf, strlen(uartTxBuf),
 8003400:	a807      	add	r0, sp, #28
 8003402:	f7fc ff0f 	bl	8000224 <strlen>
 8003406:	230a      	movs	r3, #10
 8003408:	b282      	uxth	r2, r0
 800340a:	a907      	add	r1, sp, #28
 800340c:	480c      	ldr	r0, [pc, #48]	; (8003440 <printRadioSettings+0x304>)
 800340e:	f7ff f8fb 	bl	8002608 <HAL_UART_Transmit>
			10);

	reg8Val = NRF24_read_register(0x11 + 1);
 8003412:	2012      	movs	r0, #18
 8003414:	f7ff fd0e 	bl	8002e34 <NRF24_read_register>
	sprintf(uartTxBuf, "RX_PW_P1:\r\n		%d bytes \r\n", reg8Val & 0x3F);
 8003418:	491b      	ldr	r1, [pc, #108]	; (8003488 <printRadioSettings+0x34c>)
 800341a:	f000 023f 	and.w	r2, r0, #63	; 0x3f
 800341e:	a807      	add	r0, sp, #28
 8003420:	f001 f93e 	bl	80046a0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *) uartTxBuf, strlen(uartTxBuf),
 8003424:	a807      	add	r0, sp, #28
 8003426:	f7fc fefd 	bl	8000224 <strlen>
 800342a:	230a      	movs	r3, #10
 800342c:	b282      	uxth	r2, r0
 800342e:	a907      	add	r1, sp, #28
 8003430:	4803      	ldr	r0, [pc, #12]	; (8003440 <printRadioSettings+0x304>)
 8003432:	f7ff f8e9 	bl	8002608 <HAL_UART_Transmit>
			10);

	reg8Val = NRF24_read_register(0x11 + 2);
 8003436:	2013      	movs	r0, #19
 8003438:	f7ff fcfc 	bl	8002e34 <NRF24_read_register>
 800343c:	e026      	b.n	800348c <printRadioSettings+0x350>
 800343e:	bf00      	nop
 8003440:	200000fc 	.word	0x200000fc
 8003444:	08005fff 	.word	0x08005fff
 8003448:	0800601b 	.word	0x0800601b
 800344c:	0800604a 	.word	0x0800604a
 8003450:	0800608e 	.word	0x0800608e
 8003454:	080060d7 	.word	0x080060d7
 8003458:	080060f0 	.word	0x080060f0
 800345c:	08006103 	.word	0x08006103
 8003460:	0800611a 	.word	0x0800611a
 8003464:	08006131 	.word	0x08006131
 8003468:	0800617e 	.word	0x0800617e
 800346c:	080061ae 	.word	0x080061ae
 8003470:	080061de 	.word	0x080061de
 8003474:	08006206 	.word	0x08006206
 8003478:	0800622e 	.word	0x0800622e
 800347c:	08006256 	.word	0x08006256
 8003480:	0800627e 	.word	0x0800627e
 8003484:	080062a8 	.word	0x080062a8
 8003488:	080062c1 	.word	0x080062c1
	sprintf(uartTxBuf, "RX_PW_P2:\r\n		%d bytes \r\n", reg8Val & 0x3F);
 800348c:	4951      	ldr	r1, [pc, #324]	; (80035d4 <printRadioSettings+0x498>)
 800348e:	f000 023f 	and.w	r2, r0, #63	; 0x3f
 8003492:	a807      	add	r0, sp, #28
 8003494:	f001 f904 	bl	80046a0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *) uartTxBuf, strlen(uartTxBuf),
 8003498:	a807      	add	r0, sp, #28
 800349a:	f7fc fec3 	bl	8000224 <strlen>
 800349e:	230a      	movs	r3, #10
 80034a0:	b282      	uxth	r2, r0
 80034a2:	a907      	add	r1, sp, #28
 80034a4:	484c      	ldr	r0, [pc, #304]	; (80035d8 <printRadioSettings+0x49c>)
 80034a6:	f7ff f8af 	bl	8002608 <HAL_UART_Transmit>
			10);

	reg8Val = NRF24_read_register(0x11 + 3);
 80034aa:	2014      	movs	r0, #20
 80034ac:	f7ff fcc2 	bl	8002e34 <NRF24_read_register>
	sprintf(uartTxBuf, "RX_PW_P3:\r\n		%d bytes \r\n", reg8Val & 0x3F);
 80034b0:	494a      	ldr	r1, [pc, #296]	; (80035dc <printRadioSettings+0x4a0>)
 80034b2:	f000 023f 	and.w	r2, r0, #63	; 0x3f
 80034b6:	a807      	add	r0, sp, #28
 80034b8:	f001 f8f2 	bl	80046a0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *) uartTxBuf, strlen(uartTxBuf),
 80034bc:	a807      	add	r0, sp, #28
 80034be:	f7fc feb1 	bl	8000224 <strlen>
 80034c2:	230a      	movs	r3, #10
 80034c4:	b282      	uxth	r2, r0
 80034c6:	a907      	add	r1, sp, #28
 80034c8:	4843      	ldr	r0, [pc, #268]	; (80035d8 <printRadioSettings+0x49c>)
 80034ca:	f7ff f89d 	bl	8002608 <HAL_UART_Transmit>
			10);

	reg8Val = NRF24_read_register(0x11 + 4);
 80034ce:	2015      	movs	r0, #21
 80034d0:	f7ff fcb0 	bl	8002e34 <NRF24_read_register>
	sprintf(uartTxBuf, "RX_PW_P4:\r\n		%d bytes \r\n", reg8Val & 0x3F);
 80034d4:	4942      	ldr	r1, [pc, #264]	; (80035e0 <printRadioSettings+0x4a4>)
 80034d6:	f000 023f 	and.w	r2, r0, #63	; 0x3f
 80034da:	a807      	add	r0, sp, #28
 80034dc:	f001 f8e0 	bl	80046a0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *) uartTxBuf, strlen(uartTxBuf),
 80034e0:	a807      	add	r0, sp, #28
 80034e2:	f7fc fe9f 	bl	8000224 <strlen>
 80034e6:	230a      	movs	r3, #10
 80034e8:	b282      	uxth	r2, r0
 80034ea:	a907      	add	r1, sp, #28
 80034ec:	483a      	ldr	r0, [pc, #232]	; (80035d8 <printRadioSettings+0x49c>)
 80034ee:	f7ff f88b 	bl	8002608 <HAL_UART_Transmit>
			10);

	reg8Val = NRF24_read_register(0x11 + 5);
 80034f2:	2016      	movs	r0, #22
 80034f4:	f7ff fc9e 	bl	8002e34 <NRF24_read_register>
	sprintf(uartTxBuf, "RX_PW_P5:\r\n		%d bytes \r\n", reg8Val & 0x3F);
 80034f8:	493a      	ldr	r1, [pc, #232]	; (80035e4 <printRadioSettings+0x4a8>)
 80034fa:	f000 023f 	and.w	r2, r0, #63	; 0x3f
 80034fe:	a807      	add	r0, sp, #28
 8003500:	f001 f8ce 	bl	80046a0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *) uartTxBuf, strlen(uartTxBuf),
 8003504:	a807      	add	r0, sp, #28
 8003506:	f7fc fe8d 	bl	8000224 <strlen>
 800350a:	a907      	add	r1, sp, #28
 800350c:	b282      	uxth	r2, r0
 800350e:	230a      	movs	r3, #10
 8003510:	4831      	ldr	r0, [pc, #196]	; (80035d8 <printRadioSettings+0x49c>)
 8003512:	f7ff f879 	bl	8002608 <HAL_UART_Transmit>
			10);

	//i) Dynamic payload enable for each pipe
	reg8Val = NRF24_read_register(0x1c);
 8003516:	201c      	movs	r0, #28
 8003518:	f7ff fc8c 	bl	8002e34 <NRF24_read_register>
	sprintf(uartTxBuf,
 800351c:	f3c0 1340 	ubfx	r3, r0, #5, #1
 8003520:	9303      	str	r3, [sp, #12]
 8003522:	f3c0 1300 	ubfx	r3, r0, #4, #1
 8003526:	9302      	str	r3, [sp, #8]
 8003528:	f3c0 03c0 	ubfx	r3, r0, #3, #1
 800352c:	9301      	str	r3, [sp, #4]
 800352e:	f3c0 0380 	ubfx	r3, r0, #2, #1
 8003532:	f000 0201 	and.w	r2, r0, #1
 8003536:	9300      	str	r3, [sp, #0]
 8003538:	492b      	ldr	r1, [pc, #172]	; (80035e8 <printRadioSettings+0x4ac>)
 800353a:	f3c0 0340 	ubfx	r3, r0, #1, #1
 800353e:	a807      	add	r0, sp, #28
 8003540:	f001 f8ae 	bl	80046a0 <siprintf>
			"DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
			_BOOL(reg8Val & (1 << 0)), _BOOL(reg8Val & (1 << 1)),
			_BOOL(reg8Val & (1 << 2)), _BOOL(reg8Val & (1 << 3)),
			_BOOL(reg8Val & (1 << 4)), _BOOL(reg8Val & (1 << 5)));
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *) uartTxBuf, strlen(uartTxBuf),
 8003544:	a807      	add	r0, sp, #28
 8003546:	f7fc fe6d 	bl	8000224 <strlen>
 800354a:	a907      	add	r1, sp, #28
 800354c:	b282      	uxth	r2, r0
 800354e:	230a      	movs	r3, #10
 8003550:	4821      	ldr	r0, [pc, #132]	; (80035d8 <printRadioSettings+0x49c>)
 8003552:	f7ff f859 	bl	8002608 <HAL_UART_Transmit>
			10);

	//j) EN_DPL (is Dynamic payload feature enabled ?)
	reg8Val = NRF24_read_register(0x1d);
 8003556:	201d      	movs	r0, #29
 8003558:	f7ff fc6c 	bl	8002e34 <NRF24_read_register>
	if (reg8Val & (1 << 2))
 800355c:	0742      	lsls	r2, r0, #29
		sprintf(uartTxBuf, "EN_DPL:\r\n		Enabled \r\n");
 800355e:	bf4c      	ite	mi
 8003560:	4922      	ldrmi	r1, [pc, #136]	; (80035ec <printRadioSettings+0x4b0>)
	else
		sprintf(uartTxBuf, "EN_DPL:\r\n		Disabled \r\n");
 8003562:	4923      	ldrpl	r1, [pc, #140]	; (80035f0 <printRadioSettings+0x4b4>)
	reg8Val = NRF24_read_register(0x1d);
 8003564:	4604      	mov	r4, r0
		sprintf(uartTxBuf, "EN_DPL:\r\n		Disabled \r\n");
 8003566:	a807      	add	r0, sp, #28
 8003568:	f001 f8be 	bl	80046e8 <strcpy>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *) uartTxBuf, strlen(uartTxBuf),
 800356c:	a807      	add	r0, sp, #28
 800356e:	f7fc fe59 	bl	8000224 <strlen>
 8003572:	a907      	add	r1, sp, #28
 8003574:	230a      	movs	r3, #10
 8003576:	b282      	uxth	r2, r0
 8003578:	4817      	ldr	r0, [pc, #92]	; (80035d8 <printRadioSettings+0x49c>)
 800357a:	f7ff f845 	bl	8002608 <HAL_UART_Transmit>
			10);

	//k) EN_ACK_PAY
	if (reg8Val & (1 << 1))
 800357e:	07a3      	lsls	r3, r4, #30
		sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Enabled \r\n");
 8003580:	bf4c      	ite	mi
 8003582:	491c      	ldrmi	r1, [pc, #112]	; (80035f4 <printRadioSettings+0x4b8>)
	else
		sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Disabled \r\n");
 8003584:	491c      	ldrpl	r1, [pc, #112]	; (80035f8 <printRadioSettings+0x4bc>)
 8003586:	a807      	add	r0, sp, #28
 8003588:	f001 f8ae 	bl	80046e8 <strcpy>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *) uartTxBuf, strlen(uartTxBuf),
 800358c:	a807      	add	r0, sp, #28
 800358e:	f7fc fe49 	bl	8000224 <strlen>
 8003592:	230a      	movs	r3, #10
 8003594:	b282      	uxth	r2, r0
 8003596:	a907      	add	r1, sp, #28
 8003598:	480f      	ldr	r0, [pc, #60]	; (80035d8 <printRadioSettings+0x49c>)
 800359a:	f7ff f835 	bl	8002608 <HAL_UART_Transmit>
			10);

	sprintf(uartTxBuf,
 800359e:	4917      	ldr	r1, [pc, #92]	; (80035fc <printRadioSettings+0x4c0>)
 80035a0:	a807      	add	r0, sp, #28
 80035a2:	f001 f8a1 	bl	80046e8 <strcpy>
			"\r\n**********************************************\r\n");
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *) uartTxBuf, strlen(uartTxBuf),
 80035a6:	a807      	add	r0, sp, #28
 80035a8:	f7fc fe3c 	bl	8000224 <strlen>
 80035ac:	230a      	movs	r3, #10
 80035ae:	b282      	uxth	r2, r0
 80035b0:	a907      	add	r1, sp, #28
 80035b2:	4809      	ldr	r0, [pc, #36]	; (80035d8 <printRadioSettings+0x49c>)
 80035b4:	f7ff f828 	bl	8002608 <HAL_UART_Transmit>
			10);
}
 80035b8:	b020      	add	sp, #128	; 0x80
 80035ba:	bd10      	pop	{r4, pc}
		sprintf(uartTxBuf, "CRC:\r\n		Disabled \r\n");
 80035bc:	4910      	ldr	r1, [pc, #64]	; (8003600 <printRadioSettings+0x4c4>)
 80035be:	e5d2      	b.n	8003166 <printRadioSettings+0x2a>
	else if (reg8Val == 1)
 80035c0:	2c01      	cmp	r4, #1
 80035c2:	d101      	bne.n	80035c8 <printRadioSettings+0x48c>
		sprintf(uartTxBuf, "RF_PWR:\r\n		-12dB \r\n");
 80035c4:	490f      	ldr	r1, [pc, #60]	; (8003604 <printRadioSettings+0x4c8>)
 80035c6:	e659      	b.n	800327c <printRadioSettings+0x140>
	else if (reg8Val == 2)
 80035c8:	2c02      	cmp	r4, #2
		sprintf(uartTxBuf, "RF_PWR:\r\n		-6dB \r\n");
 80035ca:	bf0c      	ite	eq
 80035cc:	490e      	ldreq	r1, [pc, #56]	; (8003608 <printRadioSettings+0x4cc>)
		sprintf(uartTxBuf, "RF_PWR:\r\n		0dB \r\n");
 80035ce:	490f      	ldrne	r1, [pc, #60]	; (800360c <printRadioSettings+0x4d0>)
 80035d0:	e654      	b.n	800327c <printRadioSettings+0x140>
 80035d2:	bf00      	nop
 80035d4:	080062da 	.word	0x080062da
 80035d8:	200000fc 	.word	0x200000fc
 80035dc:	080062f3 	.word	0x080062f3
 80035e0:	0800630c 	.word	0x0800630c
 80035e4:	08006325 	.word	0x08006325
 80035e8:	0800633e 	.word	0x0800633e
 80035ec:	08006388 	.word	0x08006388
 80035f0:	0800639e 	.word	0x0800639e
 80035f4:	080063b5 	.word	0x080063b5
 80035f8:	080063cf 	.word	0x080063cf
 80035fc:	080063ea 	.word	0x080063ea
 8003600:	08006036 	.word	0x08006036
 8003604:	08006145 	.word	0x08006145
 8003608:	08006159 	.word	0x08006159
 800360c:	0800616c 	.word	0x0800616c

08003610 <NRF24_begin>:
		uint16_t nrfCE_Pin, SPI_HandleTypeDef nrfSPI) {
 8003610:	b082      	sub	sp, #8
 8003612:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003614:	4606      	mov	r6, r0
 8003616:	460d      	mov	r5, r1
 8003618:	4614      	mov	r4, r2
 800361a:	a906      	add	r1, sp, #24
	memcpy(&nrf24_hspi, &nrfSPI, sizeof(nrfSPI));
 800361c:	2258      	movs	r2, #88	; 0x58
		uint16_t nrfCE_Pin, SPI_HandleTypeDef nrfSPI) {
 800361e:	f841 3f04 	str.w	r3, [r1, #4]!
	memcpy(&nrf24_hspi, &nrfSPI, sizeof(nrfSPI));
 8003622:	485f      	ldr	r0, [pc, #380]	; (80037a0 <NRF24_begin+0x190>)
 8003624:	f000 ffac 	bl	8004580 <memcpy>
	nrf24_PORT = nrf24PORT;
 8003628:	4b5e      	ldr	r3, [pc, #376]	; (80037a4 <NRF24_begin+0x194>)
 800362a:	601e      	str	r6, [r3, #0]
	nrf24_CSN_PIN = nrfCSN_Pin;
 800362c:	4b5e      	ldr	r3, [pc, #376]	; (80037a8 <NRF24_begin+0x198>)
 800362e:	801d      	strh	r5, [r3, #0]
	nrf24_CE_PIN = nrfCE_Pin;
 8003630:	4b5e      	ldr	r3, [pc, #376]	; (80037ac <NRF24_begin+0x19c>)
	pipeAddrVar[0] = 0xE7;
 8003632:	ad02      	add	r5, sp, #8
	nrf24_CE_PIN = nrfCE_Pin;
 8003634:	801c      	strh	r4, [r3, #0]
 8003636:	f7ff fbc9 	bl	8002dcc <NRF24_csn.part.0>
	NRF24_ce(0);
 800363a:	2000      	movs	r0, #0
 800363c:	f7ff fbec 	bl	8002e18 <NRF24_ce>
	HAL_Delay(5);
 8003640:	2005      	movs	r0, #5
 8003642:	f7fc fe3f 	bl	80002c4 <HAL_Delay>
	NRF24_write_register(0x00, 0x08);
 8003646:	2108      	movs	r1, #8
 8003648:	2000      	movs	r0, #0
 800364a:	f7ff fc31 	bl	8002eb0 <NRF24_write_register>
	NRF24_write_register(0x01, 0x3f);
 800364e:	213f      	movs	r1, #63	; 0x3f
 8003650:	2001      	movs	r0, #1
 8003652:	f7ff fc2d 	bl	8002eb0 <NRF24_write_register>
	NRF24_write_register(0x02, 0x03);
 8003656:	2103      	movs	r1, #3
 8003658:	2002      	movs	r0, #2
 800365a:	f7ff fc29 	bl	8002eb0 <NRF24_write_register>
	NRF24_write_register(0x03, 0x03);
 800365e:	2103      	movs	r1, #3
	pipeAddrVar[4] = 0xE7;
 8003660:	24e7      	movs	r4, #231	; 0xe7
	NRF24_write_register(0x03, 0x03);
 8003662:	4608      	mov	r0, r1
 8003664:	f7ff fc24 	bl	8002eb0 <NRF24_write_register>
	NRF24_write_register(0x04, 0x03);
 8003668:	2103      	movs	r1, #3
 800366a:	2004      	movs	r0, #4
 800366c:	f7ff fc20 	bl	8002eb0 <NRF24_write_register>
	NRF24_write_register(0x05, 0x02);
 8003670:	2102      	movs	r1, #2
 8003672:	2005      	movs	r0, #5
 8003674:	f7ff fc1c 	bl	8002eb0 <NRF24_write_register>
	NRF24_write_register(0x06, 0x0f);
 8003678:	210f      	movs	r1, #15
 800367a:	2006      	movs	r0, #6
 800367c:	f7ff fc18 	bl	8002eb0 <NRF24_write_register>
	NRF24_write_register(0x07, 0x0e);
 8003680:	210e      	movs	r1, #14
 8003682:	2007      	movs	r0, #7
 8003684:	f7ff fc14 	bl	8002eb0 <NRF24_write_register>
	NRF24_write_register(0x08, 0x00);
 8003688:	2100      	movs	r1, #0
 800368a:	2008      	movs	r0, #8
 800368c:	f7ff fc10 	bl	8002eb0 <NRF24_write_register>
	NRF24_write_register(0x09, 0x00);
 8003690:	2100      	movs	r1, #0
 8003692:	2009      	movs	r0, #9
 8003694:	f7ff fc0c 	bl	8002eb0 <NRF24_write_register>
	pipeAddrVar[0] = 0xE7;
 8003698:	f805 4d08 	strb.w	r4, [r5, #-8]!
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 800369c:	4629      	mov	r1, r5
 800369e:	2205      	movs	r2, #5
 80036a0:	200a      	movs	r0, #10
	pipeAddrVar[4] = 0xE7;
 80036a2:	f88d 4004 	strb.w	r4, [sp, #4]
	pipeAddrVar[3] = 0xE7;
 80036a6:	f88d 4003 	strb.w	r4, [sp, #3]
	pipeAddrVar[2] = 0xE7;
 80036aa:	f88d 4002 	strb.w	r4, [sp, #2]
	pipeAddrVar[1] = 0xE7;
 80036ae:	f88d 4001 	strb.w	r4, [sp, #1]
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 80036b2:	f7ff fc15 	bl	8002ee0 <NRF24_write_registerN>
	pipeAddrVar[4] = 0xC2;
 80036b6:	23c2      	movs	r3, #194	; 0xc2
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 80036b8:	2205      	movs	r2, #5
 80036ba:	4629      	mov	r1, r5
 80036bc:	200b      	movs	r0, #11
	pipeAddrVar[4] = 0xC2;
 80036be:	f88d 3004 	strb.w	r3, [sp, #4]
	pipeAddrVar[3] = 0xC2;
 80036c2:	f88d 3003 	strb.w	r3, [sp, #3]
	pipeAddrVar[2] = 0xC2;
 80036c6:	f88d 3002 	strb.w	r3, [sp, #2]
	pipeAddrVar[1] = 0xC2;
 80036ca:	f88d 3001 	strb.w	r3, [sp, #1]
	pipeAddrVar[0] = 0xC2;
 80036ce:	f88d 3000 	strb.w	r3, [sp]
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 80036d2:	f7ff fc05 	bl	8002ee0 <NRF24_write_registerN>
	NRF24_write_register(0x0C, 0xC3);
 80036d6:	21c3      	movs	r1, #195	; 0xc3
 80036d8:	200c      	movs	r0, #12
 80036da:	f7ff fbe9 	bl	8002eb0 <NRF24_write_register>
	NRF24_write_register(0x0D, 0xC4);
 80036de:	21c4      	movs	r1, #196	; 0xc4
 80036e0:	200d      	movs	r0, #13
 80036e2:	f7ff fbe5 	bl	8002eb0 <NRF24_write_register>
	NRF24_write_register(0x0E, 0xC5);
 80036e6:	21c5      	movs	r1, #197	; 0xc5
 80036e8:	200e      	movs	r0, #14
 80036ea:	f7ff fbe1 	bl	8002eb0 <NRF24_write_register>
	NRF24_write_register(0x0F, 0xC6);
 80036ee:	21c6      	movs	r1, #198	; 0xc6
 80036f0:	200f      	movs	r0, #15
 80036f2:	f7ff fbdd 	bl	8002eb0 <NRF24_write_register>
	NRF24_write_registerN(0x10, pipeAddrVar, 5);
 80036f6:	2205      	movs	r2, #5
 80036f8:	4629      	mov	r1, r5
 80036fa:	2010      	movs	r0, #16
	pipeAddrVar[4] = 0xE7;
 80036fc:	f88d 4004 	strb.w	r4, [sp, #4]
	pipeAddrVar[3] = 0xE7;
 8003700:	f88d 4003 	strb.w	r4, [sp, #3]
	pipeAddrVar[2] = 0xE7;
 8003704:	f88d 4002 	strb.w	r4, [sp, #2]
	pipeAddrVar[1] = 0xE7;
 8003708:	f88d 4001 	strb.w	r4, [sp, #1]
	pipeAddrVar[0] = 0xE7;
 800370c:	f88d 4000 	strb.w	r4, [sp]
	NRF24_write_registerN(0x10, pipeAddrVar, 5);
 8003710:	f7ff fbe6 	bl	8002ee0 <NRF24_write_registerN>
	NRF24_write_register(0x11, 0);
 8003714:	2100      	movs	r1, #0
 8003716:	2011      	movs	r0, #17
 8003718:	f7ff fbca 	bl	8002eb0 <NRF24_write_register>
	NRF24_write_register(0x12, 0);
 800371c:	2100      	movs	r1, #0
 800371e:	2012      	movs	r0, #18
 8003720:	f7ff fbc6 	bl	8002eb0 <NRF24_write_register>
	NRF24_write_register(0x13, 0);
 8003724:	2100      	movs	r1, #0
 8003726:	2013      	movs	r0, #19
 8003728:	f7ff fbc2 	bl	8002eb0 <NRF24_write_register>
	NRF24_write_register(0x14, 0);
 800372c:	2100      	movs	r1, #0
 800372e:	2014      	movs	r0, #20
 8003730:	f7ff fbbe 	bl	8002eb0 <NRF24_write_register>
	NRF24_write_register(0x15, 0);
 8003734:	2100      	movs	r1, #0
 8003736:	2015      	movs	r0, #21
 8003738:	f7ff fbba 	bl	8002eb0 <NRF24_write_register>
	NRF24_write_register(0x16, 0);
 800373c:	2100      	movs	r1, #0
 800373e:	2016      	movs	r0, #22
 8003740:	f7ff fbb6 	bl	8002eb0 <NRF24_write_register>
	NRF24_ACTIVATE_cmd();
 8003744:	f7ff fc9a 	bl	800307c <NRF24_ACTIVATE_cmd>
	NRF24_write_register(0x1c, 0);
 8003748:	2100      	movs	r1, #0
 800374a:	201c      	movs	r0, #28
 800374c:	f7ff fbb0 	bl	8002eb0 <NRF24_write_register>
	NRF24_write_register(0x1d, 0);
 8003750:	2100      	movs	r1, #0
 8003752:	201d      	movs	r0, #29
 8003754:	f7ff fbac 	bl	8002eb0 <NRF24_write_register>
	printRadioSettings();
 8003758:	f7ff fcf0 	bl	800313c <printRadioSettings>
	NRF24_write_register(REG_SETUP_RETR,
 800375c:	21ff      	movs	r1, #255	; 0xff
 800375e:	2004      	movs	r0, #4
 8003760:	f7ff fba6 	bl	8002eb0 <NRF24_write_register>
	NRF24_setPALevel(RF24_PA_0dB);
 8003764:	2003      	movs	r0, #3
 8003766:	f7ff fc2f 	bl	8002fc8 <NRF24_setPALevel>
	NRF24_setDataRate(RF24_1MBPS);
 800376a:	2000      	movs	r0, #0
 800376c:	f7ff fc49 	bl	8003002 <NRF24_setDataRate>
	NRF24_setCRCLength(RF24_CRC_16);
 8003770:	2002      	movs	r0, #2
 8003772:	f7ff fc61 	bl	8003038 <NRF24_setCRCLength>
	NRF24_disableDynamicPayloads();
 8003776:	f7ff fc18 	bl	8002faa <NRF24_disableDynamicPayloads>
	payload_size = MIN(size, max_payload_size);
 800377a:	2220      	movs	r2, #32
 800377c:	4b0c      	ldr	r3, [pc, #48]	; (80037b0 <NRF24_begin+0x1a0>)
 800377e:	701a      	strb	r2, [r3, #0]
	NRF24_resetStatus();
 8003780:	f7ff fc78 	bl	8003074 <NRF24_resetStatus>
	NRF24_setChannel(76);
 8003784:	204c      	movs	r0, #76	; 0x4c
 8003786:	f7ff fc09 	bl	8002f9c <NRF24_setChannel>
	NRF24_flush_tx();
 800378a:	f7ff fbc7 	bl	8002f1c <NRF24_flush_tx>
	NRF24_flush_rx();
 800378e:	f7ff fbc9 	bl	8002f24 <NRF24_flush_rx>
	NRF24_powerDown();
 8003792:	f7ff fc64 	bl	800305e <NRF24_powerDown>
}
 8003796:	b002      	add	sp, #8
 8003798:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800379c:	b002      	add	sp, #8
 800379e:	4770      	bx	lr
 80037a0:	200000a4 	.word	0x200000a4
 80037a4:	200000a0 	.word	0x200000a0
 80037a8:	2000009e 	.word	0x2000009e
 80037ac:	2000009c 	.word	0x2000009c
 80037b0:	2000013c 	.word	0x2000013c

080037b4 <nrf24_DebugUART_Init>:
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *) uartTxBuf, strlen(uartTxBuf),
			10);
}

//4. Init Variables
void nrf24_DebugUART_Init(UART_HandleTypeDef nrf24Uart) {
 80037b4:	b084      	sub	sp, #16
 80037b6:	b530      	push	{r4, r5, lr}
 80037b8:	ac03      	add	r4, sp, #12
 80037ba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	memcpy(&nrf24_huart, &nrf24Uart, sizeof(nrf24Uart));
 80037be:	4c08      	ldr	r4, [pc, #32]	; (80037e0 <nrf24_DebugUART_Init+0x2c>)
 80037c0:	ad03      	add	r5, sp, #12
 80037c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80037c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80037c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80037c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80037ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80037cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80037ce:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80037d2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80037d6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80037da:	b004      	add	sp, #16
 80037dc:	4770      	bx	lr
 80037de:	bf00      	nop
 80037e0:	200000fc 	.word	0x200000fc

080037e4 <initNRF24andPrintStatus>:
void initNRF24andPrintStatus(void) {
 80037e4:	b570      	push	{r4, r5, r6, lr}
	NRF24_begin(CSN_GPIO_Port, CSN_Pin, CE_Pin, hspi1);
 80037e6:	4c1b      	ldr	r4, [pc, #108]	; (8003854 <initNRF24andPrintStatus+0x70>)
void initNRF24andPrintStatus(void) {
 80037e8:	b096      	sub	sp, #88	; 0x58
	NRF24_begin(CSN_GPIO_Port, CSN_Pin, CE_Pin, hspi1);
 80037ea:	1d21      	adds	r1, r4, #4
 80037ec:	2254      	movs	r2, #84	; 0x54
 80037ee:	4668      	mov	r0, sp
 80037f0:	f000 fec6 	bl	8004580 <memcpy>
 80037f4:	6823      	ldr	r3, [r4, #0]
	nrf24_DebugUART_Init(DEBUG_UART);
 80037f6:	466c      	mov	r4, sp
 80037f8:	4e17      	ldr	r6, [pc, #92]	; (8003858 <initNRF24andPrintStatus+0x74>)
	NRF24_begin(CSN_GPIO_Port, CSN_Pin, CE_Pin, hspi1);
 80037fa:	2210      	movs	r2, #16
 80037fc:	2102      	movs	r1, #2
 80037fe:	4817      	ldr	r0, [pc, #92]	; (800385c <initNRF24andPrintStatus+0x78>)
	nrf24_DebugUART_Init(DEBUG_UART);
 8003800:	f106 0510 	add.w	r5, r6, #16
	NRF24_begin(CSN_GPIO_Port, CSN_Pin, CE_Pin, hspi1);
 8003804:	f7ff ff04 	bl	8003610 <NRF24_begin>
	nrf24_DebugUART_Init(DEBUG_UART);
 8003808:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800380a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800380c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800380e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003810:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8003814:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003818:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800381c:	f7ff ffca 	bl	80037b4 <nrf24_DebugUART_Init>
		NRF24_write_register(REG_EN_AA, 0x3F);
 8003820:	213f      	movs	r1, #63	; 0x3f
 8003822:	2001      	movs	r0, #1
 8003824:	f7ff fb44 	bl	8002eb0 <NRF24_write_register>
	NRF24_setChannel(0x4C);
 8003828:	204c      	movs	r0, #76	; 0x4c
 800382a:	f7ff fbb7 	bl	8002f9c <NRF24_setChannel>
	payload_size = MIN(size, max_payload_size);
 800382e:	220e      	movs	r2, #14
 8003830:	4b0b      	ldr	r3, [pc, #44]	; (8003860 <initNRF24andPrintStatus+0x7c>)
 8003832:	701a      	strb	r2, [r3, #0]
	NRF24_openWritingPipe(txPipeAdress);
 8003834:	4b0b      	ldr	r3, [pc, #44]	; (8003864 <initNRF24andPrintStatus+0x80>)
 8003836:	e9d3 0100 	ldrd	r0, r1, [r3]
 800383a:	f7ff fb95 	bl	8002f68 <NRF24_openWritingPipe>
	NRF24_startListening();
 800383e:	f7ff fb75 	bl	8002f2c <NRF24_startListening>
	NRF24_enableDynamicPayloads();
 8003842:	f7ff fc57 	bl	80030f4 <NRF24_enableDynamicPayloads>
	NRF24_enableAckPayload();
 8003846:	f7ff fc31 	bl	80030ac <NRF24_enableAckPayload>
}
 800384a:	b016      	add	sp, #88	; 0x58
 800384c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	printRadioSettings();
 8003850:	f7ff bc74 	b.w	800313c <printRadioSettings>
 8003854:	20000758 	.word	0x20000758
 8003858:	2000057c 	.word	0x2000057c
 800385c:	40010800 	.word	0x40010800
 8003860:	2000013c 	.word	0x2000013c
 8003864:	20000010 	.word	0x20000010

08003868 <oledInit>:
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00 };

void oledInit(void) {
 8003868:	b508      	push	{r3, lr}

	HAL_GPIO_WritePin(OLED_PWR_GPIO_Port, OLED_PWR_Pin, SET);
 800386a:	2201      	movs	r2, #1
 800386c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003870:	4804      	ldr	r0, [pc, #16]	; (8003884 <oledInit+0x1c>)
 8003872:	f7fd fa1b 	bl	8000cac <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8003876:	2005      	movs	r0, #5
 8003878:	f7fc fd24 	bl	80002c4 <HAL_Delay>
	SSD1306_Init(); // initialize the diaply

}
 800387c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	SSD1306_Init(); // initialize the diaply
 8003880:	f000 bb24 	b.w	8003ecc <SSD1306_Init>
 8003884:	40010c00 	.word	0x40010c00

08003888 <oledPrintInitScreen>:

void oledPrintInitScreen(void) {
 8003888:	b570      	push	{r4, r5, r6, lr}
 800388a:	b08a      	sub	sp, #40	; 0x28

	const char *firmawre_version = "1.0";

	char buffor_string[25];

	sprintf(buffor_string, "v%s %s", firmawre_version, __DATE__);
 800388c:	4b27      	ldr	r3, [pc, #156]	; (800392c <oledPrintInitScreen+0xa4>)
 800388e:	4a28      	ldr	r2, [pc, #160]	; (8003930 <oledPrintInitScreen+0xa8>)
 8003890:	4928      	ldr	r1, [pc, #160]	; (8003934 <oledPrintInitScreen+0xac>)
 8003892:	a803      	add	r0, sp, #12

	SSD1306_Clear();

	SSD1306_DrawBitmap(0, 0, init_screen, 128, 64, 1);
 8003894:	2401      	movs	r4, #1
	sprintf(buffor_string, "v%s %s", firmawre_version, __DATE__);
 8003896:	f000 ff03 	bl	80046a0 <siprintf>
	SSD1306_DrawBitmap(0, 0, init_screen, 128, 64, 1);
 800389a:	2540      	movs	r5, #64	; 0x40
	SSD1306_Clear();
 800389c:	f000 fb0e 	bl	8003ebc <SSD1306_Clear>
	SSD1306_DrawBitmap(0, 0, init_screen, 128, 64, 1);
 80038a0:	2100      	movs	r1, #0
 80038a2:	9401      	str	r4, [sp, #4]
 80038a4:	4608      	mov	r0, r1
 80038a6:	9500      	str	r5, [sp, #0]
 80038a8:	2380      	movs	r3, #128	; 0x80
 80038aa:	4a23      	ldr	r2, [pc, #140]	; (8003938 <oledPrintInitScreen+0xb0>)
 80038ac:	f000 f90c 	bl	8003ac8 <SSD1306_DrawBitmap>
	SSD1306_DrawRectangle(0, 0, 128, 64, 1);
 80038b0:	2100      	movs	r1, #0
 80038b2:	462b      	mov	r3, r5
 80038b4:	2280      	movs	r2, #128	; 0x80
 80038b6:	4608      	mov	r0, r1
 80038b8:	9400      	str	r4, [sp, #0]
 80038ba:	f000 fa3d 	bl	8003d38 <SSD1306_DrawRectangle>

	SSD1306_UpdateScreen(); // update screen
 80038be:	f000 fadb 	bl	8003e78 <SSD1306_UpdateScreen>
	HAL_Delay(3e3);
 80038c2:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80038c6:	f7fc fcfd 	bl	80002c4 <HAL_Delay>

	SSD1306_Clear();
 80038ca:	f000 faf7 	bl	8003ebc <SSD1306_Clear>
	SSD1306_GotoXY(10, 10); // goto 10, 10
 80038ce:	210a      	movs	r1, #10
	SSD1306_Puts("RC_controler ", &Font_7x10, 1); // print Hello
 80038d0:	4e1a      	ldr	r6, [pc, #104]	; (800393c <oledPrintInitScreen+0xb4>)
	SSD1306_GotoXY(10, 10); // goto 10, 10
 80038d2:	4608      	mov	r0, r1
 80038d4:	f000 f938 	bl	8003b48 <SSD1306_GotoXY>
	SSD1306_Puts("RC_controler ", &Font_7x10, 1); // print Hello
 80038d8:	4622      	mov	r2, r4
 80038da:	4631      	mov	r1, r6
 80038dc:	4818      	ldr	r0, [pc, #96]	; (8003940 <oledPrintInitScreen+0xb8>)
 80038de:	f000 f985 	bl	8003bec <SSD1306_Puts>
	SSD1306_GotoXY(10, 22);
 80038e2:	2116      	movs	r1, #22
 80038e4:	200a      	movs	r0, #10
 80038e6:	f000 f92f 	bl	8003b48 <SSD1306_GotoXY>
	SSD1306_Puts("by D.Wawerek", &Font_7x10, 1);
 80038ea:	4622      	mov	r2, r4
 80038ec:	4631      	mov	r1, r6
 80038ee:	4815      	ldr	r0, [pc, #84]	; (8003944 <oledPrintInitScreen+0xbc>)
 80038f0:	f000 f97c 	bl	8003bec <SSD1306_Puts>
	SSD1306_GotoXY(10, 34);
 80038f4:	2122      	movs	r1, #34	; 0x22
 80038f6:	200a      	movs	r0, #10
 80038f8:	f000 f926 	bl	8003b48 <SSD1306_GotoXY>
	SSD1306_Puts(buffor_string, &Font_7x10, 1);
 80038fc:	4622      	mov	r2, r4
 80038fe:	4631      	mov	r1, r6
 8003900:	a803      	add	r0, sp, #12
 8003902:	f000 f973 	bl	8003bec <SSD1306_Puts>

	SSD1306_DrawRectangle(0, 0, 128, 64, 1); // nice border of a OLED
 8003906:	2100      	movs	r1, #0
 8003908:	462b      	mov	r3, r5
 800390a:	4608      	mov	r0, r1
 800390c:	2280      	movs	r2, #128	; 0x80
 800390e:	9400      	str	r4, [sp, #0]
 8003910:	f000 fa12 	bl	8003d38 <SSD1306_DrawRectangle>
	SSD1306_UpdateScreen(); // update screen
 8003914:	f000 fab0 	bl	8003e78 <SSD1306_UpdateScreen>
	HAL_Delay(3e3);
 8003918:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800391c:	f7fc fcd2 	bl	80002c4 <HAL_Delay>
	SSD1306_Clear();
 8003920:	f000 facc 	bl	8003ebc <SSD1306_Clear>
	SSD1306_UpdateScreen();
 8003924:	f000 faa8 	bl	8003e78 <SSD1306_UpdateScreen>

}
 8003928:	b00a      	add	sp, #40	; 0x28
 800392a:	bd70      	pop	{r4, r5, r6, pc}
 800392c:	0800682d 	.word	0x0800682d
 8003930:	08006839 	.word	0x08006839
 8003934:	0800683d 	.word	0x0800683d
 8003938:	0800641d 	.word	0x0800641d
 800393c:	20000008 	.word	0x20000008
 8003940:	08006844 	.word	0x08006844
 8003944:	08006852 	.word	0x08006852

08003948 <oledDrawValueBar>:

void oledDrawValueBar(uint16_t value1, uint16_t value2, uint16_t value3,
		uint16_t value4) {
 8003948:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800394c:	4682      	mov	sl, r0
	//Draws 4 bars representing given values on screen. There is no clear function to avoid screen flushing(???)
	// As for now position of bars is chosed exprerimetnaly
	//1. BAR
	SSD1306_GotoXY(3, 5); // goto 10, 10
	SSD1306_Puts("1: ", &Font_7x10, 1); // print Hello
	SSD1306_DrawFilledRectangle(15, 5, value1_u8, 8, 1); // draw rectangle and complemnetray one
 800394e:	2401      	movs	r4, #1
	SSD1306_DrawFilledRectangle(value1_u8 + 15, 5,
 8003950:	2500      	movs	r5, #0
		uint16_t value4) {
 8003952:	4688      	mov	r8, r1
 8003954:	4617      	mov	r7, r2
 8003956:	461e      	mov	r6, r3
	SSD1306_Puts("1: ", &Font_7x10, 1); // print Hello
 8003958:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8003a64 <oledDrawValueBar+0x11c>
	SSD1306_GotoXY(3, 5); // goto 10, 10
 800395c:	2105      	movs	r1, #5
 800395e:	2003      	movs	r0, #3
 8003960:	f000 f8f2 	bl	8003b48 <SSD1306_GotoXY>
	SSD1306_DrawFilledRectangle(15, 5, value1_u8, 8, 1); // draw rectangle and complemnetray one
 8003964:	f3ca 1a47 	ubfx	sl, sl, #5, #8
	SSD1306_Puts("1: ", &Font_7x10, 1); // print Hello
 8003968:	4649      	mov	r1, r9
 800396a:	2201      	movs	r2, #1
 800396c:	4839      	ldr	r0, [pc, #228]	; (8003a54 <oledDrawValueBar+0x10c>)
 800396e:	f000 f93d 	bl	8003bec <SSD1306_Puts>
	SSD1306_DrawFilledRectangle(15, 5, value1_u8, 8, 1); // draw rectangle and complemnetray one
 8003972:	4652      	mov	r2, sl
 8003974:	9400      	str	r4, [sp, #0]
 8003976:	2308      	movs	r3, #8
 8003978:	2105      	movs	r1, #5
 800397a:	200f      	movs	r0, #15
 800397c:	f000 fa1d 	bl	8003dba <SSD1306_DrawFilledRectangle>
	SSD1306_DrawFilledRectangle(value1_u8 + 15, 5,
 8003980:	f1ca 0267 	rsb	r2, sl, #103	; 0x67
 8003984:	2308      	movs	r3, #8
 8003986:	b292      	uxth	r2, r2
 8003988:	f10a 000f 	add.w	r0, sl, #15
 800398c:	9500      	str	r5, [sp, #0]
 800398e:	2105      	movs	r1, #5
 8003990:	f000 fa13 	bl	8003dba <SSD1306_DrawFilledRectangle>
	SSD1306_WIDTH - 25 - value1_u8, 8, 0); //draw black rectangle to complement the main one

	//2. BAR
	SSD1306_GotoXY(3, 20); // goto 10, 10
 8003994:	2114      	movs	r1, #20
 8003996:	2003      	movs	r0, #3
 8003998:	f000 f8d6 	bl	8003b48 <SSD1306_GotoXY>
	SSD1306_Puts("2: ", &Font_7x10, 1); // print Hello
	SSD1306_DrawFilledRectangle(15, 20, value2_u8, 8, 1); // nice border of a OLED
 800399c:	f3c8 1847 	ubfx	r8, r8, #5, #8
	SSD1306_Puts("2: ", &Font_7x10, 1); // print Hello
 80039a0:	4622      	mov	r2, r4
 80039a2:	4649      	mov	r1, r9
 80039a4:	482c      	ldr	r0, [pc, #176]	; (8003a58 <oledDrawValueBar+0x110>)
 80039a6:	f000 f921 	bl	8003bec <SSD1306_Puts>
	SSD1306_DrawFilledRectangle(15, 20, value2_u8, 8, 1); // nice border of a OLED
 80039aa:	4642      	mov	r2, r8
 80039ac:	9400      	str	r4, [sp, #0]
 80039ae:	2308      	movs	r3, #8
 80039b0:	2114      	movs	r1, #20
 80039b2:	200f      	movs	r0, #15
 80039b4:	f000 fa01 	bl	8003dba <SSD1306_DrawFilledRectangle>
	SSD1306_DrawFilledRectangle(value2_u8 + 15, 20,
 80039b8:	f1c8 0267 	rsb	r2, r8, #103	; 0x67
 80039bc:	2308      	movs	r3, #8
 80039be:	b292      	uxth	r2, r2
 80039c0:	f108 000f 	add.w	r0, r8, #15
 80039c4:	9500      	str	r5, [sp, #0]
 80039c6:	2114      	movs	r1, #20
 80039c8:	f000 f9f7 	bl	8003dba <SSD1306_DrawFilledRectangle>
	SSD1306_WIDTH - 25 - value2_u8, 8, 0); //draw black rectangle to complement the main one

	//3. BAR
	SSD1306_GotoXY(3, 34); // goto 10, 10
 80039cc:	2122      	movs	r1, #34	; 0x22
 80039ce:	2003      	movs	r0, #3
 80039d0:	f000 f8ba 	bl	8003b48 <SSD1306_GotoXY>
	SSD1306_Puts("3: ", &Font_7x10, 1); // print Hello
	SSD1306_DrawFilledRectangle(15, 34, value3_u8, 8, 1); // nice border of a OLED
 80039d4:	f3c7 1747 	ubfx	r7, r7, #5, #8
	SSD1306_Puts("3: ", &Font_7x10, 1); // print Hello
 80039d8:	4622      	mov	r2, r4
 80039da:	4649      	mov	r1, r9
 80039dc:	481f      	ldr	r0, [pc, #124]	; (8003a5c <oledDrawValueBar+0x114>)
 80039de:	f000 f905 	bl	8003bec <SSD1306_Puts>
	SSD1306_DrawFilledRectangle(15, 34, value3_u8, 8, 1); // nice border of a OLED
 80039e2:	463a      	mov	r2, r7
 80039e4:	9400      	str	r4, [sp, #0]
 80039e6:	2308      	movs	r3, #8
 80039e8:	2122      	movs	r1, #34	; 0x22
 80039ea:	200f      	movs	r0, #15
 80039ec:	f000 f9e5 	bl	8003dba <SSD1306_DrawFilledRectangle>
	SSD1306_DrawFilledRectangle(value3_u8 + 15, 34,
 80039f0:	f1c7 0267 	rsb	r2, r7, #103	; 0x67
 80039f4:	2308      	movs	r3, #8
 80039f6:	b292      	uxth	r2, r2
 80039f8:	f107 000f 	add.w	r0, r7, #15
 80039fc:	9500      	str	r5, [sp, #0]
 80039fe:	2122      	movs	r1, #34	; 0x22
 8003a00:	f000 f9db 	bl	8003dba <SSD1306_DrawFilledRectangle>
	SSD1306_WIDTH - 25 - value3_u8, 8, 0);

	//4. BAR
	SSD1306_GotoXY(3, 48); // goto 10, 10
 8003a04:	2130      	movs	r1, #48	; 0x30
 8003a06:	2003      	movs	r0, #3
 8003a08:	f000 f89e 	bl	8003b48 <SSD1306_GotoXY>
	SSD1306_Puts("4: ", &Font_7x10, 1); // print Hello
	SSD1306_DrawFilledRectangle(15, 48, value4_u8, 8, 1); // nice border of a OLED
 8003a0c:	f3c6 1647 	ubfx	r6, r6, #5, #8
	SSD1306_Puts("4: ", &Font_7x10, 1); // print Hello
 8003a10:	4622      	mov	r2, r4
 8003a12:	4649      	mov	r1, r9
 8003a14:	4812      	ldr	r0, [pc, #72]	; (8003a60 <oledDrawValueBar+0x118>)
 8003a16:	f000 f8e9 	bl	8003bec <SSD1306_Puts>
	SSD1306_DrawFilledRectangle(15, 48, value4_u8, 8, 1); // nice border of a OLED
 8003a1a:	4632      	mov	r2, r6
 8003a1c:	9400      	str	r4, [sp, #0]
 8003a1e:	2308      	movs	r3, #8
 8003a20:	2130      	movs	r1, #48	; 0x30
 8003a22:	200f      	movs	r0, #15
 8003a24:	f000 f9c9 	bl	8003dba <SSD1306_DrawFilledRectangle>
	SSD1306_DrawFilledRectangle(value4_u8 + 15, 48,
 8003a28:	f1c6 0267 	rsb	r2, r6, #103	; 0x67
 8003a2c:	f106 000f 	add.w	r0, r6, #15
 8003a30:	9500      	str	r5, [sp, #0]
 8003a32:	2308      	movs	r3, #8
 8003a34:	b292      	uxth	r2, r2
 8003a36:	2130      	movs	r1, #48	; 0x30
 8003a38:	f000 f9bf 	bl	8003dba <SSD1306_DrawFilledRectangle>
	SSD1306_WIDTH - 25 - value4_u8, 8, 0);

	SSD1306_DrawRectangle(0, 0, 128, 64, 1); // nice border of a OLED
 8003a3c:	9400      	str	r4, [sp, #0]
 8003a3e:	2340      	movs	r3, #64	; 0x40
 8003a40:	2280      	movs	r2, #128	; 0x80
 8003a42:	4629      	mov	r1, r5
 8003a44:	4628      	mov	r0, r5
 8003a46:	f000 f977 	bl	8003d38 <SSD1306_DrawRectangle>
	SSD1306_UpdateScreen(); // update screen

}
 8003a4a:	b002      	add	sp, #8
 8003a4c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	SSD1306_UpdateScreen(); // update screen
 8003a50:	f000 ba12 	b.w	8003e78 <SSD1306_UpdateScreen>
 8003a54:	0800681d 	.word	0x0800681d
 8003a58:	08006821 	.word	0x08006821
 8003a5c:	08006825 	.word	0x08006825
 8003a60:	08006829 	.word	0x08006829
 8003a64:	20000008 	.word	0x20000008

08003a68 <SSD1306_Fill>:
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8003a68:	2800      	cmp	r0, #0
 8003a6a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003a6e:	bf14      	ite	ne
 8003a70:	21ff      	movne	r1, #255	; 0xff
 8003a72:	2100      	moveq	r1, #0
 8003a74:	4801      	ldr	r0, [pc, #4]	; (8003a7c <SSD1306_Fill+0x14>)
 8003a76:	f000 bd8e 	b.w	8004596 <memset>
 8003a7a:	bf00      	nop
 8003a7c:	2000014e 	.word	0x2000014e

08003a80 <SSD1306_DrawPixel>:
}

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
	if (
 8003a80:	287f      	cmp	r0, #127	; 0x7f
void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8003a82:	b510      	push	{r4, lr}
	if (
 8003a84:	d81a      	bhi.n	8003abc <SSD1306_DrawPixel+0x3c>
		x >= SSD1306_WIDTH ||
 8003a86:	293f      	cmp	r1, #63	; 0x3f
 8003a88:	d818      	bhi.n	8003abc <SSD1306_DrawPixel+0x3c>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8003a8a:	4b0d      	ldr	r3, [pc, #52]	; (8003ac0 <SSD1306_DrawPixel+0x40>)
 8003a8c:	791b      	ldrb	r3, [r3, #4]
 8003a8e:	b113      	cbz	r3, 8003a96 <SSD1306_DrawPixel+0x16>
		color = (SSD1306_COLOR_t)!color;
 8003a90:	fab2 f282 	clz	r2, r2
 8003a94:	0952      	lsrs	r2, r2, #5
 8003a96:	08cc      	lsrs	r4, r1, #3
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8003a98:	2a01      	cmp	r2, #1
 8003a9a:	4b0a      	ldr	r3, [pc, #40]	; (8003ac4 <SSD1306_DrawPixel+0x44>)
 8003a9c:	f001 0107 	and.w	r1, r1, #7
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8003aa0:	eb00 10c4 	add.w	r0, r0, r4, lsl #7
	if (color == SSD1306_COLOR_WHITE) {
 8003aa4:	d104      	bne.n	8003ab0 <SSD1306_DrawPixel+0x30>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8003aa6:	408a      	lsls	r2, r1
 8003aa8:	5c19      	ldrb	r1, [r3, r0]
 8003aaa:	430a      	orrs	r2, r1
 8003aac:	541a      	strb	r2, [r3, r0]
 8003aae:	bd10      	pop	{r4, pc}
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	408a      	lsls	r2, r1
 8003ab4:	5c19      	ldrb	r1, [r3, r0]
 8003ab6:	ea21 0102 	bic.w	r1, r1, r2
 8003aba:	5419      	strb	r1, [r3, r0]
 8003abc:	bd10      	pop	{r4, pc}
 8003abe:	bf00      	nop
 8003ac0:	20000148 	.word	0x20000148
 8003ac4:	2000014e 	.word	0x2000014e

08003ac8 <SSD1306_DrawBitmap>:
{
 8003ac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003acc:	b087      	sub	sp, #28
 8003ace:	4698      	mov	r8, r3
 8003ad0:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
    for(int16_t j=0; j<h; j++, y++)
 8003ad4:	2500      	movs	r5, #0
{
 8003ad6:	9302      	str	r3, [sp, #8]
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8003ad8:	2308      	movs	r3, #8
{
 8003ada:	4693      	mov	fp, r2
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8003adc:	f108 0207 	add.w	r2, r8, #7
 8003ae0:	fb92 f2f3 	sdiv	r2, r2, r3
{
 8003ae4:	4682      	mov	sl, r0
 8003ae6:	4689      	mov	r9, r1
    for(int16_t j=0; j<h; j++, y++)
 8003ae8:	462e      	mov	r6, r5
    uint8_t byte = 0;
 8003aea:	462c      	mov	r4, r5
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8003aec:	9201      	str	r2, [sp, #4]
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
 8003aee:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 8003af2:	9204      	str	r2, [sp, #16]
    for(int16_t j=0; j<h; j++, y++)
 8003af4:	9902      	ldr	r1, [sp, #8]
 8003af6:	b232      	sxth	r2, r6
 8003af8:	4291      	cmp	r1, r2
 8003afa:	dd22      	ble.n	8003b42 <SSD1306_DrawBitmap+0x7a>
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
 8003afc:	eb06 0209 	add.w	r2, r6, r9
 8003b00:	b292      	uxth	r2, r2
    for(int16_t j=0; j<h; j++, y++)
 8003b02:	2700      	movs	r7, #0
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
 8003b04:	9203      	str	r2, [sp, #12]
 8003b06:	e015      	b.n	8003b34 <SSD1306_DrawBitmap+0x6c>
            if(i & 7)
 8003b08:	b2b8      	uxth	r0, r7
 8003b0a:	0741      	lsls	r1, r0, #29
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8003b0c:	bf05      	ittet	eq
 8003b0e:	fb92 f2f3 	sdiveq	r2, r2, r3
 8003b12:	eb0b 0105 	addeq.w	r1, fp, r5
               byte <<= 1;
 8003b16:	0064      	lslne	r4, r4, #1
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8003b18:	5c8c      	ldrbeq	r4, [r1, r2]
               byte <<= 1;
 8003b1a:	bf18      	it	ne
 8003b1c:	b2e4      	uxtbne	r4, r4
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
 8003b1e:	0622      	lsls	r2, r4, #24
 8003b20:	d507      	bpl.n	8003b32 <SSD1306_DrawBitmap+0x6a>
 8003b22:	4450      	add	r0, sl
 8003b24:	9a04      	ldr	r2, [sp, #16]
 8003b26:	9903      	ldr	r1, [sp, #12]
 8003b28:	b280      	uxth	r0, r0
 8003b2a:	9305      	str	r3, [sp, #20]
 8003b2c:	f7ff ffa8 	bl	8003a80 <SSD1306_DrawPixel>
 8003b30:	9b05      	ldr	r3, [sp, #20]
 8003b32:	3701      	adds	r7, #1
 8003b34:	b23a      	sxth	r2, r7
        for(int16_t i=0; i<w; i++)
 8003b36:	4542      	cmp	r2, r8
 8003b38:	dbe6      	blt.n	8003b08 <SSD1306_DrawBitmap+0x40>
 8003b3a:	9a01      	ldr	r2, [sp, #4]
 8003b3c:	3601      	adds	r6, #1
 8003b3e:	4415      	add	r5, r2
 8003b40:	e7d8      	b.n	8003af4 <SSD1306_DrawBitmap+0x2c>
}
 8003b42:	b007      	add	sp, #28
 8003b44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08003b48 <SSD1306_GotoXY>:
	}
}

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8003b48:	4b01      	ldr	r3, [pc, #4]	; (8003b50 <SSD1306_GotoXY+0x8>)
 8003b4a:	8018      	strh	r0, [r3, #0]
	SSD1306.CurrentY = y;
 8003b4c:	8059      	strh	r1, [r3, #2]
 8003b4e:	4770      	bx	lr
 8003b50:	20000148 	.word	0x20000148

08003b54 <SSD1306_Putc>:
}

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8003b54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8003b58:	4d23      	ldr	r5, [pc, #140]	; (8003be8 <SSD1306_Putc+0x94>)
char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8003b5a:	4693      	mov	fp, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8003b5c:	882e      	ldrh	r6, [r5, #0]
 8003b5e:	780a      	ldrb	r2, [r1, #0]
char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8003b60:	b085      	sub	sp, #20
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8003b62:	4432      	add	r2, r6
	if (
 8003b64:	2a7f      	cmp	r2, #127	; 0x7f
char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8003b66:	4682      	mov	sl, r0
 8003b68:	460c      	mov	r4, r1
	if (
 8003b6a:	dc39      	bgt.n	8003be0 <SSD1306_Putc+0x8c>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8003b6c:	886b      	ldrh	r3, [r5, #2]
 8003b6e:	784a      	ldrb	r2, [r1, #1]
 8003b70:	9301      	str	r3, [sp, #4]
 8003b72:	441a      	add	r2, r3
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8003b74:	2a3f      	cmp	r2, #63	; 0x3f
 8003b76:	dc33      	bgt.n	8003be0 <SSD1306_Putc+0x8c>
 8003b78:	2700      	movs	r7, #0
		return 0;
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8003b7a:	f1a0 0320 	sub.w	r3, r0, #32
 8003b7e:	9303      	str	r3, [sp, #12]
	for (i = 0; i < Font->FontHeight; i++) {
 8003b80:	7862      	ldrb	r2, [r4, #1]
 8003b82:	4297      	cmp	r7, r2
 8003b84:	d306      	bcc.n	8003b94 <SSD1306_Putc+0x40>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8003b86:	7822      	ldrb	r2, [r4, #0]
 8003b88:	4416      	add	r6, r2
 8003b8a:	802e      	strh	r6, [r5, #0]
	
	/* Return character written */
	return ch;
}
 8003b8c:	4650      	mov	r0, sl
 8003b8e:	b005      	add	sp, #20
 8003b90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		for (j = 0; j < Font->FontWidth; j++) {
 8003b94:	f04f 0800 	mov.w	r8, #0
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8003b98:	9b03      	ldr	r3, [sp, #12]
 8003b9a:	6861      	ldr	r1, [r4, #4]
 8003b9c:	fb02 7203 	mla	r2, r2, r3, r7
 8003ba0:	f831 3012 	ldrh.w	r3, [r1, r2, lsl #1]
 8003ba4:	9302      	str	r3, [sp, #8]
 8003ba6:	9b01      	ldr	r3, [sp, #4]
 8003ba8:	eb03 0907 	add.w	r9, r3, r7
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8003bac:	fa1f f989 	uxth.w	r9, r9
		for (j = 0; j < Font->FontWidth; j++) {
 8003bb0:	7822      	ldrb	r2, [r4, #0]
 8003bb2:	4590      	cmp	r8, r2
 8003bb4:	d301      	bcc.n	8003bba <SSD1306_Putc+0x66>
	for (i = 0; i < Font->FontHeight; i++) {
 8003bb6:	3701      	adds	r7, #1
 8003bb8:	e7e2      	b.n	8003b80 <SSD1306_Putc+0x2c>
			if ((b << j) & 0x8000) {
 8003bba:	9b02      	ldr	r3, [sp, #8]
 8003bbc:	eb06 0008 	add.w	r0, r6, r8
 8003bc0:	fa03 f208 	lsl.w	r2, r3, r8
 8003bc4:	f412 4f00 	tst.w	r2, #32768	; 0x8000
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8003bc8:	bf0a      	itet	eq
 8003bca:	fabb f28b 	clzeq	r2, fp
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8003bce:	465a      	movne	r2, fp
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8003bd0:	0952      	lsreq	r2, r2, #5
 8003bd2:	4649      	mov	r1, r9
 8003bd4:	b280      	uxth	r0, r0
 8003bd6:	f7ff ff53 	bl	8003a80 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8003bda:	f108 0801 	add.w	r8, r8, #1
 8003bde:	e7e7      	b.n	8003bb0 <SSD1306_Putc+0x5c>
		return 0;
 8003be0:	f04f 0a00 	mov.w	sl, #0
 8003be4:	e7d2      	b.n	8003b8c <SSD1306_Putc+0x38>
 8003be6:	bf00      	nop
 8003be8:	20000148 	.word	0x20000148

08003bec <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8003bec:	b570      	push	{r4, r5, r6, lr}
 8003bee:	460d      	mov	r5, r1
 8003bf0:	4616      	mov	r6, r2
 8003bf2:	1e44      	subs	r4, r0, #1
	/* Write characters */
	while (*str) {
 8003bf4:	7863      	ldrb	r3, [r4, #1]
 8003bf6:	b143      	cbz	r3, 8003c0a <SSD1306_Puts+0x1e>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	4632      	mov	r2, r6
 8003bfc:	4629      	mov	r1, r5
 8003bfe:	f7ff ffa9 	bl	8003b54 <SSD1306_Putc>
 8003c02:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8003c06:	4298      	cmp	r0, r3
 8003c08:	d0f4      	beq.n	8003bf4 <SSD1306_Puts+0x8>
		str++;
	}
	
	/* Everything OK, zero should be returned */
	return *str;
}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	bd70      	pop	{r4, r5, r6, pc}

08003c0e <SSD1306_DrawLine>:
 

void SSD1306_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, SSD1306_COLOR_t c) {
 8003c0e:	287f      	cmp	r0, #127	; 0x7f
 8003c10:	bf28      	it	cs
 8003c12:	207f      	movcs	r0, #127	; 0x7f
 8003c14:	2a7f      	cmp	r2, #127	; 0x7f
 8003c16:	bf28      	it	cs
 8003c18:	227f      	movcs	r2, #127	; 0x7f
 8003c1a:	293f      	cmp	r1, #63	; 0x3f
 8003c1c:	bf28      	it	cs
 8003c1e:	213f      	movcs	r1, #63	; 0x3f
 8003c20:	2b3f      	cmp	r3, #63	; 0x3f
 8003c22:	bf28      	it	cs
 8003c24:	233f      	movcs	r3, #63	; 0x3f
 8003c26:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c2a:	b085      	sub	sp, #20
 8003c2c:	f89d 4038 	ldrb.w	r4, [sp, #56]	; 0x38
	}
	if (y1 >= SSD1306_HEIGHT) {
		y1 = SSD1306_HEIGHT - 1;
	}
	
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 8003c30:	4290      	cmp	r0, r2
void SSD1306_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, SSD1306_COLOR_t c) {
 8003c32:	9401      	str	r4, [sp, #4]
 8003c34:	4691      	mov	r9, r2
 8003c36:	4604      	mov	r4, r0
 8003c38:	460d      	mov	r5, r1
 8003c3a:	461e      	mov	r6, r3
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 8003c3c:	d211      	bcs.n	8003c62 <SSD1306_DrawLine+0x54>
 8003c3e:	eba2 0a00 	sub.w	sl, r2, r0
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 8003c42:	428b      	cmp	r3, r1
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 8003c44:	fa0f fa8a 	sxth.w	sl, sl
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 8003c48:	d871      	bhi.n	8003d2e <SSD1306_DrawLine+0x120>
	sx = (x0 < x1) ? 1 : -1; 
 8003c4a:	454c      	cmp	r4, r9
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 8003c4c:	eba5 0706 	sub.w	r7, r5, r6
 8003c50:	b23f      	sxth	r7, r7
	sx = (x0 < x1) ? 1 : -1; 
 8003c52:	bf2c      	ite	cs
 8003c54:	f04f 3bff 	movcs.w	fp, #4294967295
 8003c58:	f04f 0b01 	movcc.w	fp, #1
	sy = (y0 < y1) ? 1 : -1; 
 8003c5c:	f04f 33ff 	mov.w	r3, #4294967295
 8003c60:	e00a      	b.n	8003c78 <SSD1306_DrawLine+0x6a>
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 8003c62:	eba0 0a02 	sub.w	sl, r0, r2
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 8003c66:	428b      	cmp	r3, r1
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 8003c68:	fa0f fa8a 	sxth.w	sl, sl
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 8003c6c:	d9ed      	bls.n	8003c4a <SSD1306_DrawLine+0x3c>
	sx = (x0 < x1) ? 1 : -1; 
 8003c6e:	f04f 3bff 	mov.w	fp, #4294967295
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 8003c72:	1a5f      	subs	r7, r3, r1
 8003c74:	b23f      	sxth	r7, r7
	sy = (y0 < y1) ? 1 : -1; 
 8003c76:	2301      	movs	r3, #1
 8003c78:	f04f 0802 	mov.w	r8, #2
	err = ((dx > dy) ? dx : -dy) / 2; 
 8003c7c:	4557      	cmp	r7, sl
 8003c7e:	bfa5      	ittet	ge
 8003c80:	fb97 f8f8 	sdivge	r8, r7, r8
 8003c84:	f1c8 0800 	rsbge	r8, r8, #0
 8003c88:	fb9a f8f8 	sdivlt	r8, sl, r8
 8003c8c:	fa0f f888 	sxthge.w	r8, r8

	if (dx == 0) {
 8003c90:	f1ba 0f00 	cmp.w	sl, #0
 8003c94:	d116      	bne.n	8003cc4 <SSD1306_DrawLine+0xb6>
		if (y1 < y0) {
 8003c96:	42ae      	cmp	r6, r5
 8003c98:	bf3e      	ittt	cc
 8003c9a:	462b      	movcc	r3, r5
 8003c9c:	4635      	movcc	r5, r6
 8003c9e:	461e      	movcc	r6, r3
 8003ca0:	454c      	cmp	r4, r9
 8003ca2:	bf28      	it	cs
 8003ca4:	464c      	movcs	r4, r9
 8003ca6:	b2a4      	uxth	r4, r4
			x1 = x0;
			x0 = tmp;
		}
		
		/* Vertical line */
		for (i = y0; i <= y1; i++) {
 8003ca8:	b22d      	sxth	r5, r5
 8003caa:	42b5      	cmp	r5, r6
 8003cac:	dd02      	ble.n	8003cb4 <SSD1306_DrawLine+0xa6>
		if (e2 < dy) {
			err += dx;
			y0 += sy;
		} 
	}
}
 8003cae:	b005      	add	sp, #20
 8003cb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			SSD1306_DrawPixel(x0, i, c);
 8003cb4:	b2ad      	uxth	r5, r5
 8003cb6:	4629      	mov	r1, r5
 8003cb8:	9a01      	ldr	r2, [sp, #4]
 8003cba:	4620      	mov	r0, r4
 8003cbc:	f7ff fee0 	bl	8003a80 <SSD1306_DrawPixel>
		for (i = y0; i <= y1; i++) {
 8003cc0:	3501      	adds	r5, #1
 8003cc2:	e7f1      	b.n	8003ca8 <SSD1306_DrawLine+0x9a>
	if (dy == 0) {
 8003cc4:	b1ff      	cbz	r7, 8003d06 <SSD1306_DrawLine+0xf8>
		if (e2 > -dx) {
 8003cc6:	f1ca 0200 	rsb	r2, sl, #0
 8003cca:	9202      	str	r2, [sp, #8]
		SSD1306_DrawPixel(x0, y0, c);
 8003ccc:	9a01      	ldr	r2, [sp, #4]
 8003cce:	4629      	mov	r1, r5
 8003cd0:	4620      	mov	r0, r4
 8003cd2:	9303      	str	r3, [sp, #12]
 8003cd4:	f7ff fed4 	bl	8003a80 <SSD1306_DrawPixel>
		if (x0 == x1 && y0 == y1) {
 8003cd8:	454c      	cmp	r4, r9
 8003cda:	9b03      	ldr	r3, [sp, #12]
 8003cdc:	d101      	bne.n	8003ce2 <SSD1306_DrawLine+0xd4>
 8003cde:	42b5      	cmp	r5, r6
 8003ce0:	d0e5      	beq.n	8003cae <SSD1306_DrawLine+0xa0>
		if (e2 > -dx) {
 8003ce2:	9a02      	ldr	r2, [sp, #8]
 8003ce4:	4590      	cmp	r8, r2
			err -= dy;
 8003ce6:	bfc1      	itttt	gt
 8003ce8:	eba8 0207 	subgt.w	r2, r8, r7
			x0 += sx;
 8003cec:	445c      	addgt	r4, fp
			err -= dy;
 8003cee:	b212      	sxthgt	r2, r2
			x0 += sx;
 8003cf0:	b2a4      	uxthgt	r4, r4
 8003cf2:	bfd8      	it	le
 8003cf4:	4642      	movle	r2, r8
		if (e2 < dy) {
 8003cf6:	45b8      	cmp	r8, r7
 8003cf8:	da03      	bge.n	8003d02 <SSD1306_DrawLine+0xf4>
			err += dx;
 8003cfa:	4452      	add	r2, sl
			y0 += sy;
 8003cfc:	441d      	add	r5, r3
			err += dx;
 8003cfe:	b212      	sxth	r2, r2
			y0 += sy;
 8003d00:	b2ad      	uxth	r5, r5
		if (x1 < x0) {
 8003d02:	4690      	mov	r8, r2
 8003d04:	e7e2      	b.n	8003ccc <SSD1306_DrawLine+0xbe>
 8003d06:	42b5      	cmp	r5, r6
 8003d08:	bf28      	it	cs
 8003d0a:	4635      	movcs	r5, r6
 8003d0c:	454c      	cmp	r4, r9
 8003d0e:	b2ad      	uxth	r5, r5
 8003d10:	d902      	bls.n	8003d18 <SSD1306_DrawLine+0x10a>
 8003d12:	4623      	mov	r3, r4
 8003d14:	464c      	mov	r4, r9
 8003d16:	4699      	mov	r9, r3
		for (i = x0; i <= x1; i++) {
 8003d18:	b224      	sxth	r4, r4
 8003d1a:	454c      	cmp	r4, r9
 8003d1c:	dcc7      	bgt.n	8003cae <SSD1306_DrawLine+0xa0>
			SSD1306_DrawPixel(i, y0, c);
 8003d1e:	b2a4      	uxth	r4, r4
 8003d20:	4620      	mov	r0, r4
 8003d22:	9a01      	ldr	r2, [sp, #4]
 8003d24:	4629      	mov	r1, r5
 8003d26:	f7ff feab 	bl	8003a80 <SSD1306_DrawPixel>
		for (i = x0; i <= x1; i++) {
 8003d2a:	3401      	adds	r4, #1
 8003d2c:	e7f4      	b.n	8003d18 <SSD1306_DrawLine+0x10a>
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 8003d2e:	1a5f      	subs	r7, r3, r1
 8003d30:	b23f      	sxth	r7, r7
	sx = (x0 < x1) ? 1 : -1; 
 8003d32:	f04f 0b01 	mov.w	fp, #1
 8003d36:	e79e      	b.n	8003c76 <SSD1306_DrawLine+0x68>

08003d38 <SSD1306_DrawRectangle>:

void SSD1306_DrawRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, SSD1306_COLOR_t c) {
 8003d38:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	/* Check input parameters */
	if (
 8003d3c:	287f      	cmp	r0, #127	; 0x7f
void SSD1306_DrawRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, SSD1306_COLOR_t c) {
 8003d3e:	4607      	mov	r7, r0
 8003d40:	460e      	mov	r6, r1
 8003d42:	461d      	mov	r5, r3
 8003d44:	f89d 8020 	ldrb.w	r8, [sp, #32]
	if (
 8003d48:	d834      	bhi.n	8003db4 <SSD1306_DrawRectangle+0x7c>
		x >= SSD1306_WIDTH ||
 8003d4a:	293f      	cmp	r1, #63	; 0x3f
 8003d4c:	d832      	bhi.n	8003db4 <SSD1306_DrawRectangle+0x7c>
		/* Return error */
		return;
	}
	
	/* Check width and height */
	if ((x + w) >= SSD1306_WIDTH) {
 8003d4e:	1883      	adds	r3, r0, r2
 8003d50:	2b7f      	cmp	r3, #127	; 0x7f
		w = SSD1306_WIDTH - x;
 8003d52:	bfc8      	it	gt
 8003d54:	f1c0 0280 	rsbgt	r2, r0, #128	; 0x80
	}
	if ((y + h) >= SSD1306_HEIGHT) {
 8003d58:	eb01 0305 	add.w	r3, r1, r5
		w = SSD1306_WIDTH - x;
 8003d5c:	bfc8      	it	gt
 8003d5e:	b292      	uxthgt	r2, r2
	if ((y + h) >= SSD1306_HEIGHT) {
 8003d60:	2b3f      	cmp	r3, #63	; 0x3f
		h = SSD1306_HEIGHT - y;
 8003d62:	bfc4      	itt	gt
 8003d64:	f1c1 0540 	rsbgt	r5, r1, #64	; 0x40
 8003d68:	b2ad      	uxthgt	r5, r5
	}
	
	/* Draw 4 lines */
	SSD1306_DrawLine(x, y, x + w, y, c);         /* Top line */
 8003d6a:	4402      	add	r2, r0
 8003d6c:	b294      	uxth	r4, r2
	SSD1306_DrawLine(x, y + h, x + w, y + h, c); /* Bottom line */
 8003d6e:	4435      	add	r5, r6
 8003d70:	b2ad      	uxth	r5, r5
	SSD1306_DrawLine(x, y, x + w, y, c);         /* Top line */
 8003d72:	460b      	mov	r3, r1
 8003d74:	4622      	mov	r2, r4
 8003d76:	f8cd 8000 	str.w	r8, [sp]
 8003d7a:	f7ff ff48 	bl	8003c0e <SSD1306_DrawLine>
	SSD1306_DrawLine(x, y + h, x + w, y + h, c); /* Bottom line */
 8003d7e:	462b      	mov	r3, r5
 8003d80:	4622      	mov	r2, r4
 8003d82:	4629      	mov	r1, r5
 8003d84:	4638      	mov	r0, r7
 8003d86:	f8cd 8000 	str.w	r8, [sp]
 8003d8a:	f7ff ff40 	bl	8003c0e <SSD1306_DrawLine>
	SSD1306_DrawLine(x, y, x, y + h, c);         /* Left line */
 8003d8e:	462b      	mov	r3, r5
 8003d90:	463a      	mov	r2, r7
 8003d92:	4631      	mov	r1, r6
 8003d94:	4638      	mov	r0, r7
 8003d96:	f8cd 8000 	str.w	r8, [sp]
 8003d9a:	f7ff ff38 	bl	8003c0e <SSD1306_DrawLine>
	SSD1306_DrawLine(x + w, y, x + w, y + h, c); /* Right line */
 8003d9e:	462b      	mov	r3, r5
 8003da0:	4622      	mov	r2, r4
 8003da2:	4631      	mov	r1, r6
 8003da4:	4620      	mov	r0, r4
 8003da6:	f8cd 8020 	str.w	r8, [sp, #32]
}
 8003daa:	b002      	add	sp, #8
 8003dac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	SSD1306_DrawLine(x + w, y, x + w, y + h, c); /* Right line */
 8003db0:	f7ff bf2d 	b.w	8003c0e <SSD1306_DrawLine>
}
 8003db4:	b002      	add	sp, #8
 8003db6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003dba <SSD1306_DrawFilledRectangle>:

void SSD1306_DrawFilledRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, SSD1306_COLOR_t c) {
 8003dba:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	uint8_t i;
	
	/* Check input parameters */
	if (
 8003dbe:	287f      	cmp	r0, #127	; 0x7f
void SSD1306_DrawFilledRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, SSD1306_COLOR_t c) {
 8003dc0:	4606      	mov	r6, r0
 8003dc2:	460f      	mov	r7, r1
 8003dc4:	461d      	mov	r5, r3
 8003dc6:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
	if (
 8003dca:	d81a      	bhi.n	8003e02 <SSD1306_DrawFilledRectangle+0x48>
		x >= SSD1306_WIDTH ||
 8003dcc:	293f      	cmp	r1, #63	; 0x3f
 8003dce:	d818      	bhi.n	8003e02 <SSD1306_DrawFilledRectangle+0x48>
	if ((y + h) >= SSD1306_HEIGHT) {
		h = SSD1306_HEIGHT - y;
	}
	
	/* Draw lines */
	for (i = 0; i <= h; i++) {
 8003dd0:	f04f 0900 	mov.w	r9, #0
	if ((x + w) >= SSD1306_WIDTH) {
 8003dd4:	1883      	adds	r3, r0, r2
 8003dd6:	2b7f      	cmp	r3, #127	; 0x7f
		w = SSD1306_WIDTH - x;
 8003dd8:	bfc8      	it	gt
 8003dda:	f1c0 0280 	rsbgt	r2, r0, #128	; 0x80
	if ((y + h) >= SSD1306_HEIGHT) {
 8003dde:	eb01 0305 	add.w	r3, r1, r5
		w = SSD1306_WIDTH - x;
 8003de2:	bfc8      	it	gt
 8003de4:	b292      	uxthgt	r2, r2
	if ((y + h) >= SSD1306_HEIGHT) {
 8003de6:	2b3f      	cmp	r3, #63	; 0x3f
		h = SSD1306_HEIGHT - y;
 8003de8:	bfc8      	it	gt
 8003dea:	f1c1 0540 	rsbgt	r5, r1, #64	; 0x40
		/* Draw lines */
		SSD1306_DrawLine(x, y + i, x + w, y + i, c);
 8003dee:	4402      	add	r2, r0
		h = SSD1306_HEIGHT - y;
 8003df0:	bfc8      	it	gt
 8003df2:	b2ad      	uxthgt	r5, r5
		SSD1306_DrawLine(x, y + i, x + w, y + i, c);
 8003df4:	b294      	uxth	r4, r2
	for (i = 0; i <= h; i++) {
 8003df6:	fa5f f389 	uxtb.w	r3, r9
 8003dfa:	429d      	cmp	r5, r3
 8003dfc:	f109 0901 	add.w	r9, r9, #1
 8003e00:	d202      	bcs.n	8003e08 <SSD1306_DrawFilledRectangle+0x4e>
	}
}
 8003e02:	b003      	add	sp, #12
 8003e04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		SSD1306_DrawLine(x, y + i, x + w, y + i, c);
 8003e08:	443b      	add	r3, r7
 8003e0a:	b29b      	uxth	r3, r3
 8003e0c:	f8cd 8000 	str.w	r8, [sp]
 8003e10:	4622      	mov	r2, r4
 8003e12:	4619      	mov	r1, r3
 8003e14:	4630      	mov	r0, r6
 8003e16:	f7ff fefa 	bl	8003c0e <SSD1306_DrawLine>
 8003e1a:	e7ec      	b.n	8003df6 <SSD1306_DrawFilledRectangle+0x3c>

08003e1c <ssd1306_I2C_WriteMulti>:
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8003e1c:	b530      	push	{r4, r5, lr}
 8003e1e:	b0c3      	sub	sp, #268	; 0x10c
uint8_t dt[256];
dt[0] = reg;
 8003e20:	f88d 1008 	strb.w	r1, [sp, #8]
uint8_t i;
for(i = 0; i < count; i++)
 8003e24:	2100      	movs	r1, #0
 8003e26:	1c4c      	adds	r4, r1, #1
 8003e28:	b2c9      	uxtb	r1, r1
 8003e2a:	4299      	cmp	r1, r3
 8003e2c:	d30a      	bcc.n	8003e44 <ssd1306_I2C_WriteMulti+0x28>
dt[i+1] = data[i];
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8003e2e:	220a      	movs	r2, #10
 8003e30:	3301      	adds	r3, #1
 8003e32:	9200      	str	r2, [sp, #0]
 8003e34:	4601      	mov	r1, r0
 8003e36:	b29b      	uxth	r3, r3
 8003e38:	aa02      	add	r2, sp, #8
 8003e3a:	4805      	ldr	r0, [pc, #20]	; (8003e50 <ssd1306_I2C_WriteMulti+0x34>)
 8003e3c:	f7fd f8f0 	bl	8001020 <HAL_I2C_Master_Transmit>
}
 8003e40:	b043      	add	sp, #268	; 0x10c
 8003e42:	bd30      	pop	{r4, r5, pc}
dt[i+1] = data[i];
 8003e44:	ad02      	add	r5, sp, #8
 8003e46:	440d      	add	r5, r1
 8003e48:	5c51      	ldrb	r1, [r2, r1]
 8003e4a:	7069      	strb	r1, [r5, #1]
 8003e4c:	4621      	mov	r1, r4
 8003e4e:	e7ea      	b.n	8003e26 <ssd1306_I2C_WriteMulti+0xa>
 8003e50:	200005bc 	.word	0x200005bc

08003e54 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8003e54:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t dt[2];
	dt[0] = reg;
	dt[1] = data;
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8003e56:	230a      	movs	r3, #10
	dt[0] = reg;
 8003e58:	f88d 100c 	strb.w	r1, [sp, #12]
	dt[1] = data;
 8003e5c:	f88d 200d 	strb.w	r2, [sp, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8003e60:	9300      	str	r3, [sp, #0]
 8003e62:	4601      	mov	r1, r0
 8003e64:	2302      	movs	r3, #2
 8003e66:	aa03      	add	r2, sp, #12
 8003e68:	4802      	ldr	r0, [pc, #8]	; (8003e74 <ssd1306_I2C_Write+0x20>)
 8003e6a:	f7fd f8d9 	bl	8001020 <HAL_I2C_Master_Transmit>
}
 8003e6e:	b005      	add	sp, #20
 8003e70:	f85d fb04 	ldr.w	pc, [sp], #4
 8003e74:	200005bc 	.word	0x200005bc

08003e78 <SSD1306_UpdateScreen>:
void SSD1306_UpdateScreen(void) {
 8003e78:	b538      	push	{r3, r4, r5, lr}
 8003e7a:	2400      	movs	r4, #0
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8003e7c:	4d0e      	ldr	r5, [pc, #56]	; (8003eb8 <SSD1306_UpdateScreen+0x40>)
		SSD1306_WRITECOMMAND(0xB0 + m);
 8003e7e:	f1a4 0250 	sub.w	r2, r4, #80	; 0x50
 8003e82:	b2d2      	uxtb	r2, r2
 8003e84:	2100      	movs	r1, #0
 8003e86:	2078      	movs	r0, #120	; 0x78
 8003e88:	f7ff ffe4 	bl	8003e54 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	2078      	movs	r0, #120	; 0x78
 8003e90:	4611      	mov	r1, r2
 8003e92:	f7ff ffdf 	bl	8003e54 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8003e96:	2210      	movs	r2, #16
 8003e98:	2100      	movs	r1, #0
 8003e9a:	2078      	movs	r0, #120	; 0x78
 8003e9c:	f7ff ffda 	bl	8003e54 <ssd1306_I2C_Write>
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8003ea0:	eb05 12c4 	add.w	r2, r5, r4, lsl #7
 8003ea4:	2380      	movs	r3, #128	; 0x80
 8003ea6:	2140      	movs	r1, #64	; 0x40
 8003ea8:	2078      	movs	r0, #120	; 0x78
 8003eaa:	3401      	adds	r4, #1
 8003eac:	f7ff ffb6 	bl	8003e1c <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8003eb0:	2c08      	cmp	r4, #8
 8003eb2:	d1e4      	bne.n	8003e7e <SSD1306_UpdateScreen+0x6>
}
 8003eb4:	bd38      	pop	{r3, r4, r5, pc}
 8003eb6:	bf00      	nop
 8003eb8:	2000014e 	.word	0x2000014e

08003ebc <SSD1306_Clear>:
{
 8003ebc:	b508      	push	{r3, lr}
	SSD1306_Fill (0);
 8003ebe:	2000      	movs	r0, #0
 8003ec0:	f7ff fdd2 	bl	8003a68 <SSD1306_Fill>
}
 8003ec4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    SSD1306_UpdateScreen();
 8003ec8:	f7ff bfd6 	b.w	8003e78 <SSD1306_UpdateScreen>

08003ecc <SSD1306_Init>:
uint8_t SSD1306_Init(void) {
 8003ecc:	b510      	push	{r4, lr}
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8003ece:	f644 6320 	movw	r3, #20000	; 0x4e20
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	2178      	movs	r1, #120	; 0x78
 8003ed6:	4852      	ldr	r0, [pc, #328]	; (8004020 <SSD1306_Init+0x154>)
 8003ed8:	f7fd fae8 	bl	80014ac <HAL_I2C_IsDeviceReady>
 8003edc:	4604      	mov	r4, r0
 8003ede:	2800      	cmp	r0, #0
 8003ee0:	f040 809c 	bne.w	800401c <SSD1306_Init+0x150>
	SSD1306_WRITECOMMAND(0xAE); //display off
 8003ee4:	4601      	mov	r1, r0
 8003ee6:	22ae      	movs	r2, #174	; 0xae
 8003ee8:	2078      	movs	r0, #120	; 0x78
 8003eea:	f7ff ffb3 	bl	8003e54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8003eee:	4621      	mov	r1, r4
 8003ef0:	2220      	movs	r2, #32
 8003ef2:	2078      	movs	r0, #120	; 0x78
 8003ef4:	f7ff ffae 	bl	8003e54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8003ef8:	4621      	mov	r1, r4
 8003efa:	2210      	movs	r2, #16
 8003efc:	2078      	movs	r0, #120	; 0x78
 8003efe:	f7ff ffa9 	bl	8003e54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8003f02:	4621      	mov	r1, r4
 8003f04:	22b0      	movs	r2, #176	; 0xb0
 8003f06:	2078      	movs	r0, #120	; 0x78
 8003f08:	f7ff ffa4 	bl	8003e54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8003f0c:	4621      	mov	r1, r4
 8003f0e:	22c8      	movs	r2, #200	; 0xc8
 8003f10:	2078      	movs	r0, #120	; 0x78
 8003f12:	f7ff ff9f 	bl	8003e54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8003f16:	4622      	mov	r2, r4
 8003f18:	4621      	mov	r1, r4
 8003f1a:	2078      	movs	r0, #120	; 0x78
 8003f1c:	f7ff ff9a 	bl	8003e54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8003f20:	4621      	mov	r1, r4
 8003f22:	2210      	movs	r2, #16
 8003f24:	2078      	movs	r0, #120	; 0x78
 8003f26:	f7ff ff95 	bl	8003e54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8003f2a:	4621      	mov	r1, r4
 8003f2c:	2240      	movs	r2, #64	; 0x40
 8003f2e:	2078      	movs	r0, #120	; 0x78
 8003f30:	f7ff ff90 	bl	8003e54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8003f34:	4621      	mov	r1, r4
 8003f36:	2281      	movs	r2, #129	; 0x81
 8003f38:	2078      	movs	r0, #120	; 0x78
 8003f3a:	f7ff ff8b 	bl	8003e54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8003f3e:	4621      	mov	r1, r4
 8003f40:	22ff      	movs	r2, #255	; 0xff
 8003f42:	2078      	movs	r0, #120	; 0x78
 8003f44:	f7ff ff86 	bl	8003e54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8003f48:	4621      	mov	r1, r4
 8003f4a:	22a1      	movs	r2, #161	; 0xa1
 8003f4c:	2078      	movs	r0, #120	; 0x78
 8003f4e:	f7ff ff81 	bl	8003e54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8003f52:	4621      	mov	r1, r4
 8003f54:	22a6      	movs	r2, #166	; 0xa6
 8003f56:	2078      	movs	r0, #120	; 0x78
 8003f58:	f7ff ff7c 	bl	8003e54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8003f5c:	4621      	mov	r1, r4
 8003f5e:	22a8      	movs	r2, #168	; 0xa8
 8003f60:	2078      	movs	r0, #120	; 0x78
 8003f62:	f7ff ff77 	bl	8003e54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8003f66:	4621      	mov	r1, r4
 8003f68:	223f      	movs	r2, #63	; 0x3f
 8003f6a:	2078      	movs	r0, #120	; 0x78
 8003f6c:	f7ff ff72 	bl	8003e54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8003f70:	4621      	mov	r1, r4
 8003f72:	22a4      	movs	r2, #164	; 0xa4
 8003f74:	2078      	movs	r0, #120	; 0x78
 8003f76:	f7ff ff6d 	bl	8003e54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8003f7a:	4621      	mov	r1, r4
 8003f7c:	22d3      	movs	r2, #211	; 0xd3
 8003f7e:	2078      	movs	r0, #120	; 0x78
 8003f80:	f7ff ff68 	bl	8003e54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8003f84:	4622      	mov	r2, r4
 8003f86:	4621      	mov	r1, r4
 8003f88:	2078      	movs	r0, #120	; 0x78
 8003f8a:	f7ff ff63 	bl	8003e54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8003f8e:	4621      	mov	r1, r4
 8003f90:	22d5      	movs	r2, #213	; 0xd5
 8003f92:	2078      	movs	r0, #120	; 0x78
 8003f94:	f7ff ff5e 	bl	8003e54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8003f98:	4621      	mov	r1, r4
 8003f9a:	22f0      	movs	r2, #240	; 0xf0
 8003f9c:	2078      	movs	r0, #120	; 0x78
 8003f9e:	f7ff ff59 	bl	8003e54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8003fa2:	4621      	mov	r1, r4
 8003fa4:	22d9      	movs	r2, #217	; 0xd9
 8003fa6:	2078      	movs	r0, #120	; 0x78
 8003fa8:	f7ff ff54 	bl	8003e54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8003fac:	4621      	mov	r1, r4
 8003fae:	2222      	movs	r2, #34	; 0x22
 8003fb0:	2078      	movs	r0, #120	; 0x78
 8003fb2:	f7ff ff4f 	bl	8003e54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8003fb6:	4621      	mov	r1, r4
 8003fb8:	22da      	movs	r2, #218	; 0xda
 8003fba:	2078      	movs	r0, #120	; 0x78
 8003fbc:	f7ff ff4a 	bl	8003e54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8003fc0:	4621      	mov	r1, r4
 8003fc2:	2212      	movs	r2, #18
 8003fc4:	2078      	movs	r0, #120	; 0x78
 8003fc6:	f7ff ff45 	bl	8003e54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8003fca:	4621      	mov	r1, r4
 8003fcc:	22db      	movs	r2, #219	; 0xdb
 8003fce:	2078      	movs	r0, #120	; 0x78
 8003fd0:	f7ff ff40 	bl	8003e54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8003fd4:	4621      	mov	r1, r4
 8003fd6:	2220      	movs	r2, #32
 8003fd8:	2078      	movs	r0, #120	; 0x78
 8003fda:	f7ff ff3b 	bl	8003e54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8003fde:	4621      	mov	r1, r4
 8003fe0:	228d      	movs	r2, #141	; 0x8d
 8003fe2:	2078      	movs	r0, #120	; 0x78
 8003fe4:	f7ff ff36 	bl	8003e54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8003fe8:	4621      	mov	r1, r4
 8003fea:	2214      	movs	r2, #20
 8003fec:	2078      	movs	r0, #120	; 0x78
 8003fee:	f7ff ff31 	bl	8003e54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8003ff2:	4621      	mov	r1, r4
 8003ff4:	22af      	movs	r2, #175	; 0xaf
 8003ff6:	2078      	movs	r0, #120	; 0x78
 8003ff8:	f7ff ff2c 	bl	8003e54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8003ffc:	222e      	movs	r2, #46	; 0x2e
 8003ffe:	4621      	mov	r1, r4
 8004000:	2078      	movs	r0, #120	; 0x78
 8004002:	f7ff ff27 	bl	8003e54 <ssd1306_I2C_Write>
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8004006:	4620      	mov	r0, r4
 8004008:	f7ff fd2e 	bl	8003a68 <SSD1306_Fill>
	SSD1306_UpdateScreen();
 800400c:	f7ff ff34 	bl	8003e78 <SSD1306_UpdateScreen>
	SSD1306.Initialized = 1;
 8004010:	2001      	movs	r0, #1
	SSD1306.CurrentX = 0;
 8004012:	4b04      	ldr	r3, [pc, #16]	; (8004024 <SSD1306_Init+0x158>)
	SSD1306.Initialized = 1;
 8004014:	7158      	strb	r0, [r3, #5]
	SSD1306.CurrentX = 0;
 8004016:	801c      	strh	r4, [r3, #0]
	SSD1306.CurrentY = 0;
 8004018:	805c      	strh	r4, [r3, #2]
	return 1;
 800401a:	bd10      	pop	{r4, pc}
		return 0;
 800401c:	2000      	movs	r0, #0
}
 800401e:	bd10      	pop	{r4, pc}
 8004020:	200005bc 	.word	0x200005bc
 8004024:	20000148 	.word	0x20000148

08004028 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8004028:	4b0e      	ldr	r3, [pc, #56]	; (8004064 <HAL_MspInit+0x3c>)
{
 800402a:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 800402c:	699a      	ldr	r2, [r3, #24]
 800402e:	f042 0201 	orr.w	r2, r2, #1
 8004032:	619a      	str	r2, [r3, #24]
 8004034:	699a      	ldr	r2, [r3, #24]
 8004036:	f002 0201 	and.w	r2, r2, #1
 800403a:	9200      	str	r2, [sp, #0]
 800403c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800403e:	69da      	ldr	r2, [r3, #28]
 8004040:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004044:	61da      	str	r2, [r3, #28]
 8004046:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8004048:	4a07      	ldr	r2, [pc, #28]	; (8004068 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800404a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800404e:	9301      	str	r3, [sp, #4]
 8004050:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8004052:	6853      	ldr	r3, [r2, #4]
 8004054:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8004058:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800405c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800405e:	b002      	add	sp, #8
 8004060:	4770      	bx	lr
 8004062:	bf00      	nop
 8004064:	40021000 	.word	0x40021000
 8004068:	40010000 	.word	0x40010000

0800406c <HAL_ADC_MspInit>:
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800406c:	2210      	movs	r2, #16
{
 800406e:	b530      	push	{r4, r5, lr}
 8004070:	4605      	mov	r5, r0
 8004072:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004074:	eb0d 0002 	add.w	r0, sp, r2
 8004078:	2100      	movs	r1, #0
 800407a:	f000 fa8c 	bl	8004596 <memset>
  if(hadc->Instance==ADC1)
 800407e:	682a      	ldr	r2, [r5, #0]
 8004080:	4b2c      	ldr	r3, [pc, #176]	; (8004134 <HAL_ADC_MspInit+0xc8>)
 8004082:	429a      	cmp	r2, r3
 8004084:	d154      	bne.n	8004130 <HAL_ADC_MspInit+0xc4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004086:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 800408a:	699a      	ldr	r2, [r3, #24]
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8 
    */
    GPIO_InitStruct.Pin = JOY1_X_Pin|JO1_Y_Pin|JOY2_X_Pin|JOY2_Y_Pin 
                          |SW3_Pin|SW4_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800408c:	2403      	movs	r4, #3
    __HAL_RCC_ADC1_CLK_ENABLE();
 800408e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004092:	619a      	str	r2, [r3, #24]
 8004094:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004096:	a904      	add	r1, sp, #16
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004098:	f402 7200 	and.w	r2, r2, #512	; 0x200
 800409c:	9200      	str	r2, [sp, #0]
 800409e:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80040a0:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80040a2:	4825      	ldr	r0, [pc, #148]	; (8004138 <HAL_ADC_MspInit+0xcc>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80040a4:	f042 0210 	orr.w	r2, r2, #16
 80040a8:	619a      	str	r2, [r3, #24]
 80040aa:	699a      	ldr	r2, [r3, #24]
 80040ac:	f002 0210 	and.w	r2, r2, #16
 80040b0:	9201      	str	r2, [sp, #4]
 80040b2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80040b4:	699a      	ldr	r2, [r3, #24]
 80040b6:	f042 0204 	orr.w	r2, r2, #4
 80040ba:	619a      	str	r2, [r3, #24]
 80040bc:	699a      	ldr	r2, [r3, #24]
 80040be:	f002 0204 	and.w	r2, r2, #4
 80040c2:	9202      	str	r2, [sp, #8]
 80040c4:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80040c6:	699a      	ldr	r2, [r3, #24]
 80040c8:	f042 0208 	orr.w	r2, r2, #8
 80040cc:	619a      	str	r2, [r3, #24]
 80040ce:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80040d0:	9405      	str	r4, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80040d2:	f003 0308 	and.w	r3, r3, #8
 80040d6:	9303      	str	r3, [sp, #12]
 80040d8:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = JOY1_X_Pin|JO1_Y_Pin|JOY2_X_Pin|JOY2_Y_Pin 
 80040da:	233f      	movs	r3, #63	; 0x3f
 80040dc:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80040de:	f7fc fcf9 	bl	8000ad4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = POT1_Pin|POT2_Pin|SW1_Pin|SW2_Pin;
 80040e2:	23e1      	movs	r3, #225	; 0xe1
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040e4:	a904      	add	r1, sp, #16
 80040e6:	4815      	ldr	r0, [pc, #84]	; (800413c <HAL_ADC_MspInit+0xd0>)
    GPIO_InitStruct.Pin = POT1_Pin|POT2_Pin|SW1_Pin|SW2_Pin;
 80040e8:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80040ea:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040ec:	f7fc fcf2 	bl	8000ad4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BAT_LEVEL_Pin;
 80040f0:	2301      	movs	r3, #1
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(BAT_LEVEL_GPIO_Port, &GPIO_InitStruct);
 80040f2:	4813      	ldr	r0, [pc, #76]	; (8004140 <HAL_ADC_MspInit+0xd4>)
 80040f4:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = BAT_LEVEL_Pin;
 80040f6:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80040f8:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(BAT_LEVEL_GPIO_Port, &GPIO_InitStruct);
 80040fa:	f7fc fceb 	bl	8000ad4 <HAL_GPIO_Init>
    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80040fe:	2280      	movs	r2, #128	; 0x80
    hdma_adc1.Instance = DMA1_Channel1;
 8004100:	4c10      	ldr	r4, [pc, #64]	; (8004144 <HAL_ADC_MspInit+0xd8>)
 8004102:	4b11      	ldr	r3, [pc, #68]	; (8004148 <HAL_ADC_MspInit+0xdc>)
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8004104:	60e2      	str	r2, [r4, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004106:	f44f 7280 	mov.w	r2, #256	; 0x100
 800410a:	6122      	str	r2, [r4, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800410c:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_adc1.Instance = DMA1_Channel1;
 8004110:	6023      	str	r3, [r4, #0]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004112:	6162      	str	r2, [r4, #20]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004114:	2300      	movs	r3, #0
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8004116:	2220      	movs	r2, #32
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004118:	4620      	mov	r0, r4
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800411a:	6063      	str	r3, [r4, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800411c:	60a3      	str	r3, [r4, #8]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800411e:	61a2      	str	r2, [r4, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8004120:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004122:	f7fc fb7d 	bl	8000820 <HAL_DMA_Init>
 8004126:	b108      	cbz	r0, 800412c <HAL_ADC_MspInit+0xc0>
    {
      Error_Handler();
 8004128:	f7fe fe4e 	bl	8002dc8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800412c:	622c      	str	r4, [r5, #32]
 800412e:	6265      	str	r5, [r4, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004130:	b009      	add	sp, #36	; 0x24
 8004132:	bd30      	pop	{r4, r5, pc}
 8004134:	40012400 	.word	0x40012400
 8004138:	40011000 	.word	0x40011000
 800413c:	40010800 	.word	0x40010800
 8004140:	40010c00 	.word	0x40010c00
 8004144:	20000694 	.word	0x20000694
 8004148:	40020008 	.word	0x40020008

0800414c <HAL_I2C_MspInit>:
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800414c:	2210      	movs	r2, #16
{
 800414e:	b510      	push	{r4, lr}
 8004150:	4604      	mov	r4, r0
 8004152:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004154:	eb0d 0002 	add.w	r0, sp, r2
 8004158:	2100      	movs	r1, #0
 800415a:	f000 fa1c 	bl	8004596 <memset>
  if(hi2c->Instance==I2C1)
 800415e:	6823      	ldr	r3, [r4, #0]
 8004160:	4a21      	ldr	r2, [pc, #132]	; (80041e8 <HAL_I2C_MspInit+0x9c>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d11e      	bne.n	80041a4 <HAL_I2C_MspInit+0x58>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004166:	4c21      	ldr	r4, [pc, #132]	; (80041ec <HAL_I2C_MspInit+0xa0>)
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004168:	a904      	add	r1, sp, #16
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800416a:	69a3      	ldr	r3, [r4, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800416c:	4820      	ldr	r0, [pc, #128]	; (80041f0 <HAL_I2C_MspInit+0xa4>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800416e:	f043 0308 	orr.w	r3, r3, #8
 8004172:	61a3      	str	r3, [r4, #24]
 8004174:	69a3      	ldr	r3, [r4, #24]
 8004176:	f003 0308 	and.w	r3, r3, #8
 800417a:	9300      	str	r3, [sp, #0]
 800417c:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800417e:	23c0      	movs	r3, #192	; 0xc0
 8004180:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004182:	2312      	movs	r3, #18
 8004184:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004186:	2303      	movs	r3, #3
 8004188:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800418a:	f7fc fca3 	bl	8000ad4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800418e:	69e3      	ldr	r3, [r4, #28]
 8004190:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004194:	61e3      	str	r3, [r4, #28]
 8004196:	69e3      	ldr	r3, [r4, #28]
 8004198:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800419c:	9301      	str	r3, [sp, #4]
 800419e:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80041a0:	b008      	add	sp, #32
 80041a2:	bd10      	pop	{r4, pc}
  else if(hi2c->Instance==I2C2)
 80041a4:	4a13      	ldr	r2, [pc, #76]	; (80041f4 <HAL_I2C_MspInit+0xa8>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d1fa      	bne.n	80041a0 <HAL_I2C_MspInit+0x54>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80041aa:	4c10      	ldr	r4, [pc, #64]	; (80041ec <HAL_I2C_MspInit+0xa0>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80041ac:	a904      	add	r1, sp, #16
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80041ae:	69a3      	ldr	r3, [r4, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80041b0:	480f      	ldr	r0, [pc, #60]	; (80041f0 <HAL_I2C_MspInit+0xa4>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80041b2:	f043 0308 	orr.w	r3, r3, #8
 80041b6:	61a3      	str	r3, [r4, #24]
 80041b8:	69a3      	ldr	r3, [r4, #24]
 80041ba:	f003 0308 	and.w	r3, r3, #8
 80041be:	9302      	str	r3, [sp, #8]
 80041c0:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80041c2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80041c6:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80041c8:	2312      	movs	r3, #18
 80041ca:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80041cc:	2303      	movs	r3, #3
 80041ce:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80041d0:	f7fc fc80 	bl	8000ad4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80041d4:	69e3      	ldr	r3, [r4, #28]
 80041d6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80041da:	61e3      	str	r3, [r4, #28]
 80041dc:	69e3      	ldr	r3, [r4, #28]
 80041de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041e2:	9303      	str	r3, [sp, #12]
 80041e4:	9b03      	ldr	r3, [sp, #12]
}
 80041e6:	e7db      	b.n	80041a0 <HAL_I2C_MspInit+0x54>
 80041e8:	40005400 	.word	0x40005400
 80041ec:	40021000 	.word	0x40021000
 80041f0:	40010c00 	.word	0x40010c00
 80041f4:	40005800 	.word	0x40005800

080041f8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80041f8:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041fa:	2410      	movs	r4, #16
{
 80041fc:	4605      	mov	r5, r0
 80041fe:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004200:	4622      	mov	r2, r4
 8004202:	2100      	movs	r1, #0
 8004204:	a802      	add	r0, sp, #8
 8004206:	f000 f9c6 	bl	8004596 <memset>
  if(hspi->Instance==SPI1)
 800420a:	682a      	ldr	r2, [r5, #0]
 800420c:	4b18      	ldr	r3, [pc, #96]	; (8004270 <HAL_SPI_MspInit+0x78>)
 800420e:	429a      	cmp	r2, r3
 8004210:	d12c      	bne.n	800426c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004212:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
 8004216:	699a      	ldr	r2, [r3, #24]
    PB5     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004218:	a902      	add	r1, sp, #8
    __HAL_RCC_SPI1_CLK_ENABLE();
 800421a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800421e:	619a      	str	r2, [r3, #24]
 8004220:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004222:	4814      	ldr	r0, [pc, #80]	; (8004274 <HAL_SPI_MspInit+0x7c>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004224:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004228:	9200      	str	r2, [sp, #0]
 800422a:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800422c:	699a      	ldr	r2, [r3, #24]
 800422e:	f042 0208 	orr.w	r2, r2, #8
 8004232:	619a      	str	r2, [r3, #24]
 8004234:	699b      	ldr	r3, [r3, #24]
 8004236:	f003 0308 	and.w	r3, r3, #8
 800423a:	9301      	str	r3, [sp, #4]
 800423c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 800423e:	2328      	movs	r3, #40	; 0x28
 8004240:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004242:	2302      	movs	r3, #2
 8004244:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004246:	2303      	movs	r3, #3
 8004248:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800424a:	f7fc fc43 	bl	8000ad4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800424e:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004250:	a902      	add	r1, sp, #8
 8004252:	4808      	ldr	r0, [pc, #32]	; (8004274 <HAL_SPI_MspInit+0x7c>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004254:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004256:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8004258:	9402      	str	r4, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800425a:	f7fc fc3b 	bl	8000ad4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 800425e:	4a06      	ldr	r2, [pc, #24]	; (8004278 <HAL_SPI_MspInit+0x80>)
 8004260:	6853      	ldr	r3, [r2, #4]
 8004262:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8004266:	f043 0301 	orr.w	r3, r3, #1
 800426a:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800426c:	b007      	add	sp, #28
 800426e:	bd30      	pop	{r4, r5, pc}
 8004270:	40013000 	.word	0x40013000
 8004274:	40010c00 	.word	0x40010c00
 8004278:	40010000 	.word	0x40010000

0800427c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800427c:	b510      	push	{r4, lr}
 800427e:	4604      	mov	r4, r0
 8004280:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004282:	2210      	movs	r2, #16
 8004284:	2100      	movs	r1, #0
 8004286:	a802      	add	r0, sp, #8
 8004288:	f000 f985 	bl	8004596 <memset>
  if(htim_encoder->Instance==TIM1)
 800428c:	6822      	ldr	r2, [r4, #0]
 800428e:	4b10      	ldr	r3, [pc, #64]	; (80042d0 <HAL_TIM_Encoder_MspInit+0x54>)
 8004290:	429a      	cmp	r2, r3
 8004292:	d11a      	bne.n	80042ca <HAL_TIM_Encoder_MspInit+0x4e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004294:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8004298:	699a      	ldr	r2, [r3, #24]
    PA9     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = ENC_B_Pin|ENC_A_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800429a:	a902      	add	r1, sp, #8
    __HAL_RCC_TIM1_CLK_ENABLE();
 800429c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80042a0:	619a      	str	r2, [r3, #24]
 80042a2:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042a4:	480b      	ldr	r0, [pc, #44]	; (80042d4 <HAL_TIM_Encoder_MspInit+0x58>)
    __HAL_RCC_TIM1_CLK_ENABLE();
 80042a6:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80042aa:	9200      	str	r2, [sp, #0]
 80042ac:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80042ae:	699a      	ldr	r2, [r3, #24]
 80042b0:	f042 0204 	orr.w	r2, r2, #4
 80042b4:	619a      	str	r2, [r3, #24]
 80042b6:	699b      	ldr	r3, [r3, #24]
 80042b8:	f003 0304 	and.w	r3, r3, #4
 80042bc:	9301      	str	r3, [sp, #4]
 80042be:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = ENC_B_Pin|ENC_A_Pin;
 80042c0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80042c4:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042c6:	f7fc fc05 	bl	8000ad4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80042ca:	b006      	add	sp, #24
 80042cc:	bd10      	pop	{r4, pc}
 80042ce:	bf00      	nop
 80042d0:	40012c00 	.word	0x40012c00
 80042d4:	40010800 	.word	0x40010800

080042d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80042d8:	b507      	push	{r0, r1, r2, lr}
  if(htim_base->Instance==TIM6)
 80042da:	4b0d      	ldr	r3, [pc, #52]	; (8004310 <HAL_TIM_Base_MspInit+0x38>)
 80042dc:	6802      	ldr	r2, [r0, #0]
 80042de:	429a      	cmp	r2, r3
 80042e0:	d112      	bne.n	8004308 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80042e2:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80042e6:	69da      	ldr	r2, [r3, #28]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 80042e8:	2036      	movs	r0, #54	; 0x36
    __HAL_RCC_TIM6_CLK_ENABLE();
 80042ea:	f042 0210 	orr.w	r2, r2, #16
 80042ee:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 80042f0:	2200      	movs	r2, #0
    __HAL_RCC_TIM6_CLK_ENABLE();
 80042f2:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 80042f4:	4611      	mov	r1, r2
    __HAL_RCC_TIM6_CLK_ENABLE();
 80042f6:	f003 0310 	and.w	r3, r3, #16
 80042fa:	9301      	str	r3, [sp, #4]
 80042fc:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 80042fe:	f7fc fa37 	bl	8000770 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8004302:	2036      	movs	r0, #54	; 0x36
 8004304:	f7fc fa68 	bl	80007d8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8004308:	b003      	add	sp, #12
 800430a:	f85d fb04 	ldr.w	pc, [sp], #4
 800430e:	bf00      	nop
 8004310:	40001000 	.word	0x40001000

08004314 <HAL_UART_MspInit>:
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004314:	2210      	movs	r2, #16
{
 8004316:	b510      	push	{r4, lr}
 8004318:	4604      	mov	r4, r0
 800431a:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800431c:	eb0d 0002 	add.w	r0, sp, r2
 8004320:	2100      	movs	r1, #0
 8004322:	f000 f938 	bl	8004596 <memset>
  if(huart->Instance==USART2)
 8004326:	6823      	ldr	r3, [r4, #0]
 8004328:	4a2f      	ldr	r2, [pc, #188]	; (80043e8 <HAL_UART_MspInit+0xd4>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d127      	bne.n	800437e <HAL_UART_MspInit+0x6a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800432e:	4b2f      	ldr	r3, [pc, #188]	; (80043ec <HAL_UART_MspInit+0xd8>)
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004330:	a904      	add	r1, sp, #16
    __HAL_RCC_USART2_CLK_ENABLE();
 8004332:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004334:	482e      	ldr	r0, [pc, #184]	; (80043f0 <HAL_UART_MspInit+0xdc>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8004336:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800433a:	61da      	str	r2, [r3, #28]
 800433c:	69da      	ldr	r2, [r3, #28]
 800433e:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8004342:	9200      	str	r2, [sp, #0]
 8004344:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004346:	699a      	ldr	r2, [r3, #24]
 8004348:	f042 0204 	orr.w	r2, r2, #4
 800434c:	619a      	str	r2, [r3, #24]
 800434e:	699b      	ldr	r3, [r3, #24]
 8004350:	f003 0304 	and.w	r3, r3, #4
 8004354:	9301      	str	r3, [sp, #4]
 8004356:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004358:	2304      	movs	r3, #4
 800435a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800435c:	2302      	movs	r3, #2
 800435e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004360:	2303      	movs	r3, #3
 8004362:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004364:	f7fc fbb6 	bl	8000ad4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004368:	2308      	movs	r3, #8
 800436a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800436c:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800436e:	a904      	add	r1, sp, #16
 8004370:	481f      	ldr	r0, [pc, #124]	; (80043f0 <HAL_UART_MspInit+0xdc>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004372:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004374:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004376:	f7fc fbad 	bl	8000ad4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800437a:	b008      	add	sp, #32
 800437c:	bd10      	pop	{r4, pc}
  else if(huart->Instance==USART3)
 800437e:	4a1d      	ldr	r2, [pc, #116]	; (80043f4 <HAL_UART_MspInit+0xe0>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d1fa      	bne.n	800437a <HAL_UART_MspInit+0x66>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004384:	4b19      	ldr	r3, [pc, #100]	; (80043ec <HAL_UART_MspInit+0xd8>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004386:	a904      	add	r1, sp, #16
    __HAL_RCC_USART3_CLK_ENABLE();
 8004388:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800438a:	481b      	ldr	r0, [pc, #108]	; (80043f8 <HAL_UART_MspInit+0xe4>)
    __HAL_RCC_USART3_CLK_ENABLE();
 800438c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8004390:	61da      	str	r2, [r3, #28]
 8004392:	69da      	ldr	r2, [r3, #28]
 8004394:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8004398:	9202      	str	r2, [sp, #8]
 800439a:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800439c:	699a      	ldr	r2, [r3, #24]
 800439e:	f042 0210 	orr.w	r2, r2, #16
 80043a2:	619a      	str	r2, [r3, #24]
 80043a4:	699b      	ldr	r3, [r3, #24]
 80043a6:	f003 0310 	and.w	r3, r3, #16
 80043aa:	9303      	str	r3, [sp, #12]
 80043ac:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80043ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80043b2:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043b4:	2302      	movs	r3, #2
 80043b6:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80043b8:	2303      	movs	r3, #3
 80043ba:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80043bc:	f7fc fb8a 	bl	8000ad4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80043c0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80043c4:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80043c6:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80043c8:	a904      	add	r1, sp, #16
 80043ca:	480b      	ldr	r0, [pc, #44]	; (80043f8 <HAL_UART_MspInit+0xe4>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80043cc:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043ce:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80043d0:	f7fc fb80 	bl	8000ad4 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_USART3_PARTIAL();
 80043d4:	4a09      	ldr	r2, [pc, #36]	; (80043fc <HAL_UART_MspInit+0xe8>)
 80043d6:	6853      	ldr	r3, [r2, #4]
 80043d8:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80043dc:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80043e0:	f043 0310 	orr.w	r3, r3, #16
 80043e4:	6053      	str	r3, [r2, #4]
}
 80043e6:	e7c8      	b.n	800437a <HAL_UART_MspInit+0x66>
 80043e8:	40004400 	.word	0x40004400
 80043ec:	40021000 	.word	0x40021000
 80043f0:	40010800 	.word	0x40010800
 80043f4:	40004800 	.word	0x40004800
 80043f8:	40011000 	.word	0x40011000
 80043fc:	40010000 	.word	0x40010000

08004400 <NMI_Handler>:
 8004400:	4770      	bx	lr

08004402 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004402:	e7fe      	b.n	8004402 <HardFault_Handler>

08004404 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004404:	e7fe      	b.n	8004404 <MemManage_Handler>

08004406 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004406:	e7fe      	b.n	8004406 <BusFault_Handler>

08004408 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004408:	e7fe      	b.n	8004408 <UsageFault_Handler>

0800440a <SVC_Handler>:
 800440a:	4770      	bx	lr

0800440c <DebugMon_Handler>:
 800440c:	4770      	bx	lr

0800440e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800440e:	4770      	bx	lr

08004410 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004410:	f7fb bf46 	b.w	80002a0 <HAL_IncTick>

08004414 <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004414:	4801      	ldr	r0, [pc, #4]	; (800441c <DMA1_Channel1_IRQHandler+0x8>)
 8004416:	f7fc ba81 	b.w	800091c <HAL_DMA_IRQHandler>
 800441a:	bf00      	nop
 800441c:	20000694 	.word	0x20000694

08004420 <TIM6_IRQHandler>:
void TIM6_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004420:	4801      	ldr	r0, [pc, #4]	; (8004428 <TIM6_IRQHandler+0x8>)
 8004422:	f7fd beec 	b.w	80021fe <HAL_TIM_IRQHandler>
 8004426:	bf00      	nop
 8004428:	200006d8 	.word	0x200006d8

0800442c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800442c:	b570      	push	{r4, r5, r6, lr}
 800442e:	460e      	mov	r6, r1
 8004430:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004432:	460c      	mov	r4, r1
 8004434:	1ba3      	subs	r3, r4, r6
 8004436:	429d      	cmp	r5, r3
 8004438:	dc01      	bgt.n	800443e <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 800443a:	4628      	mov	r0, r5
 800443c:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 800443e:	f3af 8000 	nop.w
 8004442:	f804 0b01 	strb.w	r0, [r4], #1
 8004446:	e7f5      	b.n	8004434 <_read+0x8>

08004448 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8004448:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800444a:	4b0a      	ldr	r3, [pc, #40]	; (8004474 <_sbrk+0x2c>)
{
 800444c:	4602      	mov	r2, r0
	if (heap_end == 0)
 800444e:	6819      	ldr	r1, [r3, #0]
 8004450:	b909      	cbnz	r1, 8004456 <_sbrk+0xe>
		heap_end = &end;
 8004452:	4909      	ldr	r1, [pc, #36]	; (8004478 <_sbrk+0x30>)
 8004454:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 8004456:	4669      	mov	r1, sp
	prev_heap_end = heap_end;
 8004458:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 800445a:	4402      	add	r2, r0
 800445c:	428a      	cmp	r2, r1
 800445e:	d906      	bls.n	800446e <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8004460:	f000 f864 	bl	800452c <__errno>
 8004464:	230c      	movs	r3, #12
 8004466:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8004468:	f04f 30ff 	mov.w	r0, #4294967295
 800446c:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 800446e:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 8004470:	bd08      	pop	{r3, pc}
 8004472:	bf00      	nop
 8004474:	20000550 	.word	0x20000550
 8004478:	20000810 	.word	0x20000810

0800447c <_close>:

int _close(int file)
{
	return -1;
}
 800447c:	f04f 30ff 	mov.w	r0, #4294967295
 8004480:	4770      	bx	lr

08004482 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8004482:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 8004486:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8004488:	604b      	str	r3, [r1, #4]
}
 800448a:	4770      	bx	lr

0800448c <_isatty>:

int _isatty(int file)
{
	return 1;
}
 800448c:	2001      	movs	r0, #1
 800448e:	4770      	bx	lr

08004490 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8004490:	2000      	movs	r0, #0
 8004492:	4770      	bx	lr

08004494 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8004494:	4b0f      	ldr	r3, [pc, #60]	; (80044d4 <SystemInit+0x40>)
 8004496:	681a      	ldr	r2, [r3, #0]
 8004498:	f042 0201 	orr.w	r2, r2, #1
 800449c:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800449e:	6859      	ldr	r1, [r3, #4]
 80044a0:	4a0d      	ldr	r2, [pc, #52]	; (80044d8 <SystemInit+0x44>)
 80044a2:	400a      	ands	r2, r1
 80044a4:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80044a6:	681a      	ldr	r2, [r3, #0]
 80044a8:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80044ac:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80044b0:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80044b2:	681a      	ldr	r2, [r3, #0]
 80044b4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80044b8:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80044ba:	685a      	ldr	r2, [r3, #4]
 80044bc:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 80044c0:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80044c2:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80044c6:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80044c8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80044cc:	4b03      	ldr	r3, [pc, #12]	; (80044dc <SystemInit+0x48>)
 80044ce:	609a      	str	r2, [r3, #8]
 80044d0:	4770      	bx	lr
 80044d2:	bf00      	nop
 80044d4:	40021000 	.word	0x40021000
 80044d8:	f8ff0000 	.word	0xf8ff0000
 80044dc:	e000ed00 	.word	0xe000ed00

080044e0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80044e0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80044e2:	e003      	b.n	80044ec <LoopCopyDataInit>

080044e4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80044e4:	4b0b      	ldr	r3, [pc, #44]	; (8004514 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80044e6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80044e8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80044ea:	3104      	adds	r1, #4

080044ec <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80044ec:	480a      	ldr	r0, [pc, #40]	; (8004518 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80044ee:	4b0b      	ldr	r3, [pc, #44]	; (800451c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80044f0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80044f2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80044f4:	d3f6      	bcc.n	80044e4 <CopyDataInit>
  ldr r2, =_sbss
 80044f6:	4a0a      	ldr	r2, [pc, #40]	; (8004520 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80044f8:	e002      	b.n	8004500 <LoopFillZerobss>

080044fa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80044fa:	2300      	movs	r3, #0
  str r3, [r2], #4
 80044fc:	f842 3b04 	str.w	r3, [r2], #4

08004500 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8004500:	4b08      	ldr	r3, [pc, #32]	; (8004524 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8004502:	429a      	cmp	r2, r3
  bcc FillZerobss
 8004504:	d3f9      	bcc.n	80044fa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004506:	f7ff ffc5 	bl	8004494 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800450a:	f000 f815 	bl	8004538 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800450e:	f7fe fa3d 	bl	800298c <main>
  bx lr
 8004512:	4770      	bx	lr
  ldr r3, =_sidata
 8004514:	08006918 	.word	0x08006918
  ldr r0, =_sdata
 8004518:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800451c:	20000080 	.word	0x20000080
  ldr r2, =_sbss
 8004520:	20000080 	.word	0x20000080
  ldr r3, = _ebss
 8004524:	20000810 	.word	0x20000810

08004528 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004528:	e7fe      	b.n	8004528 <ADC1_2_IRQHandler>
	...

0800452c <__errno>:
 800452c:	4b01      	ldr	r3, [pc, #4]	; (8004534 <__errno+0x8>)
 800452e:	6818      	ldr	r0, [r3, #0]
 8004530:	4770      	bx	lr
 8004532:	bf00      	nop
 8004534:	2000001c 	.word	0x2000001c

08004538 <__libc_init_array>:
 8004538:	b570      	push	{r4, r5, r6, lr}
 800453a:	2500      	movs	r5, #0
 800453c:	4e0c      	ldr	r6, [pc, #48]	; (8004570 <__libc_init_array+0x38>)
 800453e:	4c0d      	ldr	r4, [pc, #52]	; (8004574 <__libc_init_array+0x3c>)
 8004540:	1ba4      	subs	r4, r4, r6
 8004542:	10a4      	asrs	r4, r4, #2
 8004544:	42a5      	cmp	r5, r4
 8004546:	d109      	bne.n	800455c <__libc_init_array+0x24>
 8004548:	f001 f95c 	bl	8005804 <_init>
 800454c:	2500      	movs	r5, #0
 800454e:	4e0a      	ldr	r6, [pc, #40]	; (8004578 <__libc_init_array+0x40>)
 8004550:	4c0a      	ldr	r4, [pc, #40]	; (800457c <__libc_init_array+0x44>)
 8004552:	1ba4      	subs	r4, r4, r6
 8004554:	10a4      	asrs	r4, r4, #2
 8004556:	42a5      	cmp	r5, r4
 8004558:	d105      	bne.n	8004566 <__libc_init_array+0x2e>
 800455a:	bd70      	pop	{r4, r5, r6, pc}
 800455c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004560:	4798      	blx	r3
 8004562:	3501      	adds	r5, #1
 8004564:	e7ee      	b.n	8004544 <__libc_init_array+0xc>
 8004566:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800456a:	4798      	blx	r3
 800456c:	3501      	adds	r5, #1
 800456e:	e7f2      	b.n	8004556 <__libc_init_array+0x1e>
 8004570:	08006910 	.word	0x08006910
 8004574:	08006910 	.word	0x08006910
 8004578:	08006910 	.word	0x08006910
 800457c:	08006914 	.word	0x08006914

08004580 <memcpy>:
 8004580:	b510      	push	{r4, lr}
 8004582:	1e43      	subs	r3, r0, #1
 8004584:	440a      	add	r2, r1
 8004586:	4291      	cmp	r1, r2
 8004588:	d100      	bne.n	800458c <memcpy+0xc>
 800458a:	bd10      	pop	{r4, pc}
 800458c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004590:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004594:	e7f7      	b.n	8004586 <memcpy+0x6>

08004596 <memset>:
 8004596:	4603      	mov	r3, r0
 8004598:	4402      	add	r2, r0
 800459a:	4293      	cmp	r3, r2
 800459c:	d100      	bne.n	80045a0 <memset+0xa>
 800459e:	4770      	bx	lr
 80045a0:	f803 1b01 	strb.w	r1, [r3], #1
 80045a4:	e7f9      	b.n	800459a <memset+0x4>
	...

080045a8 <iprintf>:
 80045a8:	b40f      	push	{r0, r1, r2, r3}
 80045aa:	4b0a      	ldr	r3, [pc, #40]	; (80045d4 <iprintf+0x2c>)
 80045ac:	b513      	push	{r0, r1, r4, lr}
 80045ae:	681c      	ldr	r4, [r3, #0]
 80045b0:	b124      	cbz	r4, 80045bc <iprintf+0x14>
 80045b2:	69a3      	ldr	r3, [r4, #24]
 80045b4:	b913      	cbnz	r3, 80045bc <iprintf+0x14>
 80045b6:	4620      	mov	r0, r4
 80045b8:	f000 fa50 	bl	8004a5c <__sinit>
 80045bc:	ab05      	add	r3, sp, #20
 80045be:	9a04      	ldr	r2, [sp, #16]
 80045c0:	68a1      	ldr	r1, [r4, #8]
 80045c2:	4620      	mov	r0, r4
 80045c4:	9301      	str	r3, [sp, #4]
 80045c6:	f000 fd59 	bl	800507c <_vfiprintf_r>
 80045ca:	b002      	add	sp, #8
 80045cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80045d0:	b004      	add	sp, #16
 80045d2:	4770      	bx	lr
 80045d4:	2000001c 	.word	0x2000001c

080045d8 <_puts_r>:
 80045d8:	b570      	push	{r4, r5, r6, lr}
 80045da:	460e      	mov	r6, r1
 80045dc:	4605      	mov	r5, r0
 80045de:	b118      	cbz	r0, 80045e8 <_puts_r+0x10>
 80045e0:	6983      	ldr	r3, [r0, #24]
 80045e2:	b90b      	cbnz	r3, 80045e8 <_puts_r+0x10>
 80045e4:	f000 fa3a 	bl	8004a5c <__sinit>
 80045e8:	69ab      	ldr	r3, [r5, #24]
 80045ea:	68ac      	ldr	r4, [r5, #8]
 80045ec:	b913      	cbnz	r3, 80045f4 <_puts_r+0x1c>
 80045ee:	4628      	mov	r0, r5
 80045f0:	f000 fa34 	bl	8004a5c <__sinit>
 80045f4:	4b23      	ldr	r3, [pc, #140]	; (8004684 <_puts_r+0xac>)
 80045f6:	429c      	cmp	r4, r3
 80045f8:	d117      	bne.n	800462a <_puts_r+0x52>
 80045fa:	686c      	ldr	r4, [r5, #4]
 80045fc:	89a3      	ldrh	r3, [r4, #12]
 80045fe:	071b      	lsls	r3, r3, #28
 8004600:	d51d      	bpl.n	800463e <_puts_r+0x66>
 8004602:	6923      	ldr	r3, [r4, #16]
 8004604:	b1db      	cbz	r3, 800463e <_puts_r+0x66>
 8004606:	3e01      	subs	r6, #1
 8004608:	68a3      	ldr	r3, [r4, #8]
 800460a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800460e:	3b01      	subs	r3, #1
 8004610:	60a3      	str	r3, [r4, #8]
 8004612:	b9e9      	cbnz	r1, 8004650 <_puts_r+0x78>
 8004614:	2b00      	cmp	r3, #0
 8004616:	da2e      	bge.n	8004676 <_puts_r+0x9e>
 8004618:	4622      	mov	r2, r4
 800461a:	210a      	movs	r1, #10
 800461c:	4628      	mov	r0, r5
 800461e:	f000 f86b 	bl	80046f8 <__swbuf_r>
 8004622:	3001      	adds	r0, #1
 8004624:	d011      	beq.n	800464a <_puts_r+0x72>
 8004626:	200a      	movs	r0, #10
 8004628:	bd70      	pop	{r4, r5, r6, pc}
 800462a:	4b17      	ldr	r3, [pc, #92]	; (8004688 <_puts_r+0xb0>)
 800462c:	429c      	cmp	r4, r3
 800462e:	d101      	bne.n	8004634 <_puts_r+0x5c>
 8004630:	68ac      	ldr	r4, [r5, #8]
 8004632:	e7e3      	b.n	80045fc <_puts_r+0x24>
 8004634:	4b15      	ldr	r3, [pc, #84]	; (800468c <_puts_r+0xb4>)
 8004636:	429c      	cmp	r4, r3
 8004638:	bf08      	it	eq
 800463a:	68ec      	ldreq	r4, [r5, #12]
 800463c:	e7de      	b.n	80045fc <_puts_r+0x24>
 800463e:	4621      	mov	r1, r4
 8004640:	4628      	mov	r0, r5
 8004642:	f000 f8ab 	bl	800479c <__swsetup_r>
 8004646:	2800      	cmp	r0, #0
 8004648:	d0dd      	beq.n	8004606 <_puts_r+0x2e>
 800464a:	f04f 30ff 	mov.w	r0, #4294967295
 800464e:	bd70      	pop	{r4, r5, r6, pc}
 8004650:	2b00      	cmp	r3, #0
 8004652:	da04      	bge.n	800465e <_puts_r+0x86>
 8004654:	69a2      	ldr	r2, [r4, #24]
 8004656:	4293      	cmp	r3, r2
 8004658:	db06      	blt.n	8004668 <_puts_r+0x90>
 800465a:	290a      	cmp	r1, #10
 800465c:	d004      	beq.n	8004668 <_puts_r+0x90>
 800465e:	6823      	ldr	r3, [r4, #0]
 8004660:	1c5a      	adds	r2, r3, #1
 8004662:	6022      	str	r2, [r4, #0]
 8004664:	7019      	strb	r1, [r3, #0]
 8004666:	e7cf      	b.n	8004608 <_puts_r+0x30>
 8004668:	4622      	mov	r2, r4
 800466a:	4628      	mov	r0, r5
 800466c:	f000 f844 	bl	80046f8 <__swbuf_r>
 8004670:	3001      	adds	r0, #1
 8004672:	d1c9      	bne.n	8004608 <_puts_r+0x30>
 8004674:	e7e9      	b.n	800464a <_puts_r+0x72>
 8004676:	200a      	movs	r0, #10
 8004678:	6823      	ldr	r3, [r4, #0]
 800467a:	1c5a      	adds	r2, r3, #1
 800467c:	6022      	str	r2, [r4, #0]
 800467e:	7018      	strb	r0, [r3, #0]
 8004680:	bd70      	pop	{r4, r5, r6, pc}
 8004682:	bf00      	nop
 8004684:	0800689c 	.word	0x0800689c
 8004688:	080068bc 	.word	0x080068bc
 800468c:	0800687c 	.word	0x0800687c

08004690 <puts>:
 8004690:	4b02      	ldr	r3, [pc, #8]	; (800469c <puts+0xc>)
 8004692:	4601      	mov	r1, r0
 8004694:	6818      	ldr	r0, [r3, #0]
 8004696:	f7ff bf9f 	b.w	80045d8 <_puts_r>
 800469a:	bf00      	nop
 800469c:	2000001c 	.word	0x2000001c

080046a0 <siprintf>:
 80046a0:	b40e      	push	{r1, r2, r3}
 80046a2:	f44f 7102 	mov.w	r1, #520	; 0x208
 80046a6:	b500      	push	{lr}
 80046a8:	b09c      	sub	sp, #112	; 0x70
 80046aa:	f8ad 1014 	strh.w	r1, [sp, #20]
 80046ae:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80046b2:	9104      	str	r1, [sp, #16]
 80046b4:	9107      	str	r1, [sp, #28]
 80046b6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80046ba:	ab1d      	add	r3, sp, #116	; 0x74
 80046bc:	9002      	str	r0, [sp, #8]
 80046be:	9006      	str	r0, [sp, #24]
 80046c0:	4808      	ldr	r0, [pc, #32]	; (80046e4 <siprintf+0x44>)
 80046c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80046c6:	f8ad 1016 	strh.w	r1, [sp, #22]
 80046ca:	6800      	ldr	r0, [r0, #0]
 80046cc:	a902      	add	r1, sp, #8
 80046ce:	9301      	str	r3, [sp, #4]
 80046d0:	f000 fbb8 	bl	8004e44 <_svfiprintf_r>
 80046d4:	2200      	movs	r2, #0
 80046d6:	9b02      	ldr	r3, [sp, #8]
 80046d8:	701a      	strb	r2, [r3, #0]
 80046da:	b01c      	add	sp, #112	; 0x70
 80046dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80046e0:	b003      	add	sp, #12
 80046e2:	4770      	bx	lr
 80046e4:	2000001c 	.word	0x2000001c

080046e8 <strcpy>:
 80046e8:	4603      	mov	r3, r0
 80046ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80046ee:	f803 2b01 	strb.w	r2, [r3], #1
 80046f2:	2a00      	cmp	r2, #0
 80046f4:	d1f9      	bne.n	80046ea <strcpy+0x2>
 80046f6:	4770      	bx	lr

080046f8 <__swbuf_r>:
 80046f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046fa:	460e      	mov	r6, r1
 80046fc:	4614      	mov	r4, r2
 80046fe:	4605      	mov	r5, r0
 8004700:	b118      	cbz	r0, 800470a <__swbuf_r+0x12>
 8004702:	6983      	ldr	r3, [r0, #24]
 8004704:	b90b      	cbnz	r3, 800470a <__swbuf_r+0x12>
 8004706:	f000 f9a9 	bl	8004a5c <__sinit>
 800470a:	4b21      	ldr	r3, [pc, #132]	; (8004790 <__swbuf_r+0x98>)
 800470c:	429c      	cmp	r4, r3
 800470e:	d12a      	bne.n	8004766 <__swbuf_r+0x6e>
 8004710:	686c      	ldr	r4, [r5, #4]
 8004712:	69a3      	ldr	r3, [r4, #24]
 8004714:	60a3      	str	r3, [r4, #8]
 8004716:	89a3      	ldrh	r3, [r4, #12]
 8004718:	071a      	lsls	r2, r3, #28
 800471a:	d52e      	bpl.n	800477a <__swbuf_r+0x82>
 800471c:	6923      	ldr	r3, [r4, #16]
 800471e:	b363      	cbz	r3, 800477a <__swbuf_r+0x82>
 8004720:	6923      	ldr	r3, [r4, #16]
 8004722:	6820      	ldr	r0, [r4, #0]
 8004724:	b2f6      	uxtb	r6, r6
 8004726:	1ac0      	subs	r0, r0, r3
 8004728:	6963      	ldr	r3, [r4, #20]
 800472a:	4637      	mov	r7, r6
 800472c:	4298      	cmp	r0, r3
 800472e:	db04      	blt.n	800473a <__swbuf_r+0x42>
 8004730:	4621      	mov	r1, r4
 8004732:	4628      	mov	r0, r5
 8004734:	f000 f928 	bl	8004988 <_fflush_r>
 8004738:	bb28      	cbnz	r0, 8004786 <__swbuf_r+0x8e>
 800473a:	68a3      	ldr	r3, [r4, #8]
 800473c:	3001      	adds	r0, #1
 800473e:	3b01      	subs	r3, #1
 8004740:	60a3      	str	r3, [r4, #8]
 8004742:	6823      	ldr	r3, [r4, #0]
 8004744:	1c5a      	adds	r2, r3, #1
 8004746:	6022      	str	r2, [r4, #0]
 8004748:	701e      	strb	r6, [r3, #0]
 800474a:	6963      	ldr	r3, [r4, #20]
 800474c:	4298      	cmp	r0, r3
 800474e:	d004      	beq.n	800475a <__swbuf_r+0x62>
 8004750:	89a3      	ldrh	r3, [r4, #12]
 8004752:	07db      	lsls	r3, r3, #31
 8004754:	d519      	bpl.n	800478a <__swbuf_r+0x92>
 8004756:	2e0a      	cmp	r6, #10
 8004758:	d117      	bne.n	800478a <__swbuf_r+0x92>
 800475a:	4621      	mov	r1, r4
 800475c:	4628      	mov	r0, r5
 800475e:	f000 f913 	bl	8004988 <_fflush_r>
 8004762:	b190      	cbz	r0, 800478a <__swbuf_r+0x92>
 8004764:	e00f      	b.n	8004786 <__swbuf_r+0x8e>
 8004766:	4b0b      	ldr	r3, [pc, #44]	; (8004794 <__swbuf_r+0x9c>)
 8004768:	429c      	cmp	r4, r3
 800476a:	d101      	bne.n	8004770 <__swbuf_r+0x78>
 800476c:	68ac      	ldr	r4, [r5, #8]
 800476e:	e7d0      	b.n	8004712 <__swbuf_r+0x1a>
 8004770:	4b09      	ldr	r3, [pc, #36]	; (8004798 <__swbuf_r+0xa0>)
 8004772:	429c      	cmp	r4, r3
 8004774:	bf08      	it	eq
 8004776:	68ec      	ldreq	r4, [r5, #12]
 8004778:	e7cb      	b.n	8004712 <__swbuf_r+0x1a>
 800477a:	4621      	mov	r1, r4
 800477c:	4628      	mov	r0, r5
 800477e:	f000 f80d 	bl	800479c <__swsetup_r>
 8004782:	2800      	cmp	r0, #0
 8004784:	d0cc      	beq.n	8004720 <__swbuf_r+0x28>
 8004786:	f04f 37ff 	mov.w	r7, #4294967295
 800478a:	4638      	mov	r0, r7
 800478c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800478e:	bf00      	nop
 8004790:	0800689c 	.word	0x0800689c
 8004794:	080068bc 	.word	0x080068bc
 8004798:	0800687c 	.word	0x0800687c

0800479c <__swsetup_r>:
 800479c:	4b32      	ldr	r3, [pc, #200]	; (8004868 <__swsetup_r+0xcc>)
 800479e:	b570      	push	{r4, r5, r6, lr}
 80047a0:	681d      	ldr	r5, [r3, #0]
 80047a2:	4606      	mov	r6, r0
 80047a4:	460c      	mov	r4, r1
 80047a6:	b125      	cbz	r5, 80047b2 <__swsetup_r+0x16>
 80047a8:	69ab      	ldr	r3, [r5, #24]
 80047aa:	b913      	cbnz	r3, 80047b2 <__swsetup_r+0x16>
 80047ac:	4628      	mov	r0, r5
 80047ae:	f000 f955 	bl	8004a5c <__sinit>
 80047b2:	4b2e      	ldr	r3, [pc, #184]	; (800486c <__swsetup_r+0xd0>)
 80047b4:	429c      	cmp	r4, r3
 80047b6:	d10f      	bne.n	80047d8 <__swsetup_r+0x3c>
 80047b8:	686c      	ldr	r4, [r5, #4]
 80047ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80047be:	b29a      	uxth	r2, r3
 80047c0:	0715      	lsls	r5, r2, #28
 80047c2:	d42c      	bmi.n	800481e <__swsetup_r+0x82>
 80047c4:	06d0      	lsls	r0, r2, #27
 80047c6:	d411      	bmi.n	80047ec <__swsetup_r+0x50>
 80047c8:	2209      	movs	r2, #9
 80047ca:	6032      	str	r2, [r6, #0]
 80047cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80047d0:	81a3      	strh	r3, [r4, #12]
 80047d2:	f04f 30ff 	mov.w	r0, #4294967295
 80047d6:	bd70      	pop	{r4, r5, r6, pc}
 80047d8:	4b25      	ldr	r3, [pc, #148]	; (8004870 <__swsetup_r+0xd4>)
 80047da:	429c      	cmp	r4, r3
 80047dc:	d101      	bne.n	80047e2 <__swsetup_r+0x46>
 80047de:	68ac      	ldr	r4, [r5, #8]
 80047e0:	e7eb      	b.n	80047ba <__swsetup_r+0x1e>
 80047e2:	4b24      	ldr	r3, [pc, #144]	; (8004874 <__swsetup_r+0xd8>)
 80047e4:	429c      	cmp	r4, r3
 80047e6:	bf08      	it	eq
 80047e8:	68ec      	ldreq	r4, [r5, #12]
 80047ea:	e7e6      	b.n	80047ba <__swsetup_r+0x1e>
 80047ec:	0751      	lsls	r1, r2, #29
 80047ee:	d512      	bpl.n	8004816 <__swsetup_r+0x7a>
 80047f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80047f2:	b141      	cbz	r1, 8004806 <__swsetup_r+0x6a>
 80047f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80047f8:	4299      	cmp	r1, r3
 80047fa:	d002      	beq.n	8004802 <__swsetup_r+0x66>
 80047fc:	4630      	mov	r0, r6
 80047fe:	f000 fa1b 	bl	8004c38 <_free_r>
 8004802:	2300      	movs	r3, #0
 8004804:	6363      	str	r3, [r4, #52]	; 0x34
 8004806:	89a3      	ldrh	r3, [r4, #12]
 8004808:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800480c:	81a3      	strh	r3, [r4, #12]
 800480e:	2300      	movs	r3, #0
 8004810:	6063      	str	r3, [r4, #4]
 8004812:	6923      	ldr	r3, [r4, #16]
 8004814:	6023      	str	r3, [r4, #0]
 8004816:	89a3      	ldrh	r3, [r4, #12]
 8004818:	f043 0308 	orr.w	r3, r3, #8
 800481c:	81a3      	strh	r3, [r4, #12]
 800481e:	6923      	ldr	r3, [r4, #16]
 8004820:	b94b      	cbnz	r3, 8004836 <__swsetup_r+0x9a>
 8004822:	89a3      	ldrh	r3, [r4, #12]
 8004824:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004828:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800482c:	d003      	beq.n	8004836 <__swsetup_r+0x9a>
 800482e:	4621      	mov	r1, r4
 8004830:	4630      	mov	r0, r6
 8004832:	f000 f9c1 	bl	8004bb8 <__smakebuf_r>
 8004836:	89a2      	ldrh	r2, [r4, #12]
 8004838:	f012 0301 	ands.w	r3, r2, #1
 800483c:	d00c      	beq.n	8004858 <__swsetup_r+0xbc>
 800483e:	2300      	movs	r3, #0
 8004840:	60a3      	str	r3, [r4, #8]
 8004842:	6963      	ldr	r3, [r4, #20]
 8004844:	425b      	negs	r3, r3
 8004846:	61a3      	str	r3, [r4, #24]
 8004848:	6923      	ldr	r3, [r4, #16]
 800484a:	b953      	cbnz	r3, 8004862 <__swsetup_r+0xc6>
 800484c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004850:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8004854:	d1ba      	bne.n	80047cc <__swsetup_r+0x30>
 8004856:	bd70      	pop	{r4, r5, r6, pc}
 8004858:	0792      	lsls	r2, r2, #30
 800485a:	bf58      	it	pl
 800485c:	6963      	ldrpl	r3, [r4, #20]
 800485e:	60a3      	str	r3, [r4, #8]
 8004860:	e7f2      	b.n	8004848 <__swsetup_r+0xac>
 8004862:	2000      	movs	r0, #0
 8004864:	e7f7      	b.n	8004856 <__swsetup_r+0xba>
 8004866:	bf00      	nop
 8004868:	2000001c 	.word	0x2000001c
 800486c:	0800689c 	.word	0x0800689c
 8004870:	080068bc 	.word	0x080068bc
 8004874:	0800687c 	.word	0x0800687c

08004878 <__sflush_r>:
 8004878:	898a      	ldrh	r2, [r1, #12]
 800487a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800487e:	4605      	mov	r5, r0
 8004880:	0710      	lsls	r0, r2, #28
 8004882:	460c      	mov	r4, r1
 8004884:	d45a      	bmi.n	800493c <__sflush_r+0xc4>
 8004886:	684b      	ldr	r3, [r1, #4]
 8004888:	2b00      	cmp	r3, #0
 800488a:	dc05      	bgt.n	8004898 <__sflush_r+0x20>
 800488c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800488e:	2b00      	cmp	r3, #0
 8004890:	dc02      	bgt.n	8004898 <__sflush_r+0x20>
 8004892:	2000      	movs	r0, #0
 8004894:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004898:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800489a:	2e00      	cmp	r6, #0
 800489c:	d0f9      	beq.n	8004892 <__sflush_r+0x1a>
 800489e:	2300      	movs	r3, #0
 80048a0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80048a4:	682f      	ldr	r7, [r5, #0]
 80048a6:	602b      	str	r3, [r5, #0]
 80048a8:	d033      	beq.n	8004912 <__sflush_r+0x9a>
 80048aa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80048ac:	89a3      	ldrh	r3, [r4, #12]
 80048ae:	075a      	lsls	r2, r3, #29
 80048b0:	d505      	bpl.n	80048be <__sflush_r+0x46>
 80048b2:	6863      	ldr	r3, [r4, #4]
 80048b4:	1ac0      	subs	r0, r0, r3
 80048b6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80048b8:	b10b      	cbz	r3, 80048be <__sflush_r+0x46>
 80048ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80048bc:	1ac0      	subs	r0, r0, r3
 80048be:	2300      	movs	r3, #0
 80048c0:	4602      	mov	r2, r0
 80048c2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80048c4:	6a21      	ldr	r1, [r4, #32]
 80048c6:	4628      	mov	r0, r5
 80048c8:	47b0      	blx	r6
 80048ca:	1c43      	adds	r3, r0, #1
 80048cc:	89a3      	ldrh	r3, [r4, #12]
 80048ce:	d106      	bne.n	80048de <__sflush_r+0x66>
 80048d0:	6829      	ldr	r1, [r5, #0]
 80048d2:	291d      	cmp	r1, #29
 80048d4:	d84b      	bhi.n	800496e <__sflush_r+0xf6>
 80048d6:	4a2b      	ldr	r2, [pc, #172]	; (8004984 <__sflush_r+0x10c>)
 80048d8:	40ca      	lsrs	r2, r1
 80048da:	07d6      	lsls	r6, r2, #31
 80048dc:	d547      	bpl.n	800496e <__sflush_r+0xf6>
 80048de:	2200      	movs	r2, #0
 80048e0:	6062      	str	r2, [r4, #4]
 80048e2:	6922      	ldr	r2, [r4, #16]
 80048e4:	04d9      	lsls	r1, r3, #19
 80048e6:	6022      	str	r2, [r4, #0]
 80048e8:	d504      	bpl.n	80048f4 <__sflush_r+0x7c>
 80048ea:	1c42      	adds	r2, r0, #1
 80048ec:	d101      	bne.n	80048f2 <__sflush_r+0x7a>
 80048ee:	682b      	ldr	r3, [r5, #0]
 80048f0:	b903      	cbnz	r3, 80048f4 <__sflush_r+0x7c>
 80048f2:	6560      	str	r0, [r4, #84]	; 0x54
 80048f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80048f6:	602f      	str	r7, [r5, #0]
 80048f8:	2900      	cmp	r1, #0
 80048fa:	d0ca      	beq.n	8004892 <__sflush_r+0x1a>
 80048fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004900:	4299      	cmp	r1, r3
 8004902:	d002      	beq.n	800490a <__sflush_r+0x92>
 8004904:	4628      	mov	r0, r5
 8004906:	f000 f997 	bl	8004c38 <_free_r>
 800490a:	2000      	movs	r0, #0
 800490c:	6360      	str	r0, [r4, #52]	; 0x34
 800490e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004912:	6a21      	ldr	r1, [r4, #32]
 8004914:	2301      	movs	r3, #1
 8004916:	4628      	mov	r0, r5
 8004918:	47b0      	blx	r6
 800491a:	1c41      	adds	r1, r0, #1
 800491c:	d1c6      	bne.n	80048ac <__sflush_r+0x34>
 800491e:	682b      	ldr	r3, [r5, #0]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d0c3      	beq.n	80048ac <__sflush_r+0x34>
 8004924:	2b1d      	cmp	r3, #29
 8004926:	d001      	beq.n	800492c <__sflush_r+0xb4>
 8004928:	2b16      	cmp	r3, #22
 800492a:	d101      	bne.n	8004930 <__sflush_r+0xb8>
 800492c:	602f      	str	r7, [r5, #0]
 800492e:	e7b0      	b.n	8004892 <__sflush_r+0x1a>
 8004930:	89a3      	ldrh	r3, [r4, #12]
 8004932:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004936:	81a3      	strh	r3, [r4, #12]
 8004938:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800493c:	690f      	ldr	r7, [r1, #16]
 800493e:	2f00      	cmp	r7, #0
 8004940:	d0a7      	beq.n	8004892 <__sflush_r+0x1a>
 8004942:	0793      	lsls	r3, r2, #30
 8004944:	bf18      	it	ne
 8004946:	2300      	movne	r3, #0
 8004948:	680e      	ldr	r6, [r1, #0]
 800494a:	bf08      	it	eq
 800494c:	694b      	ldreq	r3, [r1, #20]
 800494e:	eba6 0807 	sub.w	r8, r6, r7
 8004952:	600f      	str	r7, [r1, #0]
 8004954:	608b      	str	r3, [r1, #8]
 8004956:	f1b8 0f00 	cmp.w	r8, #0
 800495a:	dd9a      	ble.n	8004892 <__sflush_r+0x1a>
 800495c:	4643      	mov	r3, r8
 800495e:	463a      	mov	r2, r7
 8004960:	6a21      	ldr	r1, [r4, #32]
 8004962:	4628      	mov	r0, r5
 8004964:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004966:	47b0      	blx	r6
 8004968:	2800      	cmp	r0, #0
 800496a:	dc07      	bgt.n	800497c <__sflush_r+0x104>
 800496c:	89a3      	ldrh	r3, [r4, #12]
 800496e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004972:	81a3      	strh	r3, [r4, #12]
 8004974:	f04f 30ff 	mov.w	r0, #4294967295
 8004978:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800497c:	4407      	add	r7, r0
 800497e:	eba8 0800 	sub.w	r8, r8, r0
 8004982:	e7e8      	b.n	8004956 <__sflush_r+0xde>
 8004984:	20400001 	.word	0x20400001

08004988 <_fflush_r>:
 8004988:	b538      	push	{r3, r4, r5, lr}
 800498a:	690b      	ldr	r3, [r1, #16]
 800498c:	4605      	mov	r5, r0
 800498e:	460c      	mov	r4, r1
 8004990:	b1db      	cbz	r3, 80049ca <_fflush_r+0x42>
 8004992:	b118      	cbz	r0, 800499c <_fflush_r+0x14>
 8004994:	6983      	ldr	r3, [r0, #24]
 8004996:	b90b      	cbnz	r3, 800499c <_fflush_r+0x14>
 8004998:	f000 f860 	bl	8004a5c <__sinit>
 800499c:	4b0c      	ldr	r3, [pc, #48]	; (80049d0 <_fflush_r+0x48>)
 800499e:	429c      	cmp	r4, r3
 80049a0:	d109      	bne.n	80049b6 <_fflush_r+0x2e>
 80049a2:	686c      	ldr	r4, [r5, #4]
 80049a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80049a8:	b17b      	cbz	r3, 80049ca <_fflush_r+0x42>
 80049aa:	4621      	mov	r1, r4
 80049ac:	4628      	mov	r0, r5
 80049ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80049b2:	f7ff bf61 	b.w	8004878 <__sflush_r>
 80049b6:	4b07      	ldr	r3, [pc, #28]	; (80049d4 <_fflush_r+0x4c>)
 80049b8:	429c      	cmp	r4, r3
 80049ba:	d101      	bne.n	80049c0 <_fflush_r+0x38>
 80049bc:	68ac      	ldr	r4, [r5, #8]
 80049be:	e7f1      	b.n	80049a4 <_fflush_r+0x1c>
 80049c0:	4b05      	ldr	r3, [pc, #20]	; (80049d8 <_fflush_r+0x50>)
 80049c2:	429c      	cmp	r4, r3
 80049c4:	bf08      	it	eq
 80049c6:	68ec      	ldreq	r4, [r5, #12]
 80049c8:	e7ec      	b.n	80049a4 <_fflush_r+0x1c>
 80049ca:	2000      	movs	r0, #0
 80049cc:	bd38      	pop	{r3, r4, r5, pc}
 80049ce:	bf00      	nop
 80049d0:	0800689c 	.word	0x0800689c
 80049d4:	080068bc 	.word	0x080068bc
 80049d8:	0800687c 	.word	0x0800687c

080049dc <_cleanup_r>:
 80049dc:	4901      	ldr	r1, [pc, #4]	; (80049e4 <_cleanup_r+0x8>)
 80049de:	f000 b8a9 	b.w	8004b34 <_fwalk_reent>
 80049e2:	bf00      	nop
 80049e4:	08004989 	.word	0x08004989

080049e8 <std.isra.0>:
 80049e8:	2300      	movs	r3, #0
 80049ea:	b510      	push	{r4, lr}
 80049ec:	4604      	mov	r4, r0
 80049ee:	6003      	str	r3, [r0, #0]
 80049f0:	6043      	str	r3, [r0, #4]
 80049f2:	6083      	str	r3, [r0, #8]
 80049f4:	8181      	strh	r1, [r0, #12]
 80049f6:	6643      	str	r3, [r0, #100]	; 0x64
 80049f8:	81c2      	strh	r2, [r0, #14]
 80049fa:	6103      	str	r3, [r0, #16]
 80049fc:	6143      	str	r3, [r0, #20]
 80049fe:	6183      	str	r3, [r0, #24]
 8004a00:	4619      	mov	r1, r3
 8004a02:	2208      	movs	r2, #8
 8004a04:	305c      	adds	r0, #92	; 0x5c
 8004a06:	f7ff fdc6 	bl	8004596 <memset>
 8004a0a:	4b05      	ldr	r3, [pc, #20]	; (8004a20 <std.isra.0+0x38>)
 8004a0c:	6224      	str	r4, [r4, #32]
 8004a0e:	6263      	str	r3, [r4, #36]	; 0x24
 8004a10:	4b04      	ldr	r3, [pc, #16]	; (8004a24 <std.isra.0+0x3c>)
 8004a12:	62a3      	str	r3, [r4, #40]	; 0x28
 8004a14:	4b04      	ldr	r3, [pc, #16]	; (8004a28 <std.isra.0+0x40>)
 8004a16:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004a18:	4b04      	ldr	r3, [pc, #16]	; (8004a2c <std.isra.0+0x44>)
 8004a1a:	6323      	str	r3, [r4, #48]	; 0x30
 8004a1c:	bd10      	pop	{r4, pc}
 8004a1e:	bf00      	nop
 8004a20:	080055f9 	.word	0x080055f9
 8004a24:	0800561b 	.word	0x0800561b
 8004a28:	08005653 	.word	0x08005653
 8004a2c:	08005677 	.word	0x08005677

08004a30 <__sfmoreglue>:
 8004a30:	b570      	push	{r4, r5, r6, lr}
 8004a32:	2568      	movs	r5, #104	; 0x68
 8004a34:	1e4a      	subs	r2, r1, #1
 8004a36:	4355      	muls	r5, r2
 8004a38:	460e      	mov	r6, r1
 8004a3a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004a3e:	f000 f947 	bl	8004cd0 <_malloc_r>
 8004a42:	4604      	mov	r4, r0
 8004a44:	b140      	cbz	r0, 8004a58 <__sfmoreglue+0x28>
 8004a46:	2100      	movs	r1, #0
 8004a48:	e880 0042 	stmia.w	r0, {r1, r6}
 8004a4c:	300c      	adds	r0, #12
 8004a4e:	60a0      	str	r0, [r4, #8]
 8004a50:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004a54:	f7ff fd9f 	bl	8004596 <memset>
 8004a58:	4620      	mov	r0, r4
 8004a5a:	bd70      	pop	{r4, r5, r6, pc}

08004a5c <__sinit>:
 8004a5c:	6983      	ldr	r3, [r0, #24]
 8004a5e:	b510      	push	{r4, lr}
 8004a60:	4604      	mov	r4, r0
 8004a62:	bb33      	cbnz	r3, 8004ab2 <__sinit+0x56>
 8004a64:	6483      	str	r3, [r0, #72]	; 0x48
 8004a66:	64c3      	str	r3, [r0, #76]	; 0x4c
 8004a68:	6503      	str	r3, [r0, #80]	; 0x50
 8004a6a:	4b12      	ldr	r3, [pc, #72]	; (8004ab4 <__sinit+0x58>)
 8004a6c:	4a12      	ldr	r2, [pc, #72]	; (8004ab8 <__sinit+0x5c>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	6282      	str	r2, [r0, #40]	; 0x28
 8004a72:	4298      	cmp	r0, r3
 8004a74:	bf04      	itt	eq
 8004a76:	2301      	moveq	r3, #1
 8004a78:	6183      	streq	r3, [r0, #24]
 8004a7a:	f000 f81f 	bl	8004abc <__sfp>
 8004a7e:	6060      	str	r0, [r4, #4]
 8004a80:	4620      	mov	r0, r4
 8004a82:	f000 f81b 	bl	8004abc <__sfp>
 8004a86:	60a0      	str	r0, [r4, #8]
 8004a88:	4620      	mov	r0, r4
 8004a8a:	f000 f817 	bl	8004abc <__sfp>
 8004a8e:	2200      	movs	r2, #0
 8004a90:	60e0      	str	r0, [r4, #12]
 8004a92:	2104      	movs	r1, #4
 8004a94:	6860      	ldr	r0, [r4, #4]
 8004a96:	f7ff ffa7 	bl	80049e8 <std.isra.0>
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	2109      	movs	r1, #9
 8004a9e:	68a0      	ldr	r0, [r4, #8]
 8004aa0:	f7ff ffa2 	bl	80049e8 <std.isra.0>
 8004aa4:	2202      	movs	r2, #2
 8004aa6:	2112      	movs	r1, #18
 8004aa8:	68e0      	ldr	r0, [r4, #12]
 8004aaa:	f7ff ff9d 	bl	80049e8 <std.isra.0>
 8004aae:	2301      	movs	r3, #1
 8004ab0:	61a3      	str	r3, [r4, #24]
 8004ab2:	bd10      	pop	{r4, pc}
 8004ab4:	08006878 	.word	0x08006878
 8004ab8:	080049dd 	.word	0x080049dd

08004abc <__sfp>:
 8004abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004abe:	4b1c      	ldr	r3, [pc, #112]	; (8004b30 <__sfp+0x74>)
 8004ac0:	4607      	mov	r7, r0
 8004ac2:	681e      	ldr	r6, [r3, #0]
 8004ac4:	69b3      	ldr	r3, [r6, #24]
 8004ac6:	b913      	cbnz	r3, 8004ace <__sfp+0x12>
 8004ac8:	4630      	mov	r0, r6
 8004aca:	f7ff ffc7 	bl	8004a5c <__sinit>
 8004ace:	3648      	adds	r6, #72	; 0x48
 8004ad0:	68b4      	ldr	r4, [r6, #8]
 8004ad2:	6873      	ldr	r3, [r6, #4]
 8004ad4:	3b01      	subs	r3, #1
 8004ad6:	d503      	bpl.n	8004ae0 <__sfp+0x24>
 8004ad8:	6833      	ldr	r3, [r6, #0]
 8004ada:	b133      	cbz	r3, 8004aea <__sfp+0x2e>
 8004adc:	6836      	ldr	r6, [r6, #0]
 8004ade:	e7f7      	b.n	8004ad0 <__sfp+0x14>
 8004ae0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004ae4:	b16d      	cbz	r5, 8004b02 <__sfp+0x46>
 8004ae6:	3468      	adds	r4, #104	; 0x68
 8004ae8:	e7f4      	b.n	8004ad4 <__sfp+0x18>
 8004aea:	2104      	movs	r1, #4
 8004aec:	4638      	mov	r0, r7
 8004aee:	f7ff ff9f 	bl	8004a30 <__sfmoreglue>
 8004af2:	6030      	str	r0, [r6, #0]
 8004af4:	2800      	cmp	r0, #0
 8004af6:	d1f1      	bne.n	8004adc <__sfp+0x20>
 8004af8:	230c      	movs	r3, #12
 8004afa:	4604      	mov	r4, r0
 8004afc:	603b      	str	r3, [r7, #0]
 8004afe:	4620      	mov	r0, r4
 8004b00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b02:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004b06:	81e3      	strh	r3, [r4, #14]
 8004b08:	2301      	movs	r3, #1
 8004b0a:	6665      	str	r5, [r4, #100]	; 0x64
 8004b0c:	81a3      	strh	r3, [r4, #12]
 8004b0e:	6025      	str	r5, [r4, #0]
 8004b10:	60a5      	str	r5, [r4, #8]
 8004b12:	6065      	str	r5, [r4, #4]
 8004b14:	6125      	str	r5, [r4, #16]
 8004b16:	6165      	str	r5, [r4, #20]
 8004b18:	61a5      	str	r5, [r4, #24]
 8004b1a:	2208      	movs	r2, #8
 8004b1c:	4629      	mov	r1, r5
 8004b1e:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004b22:	f7ff fd38 	bl	8004596 <memset>
 8004b26:	6365      	str	r5, [r4, #52]	; 0x34
 8004b28:	63a5      	str	r5, [r4, #56]	; 0x38
 8004b2a:	64a5      	str	r5, [r4, #72]	; 0x48
 8004b2c:	64e5      	str	r5, [r4, #76]	; 0x4c
 8004b2e:	e7e6      	b.n	8004afe <__sfp+0x42>
 8004b30:	08006878 	.word	0x08006878

08004b34 <_fwalk_reent>:
 8004b34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004b38:	4680      	mov	r8, r0
 8004b3a:	4689      	mov	r9, r1
 8004b3c:	2600      	movs	r6, #0
 8004b3e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004b42:	b914      	cbnz	r4, 8004b4a <_fwalk_reent+0x16>
 8004b44:	4630      	mov	r0, r6
 8004b46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004b4a:	68a5      	ldr	r5, [r4, #8]
 8004b4c:	6867      	ldr	r7, [r4, #4]
 8004b4e:	3f01      	subs	r7, #1
 8004b50:	d501      	bpl.n	8004b56 <_fwalk_reent+0x22>
 8004b52:	6824      	ldr	r4, [r4, #0]
 8004b54:	e7f5      	b.n	8004b42 <_fwalk_reent+0xe>
 8004b56:	89ab      	ldrh	r3, [r5, #12]
 8004b58:	2b01      	cmp	r3, #1
 8004b5a:	d907      	bls.n	8004b6c <_fwalk_reent+0x38>
 8004b5c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004b60:	3301      	adds	r3, #1
 8004b62:	d003      	beq.n	8004b6c <_fwalk_reent+0x38>
 8004b64:	4629      	mov	r1, r5
 8004b66:	4640      	mov	r0, r8
 8004b68:	47c8      	blx	r9
 8004b6a:	4306      	orrs	r6, r0
 8004b6c:	3568      	adds	r5, #104	; 0x68
 8004b6e:	e7ee      	b.n	8004b4e <_fwalk_reent+0x1a>

08004b70 <__swhatbuf_r>:
 8004b70:	b570      	push	{r4, r5, r6, lr}
 8004b72:	460e      	mov	r6, r1
 8004b74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b78:	b090      	sub	sp, #64	; 0x40
 8004b7a:	2900      	cmp	r1, #0
 8004b7c:	4614      	mov	r4, r2
 8004b7e:	461d      	mov	r5, r3
 8004b80:	da07      	bge.n	8004b92 <__swhatbuf_r+0x22>
 8004b82:	2300      	movs	r3, #0
 8004b84:	602b      	str	r3, [r5, #0]
 8004b86:	89b3      	ldrh	r3, [r6, #12]
 8004b88:	061a      	lsls	r2, r3, #24
 8004b8a:	d410      	bmi.n	8004bae <__swhatbuf_r+0x3e>
 8004b8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b90:	e00e      	b.n	8004bb0 <__swhatbuf_r+0x40>
 8004b92:	aa01      	add	r2, sp, #4
 8004b94:	f000 fd96 	bl	80056c4 <_fstat_r>
 8004b98:	2800      	cmp	r0, #0
 8004b9a:	dbf2      	blt.n	8004b82 <__swhatbuf_r+0x12>
 8004b9c:	9a02      	ldr	r2, [sp, #8]
 8004b9e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004ba2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004ba6:	425a      	negs	r2, r3
 8004ba8:	415a      	adcs	r2, r3
 8004baa:	602a      	str	r2, [r5, #0]
 8004bac:	e7ee      	b.n	8004b8c <__swhatbuf_r+0x1c>
 8004bae:	2340      	movs	r3, #64	; 0x40
 8004bb0:	2000      	movs	r0, #0
 8004bb2:	6023      	str	r3, [r4, #0]
 8004bb4:	b010      	add	sp, #64	; 0x40
 8004bb6:	bd70      	pop	{r4, r5, r6, pc}

08004bb8 <__smakebuf_r>:
 8004bb8:	898b      	ldrh	r3, [r1, #12]
 8004bba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004bbc:	079d      	lsls	r5, r3, #30
 8004bbe:	4606      	mov	r6, r0
 8004bc0:	460c      	mov	r4, r1
 8004bc2:	d507      	bpl.n	8004bd4 <__smakebuf_r+0x1c>
 8004bc4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004bc8:	6023      	str	r3, [r4, #0]
 8004bca:	6123      	str	r3, [r4, #16]
 8004bcc:	2301      	movs	r3, #1
 8004bce:	6163      	str	r3, [r4, #20]
 8004bd0:	b002      	add	sp, #8
 8004bd2:	bd70      	pop	{r4, r5, r6, pc}
 8004bd4:	ab01      	add	r3, sp, #4
 8004bd6:	466a      	mov	r2, sp
 8004bd8:	f7ff ffca 	bl	8004b70 <__swhatbuf_r>
 8004bdc:	9900      	ldr	r1, [sp, #0]
 8004bde:	4605      	mov	r5, r0
 8004be0:	4630      	mov	r0, r6
 8004be2:	f000 f875 	bl	8004cd0 <_malloc_r>
 8004be6:	b948      	cbnz	r0, 8004bfc <__smakebuf_r+0x44>
 8004be8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004bec:	059a      	lsls	r2, r3, #22
 8004bee:	d4ef      	bmi.n	8004bd0 <__smakebuf_r+0x18>
 8004bf0:	f023 0303 	bic.w	r3, r3, #3
 8004bf4:	f043 0302 	orr.w	r3, r3, #2
 8004bf8:	81a3      	strh	r3, [r4, #12]
 8004bfa:	e7e3      	b.n	8004bc4 <__smakebuf_r+0xc>
 8004bfc:	4b0d      	ldr	r3, [pc, #52]	; (8004c34 <__smakebuf_r+0x7c>)
 8004bfe:	62b3      	str	r3, [r6, #40]	; 0x28
 8004c00:	89a3      	ldrh	r3, [r4, #12]
 8004c02:	6020      	str	r0, [r4, #0]
 8004c04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c08:	81a3      	strh	r3, [r4, #12]
 8004c0a:	9b00      	ldr	r3, [sp, #0]
 8004c0c:	6120      	str	r0, [r4, #16]
 8004c0e:	6163      	str	r3, [r4, #20]
 8004c10:	9b01      	ldr	r3, [sp, #4]
 8004c12:	b15b      	cbz	r3, 8004c2c <__smakebuf_r+0x74>
 8004c14:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004c18:	4630      	mov	r0, r6
 8004c1a:	f000 fd65 	bl	80056e8 <_isatty_r>
 8004c1e:	b128      	cbz	r0, 8004c2c <__smakebuf_r+0x74>
 8004c20:	89a3      	ldrh	r3, [r4, #12]
 8004c22:	f023 0303 	bic.w	r3, r3, #3
 8004c26:	f043 0301 	orr.w	r3, r3, #1
 8004c2a:	81a3      	strh	r3, [r4, #12]
 8004c2c:	89a3      	ldrh	r3, [r4, #12]
 8004c2e:	431d      	orrs	r5, r3
 8004c30:	81a5      	strh	r5, [r4, #12]
 8004c32:	e7cd      	b.n	8004bd0 <__smakebuf_r+0x18>
 8004c34:	080049dd 	.word	0x080049dd

08004c38 <_free_r>:
 8004c38:	b538      	push	{r3, r4, r5, lr}
 8004c3a:	4605      	mov	r5, r0
 8004c3c:	2900      	cmp	r1, #0
 8004c3e:	d043      	beq.n	8004cc8 <_free_r+0x90>
 8004c40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c44:	1f0c      	subs	r4, r1, #4
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	bfb8      	it	lt
 8004c4a:	18e4      	addlt	r4, r4, r3
 8004c4c:	f000 fd96 	bl	800577c <__malloc_lock>
 8004c50:	4a1e      	ldr	r2, [pc, #120]	; (8004ccc <_free_r+0x94>)
 8004c52:	6813      	ldr	r3, [r2, #0]
 8004c54:	4610      	mov	r0, r2
 8004c56:	b933      	cbnz	r3, 8004c66 <_free_r+0x2e>
 8004c58:	6063      	str	r3, [r4, #4]
 8004c5a:	6014      	str	r4, [r2, #0]
 8004c5c:	4628      	mov	r0, r5
 8004c5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004c62:	f000 bd8c 	b.w	800577e <__malloc_unlock>
 8004c66:	42a3      	cmp	r3, r4
 8004c68:	d90b      	bls.n	8004c82 <_free_r+0x4a>
 8004c6a:	6821      	ldr	r1, [r4, #0]
 8004c6c:	1862      	adds	r2, r4, r1
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	bf01      	itttt	eq
 8004c72:	681a      	ldreq	r2, [r3, #0]
 8004c74:	685b      	ldreq	r3, [r3, #4]
 8004c76:	1852      	addeq	r2, r2, r1
 8004c78:	6022      	streq	r2, [r4, #0]
 8004c7a:	6063      	str	r3, [r4, #4]
 8004c7c:	6004      	str	r4, [r0, #0]
 8004c7e:	e7ed      	b.n	8004c5c <_free_r+0x24>
 8004c80:	4613      	mov	r3, r2
 8004c82:	685a      	ldr	r2, [r3, #4]
 8004c84:	b10a      	cbz	r2, 8004c8a <_free_r+0x52>
 8004c86:	42a2      	cmp	r2, r4
 8004c88:	d9fa      	bls.n	8004c80 <_free_r+0x48>
 8004c8a:	6819      	ldr	r1, [r3, #0]
 8004c8c:	1858      	adds	r0, r3, r1
 8004c8e:	42a0      	cmp	r0, r4
 8004c90:	d10b      	bne.n	8004caa <_free_r+0x72>
 8004c92:	6820      	ldr	r0, [r4, #0]
 8004c94:	4401      	add	r1, r0
 8004c96:	1858      	adds	r0, r3, r1
 8004c98:	4282      	cmp	r2, r0
 8004c9a:	6019      	str	r1, [r3, #0]
 8004c9c:	d1de      	bne.n	8004c5c <_free_r+0x24>
 8004c9e:	6810      	ldr	r0, [r2, #0]
 8004ca0:	6852      	ldr	r2, [r2, #4]
 8004ca2:	4401      	add	r1, r0
 8004ca4:	6019      	str	r1, [r3, #0]
 8004ca6:	605a      	str	r2, [r3, #4]
 8004ca8:	e7d8      	b.n	8004c5c <_free_r+0x24>
 8004caa:	d902      	bls.n	8004cb2 <_free_r+0x7a>
 8004cac:	230c      	movs	r3, #12
 8004cae:	602b      	str	r3, [r5, #0]
 8004cb0:	e7d4      	b.n	8004c5c <_free_r+0x24>
 8004cb2:	6820      	ldr	r0, [r4, #0]
 8004cb4:	1821      	adds	r1, r4, r0
 8004cb6:	428a      	cmp	r2, r1
 8004cb8:	bf01      	itttt	eq
 8004cba:	6811      	ldreq	r1, [r2, #0]
 8004cbc:	6852      	ldreq	r2, [r2, #4]
 8004cbe:	1809      	addeq	r1, r1, r0
 8004cc0:	6021      	streq	r1, [r4, #0]
 8004cc2:	6062      	str	r2, [r4, #4]
 8004cc4:	605c      	str	r4, [r3, #4]
 8004cc6:	e7c9      	b.n	8004c5c <_free_r+0x24>
 8004cc8:	bd38      	pop	{r3, r4, r5, pc}
 8004cca:	bf00      	nop
 8004ccc:	20000554 	.word	0x20000554

08004cd0 <_malloc_r>:
 8004cd0:	b570      	push	{r4, r5, r6, lr}
 8004cd2:	1ccd      	adds	r5, r1, #3
 8004cd4:	f025 0503 	bic.w	r5, r5, #3
 8004cd8:	3508      	adds	r5, #8
 8004cda:	2d0c      	cmp	r5, #12
 8004cdc:	bf38      	it	cc
 8004cde:	250c      	movcc	r5, #12
 8004ce0:	2d00      	cmp	r5, #0
 8004ce2:	4606      	mov	r6, r0
 8004ce4:	db01      	blt.n	8004cea <_malloc_r+0x1a>
 8004ce6:	42a9      	cmp	r1, r5
 8004ce8:	d903      	bls.n	8004cf2 <_malloc_r+0x22>
 8004cea:	230c      	movs	r3, #12
 8004cec:	6033      	str	r3, [r6, #0]
 8004cee:	2000      	movs	r0, #0
 8004cf0:	bd70      	pop	{r4, r5, r6, pc}
 8004cf2:	f000 fd43 	bl	800577c <__malloc_lock>
 8004cf6:	4a23      	ldr	r2, [pc, #140]	; (8004d84 <_malloc_r+0xb4>)
 8004cf8:	6814      	ldr	r4, [r2, #0]
 8004cfa:	4621      	mov	r1, r4
 8004cfc:	b991      	cbnz	r1, 8004d24 <_malloc_r+0x54>
 8004cfe:	4c22      	ldr	r4, [pc, #136]	; (8004d88 <_malloc_r+0xb8>)
 8004d00:	6823      	ldr	r3, [r4, #0]
 8004d02:	b91b      	cbnz	r3, 8004d0c <_malloc_r+0x3c>
 8004d04:	4630      	mov	r0, r6
 8004d06:	f000 fc67 	bl	80055d8 <_sbrk_r>
 8004d0a:	6020      	str	r0, [r4, #0]
 8004d0c:	4629      	mov	r1, r5
 8004d0e:	4630      	mov	r0, r6
 8004d10:	f000 fc62 	bl	80055d8 <_sbrk_r>
 8004d14:	1c43      	adds	r3, r0, #1
 8004d16:	d126      	bne.n	8004d66 <_malloc_r+0x96>
 8004d18:	230c      	movs	r3, #12
 8004d1a:	4630      	mov	r0, r6
 8004d1c:	6033      	str	r3, [r6, #0]
 8004d1e:	f000 fd2e 	bl	800577e <__malloc_unlock>
 8004d22:	e7e4      	b.n	8004cee <_malloc_r+0x1e>
 8004d24:	680b      	ldr	r3, [r1, #0]
 8004d26:	1b5b      	subs	r3, r3, r5
 8004d28:	d41a      	bmi.n	8004d60 <_malloc_r+0x90>
 8004d2a:	2b0b      	cmp	r3, #11
 8004d2c:	d90f      	bls.n	8004d4e <_malloc_r+0x7e>
 8004d2e:	600b      	str	r3, [r1, #0]
 8004d30:	18cc      	adds	r4, r1, r3
 8004d32:	50cd      	str	r5, [r1, r3]
 8004d34:	4630      	mov	r0, r6
 8004d36:	f000 fd22 	bl	800577e <__malloc_unlock>
 8004d3a:	f104 000b 	add.w	r0, r4, #11
 8004d3e:	1d23      	adds	r3, r4, #4
 8004d40:	f020 0007 	bic.w	r0, r0, #7
 8004d44:	1ac3      	subs	r3, r0, r3
 8004d46:	d01b      	beq.n	8004d80 <_malloc_r+0xb0>
 8004d48:	425a      	negs	r2, r3
 8004d4a:	50e2      	str	r2, [r4, r3]
 8004d4c:	bd70      	pop	{r4, r5, r6, pc}
 8004d4e:	428c      	cmp	r4, r1
 8004d50:	bf0b      	itete	eq
 8004d52:	6863      	ldreq	r3, [r4, #4]
 8004d54:	684b      	ldrne	r3, [r1, #4]
 8004d56:	6013      	streq	r3, [r2, #0]
 8004d58:	6063      	strne	r3, [r4, #4]
 8004d5a:	bf18      	it	ne
 8004d5c:	460c      	movne	r4, r1
 8004d5e:	e7e9      	b.n	8004d34 <_malloc_r+0x64>
 8004d60:	460c      	mov	r4, r1
 8004d62:	6849      	ldr	r1, [r1, #4]
 8004d64:	e7ca      	b.n	8004cfc <_malloc_r+0x2c>
 8004d66:	1cc4      	adds	r4, r0, #3
 8004d68:	f024 0403 	bic.w	r4, r4, #3
 8004d6c:	42a0      	cmp	r0, r4
 8004d6e:	d005      	beq.n	8004d7c <_malloc_r+0xac>
 8004d70:	1a21      	subs	r1, r4, r0
 8004d72:	4630      	mov	r0, r6
 8004d74:	f000 fc30 	bl	80055d8 <_sbrk_r>
 8004d78:	3001      	adds	r0, #1
 8004d7a:	d0cd      	beq.n	8004d18 <_malloc_r+0x48>
 8004d7c:	6025      	str	r5, [r4, #0]
 8004d7e:	e7d9      	b.n	8004d34 <_malloc_r+0x64>
 8004d80:	bd70      	pop	{r4, r5, r6, pc}
 8004d82:	bf00      	nop
 8004d84:	20000554 	.word	0x20000554
 8004d88:	20000558 	.word	0x20000558

08004d8c <__ssputs_r>:
 8004d8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d90:	688e      	ldr	r6, [r1, #8]
 8004d92:	4682      	mov	sl, r0
 8004d94:	429e      	cmp	r6, r3
 8004d96:	460c      	mov	r4, r1
 8004d98:	4691      	mov	r9, r2
 8004d9a:	4698      	mov	r8, r3
 8004d9c:	d835      	bhi.n	8004e0a <__ssputs_r+0x7e>
 8004d9e:	898a      	ldrh	r2, [r1, #12]
 8004da0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004da4:	d031      	beq.n	8004e0a <__ssputs_r+0x7e>
 8004da6:	2302      	movs	r3, #2
 8004da8:	6825      	ldr	r5, [r4, #0]
 8004daa:	6909      	ldr	r1, [r1, #16]
 8004dac:	1a6f      	subs	r7, r5, r1
 8004dae:	6965      	ldr	r5, [r4, #20]
 8004db0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004db4:	fb95 f5f3 	sdiv	r5, r5, r3
 8004db8:	f108 0301 	add.w	r3, r8, #1
 8004dbc:	443b      	add	r3, r7
 8004dbe:	429d      	cmp	r5, r3
 8004dc0:	bf38      	it	cc
 8004dc2:	461d      	movcc	r5, r3
 8004dc4:	0553      	lsls	r3, r2, #21
 8004dc6:	d531      	bpl.n	8004e2c <__ssputs_r+0xa0>
 8004dc8:	4629      	mov	r1, r5
 8004dca:	f7ff ff81 	bl	8004cd0 <_malloc_r>
 8004dce:	4606      	mov	r6, r0
 8004dd0:	b950      	cbnz	r0, 8004de8 <__ssputs_r+0x5c>
 8004dd2:	230c      	movs	r3, #12
 8004dd4:	f8ca 3000 	str.w	r3, [sl]
 8004dd8:	89a3      	ldrh	r3, [r4, #12]
 8004dda:	f04f 30ff 	mov.w	r0, #4294967295
 8004dde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004de2:	81a3      	strh	r3, [r4, #12]
 8004de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004de8:	463a      	mov	r2, r7
 8004dea:	6921      	ldr	r1, [r4, #16]
 8004dec:	f7ff fbc8 	bl	8004580 <memcpy>
 8004df0:	89a3      	ldrh	r3, [r4, #12]
 8004df2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004df6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004dfa:	81a3      	strh	r3, [r4, #12]
 8004dfc:	6126      	str	r6, [r4, #16]
 8004dfe:	443e      	add	r6, r7
 8004e00:	6026      	str	r6, [r4, #0]
 8004e02:	4646      	mov	r6, r8
 8004e04:	6165      	str	r5, [r4, #20]
 8004e06:	1bed      	subs	r5, r5, r7
 8004e08:	60a5      	str	r5, [r4, #8]
 8004e0a:	4546      	cmp	r6, r8
 8004e0c:	bf28      	it	cs
 8004e0e:	4646      	movcs	r6, r8
 8004e10:	4649      	mov	r1, r9
 8004e12:	4632      	mov	r2, r6
 8004e14:	6820      	ldr	r0, [r4, #0]
 8004e16:	f000 fc97 	bl	8005748 <memmove>
 8004e1a:	68a3      	ldr	r3, [r4, #8]
 8004e1c:	2000      	movs	r0, #0
 8004e1e:	1b9b      	subs	r3, r3, r6
 8004e20:	60a3      	str	r3, [r4, #8]
 8004e22:	6823      	ldr	r3, [r4, #0]
 8004e24:	441e      	add	r6, r3
 8004e26:	6026      	str	r6, [r4, #0]
 8004e28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e2c:	462a      	mov	r2, r5
 8004e2e:	f000 fca7 	bl	8005780 <_realloc_r>
 8004e32:	4606      	mov	r6, r0
 8004e34:	2800      	cmp	r0, #0
 8004e36:	d1e1      	bne.n	8004dfc <__ssputs_r+0x70>
 8004e38:	6921      	ldr	r1, [r4, #16]
 8004e3a:	4650      	mov	r0, sl
 8004e3c:	f7ff fefc 	bl	8004c38 <_free_r>
 8004e40:	e7c7      	b.n	8004dd2 <__ssputs_r+0x46>
	...

08004e44 <_svfiprintf_r>:
 8004e44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e48:	b09d      	sub	sp, #116	; 0x74
 8004e4a:	9303      	str	r3, [sp, #12]
 8004e4c:	898b      	ldrh	r3, [r1, #12]
 8004e4e:	4680      	mov	r8, r0
 8004e50:	061c      	lsls	r4, r3, #24
 8004e52:	460d      	mov	r5, r1
 8004e54:	4616      	mov	r6, r2
 8004e56:	d50f      	bpl.n	8004e78 <_svfiprintf_r+0x34>
 8004e58:	690b      	ldr	r3, [r1, #16]
 8004e5a:	b96b      	cbnz	r3, 8004e78 <_svfiprintf_r+0x34>
 8004e5c:	2140      	movs	r1, #64	; 0x40
 8004e5e:	f7ff ff37 	bl	8004cd0 <_malloc_r>
 8004e62:	6028      	str	r0, [r5, #0]
 8004e64:	6128      	str	r0, [r5, #16]
 8004e66:	b928      	cbnz	r0, 8004e74 <_svfiprintf_r+0x30>
 8004e68:	230c      	movs	r3, #12
 8004e6a:	f8c8 3000 	str.w	r3, [r8]
 8004e6e:	f04f 30ff 	mov.w	r0, #4294967295
 8004e72:	e0c4      	b.n	8004ffe <_svfiprintf_r+0x1ba>
 8004e74:	2340      	movs	r3, #64	; 0x40
 8004e76:	616b      	str	r3, [r5, #20]
 8004e78:	2300      	movs	r3, #0
 8004e7a:	9309      	str	r3, [sp, #36]	; 0x24
 8004e7c:	2320      	movs	r3, #32
 8004e7e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004e82:	2330      	movs	r3, #48	; 0x30
 8004e84:	f04f 0b01 	mov.w	fp, #1
 8004e88:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004e8c:	4637      	mov	r7, r6
 8004e8e:	463c      	mov	r4, r7
 8004e90:	f814 3b01 	ldrb.w	r3, [r4], #1
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d13c      	bne.n	8004f12 <_svfiprintf_r+0xce>
 8004e98:	ebb7 0a06 	subs.w	sl, r7, r6
 8004e9c:	d00b      	beq.n	8004eb6 <_svfiprintf_r+0x72>
 8004e9e:	4653      	mov	r3, sl
 8004ea0:	4632      	mov	r2, r6
 8004ea2:	4629      	mov	r1, r5
 8004ea4:	4640      	mov	r0, r8
 8004ea6:	f7ff ff71 	bl	8004d8c <__ssputs_r>
 8004eaa:	3001      	adds	r0, #1
 8004eac:	f000 80a2 	beq.w	8004ff4 <_svfiprintf_r+0x1b0>
 8004eb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004eb2:	4453      	add	r3, sl
 8004eb4:	9309      	str	r3, [sp, #36]	; 0x24
 8004eb6:	783b      	ldrb	r3, [r7, #0]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	f000 809b 	beq.w	8004ff4 <_svfiprintf_r+0x1b0>
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	f04f 32ff 	mov.w	r2, #4294967295
 8004ec4:	9304      	str	r3, [sp, #16]
 8004ec6:	9307      	str	r3, [sp, #28]
 8004ec8:	9205      	str	r2, [sp, #20]
 8004eca:	9306      	str	r3, [sp, #24]
 8004ecc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004ed0:	931a      	str	r3, [sp, #104]	; 0x68
 8004ed2:	2205      	movs	r2, #5
 8004ed4:	7821      	ldrb	r1, [r4, #0]
 8004ed6:	4850      	ldr	r0, [pc, #320]	; (8005018 <_svfiprintf_r+0x1d4>)
 8004ed8:	f000 fc28 	bl	800572c <memchr>
 8004edc:	1c67      	adds	r7, r4, #1
 8004ede:	9b04      	ldr	r3, [sp, #16]
 8004ee0:	b9d8      	cbnz	r0, 8004f1a <_svfiprintf_r+0xd6>
 8004ee2:	06d9      	lsls	r1, r3, #27
 8004ee4:	bf44      	itt	mi
 8004ee6:	2220      	movmi	r2, #32
 8004ee8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004eec:	071a      	lsls	r2, r3, #28
 8004eee:	bf44      	itt	mi
 8004ef0:	222b      	movmi	r2, #43	; 0x2b
 8004ef2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004ef6:	7822      	ldrb	r2, [r4, #0]
 8004ef8:	2a2a      	cmp	r2, #42	; 0x2a
 8004efa:	d016      	beq.n	8004f2a <_svfiprintf_r+0xe6>
 8004efc:	2100      	movs	r1, #0
 8004efe:	200a      	movs	r0, #10
 8004f00:	9a07      	ldr	r2, [sp, #28]
 8004f02:	4627      	mov	r7, r4
 8004f04:	783b      	ldrb	r3, [r7, #0]
 8004f06:	3401      	adds	r4, #1
 8004f08:	3b30      	subs	r3, #48	; 0x30
 8004f0a:	2b09      	cmp	r3, #9
 8004f0c:	d950      	bls.n	8004fb0 <_svfiprintf_r+0x16c>
 8004f0e:	b1c9      	cbz	r1, 8004f44 <_svfiprintf_r+0x100>
 8004f10:	e011      	b.n	8004f36 <_svfiprintf_r+0xf2>
 8004f12:	2b25      	cmp	r3, #37	; 0x25
 8004f14:	d0c0      	beq.n	8004e98 <_svfiprintf_r+0x54>
 8004f16:	4627      	mov	r7, r4
 8004f18:	e7b9      	b.n	8004e8e <_svfiprintf_r+0x4a>
 8004f1a:	4a3f      	ldr	r2, [pc, #252]	; (8005018 <_svfiprintf_r+0x1d4>)
 8004f1c:	463c      	mov	r4, r7
 8004f1e:	1a80      	subs	r0, r0, r2
 8004f20:	fa0b f000 	lsl.w	r0, fp, r0
 8004f24:	4318      	orrs	r0, r3
 8004f26:	9004      	str	r0, [sp, #16]
 8004f28:	e7d3      	b.n	8004ed2 <_svfiprintf_r+0x8e>
 8004f2a:	9a03      	ldr	r2, [sp, #12]
 8004f2c:	1d11      	adds	r1, r2, #4
 8004f2e:	6812      	ldr	r2, [r2, #0]
 8004f30:	9103      	str	r1, [sp, #12]
 8004f32:	2a00      	cmp	r2, #0
 8004f34:	db01      	blt.n	8004f3a <_svfiprintf_r+0xf6>
 8004f36:	9207      	str	r2, [sp, #28]
 8004f38:	e004      	b.n	8004f44 <_svfiprintf_r+0x100>
 8004f3a:	4252      	negs	r2, r2
 8004f3c:	f043 0302 	orr.w	r3, r3, #2
 8004f40:	9207      	str	r2, [sp, #28]
 8004f42:	9304      	str	r3, [sp, #16]
 8004f44:	783b      	ldrb	r3, [r7, #0]
 8004f46:	2b2e      	cmp	r3, #46	; 0x2e
 8004f48:	d10d      	bne.n	8004f66 <_svfiprintf_r+0x122>
 8004f4a:	787b      	ldrb	r3, [r7, #1]
 8004f4c:	1c79      	adds	r1, r7, #1
 8004f4e:	2b2a      	cmp	r3, #42	; 0x2a
 8004f50:	d132      	bne.n	8004fb8 <_svfiprintf_r+0x174>
 8004f52:	9b03      	ldr	r3, [sp, #12]
 8004f54:	3702      	adds	r7, #2
 8004f56:	1d1a      	adds	r2, r3, #4
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	9203      	str	r2, [sp, #12]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	bfb8      	it	lt
 8004f60:	f04f 33ff 	movlt.w	r3, #4294967295
 8004f64:	9305      	str	r3, [sp, #20]
 8004f66:	4c2d      	ldr	r4, [pc, #180]	; (800501c <_svfiprintf_r+0x1d8>)
 8004f68:	2203      	movs	r2, #3
 8004f6a:	7839      	ldrb	r1, [r7, #0]
 8004f6c:	4620      	mov	r0, r4
 8004f6e:	f000 fbdd 	bl	800572c <memchr>
 8004f72:	b138      	cbz	r0, 8004f84 <_svfiprintf_r+0x140>
 8004f74:	2340      	movs	r3, #64	; 0x40
 8004f76:	1b00      	subs	r0, r0, r4
 8004f78:	fa03 f000 	lsl.w	r0, r3, r0
 8004f7c:	9b04      	ldr	r3, [sp, #16]
 8004f7e:	3701      	adds	r7, #1
 8004f80:	4303      	orrs	r3, r0
 8004f82:	9304      	str	r3, [sp, #16]
 8004f84:	7839      	ldrb	r1, [r7, #0]
 8004f86:	2206      	movs	r2, #6
 8004f88:	4825      	ldr	r0, [pc, #148]	; (8005020 <_svfiprintf_r+0x1dc>)
 8004f8a:	1c7e      	adds	r6, r7, #1
 8004f8c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004f90:	f000 fbcc 	bl	800572c <memchr>
 8004f94:	2800      	cmp	r0, #0
 8004f96:	d035      	beq.n	8005004 <_svfiprintf_r+0x1c0>
 8004f98:	4b22      	ldr	r3, [pc, #136]	; (8005024 <_svfiprintf_r+0x1e0>)
 8004f9a:	b9fb      	cbnz	r3, 8004fdc <_svfiprintf_r+0x198>
 8004f9c:	9b03      	ldr	r3, [sp, #12]
 8004f9e:	3307      	adds	r3, #7
 8004fa0:	f023 0307 	bic.w	r3, r3, #7
 8004fa4:	3308      	adds	r3, #8
 8004fa6:	9303      	str	r3, [sp, #12]
 8004fa8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004faa:	444b      	add	r3, r9
 8004fac:	9309      	str	r3, [sp, #36]	; 0x24
 8004fae:	e76d      	b.n	8004e8c <_svfiprintf_r+0x48>
 8004fb0:	fb00 3202 	mla	r2, r0, r2, r3
 8004fb4:	2101      	movs	r1, #1
 8004fb6:	e7a4      	b.n	8004f02 <_svfiprintf_r+0xbe>
 8004fb8:	2300      	movs	r3, #0
 8004fba:	240a      	movs	r4, #10
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	9305      	str	r3, [sp, #20]
 8004fc0:	460f      	mov	r7, r1
 8004fc2:	783a      	ldrb	r2, [r7, #0]
 8004fc4:	3101      	adds	r1, #1
 8004fc6:	3a30      	subs	r2, #48	; 0x30
 8004fc8:	2a09      	cmp	r2, #9
 8004fca:	d903      	bls.n	8004fd4 <_svfiprintf_r+0x190>
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d0ca      	beq.n	8004f66 <_svfiprintf_r+0x122>
 8004fd0:	9005      	str	r0, [sp, #20]
 8004fd2:	e7c8      	b.n	8004f66 <_svfiprintf_r+0x122>
 8004fd4:	fb04 2000 	mla	r0, r4, r0, r2
 8004fd8:	2301      	movs	r3, #1
 8004fda:	e7f1      	b.n	8004fc0 <_svfiprintf_r+0x17c>
 8004fdc:	ab03      	add	r3, sp, #12
 8004fde:	9300      	str	r3, [sp, #0]
 8004fe0:	462a      	mov	r2, r5
 8004fe2:	4b11      	ldr	r3, [pc, #68]	; (8005028 <_svfiprintf_r+0x1e4>)
 8004fe4:	a904      	add	r1, sp, #16
 8004fe6:	4640      	mov	r0, r8
 8004fe8:	f3af 8000 	nop.w
 8004fec:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004ff0:	4681      	mov	r9, r0
 8004ff2:	d1d9      	bne.n	8004fa8 <_svfiprintf_r+0x164>
 8004ff4:	89ab      	ldrh	r3, [r5, #12]
 8004ff6:	065b      	lsls	r3, r3, #25
 8004ff8:	f53f af39 	bmi.w	8004e6e <_svfiprintf_r+0x2a>
 8004ffc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004ffe:	b01d      	add	sp, #116	; 0x74
 8005000:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005004:	ab03      	add	r3, sp, #12
 8005006:	9300      	str	r3, [sp, #0]
 8005008:	462a      	mov	r2, r5
 800500a:	4b07      	ldr	r3, [pc, #28]	; (8005028 <_svfiprintf_r+0x1e4>)
 800500c:	a904      	add	r1, sp, #16
 800500e:	4640      	mov	r0, r8
 8005010:	f000 f9c2 	bl	8005398 <_printf_i>
 8005014:	e7ea      	b.n	8004fec <_svfiprintf_r+0x1a8>
 8005016:	bf00      	nop
 8005018:	080068dc 	.word	0x080068dc
 800501c:	080068e2 	.word	0x080068e2
 8005020:	080068e6 	.word	0x080068e6
 8005024:	00000000 	.word	0x00000000
 8005028:	08004d8d 	.word	0x08004d8d

0800502c <__sfputc_r>:
 800502c:	6893      	ldr	r3, [r2, #8]
 800502e:	b410      	push	{r4}
 8005030:	3b01      	subs	r3, #1
 8005032:	2b00      	cmp	r3, #0
 8005034:	6093      	str	r3, [r2, #8]
 8005036:	da08      	bge.n	800504a <__sfputc_r+0x1e>
 8005038:	6994      	ldr	r4, [r2, #24]
 800503a:	42a3      	cmp	r3, r4
 800503c:	db02      	blt.n	8005044 <__sfputc_r+0x18>
 800503e:	b2cb      	uxtb	r3, r1
 8005040:	2b0a      	cmp	r3, #10
 8005042:	d102      	bne.n	800504a <__sfputc_r+0x1e>
 8005044:	bc10      	pop	{r4}
 8005046:	f7ff bb57 	b.w	80046f8 <__swbuf_r>
 800504a:	6813      	ldr	r3, [r2, #0]
 800504c:	1c58      	adds	r0, r3, #1
 800504e:	6010      	str	r0, [r2, #0]
 8005050:	7019      	strb	r1, [r3, #0]
 8005052:	b2c8      	uxtb	r0, r1
 8005054:	bc10      	pop	{r4}
 8005056:	4770      	bx	lr

08005058 <__sfputs_r>:
 8005058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800505a:	4606      	mov	r6, r0
 800505c:	460f      	mov	r7, r1
 800505e:	4614      	mov	r4, r2
 8005060:	18d5      	adds	r5, r2, r3
 8005062:	42ac      	cmp	r4, r5
 8005064:	d101      	bne.n	800506a <__sfputs_r+0x12>
 8005066:	2000      	movs	r0, #0
 8005068:	e007      	b.n	800507a <__sfputs_r+0x22>
 800506a:	463a      	mov	r2, r7
 800506c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005070:	4630      	mov	r0, r6
 8005072:	f7ff ffdb 	bl	800502c <__sfputc_r>
 8005076:	1c43      	adds	r3, r0, #1
 8005078:	d1f3      	bne.n	8005062 <__sfputs_r+0xa>
 800507a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800507c <_vfiprintf_r>:
 800507c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005080:	b09d      	sub	sp, #116	; 0x74
 8005082:	460c      	mov	r4, r1
 8005084:	4617      	mov	r7, r2
 8005086:	9303      	str	r3, [sp, #12]
 8005088:	4606      	mov	r6, r0
 800508a:	b118      	cbz	r0, 8005094 <_vfiprintf_r+0x18>
 800508c:	6983      	ldr	r3, [r0, #24]
 800508e:	b90b      	cbnz	r3, 8005094 <_vfiprintf_r+0x18>
 8005090:	f7ff fce4 	bl	8004a5c <__sinit>
 8005094:	4b7c      	ldr	r3, [pc, #496]	; (8005288 <_vfiprintf_r+0x20c>)
 8005096:	429c      	cmp	r4, r3
 8005098:	d157      	bne.n	800514a <_vfiprintf_r+0xce>
 800509a:	6874      	ldr	r4, [r6, #4]
 800509c:	89a3      	ldrh	r3, [r4, #12]
 800509e:	0718      	lsls	r0, r3, #28
 80050a0:	d55d      	bpl.n	800515e <_vfiprintf_r+0xe2>
 80050a2:	6923      	ldr	r3, [r4, #16]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d05a      	beq.n	800515e <_vfiprintf_r+0xe2>
 80050a8:	2300      	movs	r3, #0
 80050aa:	9309      	str	r3, [sp, #36]	; 0x24
 80050ac:	2320      	movs	r3, #32
 80050ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80050b2:	2330      	movs	r3, #48	; 0x30
 80050b4:	f04f 0b01 	mov.w	fp, #1
 80050b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80050bc:	46b8      	mov	r8, r7
 80050be:	4645      	mov	r5, r8
 80050c0:	f815 3b01 	ldrb.w	r3, [r5], #1
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d155      	bne.n	8005174 <_vfiprintf_r+0xf8>
 80050c8:	ebb8 0a07 	subs.w	sl, r8, r7
 80050cc:	d00b      	beq.n	80050e6 <_vfiprintf_r+0x6a>
 80050ce:	4653      	mov	r3, sl
 80050d0:	463a      	mov	r2, r7
 80050d2:	4621      	mov	r1, r4
 80050d4:	4630      	mov	r0, r6
 80050d6:	f7ff ffbf 	bl	8005058 <__sfputs_r>
 80050da:	3001      	adds	r0, #1
 80050dc:	f000 80c4 	beq.w	8005268 <_vfiprintf_r+0x1ec>
 80050e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80050e2:	4453      	add	r3, sl
 80050e4:	9309      	str	r3, [sp, #36]	; 0x24
 80050e6:	f898 3000 	ldrb.w	r3, [r8]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	f000 80bc 	beq.w	8005268 <_vfiprintf_r+0x1ec>
 80050f0:	2300      	movs	r3, #0
 80050f2:	f04f 32ff 	mov.w	r2, #4294967295
 80050f6:	9304      	str	r3, [sp, #16]
 80050f8:	9307      	str	r3, [sp, #28]
 80050fa:	9205      	str	r2, [sp, #20]
 80050fc:	9306      	str	r3, [sp, #24]
 80050fe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005102:	931a      	str	r3, [sp, #104]	; 0x68
 8005104:	2205      	movs	r2, #5
 8005106:	7829      	ldrb	r1, [r5, #0]
 8005108:	4860      	ldr	r0, [pc, #384]	; (800528c <_vfiprintf_r+0x210>)
 800510a:	f000 fb0f 	bl	800572c <memchr>
 800510e:	f105 0801 	add.w	r8, r5, #1
 8005112:	9b04      	ldr	r3, [sp, #16]
 8005114:	2800      	cmp	r0, #0
 8005116:	d131      	bne.n	800517c <_vfiprintf_r+0x100>
 8005118:	06d9      	lsls	r1, r3, #27
 800511a:	bf44      	itt	mi
 800511c:	2220      	movmi	r2, #32
 800511e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005122:	071a      	lsls	r2, r3, #28
 8005124:	bf44      	itt	mi
 8005126:	222b      	movmi	r2, #43	; 0x2b
 8005128:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800512c:	782a      	ldrb	r2, [r5, #0]
 800512e:	2a2a      	cmp	r2, #42	; 0x2a
 8005130:	d02c      	beq.n	800518c <_vfiprintf_r+0x110>
 8005132:	2100      	movs	r1, #0
 8005134:	200a      	movs	r0, #10
 8005136:	9a07      	ldr	r2, [sp, #28]
 8005138:	46a8      	mov	r8, r5
 800513a:	f898 3000 	ldrb.w	r3, [r8]
 800513e:	3501      	adds	r5, #1
 8005140:	3b30      	subs	r3, #48	; 0x30
 8005142:	2b09      	cmp	r3, #9
 8005144:	d96d      	bls.n	8005222 <_vfiprintf_r+0x1a6>
 8005146:	b371      	cbz	r1, 80051a6 <_vfiprintf_r+0x12a>
 8005148:	e026      	b.n	8005198 <_vfiprintf_r+0x11c>
 800514a:	4b51      	ldr	r3, [pc, #324]	; (8005290 <_vfiprintf_r+0x214>)
 800514c:	429c      	cmp	r4, r3
 800514e:	d101      	bne.n	8005154 <_vfiprintf_r+0xd8>
 8005150:	68b4      	ldr	r4, [r6, #8]
 8005152:	e7a3      	b.n	800509c <_vfiprintf_r+0x20>
 8005154:	4b4f      	ldr	r3, [pc, #316]	; (8005294 <_vfiprintf_r+0x218>)
 8005156:	429c      	cmp	r4, r3
 8005158:	bf08      	it	eq
 800515a:	68f4      	ldreq	r4, [r6, #12]
 800515c:	e79e      	b.n	800509c <_vfiprintf_r+0x20>
 800515e:	4621      	mov	r1, r4
 8005160:	4630      	mov	r0, r6
 8005162:	f7ff fb1b 	bl	800479c <__swsetup_r>
 8005166:	2800      	cmp	r0, #0
 8005168:	d09e      	beq.n	80050a8 <_vfiprintf_r+0x2c>
 800516a:	f04f 30ff 	mov.w	r0, #4294967295
 800516e:	b01d      	add	sp, #116	; 0x74
 8005170:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005174:	2b25      	cmp	r3, #37	; 0x25
 8005176:	d0a7      	beq.n	80050c8 <_vfiprintf_r+0x4c>
 8005178:	46a8      	mov	r8, r5
 800517a:	e7a0      	b.n	80050be <_vfiprintf_r+0x42>
 800517c:	4a43      	ldr	r2, [pc, #268]	; (800528c <_vfiprintf_r+0x210>)
 800517e:	4645      	mov	r5, r8
 8005180:	1a80      	subs	r0, r0, r2
 8005182:	fa0b f000 	lsl.w	r0, fp, r0
 8005186:	4318      	orrs	r0, r3
 8005188:	9004      	str	r0, [sp, #16]
 800518a:	e7bb      	b.n	8005104 <_vfiprintf_r+0x88>
 800518c:	9a03      	ldr	r2, [sp, #12]
 800518e:	1d11      	adds	r1, r2, #4
 8005190:	6812      	ldr	r2, [r2, #0]
 8005192:	9103      	str	r1, [sp, #12]
 8005194:	2a00      	cmp	r2, #0
 8005196:	db01      	blt.n	800519c <_vfiprintf_r+0x120>
 8005198:	9207      	str	r2, [sp, #28]
 800519a:	e004      	b.n	80051a6 <_vfiprintf_r+0x12a>
 800519c:	4252      	negs	r2, r2
 800519e:	f043 0302 	orr.w	r3, r3, #2
 80051a2:	9207      	str	r2, [sp, #28]
 80051a4:	9304      	str	r3, [sp, #16]
 80051a6:	f898 3000 	ldrb.w	r3, [r8]
 80051aa:	2b2e      	cmp	r3, #46	; 0x2e
 80051ac:	d110      	bne.n	80051d0 <_vfiprintf_r+0x154>
 80051ae:	f898 3001 	ldrb.w	r3, [r8, #1]
 80051b2:	f108 0101 	add.w	r1, r8, #1
 80051b6:	2b2a      	cmp	r3, #42	; 0x2a
 80051b8:	d137      	bne.n	800522a <_vfiprintf_r+0x1ae>
 80051ba:	9b03      	ldr	r3, [sp, #12]
 80051bc:	f108 0802 	add.w	r8, r8, #2
 80051c0:	1d1a      	adds	r2, r3, #4
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	9203      	str	r2, [sp, #12]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	bfb8      	it	lt
 80051ca:	f04f 33ff 	movlt.w	r3, #4294967295
 80051ce:	9305      	str	r3, [sp, #20]
 80051d0:	4d31      	ldr	r5, [pc, #196]	; (8005298 <_vfiprintf_r+0x21c>)
 80051d2:	2203      	movs	r2, #3
 80051d4:	f898 1000 	ldrb.w	r1, [r8]
 80051d8:	4628      	mov	r0, r5
 80051da:	f000 faa7 	bl	800572c <memchr>
 80051de:	b140      	cbz	r0, 80051f2 <_vfiprintf_r+0x176>
 80051e0:	2340      	movs	r3, #64	; 0x40
 80051e2:	1b40      	subs	r0, r0, r5
 80051e4:	fa03 f000 	lsl.w	r0, r3, r0
 80051e8:	9b04      	ldr	r3, [sp, #16]
 80051ea:	f108 0801 	add.w	r8, r8, #1
 80051ee:	4303      	orrs	r3, r0
 80051f0:	9304      	str	r3, [sp, #16]
 80051f2:	f898 1000 	ldrb.w	r1, [r8]
 80051f6:	2206      	movs	r2, #6
 80051f8:	4828      	ldr	r0, [pc, #160]	; (800529c <_vfiprintf_r+0x220>)
 80051fa:	f108 0701 	add.w	r7, r8, #1
 80051fe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005202:	f000 fa93 	bl	800572c <memchr>
 8005206:	2800      	cmp	r0, #0
 8005208:	d034      	beq.n	8005274 <_vfiprintf_r+0x1f8>
 800520a:	4b25      	ldr	r3, [pc, #148]	; (80052a0 <_vfiprintf_r+0x224>)
 800520c:	bb03      	cbnz	r3, 8005250 <_vfiprintf_r+0x1d4>
 800520e:	9b03      	ldr	r3, [sp, #12]
 8005210:	3307      	adds	r3, #7
 8005212:	f023 0307 	bic.w	r3, r3, #7
 8005216:	3308      	adds	r3, #8
 8005218:	9303      	str	r3, [sp, #12]
 800521a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800521c:	444b      	add	r3, r9
 800521e:	9309      	str	r3, [sp, #36]	; 0x24
 8005220:	e74c      	b.n	80050bc <_vfiprintf_r+0x40>
 8005222:	fb00 3202 	mla	r2, r0, r2, r3
 8005226:	2101      	movs	r1, #1
 8005228:	e786      	b.n	8005138 <_vfiprintf_r+0xbc>
 800522a:	2300      	movs	r3, #0
 800522c:	250a      	movs	r5, #10
 800522e:	4618      	mov	r0, r3
 8005230:	9305      	str	r3, [sp, #20]
 8005232:	4688      	mov	r8, r1
 8005234:	f898 2000 	ldrb.w	r2, [r8]
 8005238:	3101      	adds	r1, #1
 800523a:	3a30      	subs	r2, #48	; 0x30
 800523c:	2a09      	cmp	r2, #9
 800523e:	d903      	bls.n	8005248 <_vfiprintf_r+0x1cc>
 8005240:	2b00      	cmp	r3, #0
 8005242:	d0c5      	beq.n	80051d0 <_vfiprintf_r+0x154>
 8005244:	9005      	str	r0, [sp, #20]
 8005246:	e7c3      	b.n	80051d0 <_vfiprintf_r+0x154>
 8005248:	fb05 2000 	mla	r0, r5, r0, r2
 800524c:	2301      	movs	r3, #1
 800524e:	e7f0      	b.n	8005232 <_vfiprintf_r+0x1b6>
 8005250:	ab03      	add	r3, sp, #12
 8005252:	9300      	str	r3, [sp, #0]
 8005254:	4622      	mov	r2, r4
 8005256:	4b13      	ldr	r3, [pc, #76]	; (80052a4 <_vfiprintf_r+0x228>)
 8005258:	a904      	add	r1, sp, #16
 800525a:	4630      	mov	r0, r6
 800525c:	f3af 8000 	nop.w
 8005260:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005264:	4681      	mov	r9, r0
 8005266:	d1d8      	bne.n	800521a <_vfiprintf_r+0x19e>
 8005268:	89a3      	ldrh	r3, [r4, #12]
 800526a:	065b      	lsls	r3, r3, #25
 800526c:	f53f af7d 	bmi.w	800516a <_vfiprintf_r+0xee>
 8005270:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005272:	e77c      	b.n	800516e <_vfiprintf_r+0xf2>
 8005274:	ab03      	add	r3, sp, #12
 8005276:	9300      	str	r3, [sp, #0]
 8005278:	4622      	mov	r2, r4
 800527a:	4b0a      	ldr	r3, [pc, #40]	; (80052a4 <_vfiprintf_r+0x228>)
 800527c:	a904      	add	r1, sp, #16
 800527e:	4630      	mov	r0, r6
 8005280:	f000 f88a 	bl	8005398 <_printf_i>
 8005284:	e7ec      	b.n	8005260 <_vfiprintf_r+0x1e4>
 8005286:	bf00      	nop
 8005288:	0800689c 	.word	0x0800689c
 800528c:	080068dc 	.word	0x080068dc
 8005290:	080068bc 	.word	0x080068bc
 8005294:	0800687c 	.word	0x0800687c
 8005298:	080068e2 	.word	0x080068e2
 800529c:	080068e6 	.word	0x080068e6
 80052a0:	00000000 	.word	0x00000000
 80052a4:	08005059 	.word	0x08005059

080052a8 <_printf_common>:
 80052a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80052ac:	4691      	mov	r9, r2
 80052ae:	461f      	mov	r7, r3
 80052b0:	688a      	ldr	r2, [r1, #8]
 80052b2:	690b      	ldr	r3, [r1, #16]
 80052b4:	4606      	mov	r6, r0
 80052b6:	4293      	cmp	r3, r2
 80052b8:	bfb8      	it	lt
 80052ba:	4613      	movlt	r3, r2
 80052bc:	f8c9 3000 	str.w	r3, [r9]
 80052c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80052c4:	460c      	mov	r4, r1
 80052c6:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80052ca:	b112      	cbz	r2, 80052d2 <_printf_common+0x2a>
 80052cc:	3301      	adds	r3, #1
 80052ce:	f8c9 3000 	str.w	r3, [r9]
 80052d2:	6823      	ldr	r3, [r4, #0]
 80052d4:	0699      	lsls	r1, r3, #26
 80052d6:	bf42      	ittt	mi
 80052d8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80052dc:	3302      	addmi	r3, #2
 80052de:	f8c9 3000 	strmi.w	r3, [r9]
 80052e2:	6825      	ldr	r5, [r4, #0]
 80052e4:	f015 0506 	ands.w	r5, r5, #6
 80052e8:	d107      	bne.n	80052fa <_printf_common+0x52>
 80052ea:	f104 0a19 	add.w	sl, r4, #25
 80052ee:	68e3      	ldr	r3, [r4, #12]
 80052f0:	f8d9 2000 	ldr.w	r2, [r9]
 80052f4:	1a9b      	subs	r3, r3, r2
 80052f6:	429d      	cmp	r5, r3
 80052f8:	db2a      	blt.n	8005350 <_printf_common+0xa8>
 80052fa:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80052fe:	6822      	ldr	r2, [r4, #0]
 8005300:	3300      	adds	r3, #0
 8005302:	bf18      	it	ne
 8005304:	2301      	movne	r3, #1
 8005306:	0692      	lsls	r2, r2, #26
 8005308:	d42f      	bmi.n	800536a <_printf_common+0xc2>
 800530a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800530e:	4639      	mov	r1, r7
 8005310:	4630      	mov	r0, r6
 8005312:	47c0      	blx	r8
 8005314:	3001      	adds	r0, #1
 8005316:	d022      	beq.n	800535e <_printf_common+0xb6>
 8005318:	6823      	ldr	r3, [r4, #0]
 800531a:	68e5      	ldr	r5, [r4, #12]
 800531c:	f003 0306 	and.w	r3, r3, #6
 8005320:	2b04      	cmp	r3, #4
 8005322:	bf18      	it	ne
 8005324:	2500      	movne	r5, #0
 8005326:	f8d9 2000 	ldr.w	r2, [r9]
 800532a:	f04f 0900 	mov.w	r9, #0
 800532e:	bf08      	it	eq
 8005330:	1aad      	subeq	r5, r5, r2
 8005332:	68a3      	ldr	r3, [r4, #8]
 8005334:	6922      	ldr	r2, [r4, #16]
 8005336:	bf08      	it	eq
 8005338:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800533c:	4293      	cmp	r3, r2
 800533e:	bfc4      	itt	gt
 8005340:	1a9b      	subgt	r3, r3, r2
 8005342:	18ed      	addgt	r5, r5, r3
 8005344:	341a      	adds	r4, #26
 8005346:	454d      	cmp	r5, r9
 8005348:	d11b      	bne.n	8005382 <_printf_common+0xda>
 800534a:	2000      	movs	r0, #0
 800534c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005350:	2301      	movs	r3, #1
 8005352:	4652      	mov	r2, sl
 8005354:	4639      	mov	r1, r7
 8005356:	4630      	mov	r0, r6
 8005358:	47c0      	blx	r8
 800535a:	3001      	adds	r0, #1
 800535c:	d103      	bne.n	8005366 <_printf_common+0xbe>
 800535e:	f04f 30ff 	mov.w	r0, #4294967295
 8005362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005366:	3501      	adds	r5, #1
 8005368:	e7c1      	b.n	80052ee <_printf_common+0x46>
 800536a:	2030      	movs	r0, #48	; 0x30
 800536c:	18e1      	adds	r1, r4, r3
 800536e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005372:	1c5a      	adds	r2, r3, #1
 8005374:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005378:	4422      	add	r2, r4
 800537a:	3302      	adds	r3, #2
 800537c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005380:	e7c3      	b.n	800530a <_printf_common+0x62>
 8005382:	2301      	movs	r3, #1
 8005384:	4622      	mov	r2, r4
 8005386:	4639      	mov	r1, r7
 8005388:	4630      	mov	r0, r6
 800538a:	47c0      	blx	r8
 800538c:	3001      	adds	r0, #1
 800538e:	d0e6      	beq.n	800535e <_printf_common+0xb6>
 8005390:	f109 0901 	add.w	r9, r9, #1
 8005394:	e7d7      	b.n	8005346 <_printf_common+0x9e>
	...

08005398 <_printf_i>:
 8005398:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800539c:	4617      	mov	r7, r2
 800539e:	7e0a      	ldrb	r2, [r1, #24]
 80053a0:	b085      	sub	sp, #20
 80053a2:	2a6e      	cmp	r2, #110	; 0x6e
 80053a4:	4698      	mov	r8, r3
 80053a6:	4606      	mov	r6, r0
 80053a8:	460c      	mov	r4, r1
 80053aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80053ac:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 80053b0:	f000 80bc 	beq.w	800552c <_printf_i+0x194>
 80053b4:	d81a      	bhi.n	80053ec <_printf_i+0x54>
 80053b6:	2a63      	cmp	r2, #99	; 0x63
 80053b8:	d02e      	beq.n	8005418 <_printf_i+0x80>
 80053ba:	d80a      	bhi.n	80053d2 <_printf_i+0x3a>
 80053bc:	2a00      	cmp	r2, #0
 80053be:	f000 80c8 	beq.w	8005552 <_printf_i+0x1ba>
 80053c2:	2a58      	cmp	r2, #88	; 0x58
 80053c4:	f000 808a 	beq.w	80054dc <_printf_i+0x144>
 80053c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80053cc:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 80053d0:	e02a      	b.n	8005428 <_printf_i+0x90>
 80053d2:	2a64      	cmp	r2, #100	; 0x64
 80053d4:	d001      	beq.n	80053da <_printf_i+0x42>
 80053d6:	2a69      	cmp	r2, #105	; 0x69
 80053d8:	d1f6      	bne.n	80053c8 <_printf_i+0x30>
 80053da:	6821      	ldr	r1, [r4, #0]
 80053dc:	681a      	ldr	r2, [r3, #0]
 80053de:	f011 0f80 	tst.w	r1, #128	; 0x80
 80053e2:	d023      	beq.n	800542c <_printf_i+0x94>
 80053e4:	1d11      	adds	r1, r2, #4
 80053e6:	6019      	str	r1, [r3, #0]
 80053e8:	6813      	ldr	r3, [r2, #0]
 80053ea:	e027      	b.n	800543c <_printf_i+0xa4>
 80053ec:	2a73      	cmp	r2, #115	; 0x73
 80053ee:	f000 80b4 	beq.w	800555a <_printf_i+0x1c2>
 80053f2:	d808      	bhi.n	8005406 <_printf_i+0x6e>
 80053f4:	2a6f      	cmp	r2, #111	; 0x6f
 80053f6:	d02a      	beq.n	800544e <_printf_i+0xb6>
 80053f8:	2a70      	cmp	r2, #112	; 0x70
 80053fa:	d1e5      	bne.n	80053c8 <_printf_i+0x30>
 80053fc:	680a      	ldr	r2, [r1, #0]
 80053fe:	f042 0220 	orr.w	r2, r2, #32
 8005402:	600a      	str	r2, [r1, #0]
 8005404:	e003      	b.n	800540e <_printf_i+0x76>
 8005406:	2a75      	cmp	r2, #117	; 0x75
 8005408:	d021      	beq.n	800544e <_printf_i+0xb6>
 800540a:	2a78      	cmp	r2, #120	; 0x78
 800540c:	d1dc      	bne.n	80053c8 <_printf_i+0x30>
 800540e:	2278      	movs	r2, #120	; 0x78
 8005410:	496f      	ldr	r1, [pc, #444]	; (80055d0 <_printf_i+0x238>)
 8005412:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8005416:	e064      	b.n	80054e2 <_printf_i+0x14a>
 8005418:	681a      	ldr	r2, [r3, #0]
 800541a:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800541e:	1d11      	adds	r1, r2, #4
 8005420:	6019      	str	r1, [r3, #0]
 8005422:	6813      	ldr	r3, [r2, #0]
 8005424:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005428:	2301      	movs	r3, #1
 800542a:	e0a3      	b.n	8005574 <_printf_i+0x1dc>
 800542c:	f011 0f40 	tst.w	r1, #64	; 0x40
 8005430:	f102 0104 	add.w	r1, r2, #4
 8005434:	6019      	str	r1, [r3, #0]
 8005436:	d0d7      	beq.n	80053e8 <_printf_i+0x50>
 8005438:	f9b2 3000 	ldrsh.w	r3, [r2]
 800543c:	2b00      	cmp	r3, #0
 800543e:	da03      	bge.n	8005448 <_printf_i+0xb0>
 8005440:	222d      	movs	r2, #45	; 0x2d
 8005442:	425b      	negs	r3, r3
 8005444:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005448:	4962      	ldr	r1, [pc, #392]	; (80055d4 <_printf_i+0x23c>)
 800544a:	220a      	movs	r2, #10
 800544c:	e017      	b.n	800547e <_printf_i+0xe6>
 800544e:	6820      	ldr	r0, [r4, #0]
 8005450:	6819      	ldr	r1, [r3, #0]
 8005452:	f010 0f80 	tst.w	r0, #128	; 0x80
 8005456:	d003      	beq.n	8005460 <_printf_i+0xc8>
 8005458:	1d08      	adds	r0, r1, #4
 800545a:	6018      	str	r0, [r3, #0]
 800545c:	680b      	ldr	r3, [r1, #0]
 800545e:	e006      	b.n	800546e <_printf_i+0xd6>
 8005460:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005464:	f101 0004 	add.w	r0, r1, #4
 8005468:	6018      	str	r0, [r3, #0]
 800546a:	d0f7      	beq.n	800545c <_printf_i+0xc4>
 800546c:	880b      	ldrh	r3, [r1, #0]
 800546e:	2a6f      	cmp	r2, #111	; 0x6f
 8005470:	bf14      	ite	ne
 8005472:	220a      	movne	r2, #10
 8005474:	2208      	moveq	r2, #8
 8005476:	4957      	ldr	r1, [pc, #348]	; (80055d4 <_printf_i+0x23c>)
 8005478:	2000      	movs	r0, #0
 800547a:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 800547e:	6865      	ldr	r5, [r4, #4]
 8005480:	2d00      	cmp	r5, #0
 8005482:	60a5      	str	r5, [r4, #8]
 8005484:	f2c0 809c 	blt.w	80055c0 <_printf_i+0x228>
 8005488:	6820      	ldr	r0, [r4, #0]
 800548a:	f020 0004 	bic.w	r0, r0, #4
 800548e:	6020      	str	r0, [r4, #0]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d13f      	bne.n	8005514 <_printf_i+0x17c>
 8005494:	2d00      	cmp	r5, #0
 8005496:	f040 8095 	bne.w	80055c4 <_printf_i+0x22c>
 800549a:	4675      	mov	r5, lr
 800549c:	2a08      	cmp	r2, #8
 800549e:	d10b      	bne.n	80054b8 <_printf_i+0x120>
 80054a0:	6823      	ldr	r3, [r4, #0]
 80054a2:	07da      	lsls	r2, r3, #31
 80054a4:	d508      	bpl.n	80054b8 <_printf_i+0x120>
 80054a6:	6923      	ldr	r3, [r4, #16]
 80054a8:	6862      	ldr	r2, [r4, #4]
 80054aa:	429a      	cmp	r2, r3
 80054ac:	bfde      	ittt	le
 80054ae:	2330      	movle	r3, #48	; 0x30
 80054b0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80054b4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80054b8:	ebae 0305 	sub.w	r3, lr, r5
 80054bc:	6123      	str	r3, [r4, #16]
 80054be:	f8cd 8000 	str.w	r8, [sp]
 80054c2:	463b      	mov	r3, r7
 80054c4:	aa03      	add	r2, sp, #12
 80054c6:	4621      	mov	r1, r4
 80054c8:	4630      	mov	r0, r6
 80054ca:	f7ff feed 	bl	80052a8 <_printf_common>
 80054ce:	3001      	adds	r0, #1
 80054d0:	d155      	bne.n	800557e <_printf_i+0x1e6>
 80054d2:	f04f 30ff 	mov.w	r0, #4294967295
 80054d6:	b005      	add	sp, #20
 80054d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80054dc:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 80054e0:	493c      	ldr	r1, [pc, #240]	; (80055d4 <_printf_i+0x23c>)
 80054e2:	6822      	ldr	r2, [r4, #0]
 80054e4:	6818      	ldr	r0, [r3, #0]
 80054e6:	f012 0f80 	tst.w	r2, #128	; 0x80
 80054ea:	f100 0504 	add.w	r5, r0, #4
 80054ee:	601d      	str	r5, [r3, #0]
 80054f0:	d001      	beq.n	80054f6 <_printf_i+0x15e>
 80054f2:	6803      	ldr	r3, [r0, #0]
 80054f4:	e002      	b.n	80054fc <_printf_i+0x164>
 80054f6:	0655      	lsls	r5, r2, #25
 80054f8:	d5fb      	bpl.n	80054f2 <_printf_i+0x15a>
 80054fa:	8803      	ldrh	r3, [r0, #0]
 80054fc:	07d0      	lsls	r0, r2, #31
 80054fe:	bf44      	itt	mi
 8005500:	f042 0220 	orrmi.w	r2, r2, #32
 8005504:	6022      	strmi	r2, [r4, #0]
 8005506:	b91b      	cbnz	r3, 8005510 <_printf_i+0x178>
 8005508:	6822      	ldr	r2, [r4, #0]
 800550a:	f022 0220 	bic.w	r2, r2, #32
 800550e:	6022      	str	r2, [r4, #0]
 8005510:	2210      	movs	r2, #16
 8005512:	e7b1      	b.n	8005478 <_printf_i+0xe0>
 8005514:	4675      	mov	r5, lr
 8005516:	fbb3 f0f2 	udiv	r0, r3, r2
 800551a:	fb02 3310 	mls	r3, r2, r0, r3
 800551e:	5ccb      	ldrb	r3, [r1, r3]
 8005520:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005524:	4603      	mov	r3, r0
 8005526:	2800      	cmp	r0, #0
 8005528:	d1f5      	bne.n	8005516 <_printf_i+0x17e>
 800552a:	e7b7      	b.n	800549c <_printf_i+0x104>
 800552c:	6808      	ldr	r0, [r1, #0]
 800552e:	681a      	ldr	r2, [r3, #0]
 8005530:	f010 0f80 	tst.w	r0, #128	; 0x80
 8005534:	6949      	ldr	r1, [r1, #20]
 8005536:	d004      	beq.n	8005542 <_printf_i+0x1aa>
 8005538:	1d10      	adds	r0, r2, #4
 800553a:	6018      	str	r0, [r3, #0]
 800553c:	6813      	ldr	r3, [r2, #0]
 800553e:	6019      	str	r1, [r3, #0]
 8005540:	e007      	b.n	8005552 <_printf_i+0x1ba>
 8005542:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005546:	f102 0004 	add.w	r0, r2, #4
 800554a:	6018      	str	r0, [r3, #0]
 800554c:	6813      	ldr	r3, [r2, #0]
 800554e:	d0f6      	beq.n	800553e <_printf_i+0x1a6>
 8005550:	8019      	strh	r1, [r3, #0]
 8005552:	2300      	movs	r3, #0
 8005554:	4675      	mov	r5, lr
 8005556:	6123      	str	r3, [r4, #16]
 8005558:	e7b1      	b.n	80054be <_printf_i+0x126>
 800555a:	681a      	ldr	r2, [r3, #0]
 800555c:	1d11      	adds	r1, r2, #4
 800555e:	6019      	str	r1, [r3, #0]
 8005560:	6815      	ldr	r5, [r2, #0]
 8005562:	2100      	movs	r1, #0
 8005564:	6862      	ldr	r2, [r4, #4]
 8005566:	4628      	mov	r0, r5
 8005568:	f000 f8e0 	bl	800572c <memchr>
 800556c:	b108      	cbz	r0, 8005572 <_printf_i+0x1da>
 800556e:	1b40      	subs	r0, r0, r5
 8005570:	6060      	str	r0, [r4, #4]
 8005572:	6863      	ldr	r3, [r4, #4]
 8005574:	6123      	str	r3, [r4, #16]
 8005576:	2300      	movs	r3, #0
 8005578:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800557c:	e79f      	b.n	80054be <_printf_i+0x126>
 800557e:	6923      	ldr	r3, [r4, #16]
 8005580:	462a      	mov	r2, r5
 8005582:	4639      	mov	r1, r7
 8005584:	4630      	mov	r0, r6
 8005586:	47c0      	blx	r8
 8005588:	3001      	adds	r0, #1
 800558a:	d0a2      	beq.n	80054d2 <_printf_i+0x13a>
 800558c:	6823      	ldr	r3, [r4, #0]
 800558e:	079b      	lsls	r3, r3, #30
 8005590:	d507      	bpl.n	80055a2 <_printf_i+0x20a>
 8005592:	2500      	movs	r5, #0
 8005594:	f104 0919 	add.w	r9, r4, #25
 8005598:	68e3      	ldr	r3, [r4, #12]
 800559a:	9a03      	ldr	r2, [sp, #12]
 800559c:	1a9b      	subs	r3, r3, r2
 800559e:	429d      	cmp	r5, r3
 80055a0:	db05      	blt.n	80055ae <_printf_i+0x216>
 80055a2:	68e0      	ldr	r0, [r4, #12]
 80055a4:	9b03      	ldr	r3, [sp, #12]
 80055a6:	4298      	cmp	r0, r3
 80055a8:	bfb8      	it	lt
 80055aa:	4618      	movlt	r0, r3
 80055ac:	e793      	b.n	80054d6 <_printf_i+0x13e>
 80055ae:	2301      	movs	r3, #1
 80055b0:	464a      	mov	r2, r9
 80055b2:	4639      	mov	r1, r7
 80055b4:	4630      	mov	r0, r6
 80055b6:	47c0      	blx	r8
 80055b8:	3001      	adds	r0, #1
 80055ba:	d08a      	beq.n	80054d2 <_printf_i+0x13a>
 80055bc:	3501      	adds	r5, #1
 80055be:	e7eb      	b.n	8005598 <_printf_i+0x200>
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d1a7      	bne.n	8005514 <_printf_i+0x17c>
 80055c4:	780b      	ldrb	r3, [r1, #0]
 80055c6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80055ca:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80055ce:	e765      	b.n	800549c <_printf_i+0x104>
 80055d0:	080068fe 	.word	0x080068fe
 80055d4:	080068ed 	.word	0x080068ed

080055d8 <_sbrk_r>:
 80055d8:	b538      	push	{r3, r4, r5, lr}
 80055da:	2300      	movs	r3, #0
 80055dc:	4c05      	ldr	r4, [pc, #20]	; (80055f4 <_sbrk_r+0x1c>)
 80055de:	4605      	mov	r5, r0
 80055e0:	4608      	mov	r0, r1
 80055e2:	6023      	str	r3, [r4, #0]
 80055e4:	f7fe ff30 	bl	8004448 <_sbrk>
 80055e8:	1c43      	adds	r3, r0, #1
 80055ea:	d102      	bne.n	80055f2 <_sbrk_r+0x1a>
 80055ec:	6823      	ldr	r3, [r4, #0]
 80055ee:	b103      	cbz	r3, 80055f2 <_sbrk_r+0x1a>
 80055f0:	602b      	str	r3, [r5, #0]
 80055f2:	bd38      	pop	{r3, r4, r5, pc}
 80055f4:	2000080c 	.word	0x2000080c

080055f8 <__sread>:
 80055f8:	b510      	push	{r4, lr}
 80055fa:	460c      	mov	r4, r1
 80055fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005600:	f000 f8e4 	bl	80057cc <_read_r>
 8005604:	2800      	cmp	r0, #0
 8005606:	bfab      	itete	ge
 8005608:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800560a:	89a3      	ldrhlt	r3, [r4, #12]
 800560c:	181b      	addge	r3, r3, r0
 800560e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005612:	bfac      	ite	ge
 8005614:	6563      	strge	r3, [r4, #84]	; 0x54
 8005616:	81a3      	strhlt	r3, [r4, #12]
 8005618:	bd10      	pop	{r4, pc}

0800561a <__swrite>:
 800561a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800561e:	461f      	mov	r7, r3
 8005620:	898b      	ldrh	r3, [r1, #12]
 8005622:	4605      	mov	r5, r0
 8005624:	05db      	lsls	r3, r3, #23
 8005626:	460c      	mov	r4, r1
 8005628:	4616      	mov	r6, r2
 800562a:	d505      	bpl.n	8005638 <__swrite+0x1e>
 800562c:	2302      	movs	r3, #2
 800562e:	2200      	movs	r2, #0
 8005630:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005634:	f000 f868 	bl	8005708 <_lseek_r>
 8005638:	89a3      	ldrh	r3, [r4, #12]
 800563a:	4632      	mov	r2, r6
 800563c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005640:	81a3      	strh	r3, [r4, #12]
 8005642:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005646:	463b      	mov	r3, r7
 8005648:	4628      	mov	r0, r5
 800564a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800564e:	f000 b817 	b.w	8005680 <_write_r>

08005652 <__sseek>:
 8005652:	b510      	push	{r4, lr}
 8005654:	460c      	mov	r4, r1
 8005656:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800565a:	f000 f855 	bl	8005708 <_lseek_r>
 800565e:	1c43      	adds	r3, r0, #1
 8005660:	89a3      	ldrh	r3, [r4, #12]
 8005662:	bf15      	itete	ne
 8005664:	6560      	strne	r0, [r4, #84]	; 0x54
 8005666:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800566a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800566e:	81a3      	strheq	r3, [r4, #12]
 8005670:	bf18      	it	ne
 8005672:	81a3      	strhne	r3, [r4, #12]
 8005674:	bd10      	pop	{r4, pc}

08005676 <__sclose>:
 8005676:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800567a:	f000 b813 	b.w	80056a4 <_close_r>
	...

08005680 <_write_r>:
 8005680:	b538      	push	{r3, r4, r5, lr}
 8005682:	4605      	mov	r5, r0
 8005684:	4608      	mov	r0, r1
 8005686:	4611      	mov	r1, r2
 8005688:	2200      	movs	r2, #0
 800568a:	4c05      	ldr	r4, [pc, #20]	; (80056a0 <_write_r+0x20>)
 800568c:	6022      	str	r2, [r4, #0]
 800568e:	461a      	mov	r2, r3
 8005690:	f7fd fb6a 	bl	8002d68 <_write>
 8005694:	1c43      	adds	r3, r0, #1
 8005696:	d102      	bne.n	800569e <_write_r+0x1e>
 8005698:	6823      	ldr	r3, [r4, #0]
 800569a:	b103      	cbz	r3, 800569e <_write_r+0x1e>
 800569c:	602b      	str	r3, [r5, #0]
 800569e:	bd38      	pop	{r3, r4, r5, pc}
 80056a0:	2000080c 	.word	0x2000080c

080056a4 <_close_r>:
 80056a4:	b538      	push	{r3, r4, r5, lr}
 80056a6:	2300      	movs	r3, #0
 80056a8:	4c05      	ldr	r4, [pc, #20]	; (80056c0 <_close_r+0x1c>)
 80056aa:	4605      	mov	r5, r0
 80056ac:	4608      	mov	r0, r1
 80056ae:	6023      	str	r3, [r4, #0]
 80056b0:	f7fe fee4 	bl	800447c <_close>
 80056b4:	1c43      	adds	r3, r0, #1
 80056b6:	d102      	bne.n	80056be <_close_r+0x1a>
 80056b8:	6823      	ldr	r3, [r4, #0]
 80056ba:	b103      	cbz	r3, 80056be <_close_r+0x1a>
 80056bc:	602b      	str	r3, [r5, #0]
 80056be:	bd38      	pop	{r3, r4, r5, pc}
 80056c0:	2000080c 	.word	0x2000080c

080056c4 <_fstat_r>:
 80056c4:	b538      	push	{r3, r4, r5, lr}
 80056c6:	2300      	movs	r3, #0
 80056c8:	4c06      	ldr	r4, [pc, #24]	; (80056e4 <_fstat_r+0x20>)
 80056ca:	4605      	mov	r5, r0
 80056cc:	4608      	mov	r0, r1
 80056ce:	4611      	mov	r1, r2
 80056d0:	6023      	str	r3, [r4, #0]
 80056d2:	f7fe fed6 	bl	8004482 <_fstat>
 80056d6:	1c43      	adds	r3, r0, #1
 80056d8:	d102      	bne.n	80056e0 <_fstat_r+0x1c>
 80056da:	6823      	ldr	r3, [r4, #0]
 80056dc:	b103      	cbz	r3, 80056e0 <_fstat_r+0x1c>
 80056de:	602b      	str	r3, [r5, #0]
 80056e0:	bd38      	pop	{r3, r4, r5, pc}
 80056e2:	bf00      	nop
 80056e4:	2000080c 	.word	0x2000080c

080056e8 <_isatty_r>:
 80056e8:	b538      	push	{r3, r4, r5, lr}
 80056ea:	2300      	movs	r3, #0
 80056ec:	4c05      	ldr	r4, [pc, #20]	; (8005704 <_isatty_r+0x1c>)
 80056ee:	4605      	mov	r5, r0
 80056f0:	4608      	mov	r0, r1
 80056f2:	6023      	str	r3, [r4, #0]
 80056f4:	f7fe feca 	bl	800448c <_isatty>
 80056f8:	1c43      	adds	r3, r0, #1
 80056fa:	d102      	bne.n	8005702 <_isatty_r+0x1a>
 80056fc:	6823      	ldr	r3, [r4, #0]
 80056fe:	b103      	cbz	r3, 8005702 <_isatty_r+0x1a>
 8005700:	602b      	str	r3, [r5, #0]
 8005702:	bd38      	pop	{r3, r4, r5, pc}
 8005704:	2000080c 	.word	0x2000080c

08005708 <_lseek_r>:
 8005708:	b538      	push	{r3, r4, r5, lr}
 800570a:	4605      	mov	r5, r0
 800570c:	4608      	mov	r0, r1
 800570e:	4611      	mov	r1, r2
 8005710:	2200      	movs	r2, #0
 8005712:	4c05      	ldr	r4, [pc, #20]	; (8005728 <_lseek_r+0x20>)
 8005714:	6022      	str	r2, [r4, #0]
 8005716:	461a      	mov	r2, r3
 8005718:	f7fe feba 	bl	8004490 <_lseek>
 800571c:	1c43      	adds	r3, r0, #1
 800571e:	d102      	bne.n	8005726 <_lseek_r+0x1e>
 8005720:	6823      	ldr	r3, [r4, #0]
 8005722:	b103      	cbz	r3, 8005726 <_lseek_r+0x1e>
 8005724:	602b      	str	r3, [r5, #0]
 8005726:	bd38      	pop	{r3, r4, r5, pc}
 8005728:	2000080c 	.word	0x2000080c

0800572c <memchr>:
 800572c:	b510      	push	{r4, lr}
 800572e:	b2c9      	uxtb	r1, r1
 8005730:	4402      	add	r2, r0
 8005732:	4290      	cmp	r0, r2
 8005734:	4603      	mov	r3, r0
 8005736:	d101      	bne.n	800573c <memchr+0x10>
 8005738:	2000      	movs	r0, #0
 800573a:	bd10      	pop	{r4, pc}
 800573c:	781c      	ldrb	r4, [r3, #0]
 800573e:	3001      	adds	r0, #1
 8005740:	428c      	cmp	r4, r1
 8005742:	d1f6      	bne.n	8005732 <memchr+0x6>
 8005744:	4618      	mov	r0, r3
 8005746:	bd10      	pop	{r4, pc}

08005748 <memmove>:
 8005748:	4288      	cmp	r0, r1
 800574a:	b510      	push	{r4, lr}
 800574c:	eb01 0302 	add.w	r3, r1, r2
 8005750:	d803      	bhi.n	800575a <memmove+0x12>
 8005752:	1e42      	subs	r2, r0, #1
 8005754:	4299      	cmp	r1, r3
 8005756:	d10c      	bne.n	8005772 <memmove+0x2a>
 8005758:	bd10      	pop	{r4, pc}
 800575a:	4298      	cmp	r0, r3
 800575c:	d2f9      	bcs.n	8005752 <memmove+0xa>
 800575e:	1881      	adds	r1, r0, r2
 8005760:	1ad2      	subs	r2, r2, r3
 8005762:	42d3      	cmn	r3, r2
 8005764:	d100      	bne.n	8005768 <memmove+0x20>
 8005766:	bd10      	pop	{r4, pc}
 8005768:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800576c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005770:	e7f7      	b.n	8005762 <memmove+0x1a>
 8005772:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005776:	f802 4f01 	strb.w	r4, [r2, #1]!
 800577a:	e7eb      	b.n	8005754 <memmove+0xc>

0800577c <__malloc_lock>:
 800577c:	4770      	bx	lr

0800577e <__malloc_unlock>:
 800577e:	4770      	bx	lr

08005780 <_realloc_r>:
 8005780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005782:	4607      	mov	r7, r0
 8005784:	4614      	mov	r4, r2
 8005786:	460e      	mov	r6, r1
 8005788:	b921      	cbnz	r1, 8005794 <_realloc_r+0x14>
 800578a:	4611      	mov	r1, r2
 800578c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005790:	f7ff ba9e 	b.w	8004cd0 <_malloc_r>
 8005794:	b922      	cbnz	r2, 80057a0 <_realloc_r+0x20>
 8005796:	f7ff fa4f 	bl	8004c38 <_free_r>
 800579a:	4625      	mov	r5, r4
 800579c:	4628      	mov	r0, r5
 800579e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80057a0:	f000 f826 	bl	80057f0 <_malloc_usable_size_r>
 80057a4:	4284      	cmp	r4, r0
 80057a6:	d90f      	bls.n	80057c8 <_realloc_r+0x48>
 80057a8:	4621      	mov	r1, r4
 80057aa:	4638      	mov	r0, r7
 80057ac:	f7ff fa90 	bl	8004cd0 <_malloc_r>
 80057b0:	4605      	mov	r5, r0
 80057b2:	2800      	cmp	r0, #0
 80057b4:	d0f2      	beq.n	800579c <_realloc_r+0x1c>
 80057b6:	4631      	mov	r1, r6
 80057b8:	4622      	mov	r2, r4
 80057ba:	f7fe fee1 	bl	8004580 <memcpy>
 80057be:	4631      	mov	r1, r6
 80057c0:	4638      	mov	r0, r7
 80057c2:	f7ff fa39 	bl	8004c38 <_free_r>
 80057c6:	e7e9      	b.n	800579c <_realloc_r+0x1c>
 80057c8:	4635      	mov	r5, r6
 80057ca:	e7e7      	b.n	800579c <_realloc_r+0x1c>

080057cc <_read_r>:
 80057cc:	b538      	push	{r3, r4, r5, lr}
 80057ce:	4605      	mov	r5, r0
 80057d0:	4608      	mov	r0, r1
 80057d2:	4611      	mov	r1, r2
 80057d4:	2200      	movs	r2, #0
 80057d6:	4c05      	ldr	r4, [pc, #20]	; (80057ec <_read_r+0x20>)
 80057d8:	6022      	str	r2, [r4, #0]
 80057da:	461a      	mov	r2, r3
 80057dc:	f7fe fe26 	bl	800442c <_read>
 80057e0:	1c43      	adds	r3, r0, #1
 80057e2:	d102      	bne.n	80057ea <_read_r+0x1e>
 80057e4:	6823      	ldr	r3, [r4, #0]
 80057e6:	b103      	cbz	r3, 80057ea <_read_r+0x1e>
 80057e8:	602b      	str	r3, [r5, #0]
 80057ea:	bd38      	pop	{r3, r4, r5, pc}
 80057ec:	2000080c 	.word	0x2000080c

080057f0 <_malloc_usable_size_r>:
 80057f0:	f851 0c04 	ldr.w	r0, [r1, #-4]
 80057f4:	2800      	cmp	r0, #0
 80057f6:	f1a0 0004 	sub.w	r0, r0, #4
 80057fa:	bfbc      	itt	lt
 80057fc:	580b      	ldrlt	r3, [r1, r0]
 80057fe:	18c0      	addlt	r0, r0, r3
 8005800:	4770      	bx	lr
	...

08005804 <_init>:
 8005804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005806:	bf00      	nop
 8005808:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800580a:	bc08      	pop	{r3}
 800580c:	469e      	mov	lr, r3
 800580e:	4770      	bx	lr

08005810 <_fini>:
 8005810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005812:	bf00      	nop
 8005814:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005816:	bc08      	pop	{r3}
 8005818:	469e      	mov	lr, r3
 800581a:	4770      	bx	lr
