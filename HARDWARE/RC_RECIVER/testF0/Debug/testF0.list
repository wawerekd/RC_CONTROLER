
testF0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001ef0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08001fb0  08001fb0  00011fb0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001ff8  08001ff8  00011ff8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001ffc  08001ffc  00011ffc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  08002000  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000018c  20000004  08002004  00020004  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000190  08002004  00020190  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  9 .debug_info   00011c14  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002476  00000000  00000000  00031c40  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000589b  00000000  00000000  000340b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000880  00000000  00000000  00039958  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000b90  00000000  00000000  0003a1d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00004f44  00000000  00000000  0003ad68  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00003030  00000000  00000000  0003fcac  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00042cdc  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000019b8  00000000  00000000  00042d58  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000004 	.word	0x20000004
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08001f98 	.word	0x08001f98

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000008 	.word	0x20000008
 8000104:	08001f98 	.word	0x08001f98

08000108 <__gnu_thumb1_case_uqi>:
 8000108:	b402      	push	{r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0049      	lsls	r1, r1, #1
 8000110:	5c09      	ldrb	r1, [r1, r0]
 8000112:	0049      	lsls	r1, r1, #1
 8000114:	448e      	add	lr, r1
 8000116:	bc02      	pop	{r1}
 8000118:	4770      	bx	lr
 800011a:	46c0      	nop			; (mov r8, r8)

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000234:	b510      	push	{r4, lr}
 8000236:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000U);
 8000238:	f000 fd20 	bl	8000c7c <HAL_RCC_GetHCLKFreq>
 800023c:	21fa      	movs	r1, #250	; 0xfa
 800023e:	0089      	lsls	r1, r1, #2
 8000240:	f7ff ff6c 	bl	800011c <__udivsi3>
 8000244:	f000 f982 	bl	800054c <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8000248:	2001      	movs	r0, #1
 800024a:	2200      	movs	r2, #0
 800024c:	0021      	movs	r1, r4
 800024e:	4240      	negs	r0, r0
 8000250:	f000 f94c 	bl	80004ec <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 8000254:	2000      	movs	r0, #0
 8000256:	bd10      	pop	{r4, pc}

08000258 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000258:	2310      	movs	r3, #16
 800025a:	4a06      	ldr	r2, [pc, #24]	; (8000274 <HAL_Init+0x1c>)
{
 800025c:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800025e:	6811      	ldr	r1, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8000260:	2000      	movs	r0, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000262:	430b      	orrs	r3, r1
 8000264:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8000266:	f7ff ffe5 	bl	8000234 <HAL_InitTick>
  HAL_MspInit();
 800026a:	f001 fd71 	bl	8001d50 <HAL_MspInit>
}
 800026e:	2000      	movs	r0, #0
 8000270:	bd10      	pop	{r4, pc}
 8000272:	46c0      	nop			; (mov r8, r8)
 8000274:	40022000 	.word	0x40022000

08000278 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000278:	4a02      	ldr	r2, [pc, #8]	; (8000284 <HAL_IncTick+0xc>)
 800027a:	6813      	ldr	r3, [r2, #0]
 800027c:	3301      	adds	r3, #1
 800027e:	6013      	str	r3, [r2, #0]
}
 8000280:	4770      	bx	lr
 8000282:	46c0      	nop			; (mov r8, r8)
 8000284:	20000020 	.word	0x20000020

08000288 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000288:	4b01      	ldr	r3, [pc, #4]	; (8000290 <HAL_GetTick+0x8>)
 800028a:	6818      	ldr	r0, [r3, #0]
}
 800028c:	4770      	bx	lr
 800028e:	46c0      	nop			; (mov r8, r8)
 8000290:	20000020 	.word	0x20000020

08000294 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8000294:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000296:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 8000298:	f7ff fff6 	bl	8000288 <HAL_GetTick>
  uint32_t wait = Delay;
 800029c:	9c01      	ldr	r4, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 800029e:	0005      	movs	r5, r0
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
  {
     wait++;
 80002a0:	1c63      	adds	r3, r4, #1
 80002a2:	1e5a      	subs	r2, r3, #1
 80002a4:	4193      	sbcs	r3, r2
 80002a6:	18e4      	adds	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80002a8:	f7ff ffee 	bl	8000288 <HAL_GetTick>
 80002ac:	1b40      	subs	r0, r0, r5
 80002ae:	42a0      	cmp	r0, r4
 80002b0:	d3fa      	bcc.n	80002a8 <HAL_Delay+0x14>
  {
  }
}
 80002b2:	bd37      	pop	{r0, r1, r2, r4, r5, pc}

080002b4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80002b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002b6:	0004      	movs	r4, r0
  uint32_t tmpCFGR1 = 0U;

  /* Check ADC handle */
  if(hadc == NULL)
  {
    return HAL_ERROR;
 80002b8:	2001      	movs	r0, #1
  if(hadc == NULL)
 80002ba:	2c00      	cmp	r4, #0
 80002bc:	d072      	beq.n	80003a4 <HAL_ADC_Init+0xf0>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80002be:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d106      	bne.n	80002d2 <HAL_ADC_Init+0x1e>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80002c4:	0022      	movs	r2, r4
 80002c6:	3240      	adds	r2, #64	; 0x40
    ADC_CLEAR_ERRORCODE(hadc);
 80002c8:	64a3      	str	r3, [r4, #72]	; 0x48
    
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80002ca:	0020      	movs	r0, r4
    hadc->Lock = HAL_UNLOCKED;
 80002cc:	7013      	strb	r3, [r2, #0]
    HAL_ADC_MspInit(hadc);
 80002ce:	f001 fd67 	bl	8001da0 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80002d2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80002d4:	06db      	lsls	r3, r3, #27
 80002d6:	d500      	bpl.n	80002da <HAL_ADC_Init+0x26>
 80002d8:	e079      	b.n	80003ce <HAL_ADC_Init+0x11a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80002da:	2204      	movs	r2, #4
 80002dc:	6823      	ldr	r3, [r4, #0]
 80002de:	6898      	ldr	r0, [r3, #8]
 80002e0:	4010      	ands	r0, r2
      (tmp_hal_status == HAL_OK)                                &&
 80002e2:	d000      	beq.n	80002e6 <HAL_ADC_Init+0x32>
 80002e4:	e073      	b.n	80003ce <HAL_ADC_Init+0x11a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80002e6:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80002e8:	4942      	ldr	r1, [pc, #264]	; (80003f4 <HAL_ADC_Init+0x140>)
 80002ea:	4011      	ands	r1, r2
 80002ec:	2202      	movs	r2, #2
 80002ee:	430a      	orrs	r2, r1
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 80002f0:	2103      	movs	r1, #3
    ADC_STATE_CLR_SET(hadc->State,
 80002f2:	6462      	str	r2, [r4, #68]	; 0x44
    if (ADC_IS_ENABLE(hadc) == RESET)
 80002f4:	689a      	ldr	r2, [r3, #8]
 80002f6:	400a      	ands	r2, r1
 80002f8:	2a01      	cmp	r2, #1
 80002fa:	d000      	beq.n	80002fe <HAL_ADC_Init+0x4a>
 80002fc:	e06d      	b.n	80003da <HAL_ADC_Init+0x126>
 80002fe:	6819      	ldr	r1, [r3, #0]
 8000300:	4211      	tst	r1, r2
 8000302:	d102      	bne.n	800030a <HAL_ADC_Init+0x56>
 8000304:	68da      	ldr	r2, [r3, #12]
 8000306:	0412      	lsls	r2, r2, #16
 8000308:	d567      	bpl.n	80003da <HAL_ADC_Init+0x126>
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 800030a:	68da      	ldr	r2, [r3, #12]
 800030c:	493a      	ldr	r1, [pc, #232]	; (80003f8 <HAL_ADC_Init+0x144>)
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
                 ADC_CFGR1_AUTOOFF(hadc->Init.LowPowerAutoPowerOff)     |
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 800030e:	6a25      	ldr	r5, [r4, #32]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8000310:	400a      	ands	r2, r1
 8000312:	60da      	str	r2, [r3, #12]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 8000314:	69a2      	ldr	r2, [r4, #24]
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 8000316:	036f      	lsls	r7, r5, #13
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 8000318:	0391      	lsls	r1, r2, #14
                 ADC_CFGR1_AUTOOFF(hadc->Init.LowPowerAutoPowerOff)     |
 800031a:	69e2      	ldr	r2, [r4, #28]
 800031c:	03d2      	lsls	r2, r2, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 800031e:	4311      	orrs	r1, r2
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 8000320:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8000322:	3a01      	subs	r2, #1
 8000324:	1e56      	subs	r6, r2, #1
 8000326:	41b2      	sbcs	r2, r6
 8000328:	0316      	lsls	r6, r2, #12
 800032a:	68e2      	ldr	r2, [r4, #12]
 800032c:	4311      	orrs	r1, r2
                 hadc->Init.DataAlign                                   |
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 800032e:	6922      	ldr	r2, [r4, #16]
 8000330:	430f      	orrs	r7, r1
 8000332:	2a02      	cmp	r2, #2
 8000334:	d100      	bne.n	8000338 <HAL_ADC_Init+0x84>
 8000336:	2004      	movs	r0, #4
                 ADC_CFGR1_DMACONTREQ(hadc->Init.DMAContinuousRequests)  );
 8000338:	6b22      	ldr	r2, [r4, #48]	; 0x30
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800033a:	6a61      	ldr	r1, [r4, #36]	; 0x24
                 ADC_CFGR1_DMACONTREQ(hadc->Init.DMAContinuousRequests)  );
 800033c:	0052      	lsls	r2, r2, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 800033e:	433a      	orrs	r2, r7
 8000340:	4332      	orrs	r2, r6
 8000342:	4302      	orrs	r2, r0
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000344:	2901      	cmp	r1, #1
 8000346:	d104      	bne.n	8000352 <HAL_ADC_Init+0x9e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000348:	2d00      	cmp	r5, #0
 800034a:	d12c      	bne.n	80003a6 <HAL_ADC_Init+0xf2>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800034c:	2180      	movs	r1, #128	; 0x80
 800034e:	0249      	lsls	r1, r1, #9
 8000350:	430a      	orrs	r2, r1
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000352:	20c2      	movs	r0, #194	; 0xc2
 8000354:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8000356:	30ff      	adds	r0, #255	; 0xff
 8000358:	4281      	cmp	r1, r0
 800035a:	d002      	beq.n	8000362 <HAL_ADC_Init+0xae>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 800035c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800035e:	4301      	orrs	r1, r0
 8000360:	430a      	orrs	r2, r1
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000362:	2080      	movs	r0, #128	; 0x80
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8000364:	68d9      	ldr	r1, [r3, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000366:	0540      	lsls	r0, r0, #21
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8000368:	4311      	orrs	r1, r2
 800036a:	60d9      	str	r1, [r3, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800036c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800036e:	4281      	cmp	r1, r0
 8000370:	d002      	beq.n	8000378 <HAL_ADC_Init+0xc4>
 8000372:	1e48      	subs	r0, r1, #1
 8000374:	2806      	cmp	r0, #6
 8000376:	d807      	bhi.n	8000388 <HAL_ADC_Init+0xd4>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000378:	2507      	movs	r5, #7
 800037a:	6958      	ldr	r0, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 800037c:	4029      	ands	r1, r5
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800037e:	43a8      	bics	r0, r5
 8000380:	6158      	str	r0, [r3, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8000382:	6958      	ldr	r0, [r3, #20]
 8000384:	4301      	orrs	r1, r0
 8000386:	6159      	str	r1, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000388:	68db      	ldr	r3, [r3, #12]
 800038a:	491c      	ldr	r1, [pc, #112]	; (80003fc <HAL_ADC_Init+0x148>)
 800038c:	400b      	ands	r3, r1
 800038e:	429a      	cmp	r2, r3
 8000390:	d111      	bne.n	80003b6 <HAL_ADC_Init+0x102>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000392:	2000      	movs	r0, #0
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000394:	2203      	movs	r2, #3
      ADC_CLEAR_ERRORCODE(hadc);
 8000396:	64a0      	str	r0, [r4, #72]	; 0x48
      ADC_STATE_CLR_SET(hadc->State,
 8000398:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800039a:	4393      	bics	r3, r2
 800039c:	001a      	movs	r2, r3
 800039e:	2301      	movs	r3, #1
 80003a0:	4313      	orrs	r3, r2
 80003a2:	6463      	str	r3, [r4, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Return function status */
  return tmp_hal_status;
}
 80003a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80003a6:	2020      	movs	r0, #32
 80003a8:	6c65      	ldr	r5, [r4, #68]	; 0x44
 80003aa:	4328      	orrs	r0, r5
 80003ac:	6460      	str	r0, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80003ae:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80003b0:	4301      	orrs	r1, r0
 80003b2:	64a1      	str	r1, [r4, #72]	; 0x48
 80003b4:	e7cd      	b.n	8000352 <HAL_ADC_Init+0x9e>
      ADC_STATE_CLR_SET(hadc->State,
 80003b6:	2212      	movs	r2, #18
 80003b8:	6c63      	ldr	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80003ba:	2001      	movs	r0, #1
      ADC_STATE_CLR_SET(hadc->State,
 80003bc:	4393      	bics	r3, r2
 80003be:	001a      	movs	r2, r3
 80003c0:	2310      	movs	r3, #16
 80003c2:	4313      	orrs	r3, r2
 80003c4:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80003c6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80003c8:	4303      	orrs	r3, r0
 80003ca:	64a3      	str	r3, [r4, #72]	; 0x48
 80003cc:	e7ea      	b.n	80003a4 <HAL_ADC_Init+0xf0>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80003ce:	2310      	movs	r3, #16
 80003d0:	6c62      	ldr	r2, [r4, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 80003d2:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80003d4:	4313      	orrs	r3, r2
 80003d6:	6463      	str	r3, [r4, #68]	; 0x44
 80003d8:	e7e4      	b.n	80003a4 <HAL_ADC_Init+0xf0>
      MODIFY_REG(hadc->Instance->CFGR1,
 80003da:	2118      	movs	r1, #24
 80003dc:	68da      	ldr	r2, [r3, #12]
 80003de:	438a      	bics	r2, r1
 80003e0:	68a1      	ldr	r1, [r4, #8]
 80003e2:	430a      	orrs	r2, r1
 80003e4:	60da      	str	r2, [r3, #12]
      MODIFY_REG(hadc->Instance->CFGR2    ,
 80003e6:	6919      	ldr	r1, [r3, #16]
 80003e8:	6862      	ldr	r2, [r4, #4]
 80003ea:	0089      	lsls	r1, r1, #2
 80003ec:	0889      	lsrs	r1, r1, #2
 80003ee:	4311      	orrs	r1, r2
 80003f0:	6119      	str	r1, [r3, #16]
 80003f2:	e78a      	b.n	800030a <HAL_ADC_Init+0x56>
 80003f4:	fffffefd 	.word	0xfffffefd
 80003f8:	fffe0219 	.word	0xfffe0219
 80003fc:	833fffe7 	.word	0x833fffe7

08000400 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000400:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 8000402:	2300      	movs	r3, #0
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000404:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0U;
 8000406:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8000408:	3440      	adds	r4, #64	; 0x40
 800040a:	7823      	ldrb	r3, [r4, #0]
{
 800040c:	0005      	movs	r5, r0
  __HAL_LOCK(hadc);
 800040e:	2002      	movs	r0, #2
 8000410:	2b01      	cmp	r3, #1
 8000412:	d02b      	beq.n	800046c <HAL_ADC_ConfigChannel+0x6c>
 8000414:	2301      	movs	r3, #1
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000416:	682a      	ldr	r2, [r5, #0]
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000418:	6bae      	ldr	r6, [r5, #56]	; 0x38
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800041a:	6890      	ldr	r0, [r2, #8]
  __HAL_LOCK(hadc);
 800041c:	7023      	strb	r3, [r4, #0]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800041e:	0740      	lsls	r0, r0, #29
 8000420:	d452      	bmi.n	80004c8 <HAL_ADC_ConfigChannel+0xc8>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8000422:	482c      	ldr	r0, [pc, #176]	; (80004d4 <HAL_ADC_ConfigChannel+0xd4>)
 8000424:	684f      	ldr	r7, [r1, #4]
 8000426:	680d      	ldr	r5, [r1, #0]
 8000428:	4287      	cmp	r7, r0
 800042a:	d03b      	beq.n	80004a4 <HAL_ADC_ConfigChannel+0xa4>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 800042c:	40ab      	lsls	r3, r5
 800042e:	0018      	movs	r0, r3
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000430:	2380      	movs	r3, #128	; 0x80
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8000432:	6a97      	ldr	r7, [r2, #40]	; 0x28
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000434:	055b      	lsls	r3, r3, #21
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8000436:	4338      	orrs	r0, r7
 8000438:	6290      	str	r0, [r2, #40]	; 0x28
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800043a:	429e      	cmp	r6, r3
 800043c:	d00f      	beq.n	800045e <HAL_ADC_ConfigChannel+0x5e>
 800043e:	3e01      	subs	r6, #1
 8000440:	2e06      	cmp	r6, #6
 8000442:	d90c      	bls.n	800045e <HAL_ADC_ConfigChannel+0x5e>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8000444:	688b      	ldr	r3, [r1, #8]
 8000446:	2107      	movs	r1, #7
 8000448:	6950      	ldr	r0, [r2, #20]
 800044a:	4008      	ands	r0, r1
 800044c:	4283      	cmp	r3, r0
 800044e:	d006      	beq.n	800045e <HAL_ADC_ConfigChannel+0x5e>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000450:	6950      	ldr	r0, [r2, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8000452:	400b      	ands	r3, r1
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000454:	4388      	bics	r0, r1
 8000456:	6150      	str	r0, [r2, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8000458:	6950      	ldr	r0, [r2, #20]
 800045a:	4303      	orrs	r3, r0
 800045c:	6153      	str	r3, [r2, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800045e:	002b      	movs	r3, r5
 8000460:	3b10      	subs	r3, #16
 8000462:	2b01      	cmp	r3, #1
 8000464:	d903      	bls.n	800046e <HAL_ADC_ConfigChannel+0x6e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000466:	2000      	movs	r0, #0
    
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000468:	2300      	movs	r3, #0
 800046a:	7023      	strb	r3, [r4, #0]
  
  /* Return function status */
  return tmp_hal_status;
}
 800046c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800046e:	4b1a      	ldr	r3, [pc, #104]	; (80004d8 <HAL_ADC_ConfigChannel+0xd8>)
 8000470:	2280      	movs	r2, #128	; 0x80
 8000472:	6819      	ldr	r1, [r3, #0]
 8000474:	2d10      	cmp	r5, #16
 8000476:	d013      	beq.n	80004a0 <HAL_ADC_ConfigChannel+0xa0>
 8000478:	03d2      	lsls	r2, r2, #15
 800047a:	430a      	orrs	r2, r1
 800047c:	601a      	str	r2, [r3, #0]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800047e:	2d10      	cmp	r5, #16
 8000480:	d1f1      	bne.n	8000466 <HAL_ADC_ConfigChannel+0x66>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000482:	4b16      	ldr	r3, [pc, #88]	; (80004dc <HAL_ADC_ConfigChannel+0xdc>)
 8000484:	4916      	ldr	r1, [pc, #88]	; (80004e0 <HAL_ADC_ConfigChannel+0xe0>)
 8000486:	6818      	ldr	r0, [r3, #0]
 8000488:	f7ff fe48 	bl	800011c <__udivsi3>
 800048c:	230a      	movs	r3, #10
 800048e:	4358      	muls	r0, r3
 8000490:	9001      	str	r0, [sp, #4]
          while(wait_loop_index != 0U)
 8000492:	9b01      	ldr	r3, [sp, #4]
 8000494:	2b00      	cmp	r3, #0
 8000496:	d0e6      	beq.n	8000466 <HAL_ADC_ConfigChannel+0x66>
            wait_loop_index--;
 8000498:	9b01      	ldr	r3, [sp, #4]
 800049a:	3b01      	subs	r3, #1
 800049c:	9301      	str	r3, [sp, #4]
 800049e:	e7f8      	b.n	8000492 <HAL_ADC_ConfigChannel+0x92>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80004a0:	0412      	lsls	r2, r2, #16
 80004a2:	e7ea      	b.n	800047a <HAL_ADC_ConfigChannel+0x7a>
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 80004a4:	40ab      	lsls	r3, r5
 80004a6:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80004a8:	4399      	bics	r1, r3
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80004aa:	002b      	movs	r3, r5
 80004ac:	3b10      	subs	r3, #16
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 80004ae:	6291      	str	r1, [r2, #40]	; 0x28
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80004b0:	2b01      	cmp	r3, #1
 80004b2:	d8d8      	bhi.n	8000466 <HAL_ADC_ConfigChannel+0x66>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80004b4:	4b08      	ldr	r3, [pc, #32]	; (80004d8 <HAL_ADC_ConfigChannel+0xd8>)
 80004b6:	681a      	ldr	r2, [r3, #0]
 80004b8:	2d10      	cmp	r5, #16
 80004ba:	d003      	beq.n	80004c4 <HAL_ADC_ConfigChannel+0xc4>
 80004bc:	4909      	ldr	r1, [pc, #36]	; (80004e4 <HAL_ADC_ConfigChannel+0xe4>)
 80004be:	400a      	ands	r2, r1
 80004c0:	601a      	str	r2, [r3, #0]
 80004c2:	e7d0      	b.n	8000466 <HAL_ADC_ConfigChannel+0x66>
 80004c4:	4908      	ldr	r1, [pc, #32]	; (80004e8 <HAL_ADC_ConfigChannel+0xe8>)
 80004c6:	e7fa      	b.n	80004be <HAL_ADC_ConfigChannel+0xbe>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80004c8:	2220      	movs	r2, #32
 80004ca:	6c69      	ldr	r1, [r5, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 80004cc:	0018      	movs	r0, r3
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80004ce:	430a      	orrs	r2, r1
 80004d0:	646a      	str	r2, [r5, #68]	; 0x44
 80004d2:	e7c9      	b.n	8000468 <HAL_ADC_ConfigChannel+0x68>
 80004d4:	00001001 	.word	0x00001001
 80004d8:	40012708 	.word	0x40012708
 80004dc:	20000000 	.word	0x20000000
 80004e0:	000f4240 	.word	0x000f4240
 80004e4:	ffbfffff 	.word	0xffbfffff
 80004e8:	ff7fffff 	.word	0xff7fffff

080004ec <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	0189      	lsls	r1, r1, #6
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 80004f0:	2800      	cmp	r0, #0
 80004f2:	da14      	bge.n	800051e <HAL_NVIC_SetPriority+0x32>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80004f4:	230f      	movs	r3, #15
 80004f6:	b2c0      	uxtb	r0, r0
 80004f8:	4003      	ands	r3, r0
 80004fa:	3b08      	subs	r3, #8
 80004fc:	4a11      	ldr	r2, [pc, #68]	; (8000544 <HAL_NVIC_SetPriority+0x58>)
 80004fe:	089b      	lsrs	r3, r3, #2
 8000500:	009b      	lsls	r3, r3, #2
 8000502:	189b      	adds	r3, r3, r2
 8000504:	2203      	movs	r2, #3
 8000506:	4010      	ands	r0, r2
 8000508:	4090      	lsls	r0, r2
 800050a:	32fc      	adds	r2, #252	; 0xfc
 800050c:	0015      	movs	r5, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800050e:	4011      	ands	r1, r2
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000510:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000512:	4081      	lsls	r1, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000514:	69dc      	ldr	r4, [r3, #28]
 8000516:	43ac      	bics	r4, r5
 8000518:	4321      	orrs	r1, r4
 800051a:	61d9      	str	r1, [r3, #28]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 800051c:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800051e:	2503      	movs	r5, #3
 8000520:	0883      	lsrs	r3, r0, #2
 8000522:	4028      	ands	r0, r5
 8000524:	40a8      	lsls	r0, r5
 8000526:	35fc      	adds	r5, #252	; 0xfc
 8000528:	002e      	movs	r6, r5
 800052a:	4a07      	ldr	r2, [pc, #28]	; (8000548 <HAL_NVIC_SetPriority+0x5c>)
 800052c:	009b      	lsls	r3, r3, #2
 800052e:	189b      	adds	r3, r3, r2
 8000530:	22c0      	movs	r2, #192	; 0xc0
 8000532:	4086      	lsls	r6, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000534:	4029      	ands	r1, r5
 8000536:	4081      	lsls	r1, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000538:	0092      	lsls	r2, r2, #2
 800053a:	589c      	ldr	r4, [r3, r2]
 800053c:	43b4      	bics	r4, r6
 800053e:	4321      	orrs	r1, r4
 8000540:	5099      	str	r1, [r3, r2]
 8000542:	e7eb      	b.n	800051c <HAL_NVIC_SetPriority+0x30>
 8000544:	e000ed00 	.word	0xe000ed00
 8000548:	e000e100 	.word	0xe000e100

0800054c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800054c:	4a09      	ldr	r2, [pc, #36]	; (8000574 <HAL_SYSTICK_Config+0x28>)
 800054e:	1e43      	subs	r3, r0, #1
  {
    return (1UL);                                                   /* Reload value impossible */
 8000550:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000552:	4293      	cmp	r3, r2
 8000554:	d80d      	bhi.n	8000572 <HAL_SYSTICK_Config+0x26>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000556:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000558:	4a07      	ldr	r2, [pc, #28]	; (8000578 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800055a:	4808      	ldr	r0, [pc, #32]	; (800057c <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800055c:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800055e:	6a03      	ldr	r3, [r0, #32]
 8000560:	0609      	lsls	r1, r1, #24
 8000562:	021b      	lsls	r3, r3, #8
 8000564:	0a1b      	lsrs	r3, r3, #8
 8000566:	430b      	orrs	r3, r1
 8000568:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800056a:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800056c:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800056e:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000570:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000572:	4770      	bx	lr
 8000574:	00ffffff 	.word	0x00ffffff
 8000578:	e000e010 	.word	0xe000e010
 800057c:	e000ed00 	.word	0xe000ed00

08000580 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000580:	4b05      	ldr	r3, [pc, #20]	; (8000598 <HAL_SYSTICK_CLKSourceConfig+0x18>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000582:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000584:	2804      	cmp	r0, #4
 8000586:	d102      	bne.n	800058e <HAL_SYSTICK_CLKSourceConfig+0xe>
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000588:	4310      	orrs	r0, r2
 800058a:	6018      	str	r0, [r3, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 800058c:	4770      	bx	lr
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800058e:	2104      	movs	r1, #4
 8000590:	438a      	bics	r2, r1
 8000592:	601a      	str	r2, [r3, #0]
}
 8000594:	e7fa      	b.n	800058c <HAL_SYSTICK_CLKSourceConfig+0xc>
 8000596:	46c0      	nop			; (mov r8, r8)
 8000598:	e000e010 	.word	0xe000e010

0800059c <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 800059c:	4770      	bx	lr

0800059e <HAL_SYSTICK_IRQHandler>:
{
 800059e:	b510      	push	{r4, lr}
  HAL_SYSTICK_Callback();
 80005a0:	f7ff fffc 	bl	800059c <HAL_SYSTICK_Callback>
}
 80005a4:	bd10      	pop	{r4, pc}
	...

080005a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 80005a8:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 80005aa:	680b      	ldr	r3, [r1, #0]
{ 
 80005ac:	b087      	sub	sp, #28
  while (((GPIO_Init->Pin) >> position) != RESET)
 80005ae:	9302      	str	r3, [sp, #8]
  uint32_t position = 0x00U;
 80005b0:	2300      	movs	r3, #0
{ 
 80005b2:	9101      	str	r1, [sp, #4]
  while (((GPIO_Init->Pin) >> position) != RESET)
 80005b4:	9a02      	ldr	r2, [sp, #8]
 80005b6:	40da      	lsrs	r2, r3
 80005b8:	d101      	bne.n	80005be <HAL_GPIO_Init+0x16>
      }
    }
    
    position++;
  } 
}
 80005ba:	b007      	add	sp, #28
 80005bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80005be:	2201      	movs	r2, #1
 80005c0:	409a      	lsls	r2, r3
 80005c2:	9203      	str	r2, [sp, #12]
 80005c4:	9903      	ldr	r1, [sp, #12]
 80005c6:	9a02      	ldr	r2, [sp, #8]
 80005c8:	400a      	ands	r2, r1
 80005ca:	9200      	str	r2, [sp, #0]
    if(iocurrent)
 80005cc:	d100      	bne.n	80005d0 <HAL_GPIO_Init+0x28>
 80005ce:	e08c      	b.n	80006ea <HAL_GPIO_Init+0x142>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 80005d0:	9a01      	ldr	r2, [sp, #4]
 80005d2:	2110      	movs	r1, #16
 80005d4:	6852      	ldr	r2, [r2, #4]
 80005d6:	0016      	movs	r6, r2
 80005d8:	438e      	bics	r6, r1
 80005da:	2e02      	cmp	r6, #2
 80005dc:	d10e      	bne.n	80005fc <HAL_GPIO_Init+0x54>
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 80005de:	2507      	movs	r5, #7
 80005e0:	401d      	ands	r5, r3
 80005e2:	00ad      	lsls	r5, r5, #2
 80005e4:	3901      	subs	r1, #1
 80005e6:	40a9      	lsls	r1, r5
        temp = GPIOx->AFR[position >> 3];
 80005e8:	08dc      	lsrs	r4, r3, #3
 80005ea:	00a4      	lsls	r4, r4, #2
 80005ec:	1904      	adds	r4, r0, r4
 80005ee:	6a27      	ldr	r7, [r4, #32]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 80005f0:	438f      	bics	r7, r1
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 80005f2:	9901      	ldr	r1, [sp, #4]
 80005f4:	6909      	ldr	r1, [r1, #16]
 80005f6:	40a9      	lsls	r1, r5
 80005f8:	430f      	orrs	r7, r1
        GPIOx->AFR[position >> 3U] = temp;
 80005fa:	6227      	str	r7, [r4, #32]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 80005fc:	2403      	movs	r4, #3
 80005fe:	005f      	lsls	r7, r3, #1
 8000600:	40bc      	lsls	r4, r7
 8000602:	43e4      	mvns	r4, r4
      temp = GPIOx->MODER;
 8000604:	6805      	ldr	r5, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000606:	3e01      	subs	r6, #1
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 8000608:	4025      	ands	r5, r4
 800060a:	46ac      	mov	ip, r5
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800060c:	2503      	movs	r5, #3
 800060e:	4015      	ands	r5, r2
 8000610:	40bd      	lsls	r5, r7
 8000612:	4661      	mov	r1, ip
 8000614:	430d      	orrs	r5, r1
      GPIOx->MODER = temp;
 8000616:	6005      	str	r5, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000618:	2e01      	cmp	r6, #1
 800061a:	d80f      	bhi.n	800063c <HAL_GPIO_Init+0x94>
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 800061c:	9901      	ldr	r1, [sp, #4]
        temp = GPIOx->OSPEEDR; 
 800061e:	6886      	ldr	r6, [r0, #8]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 8000620:	68cd      	ldr	r5, [r1, #12]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000622:	4026      	ands	r6, r4
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 8000624:	40bd      	lsls	r5, r7
 8000626:	4335      	orrs	r5, r6
        GPIOx->OSPEEDR = temp;
 8000628:	6085      	str	r5, [r0, #8]
        temp = GPIOx->OTYPER;
 800062a:	6846      	ldr	r6, [r0, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 800062c:	9903      	ldr	r1, [sp, #12]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800062e:	0915      	lsrs	r5, r2, #4
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8000630:	438e      	bics	r6, r1
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000632:	2101      	movs	r1, #1
 8000634:	400d      	ands	r5, r1
 8000636:	409d      	lsls	r5, r3
 8000638:	4335      	orrs	r5, r6
        GPIOx->OTYPER = temp;
 800063a:	6045      	str	r5, [r0, #4]
      temp = GPIOx->PUPDR;
 800063c:	68c5      	ldr	r5, [r0, #12]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 800063e:	9901      	ldr	r1, [sp, #4]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000640:	402c      	ands	r4, r5
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 8000642:	688d      	ldr	r5, [r1, #8]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000644:	2180      	movs	r1, #128	; 0x80
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 8000646:	40bd      	lsls	r5, r7
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000648:	0549      	lsls	r1, r1, #21
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 800064a:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 800064c:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 800064e:	420a      	tst	r2, r1
 8000650:	d04b      	beq.n	80006ea <HAL_GPIO_Init+0x142>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000652:	2101      	movs	r1, #1
 8000654:	4c26      	ldr	r4, [pc, #152]	; (80006f0 <HAL_GPIO_Init+0x148>)
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000656:	2603      	movs	r6, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000658:	69a5      	ldr	r5, [r4, #24]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800065a:	401e      	ands	r6, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800065c:	430d      	orrs	r5, r1
 800065e:	61a5      	str	r5, [r4, #24]
 8000660:	69a4      	ldr	r4, [r4, #24]
        temp = SYSCFG->EXTICR[position >> 2];
 8000662:	089d      	lsrs	r5, r3, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000664:	400c      	ands	r4, r1
 8000666:	9405      	str	r4, [sp, #20]
 8000668:	9c05      	ldr	r4, [sp, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800066a:	240f      	movs	r4, #15
 800066c:	4921      	ldr	r1, [pc, #132]	; (80006f4 <HAL_GPIO_Init+0x14c>)
 800066e:	00ad      	lsls	r5, r5, #2
 8000670:	00b6      	lsls	r6, r6, #2
 8000672:	186d      	adds	r5, r5, r1
 8000674:	40b4      	lsls	r4, r6
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000676:	2190      	movs	r1, #144	; 0x90
        temp = SYSCFG->EXTICR[position >> 2];
 8000678:	68af      	ldr	r7, [r5, #8]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800067a:	05c9      	lsls	r1, r1, #23
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800067c:	43a7      	bics	r7, r4
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800067e:	2400      	movs	r4, #0
 8000680:	4288      	cmp	r0, r1
 8000682:	d00c      	beq.n	800069e <HAL_GPIO_Init+0xf6>
 8000684:	491c      	ldr	r1, [pc, #112]	; (80006f8 <HAL_GPIO_Init+0x150>)
 8000686:	3401      	adds	r4, #1
 8000688:	4288      	cmp	r0, r1
 800068a:	d008      	beq.n	800069e <HAL_GPIO_Init+0xf6>
 800068c:	491b      	ldr	r1, [pc, #108]	; (80006fc <HAL_GPIO_Init+0x154>)
 800068e:	3401      	adds	r4, #1
 8000690:	4288      	cmp	r0, r1
 8000692:	d004      	beq.n	800069e <HAL_GPIO_Init+0xf6>
 8000694:	491a      	ldr	r1, [pc, #104]	; (8000700 <HAL_GPIO_Init+0x158>)
 8000696:	3403      	adds	r4, #3
 8000698:	4288      	cmp	r0, r1
 800069a:	d100      	bne.n	800069e <HAL_GPIO_Init+0xf6>
 800069c:	3c02      	subs	r4, #2
 800069e:	40b4      	lsls	r4, r6
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80006a0:	9900      	ldr	r1, [sp, #0]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80006a2:	433c      	orrs	r4, r7
          SET_BIT(temp, iocurrent); 
 80006a4:	000e      	movs	r6, r1
        SYSCFG->EXTICR[position >> 2] = temp;
 80006a6:	60ac      	str	r4, [r5, #8]
        temp = EXTI->IMR;
 80006a8:	4c16      	ldr	r4, [pc, #88]	; (8000704 <HAL_GPIO_Init+0x15c>)
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80006aa:	43cd      	mvns	r5, r1
        temp = EXTI->IMR;
 80006ac:	6827      	ldr	r7, [r4, #0]
          SET_BIT(temp, iocurrent); 
 80006ae:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80006b0:	03d1      	lsls	r1, r2, #15
 80006b2:	d401      	bmi.n	80006b8 <HAL_GPIO_Init+0x110>
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80006b4:	003e      	movs	r6, r7
 80006b6:	402e      	ands	r6, r5
        EXTI->IMR = temp;
 80006b8:	6026      	str	r6, [r4, #0]
        temp = EXTI->EMR;
 80006ba:	6867      	ldr	r7, [r4, #4]
          SET_BIT(temp, iocurrent); 
 80006bc:	9e00      	ldr	r6, [sp, #0]
 80006be:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80006c0:	0391      	lsls	r1, r2, #14
 80006c2:	d401      	bmi.n	80006c8 <HAL_GPIO_Init+0x120>
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 80006c4:	003e      	movs	r6, r7
 80006c6:	402e      	ands	r6, r5
        EXTI->EMR = temp;
 80006c8:	6066      	str	r6, [r4, #4]
        temp = EXTI->RTSR;
 80006ca:	68a7      	ldr	r7, [r4, #8]
          SET_BIT(temp, iocurrent); 
 80006cc:	9e00      	ldr	r6, [sp, #0]
 80006ce:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80006d0:	02d1      	lsls	r1, r2, #11
 80006d2:	d401      	bmi.n	80006d8 <HAL_GPIO_Init+0x130>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80006d4:	003e      	movs	r6, r7
 80006d6:	402e      	ands	r6, r5
        EXTI->RTSR = temp;
 80006d8:	60a6      	str	r6, [r4, #8]
        temp = EXTI->FTSR;
 80006da:	68e6      	ldr	r6, [r4, #12]
          SET_BIT(temp, iocurrent); 
 80006dc:	9f00      	ldr	r7, [sp, #0]
 80006de:	4337      	orrs	r7, r6
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80006e0:	0292      	lsls	r2, r2, #10
 80006e2:	d401      	bmi.n	80006e8 <HAL_GPIO_Init+0x140>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80006e4:	402e      	ands	r6, r5
 80006e6:	0037      	movs	r7, r6
        EXTI->FTSR = temp;
 80006e8:	60e7      	str	r7, [r4, #12]
    position++;
 80006ea:	3301      	adds	r3, #1
 80006ec:	e762      	b.n	80005b4 <HAL_GPIO_Init+0xc>
 80006ee:	46c0      	nop			; (mov r8, r8)
 80006f0:	40021000 	.word	0x40021000
 80006f4:	40010000 	.word	0x40010000
 80006f8:	48000400 	.word	0x48000400
 80006fc:	48000800 	.word	0x48000800
 8000700:	48000c00 	.word	0x48000c00
 8000704:	40010400 	.word	0x40010400

08000708 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000708:	2a00      	cmp	r2, #0
 800070a:	d001      	beq.n	8000710 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800070c:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800070e:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000710:	6281      	str	r1, [r0, #40]	; 0x28
}
 8000712:	e7fc      	b.n	800070e <HAL_GPIO_WritePin+0x6>

08000714 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8000714:	6943      	ldr	r3, [r0, #20]
 8000716:	4059      	eors	r1, r3
 8000718:	6141      	str	r1, [r0, #20]
}
 800071a:	4770      	bx	lr

0800071c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800071c:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800071e:	6803      	ldr	r3, [r0, #0]
{
 8000720:	b085      	sub	sp, #20
 8000722:	0005      	movs	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000724:	07db      	lsls	r3, r3, #31
 8000726:	d42f      	bmi.n	8000788 <HAL_RCC_OscConfig+0x6c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000728:	682b      	ldr	r3, [r5, #0]
 800072a:	079b      	lsls	r3, r3, #30
 800072c:	d500      	bpl.n	8000730 <HAL_RCC_OscConfig+0x14>
 800072e:	e081      	b.n	8000834 <HAL_RCC_OscConfig+0x118>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000730:	682b      	ldr	r3, [r5, #0]
 8000732:	071b      	lsls	r3, r3, #28
 8000734:	d500      	bpl.n	8000738 <HAL_RCC_OscConfig+0x1c>
 8000736:	e0bc      	b.n	80008b2 <HAL_RCC_OscConfig+0x196>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000738:	682b      	ldr	r3, [r5, #0]
 800073a:	075b      	lsls	r3, r3, #29
 800073c:	d500      	bpl.n	8000740 <HAL_RCC_OscConfig+0x24>
 800073e:	e0df      	b.n	8000900 <HAL_RCC_OscConfig+0x1e4>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8000740:	682b      	ldr	r3, [r5, #0]
 8000742:	06db      	lsls	r3, r3, #27
 8000744:	d51a      	bpl.n	800077c <HAL_RCC_OscConfig+0x60>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8000746:	696a      	ldr	r2, [r5, #20]
 8000748:	4cb5      	ldr	r4, [pc, #724]	; (8000a20 <HAL_RCC_OscConfig+0x304>)
 800074a:	2304      	movs	r3, #4
 800074c:	2a01      	cmp	r2, #1
 800074e:	d000      	beq.n	8000752 <HAL_RCC_OscConfig+0x36>
 8000750:	e14b      	b.n	80009ea <HAL_RCC_OscConfig+0x2ce>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8000752:	6b61      	ldr	r1, [r4, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000754:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8000756:	430b      	orrs	r3, r1
 8000758:	6363      	str	r3, [r4, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 800075a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800075c:	431a      	orrs	r2, r3
 800075e:	6362      	str	r2, [r4, #52]	; 0x34
      tickstart = HAL_GetTick();
 8000760:	f7ff fd92 	bl	8000288 <HAL_GetTick>
 8000764:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000766:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000768:	4233      	tst	r3, r6
 800076a:	d100      	bne.n	800076e <HAL_RCC_OscConfig+0x52>
 800076c:	e136      	b.n	80009dc <HAL_RCC_OscConfig+0x2c0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800076e:	21f8      	movs	r1, #248	; 0xf8
 8000770:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8000772:	69ab      	ldr	r3, [r5, #24]
 8000774:	438a      	bics	r2, r1
 8000776:	00db      	lsls	r3, r3, #3
 8000778:	4313      	orrs	r3, r2
 800077a:	6363      	str	r3, [r4, #52]	; 0x34
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800077c:	6a29      	ldr	r1, [r5, #32]
 800077e:	2900      	cmp	r1, #0
 8000780:	d000      	beq.n	8000784 <HAL_RCC_OscConfig+0x68>
 8000782:	e159      	b.n	8000a38 <HAL_RCC_OscConfig+0x31c>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8000784:	2000      	movs	r0, #0
 8000786:	e013      	b.n	80007b0 <HAL_RCC_OscConfig+0x94>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000788:	210c      	movs	r1, #12
 800078a:	4ca5      	ldr	r4, [pc, #660]	; (8000a20 <HAL_RCC_OscConfig+0x304>)
 800078c:	6862      	ldr	r2, [r4, #4]
 800078e:	400a      	ands	r2, r1
 8000790:	2a04      	cmp	r2, #4
 8000792:	d006      	beq.n	80007a2 <HAL_RCC_OscConfig+0x86>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000794:	6863      	ldr	r3, [r4, #4]
 8000796:	400b      	ands	r3, r1
 8000798:	2b08      	cmp	r3, #8
 800079a:	d10b      	bne.n	80007b4 <HAL_RCC_OscConfig+0x98>
 800079c:	6863      	ldr	r3, [r4, #4]
 800079e:	03db      	lsls	r3, r3, #15
 80007a0:	d508      	bpl.n	80007b4 <HAL_RCC_OscConfig+0x98>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80007a2:	6823      	ldr	r3, [r4, #0]
 80007a4:	039b      	lsls	r3, r3, #14
 80007a6:	d5bf      	bpl.n	8000728 <HAL_RCC_OscConfig+0xc>
 80007a8:	686b      	ldr	r3, [r5, #4]
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d1bc      	bne.n	8000728 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 80007ae:	2001      	movs	r0, #1
}
 80007b0:	b005      	add	sp, #20
 80007b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80007b4:	686b      	ldr	r3, [r5, #4]
 80007b6:	2b01      	cmp	r3, #1
 80007b8:	d113      	bne.n	80007e2 <HAL_RCC_OscConfig+0xc6>
 80007ba:	2380      	movs	r3, #128	; 0x80
 80007bc:	6822      	ldr	r2, [r4, #0]
 80007be:	025b      	lsls	r3, r3, #9
 80007c0:	4313      	orrs	r3, r2
 80007c2:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80007c4:	f7ff fd60 	bl	8000288 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80007c8:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 80007ca:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80007cc:	02b6      	lsls	r6, r6, #10
 80007ce:	6823      	ldr	r3, [r4, #0]
 80007d0:	4233      	tst	r3, r6
 80007d2:	d1a9      	bne.n	8000728 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80007d4:	f7ff fd58 	bl	8000288 <HAL_GetTick>
 80007d8:	1bc0      	subs	r0, r0, r7
 80007da:	2864      	cmp	r0, #100	; 0x64
 80007dc:	d9f7      	bls.n	80007ce <HAL_RCC_OscConfig+0xb2>
            return HAL_TIMEOUT;
 80007de:	2003      	movs	r0, #3
 80007e0:	e7e6      	b.n	80007b0 <HAL_RCC_OscConfig+0x94>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d116      	bne.n	8000814 <HAL_RCC_OscConfig+0xf8>
 80007e6:	6823      	ldr	r3, [r4, #0]
 80007e8:	4a8e      	ldr	r2, [pc, #568]	; (8000a24 <HAL_RCC_OscConfig+0x308>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80007ea:	2680      	movs	r6, #128	; 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80007ec:	4013      	ands	r3, r2
 80007ee:	6023      	str	r3, [r4, #0]
 80007f0:	6823      	ldr	r3, [r4, #0]
 80007f2:	4a8d      	ldr	r2, [pc, #564]	; (8000a28 <HAL_RCC_OscConfig+0x30c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80007f4:	02b6      	lsls	r6, r6, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80007f6:	4013      	ands	r3, r2
 80007f8:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80007fa:	f7ff fd45 	bl	8000288 <HAL_GetTick>
 80007fe:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000800:	6823      	ldr	r3, [r4, #0]
 8000802:	4233      	tst	r3, r6
 8000804:	d100      	bne.n	8000808 <HAL_RCC_OscConfig+0xec>
 8000806:	e78f      	b.n	8000728 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000808:	f7ff fd3e 	bl	8000288 <HAL_GetTick>
 800080c:	1bc0      	subs	r0, r0, r7
 800080e:	2864      	cmp	r0, #100	; 0x64
 8000810:	d9f6      	bls.n	8000800 <HAL_RCC_OscConfig+0xe4>
 8000812:	e7e4      	b.n	80007de <HAL_RCC_OscConfig+0xc2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000814:	2b05      	cmp	r3, #5
 8000816:	d105      	bne.n	8000824 <HAL_RCC_OscConfig+0x108>
 8000818:	2380      	movs	r3, #128	; 0x80
 800081a:	6822      	ldr	r2, [r4, #0]
 800081c:	02db      	lsls	r3, r3, #11
 800081e:	4313      	orrs	r3, r2
 8000820:	6023      	str	r3, [r4, #0]
 8000822:	e7ca      	b.n	80007ba <HAL_RCC_OscConfig+0x9e>
 8000824:	6823      	ldr	r3, [r4, #0]
 8000826:	4a7f      	ldr	r2, [pc, #508]	; (8000a24 <HAL_RCC_OscConfig+0x308>)
 8000828:	4013      	ands	r3, r2
 800082a:	6023      	str	r3, [r4, #0]
 800082c:	6823      	ldr	r3, [r4, #0]
 800082e:	4a7e      	ldr	r2, [pc, #504]	; (8000a28 <HAL_RCC_OscConfig+0x30c>)
 8000830:	4013      	ands	r3, r2
 8000832:	e7c6      	b.n	80007c2 <HAL_RCC_OscConfig+0xa6>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000834:	220c      	movs	r2, #12
 8000836:	4c7a      	ldr	r4, [pc, #488]	; (8000a20 <HAL_RCC_OscConfig+0x304>)
 8000838:	6863      	ldr	r3, [r4, #4]
 800083a:	4213      	tst	r3, r2
 800083c:	d006      	beq.n	800084c <HAL_RCC_OscConfig+0x130>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800083e:	6863      	ldr	r3, [r4, #4]
 8000840:	4013      	ands	r3, r2
 8000842:	2b08      	cmp	r3, #8
 8000844:	d110      	bne.n	8000868 <HAL_RCC_OscConfig+0x14c>
 8000846:	6863      	ldr	r3, [r4, #4]
 8000848:	03db      	lsls	r3, r3, #15
 800084a:	d40d      	bmi.n	8000868 <HAL_RCC_OscConfig+0x14c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800084c:	6823      	ldr	r3, [r4, #0]
 800084e:	079b      	lsls	r3, r3, #30
 8000850:	d502      	bpl.n	8000858 <HAL_RCC_OscConfig+0x13c>
 8000852:	68eb      	ldr	r3, [r5, #12]
 8000854:	2b01      	cmp	r3, #1
 8000856:	d1aa      	bne.n	80007ae <HAL_RCC_OscConfig+0x92>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000858:	21f8      	movs	r1, #248	; 0xf8
 800085a:	6822      	ldr	r2, [r4, #0]
 800085c:	692b      	ldr	r3, [r5, #16]
 800085e:	438a      	bics	r2, r1
 8000860:	00db      	lsls	r3, r3, #3
 8000862:	4313      	orrs	r3, r2
 8000864:	6023      	str	r3, [r4, #0]
 8000866:	e763      	b.n	8000730 <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000868:	68ea      	ldr	r2, [r5, #12]
 800086a:	2301      	movs	r3, #1
 800086c:	2a00      	cmp	r2, #0
 800086e:	d00f      	beq.n	8000890 <HAL_RCC_OscConfig+0x174>
        __HAL_RCC_HSI_ENABLE();
 8000870:	6822      	ldr	r2, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000872:	2602      	movs	r6, #2
        __HAL_RCC_HSI_ENABLE();
 8000874:	4313      	orrs	r3, r2
 8000876:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000878:	f7ff fd06 	bl	8000288 <HAL_GetTick>
 800087c:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800087e:	6823      	ldr	r3, [r4, #0]
 8000880:	4233      	tst	r3, r6
 8000882:	d1e9      	bne.n	8000858 <HAL_RCC_OscConfig+0x13c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000884:	f7ff fd00 	bl	8000288 <HAL_GetTick>
 8000888:	1bc0      	subs	r0, r0, r7
 800088a:	2802      	cmp	r0, #2
 800088c:	d9f7      	bls.n	800087e <HAL_RCC_OscConfig+0x162>
 800088e:	e7a6      	b.n	80007de <HAL_RCC_OscConfig+0xc2>
        __HAL_RCC_HSI_DISABLE();
 8000890:	6822      	ldr	r2, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000892:	2602      	movs	r6, #2
        __HAL_RCC_HSI_DISABLE();
 8000894:	439a      	bics	r2, r3
 8000896:	6022      	str	r2, [r4, #0]
        tickstart = HAL_GetTick();
 8000898:	f7ff fcf6 	bl	8000288 <HAL_GetTick>
 800089c:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800089e:	6823      	ldr	r3, [r4, #0]
 80008a0:	4233      	tst	r3, r6
 80008a2:	d100      	bne.n	80008a6 <HAL_RCC_OscConfig+0x18a>
 80008a4:	e744      	b.n	8000730 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80008a6:	f7ff fcef 	bl	8000288 <HAL_GetTick>
 80008aa:	1bc0      	subs	r0, r0, r7
 80008ac:	2802      	cmp	r0, #2
 80008ae:	d9f6      	bls.n	800089e <HAL_RCC_OscConfig+0x182>
 80008b0:	e795      	b.n	80007de <HAL_RCC_OscConfig+0xc2>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80008b2:	69ea      	ldr	r2, [r5, #28]
 80008b4:	2301      	movs	r3, #1
 80008b6:	4c5a      	ldr	r4, [pc, #360]	; (8000a20 <HAL_RCC_OscConfig+0x304>)
 80008b8:	2a00      	cmp	r2, #0
 80008ba:	d010      	beq.n	80008de <HAL_RCC_OscConfig+0x1c2>
      __HAL_RCC_LSI_ENABLE();
 80008bc:	6a62      	ldr	r2, [r4, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80008be:	2602      	movs	r6, #2
      __HAL_RCC_LSI_ENABLE();
 80008c0:	4313      	orrs	r3, r2
 80008c2:	6263      	str	r3, [r4, #36]	; 0x24
      tickstart = HAL_GetTick();
 80008c4:	f7ff fce0 	bl	8000288 <HAL_GetTick>
 80008c8:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80008ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80008cc:	4233      	tst	r3, r6
 80008ce:	d000      	beq.n	80008d2 <HAL_RCC_OscConfig+0x1b6>
 80008d0:	e732      	b.n	8000738 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80008d2:	f7ff fcd9 	bl	8000288 <HAL_GetTick>
 80008d6:	1bc0      	subs	r0, r0, r7
 80008d8:	2802      	cmp	r0, #2
 80008da:	d9f6      	bls.n	80008ca <HAL_RCC_OscConfig+0x1ae>
 80008dc:	e77f      	b.n	80007de <HAL_RCC_OscConfig+0xc2>
      __HAL_RCC_LSI_DISABLE();
 80008de:	6a62      	ldr	r2, [r4, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80008e0:	2602      	movs	r6, #2
      __HAL_RCC_LSI_DISABLE();
 80008e2:	439a      	bics	r2, r3
 80008e4:	6262      	str	r2, [r4, #36]	; 0x24
      tickstart = HAL_GetTick();
 80008e6:	f7ff fccf 	bl	8000288 <HAL_GetTick>
 80008ea:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80008ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80008ee:	4233      	tst	r3, r6
 80008f0:	d100      	bne.n	80008f4 <HAL_RCC_OscConfig+0x1d8>
 80008f2:	e721      	b.n	8000738 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80008f4:	f7ff fcc8 	bl	8000288 <HAL_GetTick>
 80008f8:	1bc0      	subs	r0, r0, r7
 80008fa:	2802      	cmp	r0, #2
 80008fc:	d9f6      	bls.n	80008ec <HAL_RCC_OscConfig+0x1d0>
 80008fe:	e76e      	b.n	80007de <HAL_RCC_OscConfig+0xc2>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000900:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8000902:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000904:	4c46      	ldr	r4, [pc, #280]	; (8000a20 <HAL_RCC_OscConfig+0x304>)
 8000906:	0552      	lsls	r2, r2, #21
 8000908:	69e3      	ldr	r3, [r4, #28]
    FlagStatus       pwrclkchanged = RESET;
 800090a:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800090c:	4213      	tst	r3, r2
 800090e:	d108      	bne.n	8000922 <HAL_RCC_OscConfig+0x206>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000910:	69e3      	ldr	r3, [r4, #28]
 8000912:	4313      	orrs	r3, r2
 8000914:	61e3      	str	r3, [r4, #28]
 8000916:	69e3      	ldr	r3, [r4, #28]
 8000918:	4013      	ands	r3, r2
 800091a:	9303      	str	r3, [sp, #12]
 800091c:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 800091e:	2301      	movs	r3, #1
 8000920:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000922:	2780      	movs	r7, #128	; 0x80
 8000924:	4e41      	ldr	r6, [pc, #260]	; (8000a2c <HAL_RCC_OscConfig+0x310>)
 8000926:	007f      	lsls	r7, r7, #1
 8000928:	6833      	ldr	r3, [r6, #0]
 800092a:	423b      	tst	r3, r7
 800092c:	d006      	beq.n	800093c <HAL_RCC_OscConfig+0x220>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800092e:	68ab      	ldr	r3, [r5, #8]
 8000930:	2b01      	cmp	r3, #1
 8000932:	d113      	bne.n	800095c <HAL_RCC_OscConfig+0x240>
 8000934:	6a22      	ldr	r2, [r4, #32]
 8000936:	4313      	orrs	r3, r2
 8000938:	6223      	str	r3, [r4, #32]
 800093a:	e030      	b.n	800099e <HAL_RCC_OscConfig+0x282>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800093c:	6833      	ldr	r3, [r6, #0]
 800093e:	433b      	orrs	r3, r7
 8000940:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000942:	f7ff fca1 	bl	8000288 <HAL_GetTick>
 8000946:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000948:	6833      	ldr	r3, [r6, #0]
 800094a:	423b      	tst	r3, r7
 800094c:	d1ef      	bne.n	800092e <HAL_RCC_OscConfig+0x212>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800094e:	f7ff fc9b 	bl	8000288 <HAL_GetTick>
 8000952:	9b01      	ldr	r3, [sp, #4]
 8000954:	1ac0      	subs	r0, r0, r3
 8000956:	2864      	cmp	r0, #100	; 0x64
 8000958:	d9f6      	bls.n	8000948 <HAL_RCC_OscConfig+0x22c>
 800095a:	e740      	b.n	80007de <HAL_RCC_OscConfig+0xc2>
 800095c:	2201      	movs	r2, #1
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800095e:	2b00      	cmp	r3, #0
 8000960:	d114      	bne.n	800098c <HAL_RCC_OscConfig+0x270>
 8000962:	6a23      	ldr	r3, [r4, #32]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000964:	2702      	movs	r7, #2
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000966:	4393      	bics	r3, r2
 8000968:	6223      	str	r3, [r4, #32]
 800096a:	6a23      	ldr	r3, [r4, #32]
 800096c:	3203      	adds	r2, #3
 800096e:	4393      	bics	r3, r2
 8000970:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000972:	f7ff fc89 	bl	8000288 <HAL_GetTick>
 8000976:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000978:	6a23      	ldr	r3, [r4, #32]
 800097a:	423b      	tst	r3, r7
 800097c:	d025      	beq.n	80009ca <HAL_RCC_OscConfig+0x2ae>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800097e:	f7ff fc83 	bl	8000288 <HAL_GetTick>
 8000982:	4b2b      	ldr	r3, [pc, #172]	; (8000a30 <HAL_RCC_OscConfig+0x314>)
 8000984:	1b80      	subs	r0, r0, r6
 8000986:	4298      	cmp	r0, r3
 8000988:	d9f6      	bls.n	8000978 <HAL_RCC_OscConfig+0x25c>
 800098a:	e728      	b.n	80007de <HAL_RCC_OscConfig+0xc2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800098c:	2b05      	cmp	r3, #5
 800098e:	d10b      	bne.n	80009a8 <HAL_RCC_OscConfig+0x28c>
 8000990:	6a21      	ldr	r1, [r4, #32]
 8000992:	3b01      	subs	r3, #1
 8000994:	430b      	orrs	r3, r1
 8000996:	6223      	str	r3, [r4, #32]
 8000998:	6a23      	ldr	r3, [r4, #32]
 800099a:	431a      	orrs	r2, r3
 800099c:	6222      	str	r2, [r4, #32]
      tickstart = HAL_GetTick();
 800099e:	f7ff fc73 	bl	8000288 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80009a2:	2702      	movs	r7, #2
      tickstart = HAL_GetTick();
 80009a4:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80009a6:	e00d      	b.n	80009c4 <HAL_RCC_OscConfig+0x2a8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80009a8:	6a23      	ldr	r3, [r4, #32]
 80009aa:	4393      	bics	r3, r2
 80009ac:	2204      	movs	r2, #4
 80009ae:	6223      	str	r3, [r4, #32]
 80009b0:	6a23      	ldr	r3, [r4, #32]
 80009b2:	4393      	bics	r3, r2
 80009b4:	e7c0      	b.n	8000938 <HAL_RCC_OscConfig+0x21c>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80009b6:	f7ff fc67 	bl	8000288 <HAL_GetTick>
 80009ba:	4b1d      	ldr	r3, [pc, #116]	; (8000a30 <HAL_RCC_OscConfig+0x314>)
 80009bc:	1b80      	subs	r0, r0, r6
 80009be:	4298      	cmp	r0, r3
 80009c0:	d900      	bls.n	80009c4 <HAL_RCC_OscConfig+0x2a8>
 80009c2:	e70c      	b.n	80007de <HAL_RCC_OscConfig+0xc2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80009c4:	6a23      	ldr	r3, [r4, #32]
 80009c6:	423b      	tst	r3, r7
 80009c8:	d0f5      	beq.n	80009b6 <HAL_RCC_OscConfig+0x29a>
    if(pwrclkchanged == SET)
 80009ca:	9b00      	ldr	r3, [sp, #0]
 80009cc:	2b01      	cmp	r3, #1
 80009ce:	d000      	beq.n	80009d2 <HAL_RCC_OscConfig+0x2b6>
 80009d0:	e6b6      	b.n	8000740 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 80009d2:	69e3      	ldr	r3, [r4, #28]
 80009d4:	4a17      	ldr	r2, [pc, #92]	; (8000a34 <HAL_RCC_OscConfig+0x318>)
 80009d6:	4013      	ands	r3, r2
 80009d8:	61e3      	str	r3, [r4, #28]
 80009da:	e6b1      	b.n	8000740 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80009dc:	f7ff fc54 	bl	8000288 <HAL_GetTick>
 80009e0:	1bc0      	subs	r0, r0, r7
 80009e2:	2802      	cmp	r0, #2
 80009e4:	d800      	bhi.n	80009e8 <HAL_RCC_OscConfig+0x2cc>
 80009e6:	e6be      	b.n	8000766 <HAL_RCC_OscConfig+0x4a>
 80009e8:	e6f9      	b.n	80007de <HAL_RCC_OscConfig+0xc2>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80009ea:	3205      	adds	r2, #5
 80009ec:	d103      	bne.n	80009f6 <HAL_RCC_OscConfig+0x2da>
      __HAL_RCC_HSI14ADC_ENABLE();
 80009ee:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80009f0:	439a      	bics	r2, r3
 80009f2:	6362      	str	r2, [r4, #52]	; 0x34
 80009f4:	e6bb      	b.n	800076e <HAL_RCC_OscConfig+0x52>
      __HAL_RCC_HSI14ADC_DISABLE();
 80009f6:	6b62      	ldr	r2, [r4, #52]	; 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80009f8:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 80009fa:	4313      	orrs	r3, r2
      __HAL_RCC_HSI14_DISABLE();
 80009fc:	2201      	movs	r2, #1
      __HAL_RCC_HSI14ADC_DISABLE();
 80009fe:	6363      	str	r3, [r4, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 8000a00:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000a02:	4393      	bics	r3, r2
 8000a04:	6363      	str	r3, [r4, #52]	; 0x34
      tickstart = HAL_GetTick();
 8000a06:	f7ff fc3f 	bl	8000288 <HAL_GetTick>
 8000a0a:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000a0c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000a0e:	4233      	tst	r3, r6
 8000a10:	d100      	bne.n	8000a14 <HAL_RCC_OscConfig+0x2f8>
 8000a12:	e6b3      	b.n	800077c <HAL_RCC_OscConfig+0x60>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000a14:	f7ff fc38 	bl	8000288 <HAL_GetTick>
 8000a18:	1bc0      	subs	r0, r0, r7
 8000a1a:	2802      	cmp	r0, #2
 8000a1c:	d9f6      	bls.n	8000a0c <HAL_RCC_OscConfig+0x2f0>
 8000a1e:	e6de      	b.n	80007de <HAL_RCC_OscConfig+0xc2>
 8000a20:	40021000 	.word	0x40021000
 8000a24:	fffeffff 	.word	0xfffeffff
 8000a28:	fffbffff 	.word	0xfffbffff
 8000a2c:	40007000 	.word	0x40007000
 8000a30:	00001388 	.word	0x00001388
 8000a34:	efffffff 	.word	0xefffffff
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000a38:	220c      	movs	r2, #12
 8000a3a:	4c26      	ldr	r4, [pc, #152]	; (8000ad4 <HAL_RCC_OscConfig+0x3b8>)
      return HAL_ERROR;
 8000a3c:	2001      	movs	r0, #1
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000a3e:	6863      	ldr	r3, [r4, #4]
 8000a40:	4013      	ands	r3, r2
 8000a42:	2b08      	cmp	r3, #8
 8000a44:	d100      	bne.n	8000a48 <HAL_RCC_OscConfig+0x32c>
 8000a46:	e6b3      	b.n	80007b0 <HAL_RCC_OscConfig+0x94>
        __HAL_RCC_PLL_DISABLE();
 8000a48:	6823      	ldr	r3, [r4, #0]
 8000a4a:	4a23      	ldr	r2, [pc, #140]	; (8000ad8 <HAL_RCC_OscConfig+0x3bc>)
 8000a4c:	4013      	ands	r3, r2
 8000a4e:	6023      	str	r3, [r4, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000a50:	2902      	cmp	r1, #2
 8000a52:	d12f      	bne.n	8000ab4 <HAL_RCC_OscConfig+0x398>
        tickstart = HAL_GetTick();
 8000a54:	f7ff fc18 	bl	8000288 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000a58:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8000a5a:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000a5c:	04b6      	lsls	r6, r6, #18
 8000a5e:	6823      	ldr	r3, [r4, #0]
 8000a60:	4233      	tst	r3, r6
 8000a62:	d121      	bne.n	8000aa8 <HAL_RCC_OscConfig+0x38c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000a64:	220f      	movs	r2, #15
 8000a66:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000a68:	4393      	bics	r3, r2
 8000a6a:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8000a6c:	4313      	orrs	r3, r2
 8000a6e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000a70:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8000a72:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000a74:	6862      	ldr	r2, [r4, #4]
 8000a76:	430b      	orrs	r3, r1
 8000a78:	4918      	ldr	r1, [pc, #96]	; (8000adc <HAL_RCC_OscConfig+0x3c0>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000a7a:	2580      	movs	r5, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000a7c:	400a      	ands	r2, r1
 8000a7e:	4313      	orrs	r3, r2
 8000a80:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8000a82:	2380      	movs	r3, #128	; 0x80
 8000a84:	6822      	ldr	r2, [r4, #0]
 8000a86:	045b      	lsls	r3, r3, #17
 8000a88:	4313      	orrs	r3, r2
 8000a8a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000a8c:	f7ff fbfc 	bl	8000288 <HAL_GetTick>
 8000a90:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000a92:	04ad      	lsls	r5, r5, #18
 8000a94:	6823      	ldr	r3, [r4, #0]
 8000a96:	422b      	tst	r3, r5
 8000a98:	d000      	beq.n	8000a9c <HAL_RCC_OscConfig+0x380>
 8000a9a:	e673      	b.n	8000784 <HAL_RCC_OscConfig+0x68>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000a9c:	f7ff fbf4 	bl	8000288 <HAL_GetTick>
 8000aa0:	1b80      	subs	r0, r0, r6
 8000aa2:	2802      	cmp	r0, #2
 8000aa4:	d9f6      	bls.n	8000a94 <HAL_RCC_OscConfig+0x378>
 8000aa6:	e69a      	b.n	80007de <HAL_RCC_OscConfig+0xc2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000aa8:	f7ff fbee 	bl	8000288 <HAL_GetTick>
 8000aac:	1bc0      	subs	r0, r0, r7
 8000aae:	2802      	cmp	r0, #2
 8000ab0:	d9d5      	bls.n	8000a5e <HAL_RCC_OscConfig+0x342>
 8000ab2:	e694      	b.n	80007de <HAL_RCC_OscConfig+0xc2>
        tickstart = HAL_GetTick();
 8000ab4:	f7ff fbe8 	bl	8000288 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000ab8:	2580      	movs	r5, #128	; 0x80
        tickstart = HAL_GetTick();
 8000aba:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000abc:	04ad      	lsls	r5, r5, #18
 8000abe:	6823      	ldr	r3, [r4, #0]
 8000ac0:	422b      	tst	r3, r5
 8000ac2:	d100      	bne.n	8000ac6 <HAL_RCC_OscConfig+0x3aa>
 8000ac4:	e65e      	b.n	8000784 <HAL_RCC_OscConfig+0x68>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ac6:	f7ff fbdf 	bl	8000288 <HAL_GetTick>
 8000aca:	1b80      	subs	r0, r0, r6
 8000acc:	2802      	cmp	r0, #2
 8000ace:	d9f6      	bls.n	8000abe <HAL_RCC_OscConfig+0x3a2>
 8000ad0:	e685      	b.n	80007de <HAL_RCC_OscConfig+0xc2>
 8000ad2:	46c0      	nop			; (mov r8, r8)
 8000ad4:	40021000 	.word	0x40021000
 8000ad8:	feffffff 	.word	0xfeffffff
 8000adc:	ffc2ffff 	.word	0xffc2ffff

08000ae0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000ae0:	b570      	push	{r4, r5, r6, lr}
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8000ae2:	4c16      	ldr	r4, [pc, #88]	; (8000b3c <HAL_RCC_GetSysClockFreq+0x5c>)
{
 8000ae4:	b088      	sub	sp, #32
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8000ae6:	2210      	movs	r2, #16
 8000ae8:	0021      	movs	r1, r4
 8000aea:	4668      	mov	r0, sp
 8000aec:	f001 fa4a 	bl	8001f84 <memcpy>
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8000af0:	0021      	movs	r1, r4
 8000af2:	ad04      	add	r5, sp, #16
 8000af4:	2210      	movs	r2, #16
 8000af6:	3110      	adds	r1, #16
 8000af8:	0028      	movs	r0, r5
 8000afa:	f001 fa43 	bl	8001f84 <memcpy>
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000afe:	230c      	movs	r3, #12
  tmpreg = RCC->CFGR;
 8000b00:	4e0f      	ldr	r6, [pc, #60]	; (8000b40 <HAL_RCC_GetSysClockFreq+0x60>)
 8000b02:	6872      	ldr	r2, [r6, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8000b04:	4013      	ands	r3, r2
 8000b06:	2b04      	cmp	r3, #4
 8000b08:	d015      	beq.n	8000b36 <HAL_RCC_GetSysClockFreq+0x56>
 8000b0a:	2b08      	cmp	r3, #8
 8000b0c:	d002      	beq.n	8000b14 <HAL_RCC_GetSysClockFreq+0x34>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8000b0e:	480d      	ldr	r0, [pc, #52]	; (8000b44 <HAL_RCC_GetSysClockFreq+0x64>)
      break;
    }
  }
  return sysclockfreq;
}
 8000b10:	b008      	add	sp, #32
 8000b12:	bd70      	pop	{r4, r5, r6, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8000b14:	200f      	movs	r0, #15
 8000b16:	466b      	mov	r3, sp
 8000b18:	0c91      	lsrs	r1, r2, #18
 8000b1a:	4001      	ands	r1, r0
 8000b1c:	5c5c      	ldrb	r4, [r3, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8000b1e:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8000b20:	4003      	ands	r3, r0
 8000b22:	5ce9      	ldrb	r1, [r5, r3]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8000b24:	03d3      	lsls	r3, r2, #15
 8000b26:	d504      	bpl.n	8000b32 <HAL_RCC_GetSysClockFreq+0x52>
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8000b28:	4807      	ldr	r0, [pc, #28]	; (8000b48 <HAL_RCC_GetSysClockFreq+0x68>)
 8000b2a:	f7ff faf7 	bl	800011c <__udivsi3>
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
 8000b2e:	4360      	muls	r0, r4
 8000b30:	e7ee      	b.n	8000b10 <HAL_RCC_GetSysClockFreq+0x30>
 8000b32:	4806      	ldr	r0, [pc, #24]	; (8000b4c <HAL_RCC_GetSysClockFreq+0x6c>)
 8000b34:	e7fb      	b.n	8000b2e <HAL_RCC_GetSysClockFreq+0x4e>
      sysclockfreq = HSE_VALUE;
 8000b36:	4804      	ldr	r0, [pc, #16]	; (8000b48 <HAL_RCC_GetSysClockFreq+0x68>)
  return sysclockfreq;
 8000b38:	e7ea      	b.n	8000b10 <HAL_RCC_GetSysClockFreq+0x30>
 8000b3a:	46c0      	nop			; (mov r8, r8)
 8000b3c:	08001fb0 	.word	0x08001fb0
 8000b40:	40021000 	.word	0x40021000
 8000b44:	007a1200 	.word	0x007a1200
 8000b48:	00f42400 	.word	0x00f42400
 8000b4c:	003d0900 	.word	0x003d0900

08000b50 <HAL_RCC_ClockConfig>:
{
 8000b50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000b52:	2201      	movs	r2, #1
 8000b54:	4c43      	ldr	r4, [pc, #268]	; (8000c64 <HAL_RCC_ClockConfig+0x114>)
{
 8000b56:	0006      	movs	r6, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000b58:	6823      	ldr	r3, [r4, #0]
{
 8000b5a:	000f      	movs	r7, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000b5c:	4013      	ands	r3, r2
 8000b5e:	428b      	cmp	r3, r1
 8000b60:	d31c      	bcc.n	8000b9c <HAL_RCC_ClockConfig+0x4c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000b62:	6832      	ldr	r2, [r6, #0]
 8000b64:	0793      	lsls	r3, r2, #30
 8000b66:	d423      	bmi.n	8000bb0 <HAL_RCC_ClockConfig+0x60>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000b68:	07d3      	lsls	r3, r2, #31
 8000b6a:	d429      	bmi.n	8000bc0 <HAL_RCC_ClockConfig+0x70>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	6822      	ldr	r2, [r4, #0]
 8000b70:	401a      	ands	r2, r3
 8000b72:	4297      	cmp	r7, r2
 8000b74:	d367      	bcc.n	8000c46 <HAL_RCC_ClockConfig+0xf6>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000b76:	6833      	ldr	r3, [r6, #0]
 8000b78:	4c3b      	ldr	r4, [pc, #236]	; (8000c68 <HAL_RCC_ClockConfig+0x118>)
 8000b7a:	075b      	lsls	r3, r3, #29
 8000b7c:	d46a      	bmi.n	8000c54 <HAL_RCC_ClockConfig+0x104>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8000b7e:	f7ff ffaf 	bl	8000ae0 <HAL_RCC_GetSysClockFreq>
 8000b82:	6863      	ldr	r3, [r4, #4]
 8000b84:	4a39      	ldr	r2, [pc, #228]	; (8000c6c <HAL_RCC_ClockConfig+0x11c>)
 8000b86:	061b      	lsls	r3, r3, #24
 8000b88:	0f1b      	lsrs	r3, r3, #28
 8000b8a:	5cd3      	ldrb	r3, [r2, r3]
 8000b8c:	40d8      	lsrs	r0, r3
 8000b8e:	4b38      	ldr	r3, [pc, #224]	; (8000c70 <HAL_RCC_ClockConfig+0x120>)
 8000b90:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000b92:	2000      	movs	r0, #0
 8000b94:	f7ff fb4e 	bl	8000234 <HAL_InitTick>
  return HAL_OK;
 8000b98:	2000      	movs	r0, #0
 8000b9a:	e008      	b.n	8000bae <HAL_RCC_ClockConfig+0x5e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000b9c:	6823      	ldr	r3, [r4, #0]
 8000b9e:	4393      	bics	r3, r2
 8000ba0:	430b      	orrs	r3, r1
 8000ba2:	6023      	str	r3, [r4, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000ba4:	6823      	ldr	r3, [r4, #0]
 8000ba6:	4013      	ands	r3, r2
 8000ba8:	4299      	cmp	r1, r3
 8000baa:	d0da      	beq.n	8000b62 <HAL_RCC_ClockConfig+0x12>
      return HAL_ERROR;
 8000bac:	2001      	movs	r0, #1
}
 8000bae:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000bb0:	20f0      	movs	r0, #240	; 0xf0
 8000bb2:	492d      	ldr	r1, [pc, #180]	; (8000c68 <HAL_RCC_ClockConfig+0x118>)
 8000bb4:	684b      	ldr	r3, [r1, #4]
 8000bb6:	4383      	bics	r3, r0
 8000bb8:	68b0      	ldr	r0, [r6, #8]
 8000bba:	4303      	orrs	r3, r0
 8000bbc:	604b      	str	r3, [r1, #4]
 8000bbe:	e7d3      	b.n	8000b68 <HAL_RCC_ClockConfig+0x18>
 8000bc0:	4d29      	ldr	r5, [pc, #164]	; (8000c68 <HAL_RCC_ClockConfig+0x118>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000bc2:	6872      	ldr	r2, [r6, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000bc4:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000bc6:	2a01      	cmp	r2, #1
 8000bc8:	d11a      	bne.n	8000c00 <HAL_RCC_ClockConfig+0xb0>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000bca:	039b      	lsls	r3, r3, #14
 8000bcc:	d5ee      	bpl.n	8000bac <HAL_RCC_ClockConfig+0x5c>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000bce:	2103      	movs	r1, #3
 8000bd0:	686b      	ldr	r3, [r5, #4]
 8000bd2:	438b      	bics	r3, r1
 8000bd4:	4313      	orrs	r3, r2
 8000bd6:	606b      	str	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8000bd8:	f7ff fb56 	bl	8000288 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000bdc:	6873      	ldr	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8000bde:	9001      	str	r0, [sp, #4]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000be0:	2b01      	cmp	r3, #1
 8000be2:	d115      	bne.n	8000c10 <HAL_RCC_ClockConfig+0xc0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000be4:	220c      	movs	r2, #12
 8000be6:	686b      	ldr	r3, [r5, #4]
 8000be8:	4013      	ands	r3, r2
 8000bea:	2b04      	cmp	r3, #4
 8000bec:	d0be      	beq.n	8000b6c <HAL_RCC_ClockConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000bee:	f7ff fb4b 	bl	8000288 <HAL_GetTick>
 8000bf2:	9b01      	ldr	r3, [sp, #4]
 8000bf4:	1ac0      	subs	r0, r0, r3
 8000bf6:	4b1f      	ldr	r3, [pc, #124]	; (8000c74 <HAL_RCC_ClockConfig+0x124>)
 8000bf8:	4298      	cmp	r0, r3
 8000bfa:	d9f3      	bls.n	8000be4 <HAL_RCC_ClockConfig+0x94>
          return HAL_TIMEOUT;
 8000bfc:	2003      	movs	r0, #3
 8000bfe:	e7d6      	b.n	8000bae <HAL_RCC_ClockConfig+0x5e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000c00:	2a02      	cmp	r2, #2
 8000c02:	d102      	bne.n	8000c0a <HAL_RCC_ClockConfig+0xba>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000c04:	019b      	lsls	r3, r3, #6
 8000c06:	d4e2      	bmi.n	8000bce <HAL_RCC_ClockConfig+0x7e>
 8000c08:	e7d0      	b.n	8000bac <HAL_RCC_ClockConfig+0x5c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c0a:	079b      	lsls	r3, r3, #30
 8000c0c:	d4df      	bmi.n	8000bce <HAL_RCC_ClockConfig+0x7e>
 8000c0e:	e7cd      	b.n	8000bac <HAL_RCC_ClockConfig+0x5c>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000c10:	2b02      	cmp	r3, #2
 8000c12:	d012      	beq.n	8000c3a <HAL_RCC_ClockConfig+0xea>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000c14:	220c      	movs	r2, #12
 8000c16:	686b      	ldr	r3, [r5, #4]
 8000c18:	4213      	tst	r3, r2
 8000c1a:	d0a7      	beq.n	8000b6c <HAL_RCC_ClockConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000c1c:	f7ff fb34 	bl	8000288 <HAL_GetTick>
 8000c20:	9b01      	ldr	r3, [sp, #4]
 8000c22:	1ac0      	subs	r0, r0, r3
 8000c24:	4b13      	ldr	r3, [pc, #76]	; (8000c74 <HAL_RCC_ClockConfig+0x124>)
 8000c26:	4298      	cmp	r0, r3
 8000c28:	d9f4      	bls.n	8000c14 <HAL_RCC_ClockConfig+0xc4>
 8000c2a:	e7e7      	b.n	8000bfc <HAL_RCC_ClockConfig+0xac>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000c2c:	f7ff fb2c 	bl	8000288 <HAL_GetTick>
 8000c30:	9b01      	ldr	r3, [sp, #4]
 8000c32:	1ac0      	subs	r0, r0, r3
 8000c34:	4b0f      	ldr	r3, [pc, #60]	; (8000c74 <HAL_RCC_ClockConfig+0x124>)
 8000c36:	4298      	cmp	r0, r3
 8000c38:	d8e0      	bhi.n	8000bfc <HAL_RCC_ClockConfig+0xac>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000c3a:	220c      	movs	r2, #12
 8000c3c:	686b      	ldr	r3, [r5, #4]
 8000c3e:	4013      	ands	r3, r2
 8000c40:	2b08      	cmp	r3, #8
 8000c42:	d1f3      	bne.n	8000c2c <HAL_RCC_ClockConfig+0xdc>
 8000c44:	e792      	b.n	8000b6c <HAL_RCC_ClockConfig+0x1c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000c46:	6822      	ldr	r2, [r4, #0]
 8000c48:	439a      	bics	r2, r3
 8000c4a:	6022      	str	r2, [r4, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000c4c:	6822      	ldr	r2, [r4, #0]
 8000c4e:	421a      	tst	r2, r3
 8000c50:	d1ac      	bne.n	8000bac <HAL_RCC_ClockConfig+0x5c>
 8000c52:	e790      	b.n	8000b76 <HAL_RCC_ClockConfig+0x26>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8000c54:	6863      	ldr	r3, [r4, #4]
 8000c56:	4a08      	ldr	r2, [pc, #32]	; (8000c78 <HAL_RCC_ClockConfig+0x128>)
 8000c58:	4013      	ands	r3, r2
 8000c5a:	68f2      	ldr	r2, [r6, #12]
 8000c5c:	4313      	orrs	r3, r2
 8000c5e:	6063      	str	r3, [r4, #4]
 8000c60:	e78d      	b.n	8000b7e <HAL_RCC_ClockConfig+0x2e>
 8000c62:	46c0      	nop			; (mov r8, r8)
 8000c64:	40022000 	.word	0x40022000
 8000c68:	40021000 	.word	0x40021000
 8000c6c:	08001fde 	.word	0x08001fde
 8000c70:	20000000 	.word	0x20000000
 8000c74:	00001388 	.word	0x00001388
 8000c78:	fffff8ff 	.word	0xfffff8ff

08000c7c <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 8000c7c:	4b01      	ldr	r3, [pc, #4]	; (8000c84 <HAL_RCC_GetHCLKFreq+0x8>)
 8000c7e:	6818      	ldr	r0, [r3, #0]
}
 8000c80:	4770      	bx	lr
 8000c82:	46c0      	nop			; (mov r8, r8)
 8000c84:	20000000 	.word	0x20000000

08000c88 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8000c88:	4b04      	ldr	r3, [pc, #16]	; (8000c9c <HAL_RCC_GetPCLK1Freq+0x14>)
 8000c8a:	4a05      	ldr	r2, [pc, #20]	; (8000ca0 <HAL_RCC_GetPCLK1Freq+0x18>)
 8000c8c:	685b      	ldr	r3, [r3, #4]
 8000c8e:	055b      	lsls	r3, r3, #21
 8000c90:	0f5b      	lsrs	r3, r3, #29
 8000c92:	5cd3      	ldrb	r3, [r2, r3]
 8000c94:	4a03      	ldr	r2, [pc, #12]	; (8000ca4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000c96:	6810      	ldr	r0, [r2, #0]
 8000c98:	40d8      	lsrs	r0, r3
}    
 8000c9a:	4770      	bx	lr
 8000c9c:	40021000 	.word	0x40021000
 8000ca0:	08001fee 	.word	0x08001fee
 8000ca4:	20000000 	.word	0x20000000

08000ca8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8000ca8:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8000caa:	6803      	ldr	r3, [r0, #0]
{
 8000cac:	b085      	sub	sp, #20
 8000cae:	0005      	movs	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8000cb0:	03db      	lsls	r3, r3, #15
 8000cb2:	d528      	bpl.n	8000d06 <HAL_RCCEx_PeriphCLKConfig+0x5e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000cb4:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8000cb6:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000cb8:	4c37      	ldr	r4, [pc, #220]	; (8000d98 <HAL_RCCEx_PeriphCLKConfig+0xf0>)
 8000cba:	0552      	lsls	r2, r2, #21
 8000cbc:	69e3      	ldr	r3, [r4, #28]
    FlagStatus       pwrclkchanged = RESET;
 8000cbe:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000cc0:	4213      	tst	r3, r2
 8000cc2:	d108      	bne.n	8000cd6 <HAL_RCCEx_PeriphCLKConfig+0x2e>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8000cc4:	69e3      	ldr	r3, [r4, #28]
 8000cc6:	4313      	orrs	r3, r2
 8000cc8:	61e3      	str	r3, [r4, #28]
 8000cca:	69e3      	ldr	r3, [r4, #28]
 8000ccc:	4013      	ands	r3, r2
 8000cce:	9303      	str	r3, [sp, #12]
 8000cd0:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	9300      	str	r3, [sp, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000cd6:	2780      	movs	r7, #128	; 0x80
 8000cd8:	4e30      	ldr	r6, [pc, #192]	; (8000d9c <HAL_RCCEx_PeriphCLKConfig+0xf4>)
 8000cda:	007f      	lsls	r7, r7, #1
 8000cdc:	6833      	ldr	r3, [r6, #0]
 8000cde:	423b      	tst	r3, r7
 8000ce0:	d026      	beq.n	8000d30 <HAL_RCCEx_PeriphCLKConfig+0x88>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8000ce2:	22c0      	movs	r2, #192	; 0xc0
 8000ce4:	6a23      	ldr	r3, [r4, #32]
 8000ce6:	0092      	lsls	r2, r2, #2
 8000ce8:	4013      	ands	r3, r2
 8000cea:	4e2d      	ldr	r6, [pc, #180]	; (8000da0 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8000cec:	d132      	bne.n	8000d54 <HAL_RCCEx_PeriphCLKConfig+0xac>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8000cee:	6a23      	ldr	r3, [r4, #32]
 8000cf0:	401e      	ands	r6, r3
 8000cf2:	686b      	ldr	r3, [r5, #4]
 8000cf4:	431e      	orrs	r6, r3

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000cf6:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8000cf8:	6226      	str	r6, [r4, #32]
    if(pwrclkchanged == SET)
 8000cfa:	2b01      	cmp	r3, #1
 8000cfc:	d103      	bne.n	8000d06 <HAL_RCCEx_PeriphCLKConfig+0x5e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000cfe:	69e3      	ldr	r3, [r4, #28]
 8000d00:	4a28      	ldr	r2, [pc, #160]	; (8000da4 <HAL_RCCEx_PeriphCLKConfig+0xfc>)
 8000d02:	4013      	ands	r3, r2
 8000d04:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8000d06:	682a      	ldr	r2, [r5, #0]
 8000d08:	07d3      	lsls	r3, r2, #31
 8000d0a:	d506      	bpl.n	8000d1a <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8000d0c:	2003      	movs	r0, #3
 8000d0e:	4922      	ldr	r1, [pc, #136]	; (8000d98 <HAL_RCCEx_PeriphCLKConfig+0xf0>)
 8000d10:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8000d12:	4383      	bics	r3, r0
 8000d14:	68a8      	ldr	r0, [r5, #8]
 8000d16:	4303      	orrs	r3, r0
 8000d18:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8000d1a:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8000d1c:	0693      	lsls	r3, r2, #26
 8000d1e:	d517      	bpl.n	8000d50 <HAL_RCCEx_PeriphCLKConfig+0xa8>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8000d20:	2110      	movs	r1, #16
 8000d22:	4a1d      	ldr	r2, [pc, #116]	; (8000d98 <HAL_RCCEx_PeriphCLKConfig+0xf0>)
 8000d24:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000d26:	438b      	bics	r3, r1
 8000d28:	68e9      	ldr	r1, [r5, #12]
 8000d2a:	430b      	orrs	r3, r1
 8000d2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d2e:	e00f      	b.n	8000d50 <HAL_RCCEx_PeriphCLKConfig+0xa8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000d30:	6833      	ldr	r3, [r6, #0]
 8000d32:	433b      	orrs	r3, r7
 8000d34:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000d36:	f7ff faa7 	bl	8000288 <HAL_GetTick>
 8000d3a:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d3c:	6833      	ldr	r3, [r6, #0]
 8000d3e:	423b      	tst	r3, r7
 8000d40:	d1cf      	bne.n	8000ce2 <HAL_RCCEx_PeriphCLKConfig+0x3a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000d42:	f7ff faa1 	bl	8000288 <HAL_GetTick>
 8000d46:	9b01      	ldr	r3, [sp, #4]
 8000d48:	1ac0      	subs	r0, r0, r3
 8000d4a:	2864      	cmp	r0, #100	; 0x64
 8000d4c:	d9f6      	bls.n	8000d3c <HAL_RCCEx_PeriphCLKConfig+0x94>
          return HAL_TIMEOUT;
 8000d4e:	2003      	movs	r0, #3
}
 8000d50:	b005      	add	sp, #20
 8000d52:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8000d54:	6869      	ldr	r1, [r5, #4]
 8000d56:	400a      	ands	r2, r1
 8000d58:	4293      	cmp	r3, r2
 8000d5a:	d0c8      	beq.n	8000cee <HAL_RCCEx_PeriphCLKConfig+0x46>
      __HAL_RCC_BACKUPRESET_FORCE();
 8000d5c:	2380      	movs	r3, #128	; 0x80
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8000d5e:	6a22      	ldr	r2, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8000d60:	6a20      	ldr	r0, [r4, #32]
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8000d62:	0011      	movs	r1, r2
      __HAL_RCC_BACKUPRESET_FORCE();
 8000d64:	025b      	lsls	r3, r3, #9
 8000d66:	4303      	orrs	r3, r0
 8000d68:	6223      	str	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8000d6a:	6a23      	ldr	r3, [r4, #32]
 8000d6c:	480e      	ldr	r0, [pc, #56]	; (8000da8 <HAL_RCCEx_PeriphCLKConfig+0x100>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8000d6e:	4031      	ands	r1, r6
      __HAL_RCC_BACKUPRESET_RELEASE();
 8000d70:	4003      	ands	r3, r0
 8000d72:	6223      	str	r3, [r4, #32]
      RCC->BDCR = temp_reg;
 8000d74:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8000d76:	07d3      	lsls	r3, r2, #31
 8000d78:	d5b9      	bpl.n	8000cee <HAL_RCCEx_PeriphCLKConfig+0x46>
        tickstart = HAL_GetTick();
 8000d7a:	f7ff fa85 	bl	8000288 <HAL_GetTick>
 8000d7e:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000d80:	2202      	movs	r2, #2
 8000d82:	6a23      	ldr	r3, [r4, #32]
 8000d84:	4213      	tst	r3, r2
 8000d86:	d1b2      	bne.n	8000cee <HAL_RCCEx_PeriphCLKConfig+0x46>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000d88:	f7ff fa7e 	bl	8000288 <HAL_GetTick>
 8000d8c:	4b07      	ldr	r3, [pc, #28]	; (8000dac <HAL_RCCEx_PeriphCLKConfig+0x104>)
 8000d8e:	1bc0      	subs	r0, r0, r7
 8000d90:	4298      	cmp	r0, r3
 8000d92:	d9f5      	bls.n	8000d80 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 8000d94:	e7db      	b.n	8000d4e <HAL_RCCEx_PeriphCLKConfig+0xa6>
 8000d96:	46c0      	nop			; (mov r8, r8)
 8000d98:	40021000 	.word	0x40021000
 8000d9c:	40007000 	.word	0x40007000
 8000da0:	fffffcff 	.word	0xfffffcff
 8000da4:	efffffff 	.word	0xefffffff
 8000da8:	fffeffff 	.word	0xfffeffff
 8000dac:	00001388 	.word	0x00001388

08000db0 <SPI_WaitFifoStateUntilTimeout.part.1>:
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8000db0:	21e0      	movs	r1, #224	; 0xe0
 8000db2:	6803      	ldr	r3, [r0, #0]
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8000db4:	b510      	push	{r4, lr}
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8000db6:	685a      	ldr	r2, [r3, #4]
 8000db8:	438a      	bics	r2, r1
 8000dba:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000dbc:	2282      	movs	r2, #130	; 0x82
 8000dbe:	6841      	ldr	r1, [r0, #4]
 8000dc0:	0052      	lsls	r2, r2, #1
 8000dc2:	4291      	cmp	r1, r2
 8000dc4:	d10c      	bne.n	8000de0 <SPI_WaitFifoStateUntilTimeout.part.1+0x30>
 8000dc6:	2180      	movs	r1, #128	; 0x80
 8000dc8:	6882      	ldr	r2, [r0, #8]
 8000dca:	0209      	lsls	r1, r1, #8
 8000dcc:	428a      	cmp	r2, r1
 8000dce:	d003      	beq.n	8000dd8 <SPI_WaitFifoStateUntilTimeout.part.1+0x28>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8000dd0:	2180      	movs	r1, #128	; 0x80
 8000dd2:	00c9      	lsls	r1, r1, #3
 8000dd4:	428a      	cmp	r2, r1
 8000dd6:	d103      	bne.n	8000de0 <SPI_WaitFifoStateUntilTimeout.part.1+0x30>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8000dd8:	2140      	movs	r1, #64	; 0x40
 8000dda:	681a      	ldr	r2, [r3, #0]
 8000ddc:	438a      	bics	r2, r1
 8000dde:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8000de0:	2180      	movs	r1, #128	; 0x80
 8000de2:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8000de4:	0189      	lsls	r1, r1, #6
 8000de6:	428a      	cmp	r2, r1
 8000de8:	d106      	bne.n	8000df8 <SPI_WaitFifoStateUntilTimeout.part.1+0x48>
        {
          SPI_RESET_CRC(hspi);
 8000dea:	6819      	ldr	r1, [r3, #0]
 8000dec:	4c07      	ldr	r4, [pc, #28]	; (8000e0c <SPI_WaitFifoStateUntilTimeout.part.1+0x5c>)
 8000dee:	4021      	ands	r1, r4
 8000df0:	6019      	str	r1, [r3, #0]
 8000df2:	6819      	ldr	r1, [r3, #0]
 8000df4:	430a      	orrs	r2, r1
 8000df6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8000df8:	0003      	movs	r3, r0
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	335d      	adds	r3, #93	; 0x5d
 8000dfe:	701a      	strb	r2, [r3, #0]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8000e00:	2300      	movs	r3, #0
 8000e02:	305c      	adds	r0, #92	; 0x5c
 8000e04:	7003      	strb	r3, [r0, #0]
      }
    }
  }

  return HAL_OK;
}
 8000e06:	2003      	movs	r0, #3
 8000e08:	bd10      	pop	{r4, pc}
 8000e0a:	46c0      	nop			; (mov r8, r8)
 8000e0c:	ffffdfff 	.word	0xffffdfff

08000e10 <SPI_WaitFlagStateUntilTimeout.constprop.9>:
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State,
 8000e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e12:	0005      	movs	r5, r0
 8000e14:	000c      	movs	r4, r1
 8000e16:	0016      	movs	r6, r2
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8000e18:	2780      	movs	r7, #128	; 0x80
 8000e1a:	682b      	ldr	r3, [r5, #0]
 8000e1c:	6898      	ldr	r0, [r3, #8]
 8000e1e:	4038      	ands	r0, r7
 8000e20:	d006      	beq.n	8000e30 <SPI_WaitFlagStateUntilTimeout.constprop.9+0x20>
    if (Timeout != HAL_MAX_DELAY)
 8000e22:	1c62      	adds	r2, r4, #1
 8000e24:	d0fa      	beq.n	8000e1c <SPI_WaitFlagStateUntilTimeout.constprop.9+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 8000e26:	2c00      	cmp	r4, #0
 8000e28:	d103      	bne.n	8000e32 <SPI_WaitFlagStateUntilTimeout.constprop.9+0x22>
 8000e2a:	0028      	movs	r0, r5
 8000e2c:	f7ff ffc0 	bl	8000db0 <SPI_WaitFifoStateUntilTimeout.part.1>
}
 8000e30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 8000e32:	f7ff fa29 	bl	8000288 <HAL_GetTick>
 8000e36:	1b80      	subs	r0, r0, r6
 8000e38:	4284      	cmp	r4, r0
 8000e3a:	d8ee      	bhi.n	8000e1a <SPI_WaitFlagStateUntilTimeout.constprop.9+0xa>
 8000e3c:	e7f5      	b.n	8000e2a <SPI_WaitFlagStateUntilTimeout.constprop.9+0x1a>

08000e3e <SPI_WaitFifoStateUntilTimeout.constprop.10>:
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8000e3e:	b5f0      	push	{r4, r5, r6, r7, lr}
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8000e40:	27c0      	movs	r7, #192	; 0xc0
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8000e42:	0006      	movs	r6, r0
 8000e44:	000d      	movs	r5, r1
 8000e46:	0014      	movs	r4, r2
 8000e48:	b085      	sub	sp, #20
 8000e4a:	9301      	str	r3, [sp, #4]
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8000e4c:	00ff      	lsls	r7, r7, #3
      tmpreg = *((__IO uint8_t *)&hspi->Instance->DR);
 8000e4e:	ab02      	add	r3, sp, #8
  while ((hspi->Instance->SR & Fifo) != State)
 8000e50:	6831      	ldr	r1, [r6, #0]
      tmpreg = *((__IO uint8_t *)&hspi->Instance->DR);
 8000e52:	1dda      	adds	r2, r3, #7
  while ((hspi->Instance->SR & Fifo) != State)
 8000e54:	6888      	ldr	r0, [r1, #8]
 8000e56:	4028      	ands	r0, r5
 8000e58:	d00c      	beq.n	8000e74 <SPI_WaitFifoStateUntilTimeout.constprop.10+0x36>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8000e5a:	42bd      	cmp	r5, r7
 8000e5c:	d103      	bne.n	8000e66 <SPI_WaitFifoStateUntilTimeout.constprop.10+0x28>
      tmpreg = *((__IO uint8_t *)&hspi->Instance->DR);
 8000e5e:	7b0b      	ldrb	r3, [r1, #12]
 8000e60:	b2db      	uxtb	r3, r3
 8000e62:	7013      	strb	r3, [r2, #0]
      UNUSED(tmpreg);
 8000e64:	7813      	ldrb	r3, [r2, #0]
    if (Timeout != HAL_MAX_DELAY)
 8000e66:	1c63      	adds	r3, r4, #1
 8000e68:	d0f4      	beq.n	8000e54 <SPI_WaitFifoStateUntilTimeout.constprop.10+0x16>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 8000e6a:	2c00      	cmp	r4, #0
 8000e6c:	d104      	bne.n	8000e78 <SPI_WaitFifoStateUntilTimeout.constprop.10+0x3a>
 8000e6e:	0030      	movs	r0, r6
 8000e70:	f7ff ff9e 	bl	8000db0 <SPI_WaitFifoStateUntilTimeout.part.1>
}
 8000e74:	b005      	add	sp, #20
 8000e76:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 8000e78:	f7ff fa06 	bl	8000288 <HAL_GetTick>
 8000e7c:	9b01      	ldr	r3, [sp, #4]
 8000e7e:	1ac0      	subs	r0, r0, r3
 8000e80:	4284      	cmp	r4, r0
 8000e82:	d8e4      	bhi.n	8000e4e <SPI_WaitFifoStateUntilTimeout.constprop.10+0x10>
 8000e84:	e7f3      	b.n	8000e6e <SPI_WaitFifoStateUntilTimeout.constprop.10+0x30>

08000e86 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8000e86:	b570      	push	{r4, r5, r6, lr}
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8000e88:	0013      	movs	r3, r2
{
 8000e8a:	000d      	movs	r5, r1
 8000e8c:	0016      	movs	r6, r2
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8000e8e:	000a      	movs	r2, r1
 8000e90:	21c0      	movs	r1, #192	; 0xc0
 8000e92:	0149      	lsls	r1, r1, #5
{
 8000e94:	0004      	movs	r4, r0
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8000e96:	f7ff ffd2 	bl	8000e3e <SPI_WaitFifoStateUntilTimeout.constprop.10>
 8000e9a:	2800      	cmp	r0, #0
 8000e9c:	d005      	beq.n	8000eaa <SPI_EndRxTxTransaction+0x24>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8000e9e:	2320      	movs	r3, #32
 8000ea0:	6e22      	ldr	r2, [r4, #96]	; 0x60
      return HAL_TIMEOUT;
 8000ea2:	2003      	movs	r0, #3
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8000ea4:	4313      	orrs	r3, r2
 8000ea6:	6623      	str	r3, [r4, #96]	; 0x60
 8000ea8:	e00f      	b.n	8000eca <SPI_EndRxTxTransaction+0x44>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8000eaa:	0032      	movs	r2, r6
 8000eac:	0029      	movs	r1, r5
 8000eae:	0020      	movs	r0, r4
 8000eb0:	f7ff ffae 	bl	8000e10 <SPI_WaitFlagStateUntilTimeout.constprop.9>
 8000eb4:	2800      	cmp	r0, #0
 8000eb6:	d1f2      	bne.n	8000e9e <SPI_EndRxTxTransaction+0x18>
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8000eb8:	21c0      	movs	r1, #192	; 0xc0
 8000eba:	0033      	movs	r3, r6
 8000ebc:	002a      	movs	r2, r5
 8000ebe:	00c9      	lsls	r1, r1, #3
 8000ec0:	0020      	movs	r0, r4
 8000ec2:	f7ff ffbc 	bl	8000e3e <SPI_WaitFifoStateUntilTimeout.constprop.10>
 8000ec6:	2800      	cmp	r0, #0
 8000ec8:	d1e9      	bne.n	8000e9e <SPI_EndRxTxTransaction+0x18>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }
  return HAL_OK;
}
 8000eca:	bd70      	pop	{r4, r5, r6, pc}

08000ecc <HAL_SPI_Init>:
{
 8000ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ece:	0004      	movs	r4, r0
    return HAL_ERROR;
 8000ed0:	2001      	movs	r0, #1
  if (hspi == NULL)
 8000ed2:	2c00      	cmp	r4, #0
 8000ed4:	d04b      	beq.n	8000f6e <HAL_SPI_Init+0xa2>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ed6:	2300      	movs	r3, #0
  if (hspi->State == HAL_SPI_STATE_RESET)
 8000ed8:	0025      	movs	r5, r4
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000eda:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8000edc:	355d      	adds	r5, #93	; 0x5d
 8000ede:	782b      	ldrb	r3, [r5, #0]
 8000ee0:	b2db      	uxtb	r3, r3
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d105      	bne.n	8000ef2 <HAL_SPI_Init+0x26>
    hspi->Lock = HAL_UNLOCKED;
 8000ee6:	0022      	movs	r2, r4
 8000ee8:	325c      	adds	r2, #92	; 0x5c
 8000eea:	7013      	strb	r3, [r2, #0]
    HAL_SPI_MspInit(hspi);
 8000eec:	0020      	movs	r0, r4
 8000eee:	f000 ff77 	bl	8001de0 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 8000ef2:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 8000ef4:	2240      	movs	r2, #64	; 0x40
 8000ef6:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8000ef8:	702b      	strb	r3, [r5, #0]
  __HAL_SPI_DISABLE(hspi);
 8000efa:	680b      	ldr	r3, [r1, #0]
 8000efc:	2000      	movs	r0, #0
 8000efe:	4393      	bics	r3, r2
 8000f00:	600b      	str	r3, [r1, #0]
 8000f02:	23e0      	movs	r3, #224	; 0xe0
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8000f04:	68e2      	ldr	r2, [r4, #12]
 8000f06:	00db      	lsls	r3, r3, #3
 8000f08:	429a      	cmp	r2, r3
 8000f0a:	d931      	bls.n	8000f70 <HAL_SPI_Init+0xa4>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8000f0c:	26f0      	movs	r6, #240	; 0xf0
 8000f0e:	0136      	lsls	r6, r6, #4
 8000f10:	42b2      	cmp	r2, r6
 8000f12:	d133      	bne.n	8000f7c <HAL_SPI_Init+0xb0>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8000f14:	0006      	movs	r6, r0
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8000f16:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8000f18:	2800      	cmp	r0, #0
 8000f1a:	d103      	bne.n	8000f24 <HAL_SPI_Init+0x58>
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8000f1c:	429a      	cmp	r2, r3
 8000f1e:	d92f      	bls.n	8000f80 <HAL_SPI_Init+0xb4>
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8000f20:	2302      	movs	r3, #2
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8000f22:	6323      	str	r3, [r4, #48]	; 0x30
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8000f24:	68a7      	ldr	r7, [r4, #8]
 8000f26:	6863      	ldr	r3, [r4, #4]
 8000f28:	69a0      	ldr	r0, [r4, #24]
 8000f2a:	433b      	orrs	r3, r7
 8000f2c:	6927      	ldr	r7, [r4, #16]
 8000f2e:	433b      	orrs	r3, r7
 8000f30:	6967      	ldr	r7, [r4, #20]
 8000f32:	433b      	orrs	r3, r7
 8000f34:	69e7      	ldr	r7, [r4, #28]
 8000f36:	433b      	orrs	r3, r7
 8000f38:	6a27      	ldr	r7, [r4, #32]
 8000f3a:	433b      	orrs	r3, r7
 8000f3c:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8000f3e:	433b      	orrs	r3, r7
 8000f40:	2780      	movs	r7, #128	; 0x80
 8000f42:	00bf      	lsls	r7, r7, #2
 8000f44:	4007      	ands	r7, r0
 8000f46:	433b      	orrs	r3, r7
 8000f48:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8000f4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000f4c:	0c00      	lsrs	r0, r0, #16
 8000f4e:	431a      	orrs	r2, r3
 8000f50:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000f52:	431a      	orrs	r2, r3
 8000f54:	2304      	movs	r3, #4
 8000f56:	4018      	ands	r0, r3
 8000f58:	4310      	orrs	r0, r2
 8000f5a:	4306      	orrs	r6, r0
 8000f5c:	604e      	str	r6, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8000f5e:	69cb      	ldr	r3, [r1, #28]
 8000f60:	4a08      	ldr	r2, [pc, #32]	; (8000f84 <HAL_SPI_Init+0xb8>)
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8000f62:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8000f64:	4013      	ands	r3, r2
 8000f66:	61cb      	str	r3, [r1, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 8000f68:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8000f6a:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8000f6c:	702b      	strb	r3, [r5, #0]
}
 8000f6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8000f70:	2680      	movs	r6, #128	; 0x80
 8000f72:	0176      	lsls	r6, r6, #5
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8000f74:	429a      	cmp	r2, r3
 8000f76:	d0ce      	beq.n	8000f16 <HAL_SPI_Init+0x4a>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f78:	62a0      	str	r0, [r4, #40]	; 0x28
 8000f7a:	e7cc      	b.n	8000f16 <HAL_SPI_Init+0x4a>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8000f7c:	0006      	movs	r6, r0
 8000f7e:	e7fb      	b.n	8000f78 <HAL_SPI_Init+0xac>
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8000f80:	2301      	movs	r3, #1
 8000f82:	e7ce      	b.n	8000f22 <HAL_SPI_Init+0x56>
 8000f84:	fffff7ff 	.word	0xfffff7ff

08000f88 <HAL_SPI_TransmitReceive>:
{
 8000f88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000f8a:	001f      	movs	r7, r3
  __HAL_LOCK(hspi);
 8000f8c:	0003      	movs	r3, r0
{
 8000f8e:	9200      	str	r2, [sp, #0]
  __HAL_LOCK(hspi);
 8000f90:	335c      	adds	r3, #92	; 0x5c
 8000f92:	781a      	ldrb	r2, [r3, #0]
{
 8000f94:	0004      	movs	r4, r0
 8000f96:	000d      	movs	r5, r1
  __HAL_LOCK(hspi);
 8000f98:	2602      	movs	r6, #2
 8000f9a:	2a01      	cmp	r2, #1
 8000f9c:	d100      	bne.n	8000fa0 <HAL_SPI_TransmitReceive+0x18>
 8000f9e:	e0ae      	b.n	80010fe <HAL_SPI_TransmitReceive+0x176>
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	701a      	strb	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8000fa4:	f7ff f970 	bl	8000288 <HAL_GetTick>
  tmp  = hspi->State;
 8000fa8:	0023      	movs	r3, r4
  tickstart = HAL_GetTick();
 8000faa:	9001      	str	r0, [sp, #4]
  tmp  = hspi->State;
 8000fac:	335d      	adds	r3, #93	; 0x5d
 8000fae:	781b      	ldrb	r3, [r3, #0]
  tmp1 = hspi->Init.Mode;
 8000fb0:	6861      	ldr	r1, [r4, #4]
  tmp  = hspi->State;
 8000fb2:	b2db      	uxtb	r3, r3
  if (!((tmp == HAL_SPI_STATE_READY) || \
 8000fb4:	2b01      	cmp	r3, #1
 8000fb6:	d00b      	beq.n	8000fd0 <HAL_SPI_TransmitReceive+0x48>
 8000fb8:	2282      	movs	r2, #130	; 0x82
 8000fba:	0052      	lsls	r2, r2, #1
 8000fbc:	4291      	cmp	r1, r2
 8000fbe:	d000      	beq.n	8000fc2 <HAL_SPI_TransmitReceive+0x3a>
 8000fc0:	e096      	b.n	80010f0 <HAL_SPI_TransmitReceive+0x168>
        ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 8000fc2:	68a2      	ldr	r2, [r4, #8]
 8000fc4:	2a00      	cmp	r2, #0
 8000fc6:	d000      	beq.n	8000fca <HAL_SPI_TransmitReceive+0x42>
 8000fc8:	e092      	b.n	80010f0 <HAL_SPI_TransmitReceive+0x168>
 8000fca:	2b04      	cmp	r3, #4
 8000fcc:	d000      	beq.n	8000fd0 <HAL_SPI_TransmitReceive+0x48>
 8000fce:	e08f      	b.n	80010f0 <HAL_SPI_TransmitReceive+0x168>
    errorcode = HAL_ERROR;
 8000fd0:	2601      	movs	r6, #1
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8000fd2:	2d00      	cmp	r5, #0
 8000fd4:	d100      	bne.n	8000fd8 <HAL_SPI_TransmitReceive+0x50>
 8000fd6:	e08b      	b.n	80010f0 <HAL_SPI_TransmitReceive+0x168>
 8000fd8:	9b00      	ldr	r3, [sp, #0]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d100      	bne.n	8000fe0 <HAL_SPI_TransmitReceive+0x58>
 8000fde:	e087      	b.n	80010f0 <HAL_SPI_TransmitReceive+0x168>
 8000fe0:	2f00      	cmp	r7, #0
 8000fe2:	d100      	bne.n	8000fe6 <HAL_SPI_TransmitReceive+0x5e>
 8000fe4:	e084      	b.n	80010f0 <HAL_SPI_TransmitReceive+0x168>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8000fe6:	0023      	movs	r3, r4
 8000fe8:	335d      	adds	r3, #93	; 0x5d
 8000fea:	781a      	ldrb	r2, [r3, #0]
 8000fec:	2a04      	cmp	r2, #4
 8000fee:	d001      	beq.n	8000ff4 <HAL_SPI_TransmitReceive+0x6c>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8000ff0:	2205      	movs	r2, #5
 8000ff2:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8000ff4:	9a00      	ldr	r2, [sp, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8000ff6:	2300      	movs	r3, #0
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8000ff8:	6422      	str	r2, [r4, #64]	; 0x40
  hspi->RxXferCount = Size;
 8000ffa:	0022      	movs	r2, r4
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (hspi->RxXferCount > 1U))
 8000ffc:	26e0      	movs	r6, #224	; 0xe0
  hspi->RxXferSize  = Size;
 8000ffe:	1da0      	adds	r0, r4, #6
  hspi->RxXferCount = Size;
 8001000:	3208      	adds	r2, #8
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001002:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->RxXferCount = Size;
 8001004:	87d7      	strh	r7, [r2, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8001006:	87c7      	strh	r7, [r0, #62]	; 0x3e
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (hspi->RxXferCount > 1U))
 8001008:	68e0      	ldr	r0, [r4, #12]
  hspi->RxISR       = NULL;
 800100a:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800100c:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800100e:	63a5      	str	r5, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 8001010:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8001012:	87a7      	strh	r7, [r4, #60]	; 0x3c
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (hspi->RxXferCount > 1U))
 8001014:	00f6      	lsls	r6, r6, #3
 8001016:	6823      	ldr	r3, [r4, #0]
 8001018:	42b0      	cmp	r0, r6
 800101a:	d802      	bhi.n	8001022 <HAL_SPI_TransmitReceive+0x9a>
 800101c:	8fd2      	ldrh	r2, [r2, #62]	; 0x3e
 800101e:	2a01      	cmp	r2, #1
 8001020:	d931      	bls.n	8001086 <HAL_SPI_TransmitReceive+0xfe>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001022:	685a      	ldr	r2, [r3, #4]
 8001024:	4e71      	ldr	r6, [pc, #452]	; (80011ec <HAL_SPI_TransmitReceive+0x264>)
 8001026:	4032      	ands	r2, r6
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001028:	605a      	str	r2, [r3, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800102a:	2240      	movs	r2, #64	; 0x40
 800102c:	6823      	ldr	r3, [r4, #0]
 800102e:	681e      	ldr	r6, [r3, #0]
 8001030:	4216      	tst	r6, r2
 8001032:	d102      	bne.n	800103a <HAL_SPI_TransmitReceive+0xb2>
    __HAL_SPI_ENABLE(hspi);
 8001034:	681e      	ldr	r6, [r3, #0]
 8001036:	4332      	orrs	r2, r6
 8001038:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800103a:	22e0      	movs	r2, #224	; 0xe0
 800103c:	0026      	movs	r6, r4
 800103e:	00d2      	lsls	r2, r2, #3
 8001040:	3608      	adds	r6, #8
 8001042:	4290      	cmp	r0, r2
 8001044:	d95d      	bls.n	8001102 <HAL_SPI_TransmitReceive+0x17a>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8001046:	2900      	cmp	r1, #0
 8001048:	d002      	beq.n	8001050 <HAL_SPI_TransmitReceive+0xc8>
 800104a:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800104c:	2a01      	cmp	r2, #1
 800104e:	d106      	bne.n	800105e <HAL_SPI_TransmitReceive+0xd6>
      hspi->Instance->DR = *((uint16_t *)pTxData);
 8001050:	882a      	ldrh	r2, [r5, #0]
      pTxData += sizeof(uint16_t);
 8001052:	3502      	adds	r5, #2
      hspi->Instance->DR = *((uint16_t *)pTxData);
 8001054:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8001056:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001058:	3b01      	subs	r3, #1
 800105a:	b29b      	uxth	r3, r3
 800105c:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 800105e:	2701      	movs	r7, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001060:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001062:	2b00      	cmp	r3, #0
 8001064:	d114      	bne.n	8001090 <HAL_SPI_TransmitReceive+0x108>
 8001066:	8ff3      	ldrh	r3, [r6, #62]	; 0x3e
 8001068:	2b00      	cmp	r3, #0
 800106a:	d111      	bne.n	8001090 <HAL_SPI_TransmitReceive+0x108>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800106c:	9a01      	ldr	r2, [sp, #4]
 800106e:	9908      	ldr	r1, [sp, #32]
 8001070:	0020      	movs	r0, r4
 8001072:	f7ff ff08 	bl	8000e86 <SPI_EndRxTxTransaction>
 8001076:	2800      	cmp	r0, #0
 8001078:	d000      	beq.n	800107c <HAL_SPI_TransmitReceive+0xf4>
 800107a:	e0b3      	b.n	80011e4 <HAL_SPI_TransmitReceive+0x25c>
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800107c:	6e26      	ldr	r6, [r4, #96]	; 0x60
 800107e:	1e73      	subs	r3, r6, #1
 8001080:	419e      	sbcs	r6, r3
    errorcode = HAL_BUSY;
 8001082:	b2f6      	uxtb	r6, r6
 8001084:	e034      	b.n	80010f0 <HAL_SPI_TransmitReceive+0x168>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001086:	2280      	movs	r2, #128	; 0x80
 8001088:	685e      	ldr	r6, [r3, #4]
 800108a:	0152      	lsls	r2, r2, #5
 800108c:	4332      	orrs	r2, r6
 800108e:	e7cb      	b.n	8001028 <HAL_SPI_TransmitReceive+0xa0>
      if (txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8001090:	2f00      	cmp	r7, #0
 8001092:	d00f      	beq.n	80010b4 <HAL_SPI_TransmitReceive+0x12c>
 8001094:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001096:	2b00      	cmp	r3, #0
 8001098:	d00c      	beq.n	80010b4 <HAL_SPI_TransmitReceive+0x12c>
 800109a:	2102      	movs	r1, #2
 800109c:	6823      	ldr	r3, [r4, #0]
 800109e:	689a      	ldr	r2, [r3, #8]
 80010a0:	420a      	tst	r2, r1
 80010a2:	d007      	beq.n	80010b4 <HAL_SPI_TransmitReceive+0x12c>
        txallowed = 0U;
 80010a4:	2700      	movs	r7, #0
        hspi->Instance->DR = *((uint16_t *)pTxData);
 80010a6:	882a      	ldrh	r2, [r5, #0]
        pTxData += sizeof(uint16_t);
 80010a8:	186d      	adds	r5, r5, r1
        hspi->Instance->DR = *((uint16_t *)pTxData);
 80010aa:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount--;
 80010ac:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80010ae:	3b01      	subs	r3, #1
 80010b0:	b29b      	uxth	r3, r3
 80010b2:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 80010b4:	8ff3      	ldrh	r3, [r6, #62]	; 0x3e
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d00f      	beq.n	80010da <HAL_SPI_TransmitReceive+0x152>
 80010ba:	2101      	movs	r1, #1
 80010bc:	6823      	ldr	r3, [r4, #0]
 80010be:	689a      	ldr	r2, [r3, #8]
 80010c0:	420a      	tst	r2, r1
 80010c2:	d00a      	beq.n	80010da <HAL_SPI_TransmitReceive+0x152>
        *((uint16_t *)pRxData) = hspi->Instance->DR;
 80010c4:	68db      	ldr	r3, [r3, #12]
 80010c6:	9a00      	ldr	r2, [sp, #0]
        txallowed = 1U;
 80010c8:	000f      	movs	r7, r1
        *((uint16_t *)pRxData) = hspi->Instance->DR;
 80010ca:	8013      	strh	r3, [r2, #0]
        pRxData += sizeof(uint16_t);
 80010cc:	0013      	movs	r3, r2
 80010ce:	3302      	adds	r3, #2
 80010d0:	9300      	str	r3, [sp, #0]
        hspi->RxXferCount--;
 80010d2:	8ff3      	ldrh	r3, [r6, #62]	; 0x3e
 80010d4:	3b01      	subs	r3, #1
 80010d6:	b29b      	uxth	r3, r3
 80010d8:	87f3      	strh	r3, [r6, #62]	; 0x3e
      if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
 80010da:	9b08      	ldr	r3, [sp, #32]
 80010dc:	3301      	adds	r3, #1
 80010de:	d0bf      	beq.n	8001060 <HAL_SPI_TransmitReceive+0xd8>
 80010e0:	f7ff f8d2 	bl	8000288 <HAL_GetTick>
 80010e4:	9b01      	ldr	r3, [sp, #4]
 80010e6:	1ac0      	subs	r0, r0, r3
 80010e8:	9b08      	ldr	r3, [sp, #32]
 80010ea:	4283      	cmp	r3, r0
 80010ec:	d8b8      	bhi.n	8001060 <HAL_SPI_TransmitReceive+0xd8>
        errorcode = HAL_TIMEOUT;
 80010ee:	2603      	movs	r6, #3
  hspi->State = HAL_SPI_STATE_READY;
 80010f0:	0023      	movs	r3, r4
 80010f2:	2201      	movs	r2, #1
 80010f4:	335d      	adds	r3, #93	; 0x5d
 80010f6:	701a      	strb	r2, [r3, #0]
  __HAL_UNLOCK(hspi);
 80010f8:	2300      	movs	r3, #0
 80010fa:	345c      	adds	r4, #92	; 0x5c
 80010fc:	7023      	strb	r3, [r4, #0]
}
 80010fe:	0030      	movs	r0, r6
 8001100:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8001102:	2900      	cmp	r1, #0
 8001104:	d002      	beq.n	800110c <HAL_SPI_TransmitReceive+0x184>
 8001106:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8001108:	2a01      	cmp	r2, #1
 800110a:	d109      	bne.n	8001120 <HAL_SPI_TransmitReceive+0x198>
      if (hspi->TxXferCount > 1U)
 800110c:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800110e:	2a01      	cmp	r2, #1
 8001110:	d94c      	bls.n	80011ac <HAL_SPI_TransmitReceive+0x224>
        hspi->Instance->DR = *((uint16_t *)pTxData);
 8001112:	882a      	ldrh	r2, [r5, #0]
        pTxData += sizeof(uint16_t);
 8001114:	3502      	adds	r5, #2
        hspi->Instance->DR = *((uint16_t *)pTxData);
 8001116:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount -= 2U;
 8001118:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800111a:	3b02      	subs	r3, #2
 800111c:	b29b      	uxth	r3, r3
 800111e:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8001120:	2701      	movs	r7, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001122:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001124:	2b00      	cmp	r3, #0
 8001126:	d103      	bne.n	8001130 <HAL_SPI_TransmitReceive+0x1a8>
 8001128:	8ff3      	ldrh	r3, [r6, #62]	; 0x3e
 800112a:	2b00      	cmp	r3, #0
 800112c:	d100      	bne.n	8001130 <HAL_SPI_TransmitReceive+0x1a8>
 800112e:	e79d      	b.n	800106c <HAL_SPI_TransmitReceive+0xe4>
      if (txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8001130:	2f00      	cmp	r7, #0
 8001132:	d012      	beq.n	800115a <HAL_SPI_TransmitReceive+0x1d2>
 8001134:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001136:	2b00      	cmp	r3, #0
 8001138:	d00f      	beq.n	800115a <HAL_SPI_TransmitReceive+0x1d2>
 800113a:	2102      	movs	r1, #2
 800113c:	6823      	ldr	r3, [r4, #0]
 800113e:	689a      	ldr	r2, [r3, #8]
 8001140:	420a      	tst	r2, r1
 8001142:	d00a      	beq.n	800115a <HAL_SPI_TransmitReceive+0x1d2>
        if (hspi->TxXferCount > 1U)
 8001144:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8001146:	2a01      	cmp	r2, #1
 8001148:	d938      	bls.n	80011bc <HAL_SPI_TransmitReceive+0x234>
          hspi->Instance->DR = *((uint16_t *)pTxData);
 800114a:	882a      	ldrh	r2, [r5, #0]
          pTxData += sizeof(uint16_t);
 800114c:	186d      	adds	r5, r5, r1
          hspi->Instance->DR = *((uint16_t *)pTxData);
 800114e:	60da      	str	r2, [r3, #12]
          hspi->TxXferCount -= 2U;
 8001150:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001152:	3b02      	subs	r3, #2
 8001154:	b29b      	uxth	r3, r3
 8001156:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 8001158:	2700      	movs	r7, #0
      if ((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 800115a:	8ff3      	ldrh	r3, [r6, #62]	; 0x3e
 800115c:	2b00      	cmp	r3, #0
 800115e:	d01a      	beq.n	8001196 <HAL_SPI_TransmitReceive+0x20e>
 8001160:	2101      	movs	r1, #1
 8001162:	6823      	ldr	r3, [r4, #0]
 8001164:	689a      	ldr	r2, [r3, #8]
 8001166:	420a      	tst	r2, r1
 8001168:	d015      	beq.n	8001196 <HAL_SPI_TransmitReceive+0x20e>
        if (hspi->RxXferCount > 1U)
 800116a:	8ff2      	ldrh	r2, [r6, #62]	; 0x3e
 800116c:	428a      	cmp	r2, r1
 800116e:	d92d      	bls.n	80011cc <HAL_SPI_TransmitReceive+0x244>
          *((uint16_t *)pRxData) = hspi->Instance->DR;
 8001170:	68da      	ldr	r2, [r3, #12]
 8001172:	9900      	ldr	r1, [sp, #0]
        txallowed = 1U;
 8001174:	2701      	movs	r7, #1
          *((uint16_t *)pRxData) = hspi->Instance->DR;
 8001176:	800a      	strh	r2, [r1, #0]
          pRxData += sizeof(uint16_t);
 8001178:	000a      	movs	r2, r1
 800117a:	3202      	adds	r2, #2
 800117c:	9200      	str	r2, [sp, #0]
          hspi->RxXferCount -= 2U;
 800117e:	8ff2      	ldrh	r2, [r6, #62]	; 0x3e
 8001180:	3a02      	subs	r2, #2
 8001182:	b292      	uxth	r2, r2
 8001184:	87f2      	strh	r2, [r6, #62]	; 0x3e
          if (hspi->RxXferCount <= 1U)
 8001186:	8ff2      	ldrh	r2, [r6, #62]	; 0x3e
 8001188:	42ba      	cmp	r2, r7
 800118a:	d804      	bhi.n	8001196 <HAL_SPI_TransmitReceive+0x20e>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800118c:	2280      	movs	r2, #128	; 0x80
 800118e:	6859      	ldr	r1, [r3, #4]
 8001190:	0152      	lsls	r2, r2, #5
 8001192:	430a      	orrs	r2, r1
 8001194:	605a      	str	r2, [r3, #4]
      if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
 8001196:	9b08      	ldr	r3, [sp, #32]
 8001198:	3301      	adds	r3, #1
 800119a:	d0c2      	beq.n	8001122 <HAL_SPI_TransmitReceive+0x19a>
 800119c:	f7ff f874 	bl	8000288 <HAL_GetTick>
 80011a0:	9b01      	ldr	r3, [sp, #4]
 80011a2:	1ac0      	subs	r0, r0, r3
 80011a4:	9b08      	ldr	r3, [sp, #32]
 80011a6:	4283      	cmp	r3, r0
 80011a8:	d8bb      	bhi.n	8001122 <HAL_SPI_TransmitReceive+0x19a>
 80011aa:	e7a0      	b.n	80010ee <HAL_SPI_TransmitReceive+0x166>
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 80011ac:	782a      	ldrb	r2, [r5, #0]
 80011ae:	3501      	adds	r5, #1
 80011b0:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 80011b2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80011b4:	3b01      	subs	r3, #1
 80011b6:	b29b      	uxth	r3, r3
 80011b8:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80011ba:	e7b1      	b.n	8001120 <HAL_SPI_TransmitReceive+0x198>
          *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 80011bc:	782a      	ldrb	r2, [r5, #0]
 80011be:	3501      	adds	r5, #1
 80011c0:	731a      	strb	r2, [r3, #12]
          hspi->TxXferCount--;
 80011c2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80011c4:	3b01      	subs	r3, #1
 80011c6:	b29b      	uxth	r3, r3
 80011c8:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80011ca:	e7c5      	b.n	8001158 <HAL_SPI_TransmitReceive+0x1d0>
          (*(uint8_t *)pRxData++) = *(__IO uint8_t *)&hspi->Instance->DR;
 80011cc:	7b1b      	ldrb	r3, [r3, #12]
 80011ce:	9a00      	ldr	r2, [sp, #0]
        txallowed = 1U;
 80011d0:	2701      	movs	r7, #1
          (*(uint8_t *)pRxData++) = *(__IO uint8_t *)&hspi->Instance->DR;
 80011d2:	7013      	strb	r3, [r2, #0]
          hspi->RxXferCount--;
 80011d4:	8ff3      	ldrh	r3, [r6, #62]	; 0x3e
 80011d6:	3b01      	subs	r3, #1
 80011d8:	b29b      	uxth	r3, r3
 80011da:	87f3      	strh	r3, [r6, #62]	; 0x3e
          (*(uint8_t *)pRxData++) = *(__IO uint8_t *)&hspi->Instance->DR;
 80011dc:	0013      	movs	r3, r2
 80011de:	3301      	adds	r3, #1
 80011e0:	9300      	str	r3, [sp, #0]
 80011e2:	e7d8      	b.n	8001196 <HAL_SPI_TransmitReceive+0x20e>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80011e4:	2320      	movs	r3, #32
 80011e6:	6623      	str	r3, [r4, #96]	; 0x60
 80011e8:	e748      	b.n	800107c <HAL_SPI_TransmitReceive+0xf4>
 80011ea:	46c0      	nop			; (mov r8, r8)
 80011ec:	ffffefff 	.word	0xffffefff

080011f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80011f0:	b570      	push	{r4, r5, r6, lr}
 80011f2:	0004      	movs	r4, r0
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80011f4:	6805      	ldr	r5, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80011f6:	69c2      	ldr	r2, [r0, #28]
 80011f8:	6883      	ldr	r3, [r0, #8]
 80011fa:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80011fc:	6829      	ldr	r1, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80011fe:	4303      	orrs	r3, r0
 8001200:	6960      	ldr	r0, [r4, #20]
 8001202:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001204:	4835      	ldr	r0, [pc, #212]	; (80012dc <UART_SetConfig+0xec>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001206:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001208:	4001      	ands	r1, r0
 800120a:	430b      	orrs	r3, r1
 800120c:	602b      	str	r3, [r5, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800120e:	686b      	ldr	r3, [r5, #4]
 8001210:	4933      	ldr	r1, [pc, #204]	; (80012e0 <UART_SetConfig+0xf0>)
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8001212:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001214:	400b      	ands	r3, r1
 8001216:	68e1      	ldr	r1, [r4, #12]
 8001218:	430b      	orrs	r3, r1
 800121a:	606b      	str	r3, [r5, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 800121c:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 800121e:	68a9      	ldr	r1, [r5, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8001220:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8001222:	4830      	ldr	r0, [pc, #192]	; (80012e4 <UART_SetConfig+0xf4>)
 8001224:	4001      	ands	r1, r0
 8001226:	430b      	orrs	r3, r1

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001228:	2103      	movs	r1, #3
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 800122a:	60ab      	str	r3, [r5, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 800122c:	4b2e      	ldr	r3, [pc, #184]	; (80012e8 <UART_SetConfig+0xf8>)
 800122e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001230:	400b      	ands	r3, r1
 8001232:	492e      	ldr	r1, [pc, #184]	; (80012ec <UART_SetConfig+0xfc>)
 8001234:	5cc8      	ldrb	r0, [r1, r3]
  
  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001236:	2380      	movs	r3, #128	; 0x80
 8001238:	021b      	lsls	r3, r3, #8
 800123a:	429a      	cmp	r2, r3
 800123c:	d12c      	bne.n	8001298 <UART_SetConfig+0xa8>
  {
    switch (clocksource)
 800123e:	2808      	cmp	r0, #8
 8001240:	d827      	bhi.n	8001292 <UART_SetConfig+0xa2>
 8001242:	f7fe ff61 	bl	8000108 <__gnu_thumb1_case_uqi>
 8001246:	2605      	.short	0x2605
 8001248:	261e260b 	.word	0x261e260b
 800124c:	2626      	.short	0x2626
 800124e:	21          	.byte	0x21
 800124f:	00          	.byte	0x00
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001250:	f7ff fd1a 	bl	8000c88 <HAL_RCC_GetPCLK1Freq>
        break;
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
        break;
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001254:	6863      	ldr	r3, [r4, #4]
 8001256:	0040      	lsls	r0, r0, #1
 8001258:	085b      	lsrs	r3, r3, #1
 800125a:	e002      	b.n	8001262 <UART_SetConfig+0x72>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800125c:	6863      	ldr	r3, [r4, #4]
 800125e:	0858      	lsrs	r0, r3, #1
 8001260:	4b23      	ldr	r3, [pc, #140]	; (80012f0 <UART_SetConfig+0x100>)
        break;
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001262:	18c0      	adds	r0, r0, r3
 8001264:	6861      	ldr	r1, [r4, #4]
 8001266:	f7fe ff59 	bl	800011c <__udivsi3>
 800126a:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 800126c:	2000      	movs	r0, #0
      default:
        ret = HAL_ERROR;
        break;
    }

    brrtemp = usartdiv & 0xFFF0U;
 800126e:	220f      	movs	r2, #15
 8001270:	0019      	movs	r1, r3
 8001272:	4391      	bics	r1, r2
 8001274:	000a      	movs	r2, r1
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001276:	071b      	lsls	r3, r3, #28
    huart->Instance->BRR = brrtemp;
 8001278:	6821      	ldr	r1, [r4, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800127a:	0f5b      	lsrs	r3, r3, #29
    huart->Instance->BRR = brrtemp;
 800127c:	4313      	orrs	r3, r2
 800127e:	60cb      	str	r3, [r1, #12]
    }
  }

  return ret;

}
 8001280:	bd70      	pop	{r4, r5, r6, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001282:	f7ff fc2d 	bl	8000ae0 <HAL_RCC_GetSysClockFreq>
 8001286:	e7e5      	b.n	8001254 <UART_SetConfig+0x64>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001288:	6863      	ldr	r3, [r4, #4]
 800128a:	0858      	lsrs	r0, r3, #1
 800128c:	2380      	movs	r3, #128	; 0x80
 800128e:	025b      	lsls	r3, r3, #9
 8001290:	e7e7      	b.n	8001262 <UART_SetConfig+0x72>
        ret = HAL_ERROR;
 8001292:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 8001294:	2300      	movs	r3, #0
 8001296:	e7ea      	b.n	800126e <UART_SetConfig+0x7e>
    switch (clocksource)
 8001298:	2808      	cmp	r0, #8
 800129a:	d81d      	bhi.n	80012d8 <UART_SetConfig+0xe8>
 800129c:	f7fe ff34 	bl	8000108 <__gnu_thumb1_case_uqi>
 80012a0:	1c0a1c05 	.word	0x1c0a1c05
 80012a4:	1c1c1c14 	.word	0x1c1c1c14
 80012a8:	17          	.byte	0x17
 80012a9:	00          	.byte	0x00
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80012aa:	f7ff fced 	bl	8000c88 <HAL_RCC_GetPCLK1Freq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80012ae:	6861      	ldr	r1, [r4, #4]
 80012b0:	084b      	lsrs	r3, r1, #1
 80012b2:	e002      	b.n	80012ba <UART_SetConfig+0xca>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80012b4:	6861      	ldr	r1, [r4, #4]
 80012b6:	4b0f      	ldr	r3, [pc, #60]	; (80012f4 <UART_SetConfig+0x104>)
 80012b8:	0848      	lsrs	r0, r1, #1
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80012ba:	18c0      	adds	r0, r0, r3
 80012bc:	f7fe ff2e 	bl	800011c <__udivsi3>
 80012c0:	b280      	uxth	r0, r0
 80012c2:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 80012c4:	2000      	movs	r0, #0
        break;
 80012c6:	e7db      	b.n	8001280 <UART_SetConfig+0x90>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80012c8:	f7ff fc0a 	bl	8000ae0 <HAL_RCC_GetSysClockFreq>
 80012cc:	e7ef      	b.n	80012ae <UART_SetConfig+0xbe>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80012ce:	2380      	movs	r3, #128	; 0x80
 80012d0:	6861      	ldr	r1, [r4, #4]
 80012d2:	021b      	lsls	r3, r3, #8
 80012d4:	0848      	lsrs	r0, r1, #1
 80012d6:	e7f0      	b.n	80012ba <UART_SetConfig+0xca>
        ret = HAL_ERROR;
 80012d8:	2001      	movs	r0, #1
 80012da:	e7d1      	b.n	8001280 <UART_SetConfig+0x90>
 80012dc:	ffff69f3 	.word	0xffff69f3
 80012e0:	ffffcfff 	.word	0xffffcfff
 80012e4:	fffff4ff 	.word	0xfffff4ff
 80012e8:	40021000 	.word	0x40021000
 80012ec:	08001fd0 	.word	0x08001fd0
 80012f0:	00f42400 	.word	0x00f42400
 80012f4:	007a1200 	.word	0x007a1200

080012f8 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80012f8:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 80012fa:	b530      	push	{r4, r5, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80012fc:	07da      	lsls	r2, r3, #31
 80012fe:	d506      	bpl.n	800130e <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001300:	6801      	ldr	r1, [r0, #0]
 8001302:	4c28      	ldr	r4, [pc, #160]	; (80013a4 <UART_AdvFeatureConfig+0xac>)
 8001304:	684a      	ldr	r2, [r1, #4]
 8001306:	4022      	ands	r2, r4
 8001308:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800130a:	4322      	orrs	r2, r4
 800130c:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800130e:	079a      	lsls	r2, r3, #30
 8001310:	d506      	bpl.n	8001320 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001312:	6801      	ldr	r1, [r0, #0]
 8001314:	4c24      	ldr	r4, [pc, #144]	; (80013a8 <UART_AdvFeatureConfig+0xb0>)
 8001316:	684a      	ldr	r2, [r1, #4]
 8001318:	4022      	ands	r2, r4
 800131a:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800131c:	4322      	orrs	r2, r4
 800131e:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001320:	075a      	lsls	r2, r3, #29
 8001322:	d506      	bpl.n	8001332 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001324:	6801      	ldr	r1, [r0, #0]
 8001326:	4c21      	ldr	r4, [pc, #132]	; (80013ac <UART_AdvFeatureConfig+0xb4>)
 8001328:	684a      	ldr	r2, [r1, #4]
 800132a:	4022      	ands	r2, r4
 800132c:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800132e:	4322      	orrs	r2, r4
 8001330:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001332:	071a      	lsls	r2, r3, #28
 8001334:	d506      	bpl.n	8001344 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001336:	6801      	ldr	r1, [r0, #0]
 8001338:	4c1d      	ldr	r4, [pc, #116]	; (80013b0 <UART_AdvFeatureConfig+0xb8>)
 800133a:	684a      	ldr	r2, [r1, #4]
 800133c:	4022      	ands	r2, r4
 800133e:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8001340:	4322      	orrs	r2, r4
 8001342:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001344:	06da      	lsls	r2, r3, #27
 8001346:	d506      	bpl.n	8001356 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001348:	6801      	ldr	r1, [r0, #0]
 800134a:	4c1a      	ldr	r4, [pc, #104]	; (80013b4 <UART_AdvFeatureConfig+0xbc>)
 800134c:	688a      	ldr	r2, [r1, #8]
 800134e:	4022      	ands	r2, r4
 8001350:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8001352:	4322      	orrs	r2, r4
 8001354:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001356:	069a      	lsls	r2, r3, #26
 8001358:	d506      	bpl.n	8001368 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800135a:	6801      	ldr	r1, [r0, #0]
 800135c:	4c16      	ldr	r4, [pc, #88]	; (80013b8 <UART_AdvFeatureConfig+0xc0>)
 800135e:	688a      	ldr	r2, [r1, #8]
 8001360:	4022      	ands	r2, r4
 8001362:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8001364:	4322      	orrs	r2, r4
 8001366:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001368:	065a      	lsls	r2, r3, #25
 800136a:	d510      	bpl.n	800138e <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800136c:	6801      	ldr	r1, [r0, #0]
 800136e:	4d13      	ldr	r5, [pc, #76]	; (80013bc <UART_AdvFeatureConfig+0xc4>)
 8001370:	684a      	ldr	r2, [r1, #4]
 8001372:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8001374:	402a      	ands	r2, r5
 8001376:	4322      	orrs	r2, r4
 8001378:	604a      	str	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800137a:	2280      	movs	r2, #128	; 0x80
 800137c:	0352      	lsls	r2, r2, #13
 800137e:	4294      	cmp	r4, r2
 8001380:	d105      	bne.n	800138e <UART_AdvFeatureConfig+0x96>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001382:	684a      	ldr	r2, [r1, #4]
 8001384:	4c0e      	ldr	r4, [pc, #56]	; (80013c0 <UART_AdvFeatureConfig+0xc8>)
 8001386:	4022      	ands	r2, r4
 8001388:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800138a:	4322      	orrs	r2, r4
 800138c:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800138e:	061b      	lsls	r3, r3, #24
 8001390:	d506      	bpl.n	80013a0 <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001392:	6802      	ldr	r2, [r0, #0]
 8001394:	490b      	ldr	r1, [pc, #44]	; (80013c4 <UART_AdvFeatureConfig+0xcc>)
 8001396:	6853      	ldr	r3, [r2, #4]
 8001398:	400b      	ands	r3, r1
 800139a:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800139c:	430b      	orrs	r3, r1
 800139e:	6053      	str	r3, [r2, #4]
  }
}
 80013a0:	bd30      	pop	{r4, r5, pc}
 80013a2:	46c0      	nop			; (mov r8, r8)
 80013a4:	fffdffff 	.word	0xfffdffff
 80013a8:	fffeffff 	.word	0xfffeffff
 80013ac:	fffbffff 	.word	0xfffbffff
 80013b0:	ffff7fff 	.word	0xffff7fff
 80013b4:	ffffefff 	.word	0xffffefff
 80013b8:	ffffdfff 	.word	0xffffdfff
 80013bc:	ffefffff 	.word	0xffefffff
 80013c0:	ff9fffff 	.word	0xff9fffff
 80013c4:	fff7ffff 	.word	0xfff7ffff

080013c8 <HAL_UART_Init>:
{
 80013c8:	b570      	push	{r4, r5, r6, lr}
 80013ca:	1e04      	subs	r4, r0, #0
  if(huart == NULL)
 80013cc:	d101      	bne.n	80013d2 <HAL_UART_Init+0xa>
    return HAL_ERROR;
 80013ce:	2001      	movs	r0, #1
}
 80013d0:	bd70      	pop	{r4, r5, r6, pc}
  if(huart->gState == HAL_UART_STATE_RESET)
 80013d2:	0005      	movs	r5, r0
 80013d4:	3569      	adds	r5, #105	; 0x69
 80013d6:	782b      	ldrb	r3, [r5, #0]
 80013d8:	b2db      	uxtb	r3, r3
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d104      	bne.n	80013e8 <HAL_UART_Init+0x20>
    huart->Lock = HAL_UNLOCKED;
 80013de:	0002      	movs	r2, r0
 80013e0:	3268      	adds	r2, #104	; 0x68
 80013e2:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 80013e4:	f000 fd20 	bl	8001e28 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 80013e8:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 80013ea:	2101      	movs	r1, #1
 80013ec:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80013ee:	702b      	strb	r3, [r5, #0]
  __HAL_UART_DISABLE(huart);
 80013f0:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80013f2:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 80013f4:	438b      	bics	r3, r1
 80013f6:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80013f8:	f7ff fefa 	bl	80011f0 <UART_SetConfig>
 80013fc:	2801      	cmp	r0, #1
 80013fe:	d0e6      	beq.n	80013ce <HAL_UART_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001400:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001402:	2b00      	cmp	r3, #0
 8001404:	d002      	beq.n	800140c <HAL_UART_Init+0x44>
    UART_AdvFeatureConfig(huart);
 8001406:	0020      	movs	r0, r4
 8001408:	f7ff ff76 	bl	80012f8 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 800140c:	6823      	ldr	r3, [r4, #0]
 800140e:	490b      	ldr	r1, [pc, #44]	; (800143c <HAL_UART_Init+0x74>)
 8001410:	685a      	ldr	r2, [r3, #4]
#if !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC)
  uint32_t tickstart = 0U;
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001412:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8001414:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8001416:	2108      	movs	r1, #8
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8001418:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800141a:	689a      	ldr	r2, [r3, #8]
 800141c:	438a      	bics	r2, r1
 800141e:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8001420:	2201      	movs	r2, #1
 8001422:	6819      	ldr	r1, [r3, #0]
 8001424:	430a      	orrs	r2, r1
 8001426:	601a      	str	r2, [r3, #0]
  }
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
  huart->RxState = HAL_UART_STATE_READY;
 8001428:	0022      	movs	r2, r4
  huart->gState  = HAL_UART_STATE_READY;
 800142a:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800142c:	66e0      	str	r0, [r4, #108]	; 0x6c
  huart->RxState = HAL_UART_STATE_READY;
 800142e:	326a      	adds	r2, #106	; 0x6a

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8001430:	3468      	adds	r4, #104	; 0x68
  huart->gState  = HAL_UART_STATE_READY;
 8001432:	702b      	strb	r3, [r5, #0]
  huart->RxState = HAL_UART_STATE_READY;
 8001434:	7013      	strb	r3, [r2, #0]
  __HAL_UNLOCK(huart);
 8001436:	7020      	strb	r0, [r4, #0]
  return (UART_CheckIdleState(huart));
 8001438:	e7ca      	b.n	80013d0 <HAL_UART_Init+0x8>
 800143a:	46c0      	nop			; (mov r8, r8)
 800143c:	fffff7ff 	.word	0xfffff7ff

08001440 <SystemClock_Config>:
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8001440:	2312      	movs	r3, #18
{
 8001442:	b530      	push	{r4, r5, lr}
 8001444:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8001446:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8001448:	22a0      	movs	r2, #160	; 0xa0
  RCC_OscInitStruct.HSICalibrationValue = 16;
 800144a:	3b02      	subs	r3, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800144c:	2401      	movs	r4, #1
  RCC_OscInitStruct.HSICalibrationValue = 16;
 800144e:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8001450:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001452:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001454:	2300      	movs	r3, #0
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8001456:	0392      	lsls	r2, r2, #14
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001458:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800145a:	940b      	str	r4, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 800145c:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800145e:	9510      	str	r5, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001460:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8001462:	9212      	str	r2, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8001464:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001466:	f7ff f959 	bl	800071c <HAL_RCC_OscConfig>
 800146a:	2800      	cmp	r0, #0
 800146c:	d000      	beq.n	8001470 <SystemClock_Config+0x30>
 800146e:	e7fe      	b.n	800146e <SystemClock_Config+0x2e>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001470:	2307      	movs	r3, #7
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001472:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001474:	9003      	str	r0, [sp, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001476:	0021      	movs	r1, r4
 8001478:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800147a:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800147c:	9501      	str	r5, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800147e:	f7ff fb67 	bl	8000b50 <HAL_RCC_ClockConfig>
 8001482:	2800      	cmp	r0, #0
 8001484:	d000      	beq.n	8001488 <SystemClock_Config+0x48>
 8001486:	e7fe      	b.n	8001486 <SystemClock_Config+0x46>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8001488:	9006      	str	r0, [sp, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800148a:	a804      	add	r0, sp, #16
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800148c:	9404      	str	r4, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800148e:	f7ff fc0b 	bl	8000ca8 <HAL_RCCEx_PeriphCLKConfig>
 8001492:	1e04      	subs	r4, r0, #0
 8001494:	d000      	beq.n	8001498 <SystemClock_Config+0x58>
 8001496:	e7fe      	b.n	8001496 <SystemClock_Config+0x56>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8001498:	f7ff fbf0 	bl	8000c7c <HAL_RCC_GetHCLKFreq>
 800149c:	21fa      	movs	r1, #250	; 0xfa
 800149e:	0089      	lsls	r1, r1, #2
 80014a0:	f7fe fe3c 	bl	800011c <__udivsi3>
 80014a4:	f7ff f852 	bl	800054c <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80014a8:	2004      	movs	r0, #4
 80014aa:	f7ff f869 	bl	8000580 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80014ae:	2001      	movs	r0, #1
 80014b0:	0022      	movs	r2, r4
 80014b2:	0021      	movs	r1, r4
 80014b4:	4240      	negs	r0, r0
 80014b6:	f7ff f819 	bl	80004ec <HAL_NVIC_SetPriority>
}
 80014ba:	b015      	add	sp, #84	; 0x54
 80014bc:	bd30      	pop	{r4, r5, pc}
	...

080014c0 <nRF24L01_config>:

void nRF24L01_config() {

	{
		nrf24l01_config config;
		config.data_rate = NRF_DATA_RATE_1MBPS;
 80014c0:	2300      	movs	r3, #0
void nRF24L01_config() {
 80014c2:	b530      	push	{r4, r5, lr}
 80014c4:	b08f      	sub	sp, #60	; 0x3c
		config.data_rate = NRF_DATA_RATE_1MBPS;
 80014c6:	ac01      	add	r4, sp, #4
 80014c8:	7023      	strb	r3, [r4, #0]
		config.tx_power = NRF_TX_PWR_0dBm;
		config.crc_width = NRF_CRC_WIDTH_1B;
 80014ca:	70a3      	strb	r3, [r4, #2]
		config.addr_width = NRF_ADDR_WIDTH_5;
		config.payload_length = 4;    // maximum is 32 bytes
		config.retransmit_count = 15;   // maximum is 15 times
		config.retransmit_delay = 0x0F; // 4000us, LSB:250us
		config.rf_channel = 0;
 80014cc:	71e3      	strb	r3, [r4, #7]
		config.rx_address = rx_address;
 80014ce:	4b13      	ldr	r3, [pc, #76]	; (800151c <nRF24L01_config+0x5c>)
		config.tx_power = NRF_TX_PWR_0dBm;
 80014d0:	2203      	movs	r2, #3
		config.rx_address = rx_address;
 80014d2:	60a3      	str	r3, [r4, #8]
		config.tx_address = tx_address;
 80014d4:	4b12      	ldr	r3, [pc, #72]	; (8001520 <nRF24L01_config+0x60>)
		config.ce_port = CE_GPIO_Port;
		config.ce_pin = CE_Pin;
		config.csn_port = CSN_GPIO_Port;
		config.csn_pin = CSN_Pin;

		nrf_init(&nrf, &config);
 80014d6:	4d13      	ldr	r5, [pc, #76]	; (8001524 <nRF24L01_config+0x64>)
		config.tx_address = tx_address;
 80014d8:	60e3      	str	r3, [r4, #12]
		config.rx_buffer = (uint8_t*) &rx_data;
 80014da:	4b13      	ldr	r3, [pc, #76]	; (8001528 <nRF24L01_config+0x68>)
		config.tx_power = NRF_TX_PWR_0dBm;
 80014dc:	7062      	strb	r2, [r4, #1]
		config.rx_buffer = (uint8_t*) &rx_data;
 80014de:	6123      	str	r3, [r4, #16]
		config.spi = &hspi1;
 80014e0:	4b12      	ldr	r3, [pc, #72]	; (800152c <nRF24L01_config+0x6c>)
		config.addr_width = NRF_ADDR_WIDTH_5;
 80014e2:	70e2      	strb	r2, [r4, #3]
		config.spi = &hspi1;
 80014e4:	6163      	str	r3, [r4, #20]
		config.spi_timeout = 10; // milliseconds
 80014e6:	230a      	movs	r3, #10
 80014e8:	61a3      	str	r3, [r4, #24]
		config.ce_port = CE_GPIO_Port;
 80014ea:	2390      	movs	r3, #144	; 0x90
 80014ec:	05db      	lsls	r3, r3, #23
 80014ee:	6263      	str	r3, [r4, #36]	; 0x24
		config.csn_port = CSN_GPIO_Port;
 80014f0:	61e3      	str	r3, [r4, #28]
		config.csn_pin = CSN_Pin;
 80014f2:	2310      	movs	r3, #16
		config.payload_length = 4;    // maximum is 32 bytes
 80014f4:	3201      	adds	r2, #1
 80014f6:	7122      	strb	r2, [r4, #4]
		config.retransmit_count = 15;   // maximum is 15 times
 80014f8:	320b      	adds	r2, #11
 80014fa:	7162      	strb	r2, [r4, #5]
		config.retransmit_delay = 0x0F; // 4000us, LSB:250us
 80014fc:	71a2      	strb	r2, [r4, #6]
		nrf_init(&nrf, &config);
 80014fe:	0021      	movs	r1, r4
		config.ce_pin = CE_Pin;
 8001500:	3a07      	subs	r2, #7
		nrf_init(&nrf, &config);
 8001502:	0028      	movs	r0, r5
		config.ce_pin = CE_Pin;
 8001504:	8522      	strh	r2, [r4, #40]	; 0x28
		config.csn_pin = CSN_Pin;
 8001506:	8423      	strh	r3, [r4, #32]
		nrf_init(&nrf, &config);
 8001508:	f000 fb95 	bl	8001c36 <nrf_init>
	}

	uint32_t tx_data = 0xDEADBEEF;
 800150c:	4b08      	ldr	r3, [pc, #32]	; (8001530 <nRF24L01_config+0x70>)

	nrf_send_packet(&nrf, (uint8_t*) &tx_data);
 800150e:	0021      	movs	r1, r4
 8001510:	0028      	movs	r0, r5
	uint32_t tx_data = 0xDEADBEEF;
 8001512:	9301      	str	r3, [sp, #4]
	nrf_send_packet(&nrf, (uint8_t*) &tx_data);
 8001514:	f000 fc00 	bl	8001d18 <nrf_send_packet>

}
 8001518:	b00f      	add	sp, #60	; 0x3c
 800151a:	bd30      	pop	{r4, r5, pc}
 800151c:	08001fd4 	.word	0x08001fd4
 8001520:	08001fd9 	.word	0x08001fd9
 8001524:	20000034 	.word	0x20000034
 8001528:	200000dc 	.word	0x200000dc
 800152c:	200000e0 	.word	0x200000e0
 8001530:	deadbeef 	.word	0xdeadbeef

08001534 <main>:
{
 8001534:	b570      	push	{r4, r5, r6, lr}
 8001536:	b088      	sub	sp, #32
  HAL_Init();
 8001538:	f7fe fe8e 	bl	8000258 <HAL_Init>
  SystemClock_Config();
 800153c:	f7ff ff80 	bl	8001440 <SystemClock_Config>
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001540:	2080      	movs	r0, #128	; 0x80
 8001542:	4b5b      	ldr	r3, [pc, #364]	; (80016b0 <main+0x17c>)
 8001544:	03c0      	lsls	r0, r0, #15
 8001546:	6959      	ldr	r1, [r3, #20]
  HAL_GPIO_WritePin(GPIOA, LD3_Pin|CE_Pin|CSN_Pin|LD1_Pin, GPIO_PIN_RESET);
 8001548:	4c5a      	ldr	r4, [pc, #360]	; (80016b4 <main+0x180>)
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800154a:	4301      	orrs	r1, r0
 800154c:	6159      	str	r1, [r3, #20]
 800154e:	695a      	ldr	r2, [r3, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001550:	2500      	movs	r5, #0
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001552:	4002      	ands	r2, r0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001554:	2080      	movs	r0, #128	; 0x80
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001556:	9200      	str	r2, [sp, #0]
 8001558:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800155a:	6959      	ldr	r1, [r3, #20]
 800155c:	0280      	lsls	r0, r0, #10
 800155e:	4301      	orrs	r1, r0
 8001560:	6159      	str	r1, [r3, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001562:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001564:	695a      	ldr	r2, [r3, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001566:	02c9      	lsls	r1, r1, #11
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001568:	4002      	ands	r2, r0
  HAL_GPIO_WritePin(GPIOA, LD3_Pin|CE_Pin|CSN_Pin|LD1_Pin, GPIO_PIN_RESET);
 800156a:	2090      	movs	r0, #144	; 0x90
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800156c:	9201      	str	r2, [sp, #4]
 800156e:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001570:	695a      	ldr	r2, [r3, #20]
  HAL_GPIO_WritePin(GPIOA, LD3_Pin|CE_Pin|CSN_Pin|LD1_Pin, GPIO_PIN_RESET);
 8001572:	05c0      	lsls	r0, r0, #23
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001574:	430a      	orrs	r2, r1
 8001576:	615a      	str	r2, [r3, #20]
 8001578:	695b      	ldr	r3, [r3, #20]
  HAL_GPIO_WritePin(GPIOA, LD3_Pin|CE_Pin|CSN_Pin|LD1_Pin, GPIO_PIN_RESET);
 800157a:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800157c:	400b      	ands	r3, r1
 800157e:	9302      	str	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOA, LD3_Pin|CE_Pin|CSN_Pin|LD1_Pin, GPIO_PIN_RESET);
 8001580:	0021      	movs	r1, r4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001582:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOA, LD3_Pin|CE_Pin|CSN_Pin|LD1_Pin, GPIO_PIN_RESET);
 8001584:	f7ff f8c0 	bl	8000708 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001588:	2200      	movs	r2, #0
 800158a:	2102      	movs	r1, #2
 800158c:	484a      	ldr	r0, [pc, #296]	; (80016b8 <main+0x184>)
 800158e:	f7ff f8bb 	bl	8000708 <HAL_GPIO_WritePin>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001592:	2090      	movs	r0, #144	; 0x90
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001594:	2601      	movs	r6, #1
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001596:	a903      	add	r1, sp, #12
 8001598:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = LD3_Pin|CE_Pin|CSN_Pin|LD1_Pin;
 800159a:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800159c:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159e:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a0:	9506      	str	r5, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015a2:	f7ff f801 	bl	80005a8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD2_Pin;
 80015a6:	2302      	movs	r3, #2
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80015a8:	a903      	add	r1, sp, #12
 80015aa:	4843      	ldr	r0, [pc, #268]	; (80016b8 <main+0x184>)
  GPIO_InitStruct.Pin = LD2_Pin;
 80015ac:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ae:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b0:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b2:	9506      	str	r5, [sp, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80015b4:	f7fe fff8 	bl	80005a8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = BTN_1_Pin;
 80015b8:	2380      	movs	r3, #128	; 0x80
  HAL_GPIO_Init(BTN_1_GPIO_Port, &GPIO_InitStruct);
 80015ba:	2090      	movs	r0, #144	; 0x90
  GPIO_InitStruct.Pin = BTN_1_Pin;
 80015bc:	01db      	lsls	r3, r3, #7
 80015be:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015c0:	4b3e      	ldr	r3, [pc, #248]	; (80016bc <main+0x188>)
  HAL_GPIO_Init(BTN_1_GPIO_Port, &GPIO_InitStruct);
 80015c2:	05c0      	lsls	r0, r0, #23
 80015c4:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015c6:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c8:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(BTN_1_GPIO_Port, &GPIO_InitStruct);
 80015ca:	f7fe ffed 	bl	80005a8 <HAL_GPIO_Init>
  hadc.Instance = ADC1;
 80015ce:	4c3c      	ldr	r4, [pc, #240]	; (80016c0 <main+0x18c>)
 80015d0:	4b3c      	ldr	r3, [pc, #240]	; (80016c4 <main+0x190>)
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80015d2:	0020      	movs	r0, r4
  hadc.Instance = ADC1;
 80015d4:	6023      	str	r3, [r4, #0]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80015d6:	2304      	movs	r3, #4
 80015d8:	6163      	str	r3, [r4, #20]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80015da:	23c2      	movs	r3, #194	; 0xc2
 80015dc:	33ff      	adds	r3, #255	; 0xff
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80015de:	6065      	str	r5, [r4, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80015e0:	60a5      	str	r5, [r4, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80015e2:	60e5      	str	r5, [r4, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80015e4:	6126      	str	r6, [r4, #16]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80015e6:	61a5      	str	r5, [r4, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80015e8:	61e5      	str	r5, [r4, #28]
  hadc.Init.ContinuousConvMode = DISABLE;
 80015ea:	6225      	str	r5, [r4, #32]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80015ec:	6265      	str	r5, [r4, #36]	; 0x24
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80015ee:	62a3      	str	r3, [r4, #40]	; 0x28
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80015f0:	62e5      	str	r5, [r4, #44]	; 0x2c
  hadc.Init.DMAContinuousRequests = DISABLE;
 80015f2:	6325      	str	r5, [r4, #48]	; 0x30
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80015f4:	6366      	str	r6, [r4, #52]	; 0x34
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80015f6:	f7fe fe5d 	bl	80002b4 <HAL_ADC_Init>
 80015fa:	42a8      	cmp	r0, r5
 80015fc:	d000      	beq.n	8001600 <main+0xcc>
 80015fe:	e7fe      	b.n	80015fe <main+0xca>
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8001600:	2380      	movs	r3, #128	; 0x80
 8001602:	015b      	lsls	r3, r3, #5
 8001604:	9304      	str	r3, [sp, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001606:	2380      	movs	r3, #128	; 0x80
  sConfig.Channel = ADC_CHANNEL_0;
 8001608:	9003      	str	r0, [sp, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800160a:	055b      	lsls	r3, r3, #21
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800160c:	a903      	add	r1, sp, #12
 800160e:	0020      	movs	r0, r4
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001610:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001612:	f7fe fef5 	bl	8000400 <HAL_ADC_ConfigChannel>
 8001616:	2800      	cmp	r0, #0
 8001618:	d000      	beq.n	800161c <main+0xe8>
 800161a:	e7fe      	b.n	800161a <main+0xe6>
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800161c:	a903      	add	r1, sp, #12
 800161e:	0020      	movs	r0, r4
  sConfig.Channel = ADC_CHANNEL_1;
 8001620:	9603      	str	r6, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001622:	f7fe feed 	bl	8000400 <HAL_ADC_ConfigChannel>
 8001626:	2800      	cmp	r0, #0
 8001628:	d000      	beq.n	800162c <main+0xf8>
 800162a:	e7fe      	b.n	800162a <main+0xf6>
  hspi1.Instance = SPI1;
 800162c:	4b26      	ldr	r3, [pc, #152]	; (80016c8 <main+0x194>)
 800162e:	4a27      	ldr	r2, [pc, #156]	; (80016cc <main+0x198>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001630:	6098      	str	r0, [r3, #8]
  hspi1.Instance = SPI1;
 8001632:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001634:	2282      	movs	r2, #130	; 0x82
 8001636:	0052      	lsls	r2, r2, #1
 8001638:	605a      	str	r2, [r3, #4]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800163a:	22e0      	movs	r2, #224	; 0xe0
 800163c:	00d2      	lsls	r2, r2, #3
 800163e:	60da      	str	r2, [r3, #12]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001640:	2280      	movs	r2, #128	; 0x80
 8001642:	0092      	lsls	r2, r2, #2
 8001644:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001646:	3ae1      	subs	r2, #225	; 0xe1
 8001648:	3aff      	subs	r2, #255	; 0xff
 800164a:	61da      	str	r2, [r3, #28]
  hspi1.Init.CRCPolynomial = 10;
 800164c:	3a16      	subs	r2, #22
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800164e:	6118      	str	r0, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001650:	6158      	str	r0, [r3, #20]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001652:	6218      	str	r0, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001654:	6258      	str	r0, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001656:	6298      	str	r0, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001658:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800165a:	6318      	str	r0, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800165c:	3a02      	subs	r2, #2
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800165e:	0018      	movs	r0, r3
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001660:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001662:	f7ff fc33 	bl	8000ecc <HAL_SPI_Init>
 8001666:	2800      	cmp	r0, #0
 8001668:	d000      	beq.n	800166c <main+0x138>
 800166a:	e7fe      	b.n	800166a <main+0x136>
  huart1.Instance = USART1;
 800166c:	4b18      	ldr	r3, [pc, #96]	; (80016d0 <main+0x19c>)
 800166e:	4a19      	ldr	r2, [pc, #100]	; (80016d4 <main+0x1a0>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001670:	6098      	str	r0, [r3, #8]
  huart1.Instance = USART1;
 8001672:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 8001674:	2296      	movs	r2, #150	; 0x96
 8001676:	0212      	lsls	r2, r2, #8
 8001678:	605a      	str	r2, [r3, #4]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800167a:	220c      	movs	r2, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 800167c:	60d8      	str	r0, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800167e:	6118      	str	r0, [r3, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001680:	6198      	str	r0, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001682:	61d8      	str	r0, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001684:	6218      	str	r0, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001686:	6258      	str	r0, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001688:	0018      	movs	r0, r3
  huart1.Init.Mode = UART_MODE_TX_RX;
 800168a:	615a      	str	r2, [r3, #20]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800168c:	f7ff fe9c 	bl	80013c8 <HAL_UART_Init>
 8001690:	2800      	cmp	r0, #0
 8001692:	d000      	beq.n	8001696 <main+0x162>
 8001694:	e7fe      	b.n	8001694 <main+0x160>
HAL_GPIO_TogglePin(CSN_GPIO_Port,CSN_Pin);
 8001696:	2490      	movs	r4, #144	; 0x90
nRF24L01_config();
 8001698:	f7ff ff12 	bl	80014c0 <nRF24L01_config>
HAL_GPIO_TogglePin(CSN_GPIO_Port,CSN_Pin);
 800169c:	05e4      	lsls	r4, r4, #23
HAL_Delay(100);
 800169e:	2064      	movs	r0, #100	; 0x64
 80016a0:	f7fe fdf8 	bl	8000294 <HAL_Delay>
HAL_GPIO_TogglePin(CSN_GPIO_Port,CSN_Pin);
 80016a4:	2110      	movs	r1, #16
 80016a6:	0020      	movs	r0, r4
 80016a8:	f7ff f834 	bl	8000714 <HAL_GPIO_TogglePin>
 80016ac:	e7f7      	b.n	800169e <main+0x16a>
 80016ae:	46c0      	nop			; (mov r8, r8)
 80016b0:	40021000 	.word	0x40021000
 80016b4:	0000201c 	.word	0x0000201c
 80016b8:	48000400 	.word	0x48000400
 80016bc:	10110000 	.word	0x10110000
 80016c0:	20000144 	.word	0x20000144
 80016c4:	40012400 	.word	0x40012400
 80016c8:	200000e0 	.word	0x200000e0
 80016cc:	40013000 	.word	0x40013000
 80016d0:	2000006c 	.word	0x2000006c
 80016d4:	40013800 	.word	0x40013800

080016d8 <ce_reset>:

static void ce_set(nrf24l01* dev) {
    HAL_GPIO_WritePin(dev->config.ce_port, dev->config.ce_pin, GPIO_PIN_SET);
}

static void ce_reset(nrf24l01* dev) {
 80016d8:	b510      	push	{r4, lr}
    HAL_GPIO_WritePin(dev->config.ce_port, dev->config.ce_pin, GPIO_PIN_RESET);
 80016da:	2200      	movs	r2, #0
 80016dc:	8d01      	ldrh	r1, [r0, #40]	; 0x28
 80016de:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80016e0:	f7ff f812 	bl	8000708 <HAL_GPIO_WritePin>
}
 80016e4:	bd10      	pop	{r4, pc}

080016e6 <ce_set>:
static void ce_set(nrf24l01* dev) {
 80016e6:	b510      	push	{r4, lr}
    HAL_GPIO_WritePin(dev->config.ce_port, dev->config.ce_pin, GPIO_PIN_SET);
 80016e8:	2201      	movs	r2, #1
 80016ea:	8d01      	ldrh	r1, [r0, #40]	; 0x28
 80016ec:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80016ee:	f7ff f80b 	bl	8000708 <HAL_GPIO_WritePin>
}
 80016f2:	bd10      	pop	{r4, pc}

080016f4 <nrf_send_command>:

    return NRF_OK;
}

NRF_RESULT nrf_send_command(nrf24l01* dev, NRF_COMMAND cmd, const uint8_t* tx,
                            uint8_t* rx, uint8_t len) {
 80016f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016f6:	b085      	sub	sp, #20
 80016f8:	af02      	add	r7, sp, #8
 80016fa:	603b      	str	r3, [r7, #0]
 80016fc:	2320      	movs	r3, #32
 80016fe:	18fb      	adds	r3, r7, r3
 8001700:	781d      	ldrb	r5, [r3, #0]
 8001702:	0004      	movs	r4, r0
    uint8_t myTX[len + 1];
 8001704:	002b      	movs	r3, r5
 8001706:	4668      	mov	r0, sp
 8001708:	3308      	adds	r3, #8
 800170a:	08db      	lsrs	r3, r3, #3
 800170c:	00db      	lsls	r3, r3, #3
 800170e:	1ac0      	subs	r0, r0, r3
 8001710:	4685      	mov	sp, r0
    uint8_t myRX[len + 1];
 8001712:	1ac3      	subs	r3, r0, r3
    uint8_t myTX[len + 1];
 8001714:	ae02      	add	r6, sp, #8
    uint8_t myRX[len + 1];
 8001716:	469d      	mov	sp, r3
 8001718:	ab02      	add	r3, sp, #8
 800171a:	607b      	str	r3, [r7, #4]
    myTX[0] = cmd;

    int i = 0;
    for (i = 0; i < len; i++) {
 800171c:	2300      	movs	r3, #0
    myTX[0] = cmd;
 800171e:	7031      	strb	r1, [r6, #0]
    for (i = 0; i < len; i++) {
 8001720:	429d      	cmp	r5, r3
 8001722:	dc1a      	bgt.n	800175a <nrf_send_command+0x66>
    HAL_GPIO_WritePin(dev->config.csn_port, dev->config.csn_pin,
 8001724:	8c21      	ldrh	r1, [r4, #32]
 8001726:	2200      	movs	r2, #0
 8001728:	69e0      	ldr	r0, [r4, #28]
 800172a:	f7fe ffed 	bl	8000708 <HAL_GPIO_WritePin>
        myRX[i]     = 0;
    }

    csn_reset(dev);

    if (HAL_SPI_TransmitReceive(dev->config.spi, myTX, myRX, 1 + len,
 800172e:	69a2      	ldr	r2, [r4, #24]
 8001730:	1c6b      	adds	r3, r5, #1
 8001732:	9200      	str	r2, [sp, #0]
 8001734:	687a      	ldr	r2, [r7, #4]
 8001736:	0031      	movs	r1, r6
 8001738:	6960      	ldr	r0, [r4, #20]
 800173a:	f7ff fc25 	bl	8000f88 <HAL_SPI_TransmitReceive>
                                dev->config.spi_timeout) != HAL_OK) {
        return NRF_ERROR;
 800173e:	2301      	movs	r3, #1
    if (HAL_SPI_TransmitReceive(dev->config.spi, myTX, myRX, 1 + len,
 8001740:	2800      	cmp	r0, #0
 8001742:	d107      	bne.n	8001754 <nrf_send_command+0x60>
    }

    for (i = 0; i < len; i++) { rx[i] = myRX[1 + i]; }
 8001744:	42a8      	cmp	r0, r5
 8001746:	db10      	blt.n	800176a <nrf_send_command+0x76>
    HAL_GPIO_WritePin(dev->config.csn_port, dev->config.csn_pin, GPIO_PIN_SET);
 8001748:	8c21      	ldrh	r1, [r4, #32]
 800174a:	2201      	movs	r2, #1
 800174c:	69e0      	ldr	r0, [r4, #28]
 800174e:	f7fe ffdb 	bl	8000708 <HAL_GPIO_WritePin>

    csn_set(dev);

    return NRF_OK;
 8001752:	2300      	movs	r3, #0
}
 8001754:	46bd      	mov	sp, r7
 8001756:	0018      	movs	r0, r3
 8001758:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        myTX[1 + i] = tx[i];
 800175a:	5cd1      	ldrb	r1, [r2, r3]
 800175c:	18f0      	adds	r0, r6, r3
 800175e:	7041      	strb	r1, [r0, #1]
        myRX[i]     = 0;
 8001760:	2000      	movs	r0, #0
 8001762:	6879      	ldr	r1, [r7, #4]
 8001764:	54c8      	strb	r0, [r1, r3]
 8001766:	3301      	adds	r3, #1
 8001768:	e7da      	b.n	8001720 <nrf_send_command+0x2c>
    for (i = 0; i < len; i++) { rx[i] = myRX[1 + i]; }
 800176a:	687a      	ldr	r2, [r7, #4]
 800176c:	3001      	adds	r0, #1
 800176e:	5c12      	ldrb	r2, [r2, r0]
 8001770:	6839      	ldr	r1, [r7, #0]
 8001772:	1e43      	subs	r3, r0, #1
 8001774:	54ca      	strb	r2, [r1, r3]
 8001776:	e7e5      	b.n	8001744 <nrf_send_command+0x50>

08001778 <nrf_read_register>:
__weak void nrf_packet_received_callback(nrf24l01* dev, uint8_t* data) {
    // default implementation (__weak) is used in favor of nrf_receive_packet
    dev->rx_busy = 0;
}

NRF_RESULT nrf_read_register(nrf24l01* dev, uint8_t reg, uint8_t* data) {
 8001778:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800177a:	0013      	movs	r3, r2
    uint8_t tx = 0;
 800177c:	220f      	movs	r2, #15
 800177e:	2400      	movs	r4, #0
 8001780:	446a      	add	r2, sp
 8001782:	7014      	strb	r4, [r2, #0]
    if (nrf_send_command(dev, NRF_CMD_R_REGISTER | reg, &tx, data, 1) !=
 8001784:	3401      	adds	r4, #1
 8001786:	9400      	str	r4, [sp, #0]
 8001788:	f7ff ffb4 	bl	80016f4 <nrf_send_command>
 800178c:	1e43      	subs	r3, r0, #1
 800178e:	4198      	sbcs	r0, r3
 8001790:	b2c0      	uxtb	r0, r0
        NRF_OK) {
        return NRF_ERROR;
    }
    return NRF_OK;
}
 8001792:	b004      	add	sp, #16
 8001794:	bd10      	pop	{r4, pc}

08001796 <nrf_write_register>:

NRF_RESULT nrf_write_register(nrf24l01* dev, uint8_t reg, uint8_t* data) {
 8001796:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    uint8_t rx = 0;
 8001798:	230f      	movs	r3, #15
 800179a:	2400      	movs	r4, #0
 800179c:	446b      	add	r3, sp
 800179e:	701c      	strb	r4, [r3, #0]
    if (nrf_send_command(dev, NRF_CMD_W_REGISTER | reg, data, &rx, 1) !=
 80017a0:	3420      	adds	r4, #32
 80017a2:	4321      	orrs	r1, r4
 80017a4:	3c1f      	subs	r4, #31
 80017a6:	9400      	str	r4, [sp, #0]
 80017a8:	f7ff ffa4 	bl	80016f4 <nrf_send_command>
 80017ac:	1e43      	subs	r3, r0, #1
 80017ae:	4198      	sbcs	r0, r3
 80017b0:	b2c0      	uxtb	r0, r0
        NRF_OK) {
        return NRF_ERROR;
    }
    return NRF_OK;
}
 80017b2:	b004      	add	sp, #16
 80017b4:	bd10      	pop	{r4, pc}

080017b6 <nrf_write_tx_payload>:
        return NRF_ERROR;
    }
    return NRF_OK;
}

NRF_RESULT nrf_write_tx_payload(nrf24l01* dev, const uint8_t* data) {
 80017b6:	b597      	push	{r0, r1, r2, r4, r7, lr}
 80017b8:	000a      	movs	r2, r1
    uint8_t rx[dev->config.payload_length];
 80017ba:	4669      	mov	r1, sp
 80017bc:	7904      	ldrb	r4, [r0, #4]
NRF_RESULT nrf_write_tx_payload(nrf24l01* dev, const uint8_t* data) {
 80017be:	af02      	add	r7, sp, #8
    uint8_t rx[dev->config.payload_length];
 80017c0:	1de3      	adds	r3, r4, #7
 80017c2:	08db      	lsrs	r3, r3, #3
 80017c4:	00db      	lsls	r3, r3, #3
 80017c6:	1acb      	subs	r3, r1, r3
 80017c8:	469d      	mov	sp, r3
    if (nrf_send_command(dev, NRF_CMD_W_TX_PAYLOAD, data, rx,
 80017ca:	21a0      	movs	r1, #160	; 0xa0
    uint8_t rx[dev->config.payload_length];
 80017cc:	ab02      	add	r3, sp, #8
    if (nrf_send_command(dev, NRF_CMD_W_TX_PAYLOAD, data, rx,
 80017ce:	9400      	str	r4, [sp, #0]
 80017d0:	f7ff ff90 	bl	80016f4 <nrf_send_command>
                         dev->config.payload_length) != NRF_OK) {
        return NRF_ERROR;
    }
    return NRF_OK;
}
 80017d4:	46bd      	mov	sp, r7
    if (nrf_send_command(dev, NRF_CMD_W_TX_PAYLOAD, data, rx,
 80017d6:	1e43      	subs	r3, r0, #1
 80017d8:	4198      	sbcs	r0, r3
}
 80017da:	b2c0      	uxtb	r0, r0
 80017dc:	bd92      	pop	{r1, r4, r7, pc}

080017de <nrf_flush_rx>:
        return NRF_ERROR;
    }
    return NRF_OK;
}

NRF_RESULT nrf_flush_rx(nrf24l01* dev) {
 80017de:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    uint8_t rx = 0;
 80017e0:	230e      	movs	r3, #14
    uint8_t tx = 0;
 80017e2:	220f      	movs	r2, #15
    uint8_t rx = 0;
 80017e4:	2100      	movs	r1, #0
 80017e6:	446b      	add	r3, sp
    uint8_t tx = 0;
 80017e8:	446a      	add	r2, sp
    uint8_t rx = 0;
 80017ea:	7019      	strb	r1, [r3, #0]
    uint8_t tx = 0;
 80017ec:	7011      	strb	r1, [r2, #0]
    if (nrf_send_command(dev, NRF_CMD_FLUSH_RX, &tx, &rx, 0) != NRF_OK) {
 80017ee:	9100      	str	r1, [sp, #0]
 80017f0:	31e2      	adds	r1, #226	; 0xe2
 80017f2:	f7ff ff7f 	bl	80016f4 <nrf_send_command>
 80017f6:	1e43      	subs	r3, r0, #1
 80017f8:	4198      	sbcs	r0, r3
 80017fa:	b2c0      	uxtb	r0, r0
        return NRF_ERROR;
    }
    return NRF_OK;
}
 80017fc:	b005      	add	sp, #20
 80017fe:	bd00      	pop	{pc}

08001800 <nrf_set_data_rate>:

NRF_RESULT nrf_set_data_rate(nrf24l01* dev, NRF_DATA_RATE rate) {
 8001800:	b573      	push	{r0, r1, r4, r5, r6, lr}
    uint8_t reg = 0;
 8001802:	466b      	mov	r3, sp
 8001804:	1ddc      	adds	r4, r3, #7
 8001806:	2300      	movs	r3, #0
NRF_RESULT nrf_set_data_rate(nrf24l01* dev, NRF_DATA_RATE rate) {
 8001808:	000e      	movs	r6, r1
    if (nrf_read_register(dev, NRF_RF_SETUP, &reg) != NRF_OK) {
 800180a:	0022      	movs	r2, r4
 800180c:	2106      	movs	r1, #6
NRF_RESULT nrf_set_data_rate(nrf24l01* dev, NRF_DATA_RATE rate) {
 800180e:	0005      	movs	r5, r0
    uint8_t reg = 0;
 8001810:	7023      	strb	r3, [r4, #0]
    if (nrf_read_register(dev, NRF_RF_SETUP, &reg) != NRF_OK) {
 8001812:	f7ff ffb1 	bl	8001778 <nrf_read_register>
 8001816:	2800      	cmp	r0, #0
 8001818:	d001      	beq.n	800181e <nrf_set_data_rate+0x1e>
        return NRF_ERROR;
 800181a:	2001      	movs	r0, #1
    if (nrf_write_register(dev, NRF_RF_SETUP, &reg) != NRF_OK) {
        return NRF_ERROR;
    }
    dev->config.data_rate = rate;
    return NRF_OK;
}
 800181c:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 800181e:	7823      	ldrb	r3, [r4, #0]
 8001820:	2220      	movs	r2, #32
    if (rate & 1) { // low bit set
 8001822:	07f1      	lsls	r1, r6, #31
 8001824:	d510      	bpl.n	8001848 <nrf_set_data_rate+0x48>
        reg |= 1 << 5;
 8001826:	4313      	orrs	r3, r2
        reg &= ~(1 << 5);
 8001828:	7023      	strb	r3, [r4, #0]
 800182a:	2308      	movs	r3, #8
    if (rate & 2) { // high bit set
 800182c:	07b2      	lsls	r2, r6, #30
 800182e:	d50d      	bpl.n	800184c <nrf_set_data_rate+0x4c>
        reg |= 1 << 3;
 8001830:	7822      	ldrb	r2, [r4, #0]
 8001832:	4313      	orrs	r3, r2
 8001834:	7023      	strb	r3, [r4, #0]
    if (nrf_write_register(dev, NRF_RF_SETUP, &reg) != NRF_OK) {
 8001836:	0022      	movs	r2, r4
 8001838:	2106      	movs	r1, #6
 800183a:	0028      	movs	r0, r5
 800183c:	f7ff ffab 	bl	8001796 <nrf_write_register>
 8001840:	2800      	cmp	r0, #0
 8001842:	d1ea      	bne.n	800181a <nrf_set_data_rate+0x1a>
    dev->config.data_rate = rate;
 8001844:	702e      	strb	r6, [r5, #0]
    return NRF_OK;
 8001846:	e7e9      	b.n	800181c <nrf_set_data_rate+0x1c>
        reg &= ~(1 << 5);
 8001848:	4393      	bics	r3, r2
 800184a:	e7ed      	b.n	8001828 <nrf_set_data_rate+0x28>
        reg &= ~(1 << 3);
 800184c:	7822      	ldrb	r2, [r4, #0]
 800184e:	439a      	bics	r2, r3
 8001850:	7022      	strb	r2, [r4, #0]
 8001852:	e7f0      	b.n	8001836 <nrf_set_data_rate+0x36>

08001854 <nrf_clear_interrupts>:
        return NRF_ERROR;
    }
    return NRF_OK;
}

NRF_RESULT nrf_clear_interrupts(nrf24l01* dev) {
 8001854:	b537      	push	{r0, r1, r2, r4, r5, lr}
    uint8_t reg = 0;
 8001856:	466b      	mov	r3, sp
 8001858:	1ddc      	adds	r4, r3, #7
 800185a:	2300      	movs	r3, #0
    if (nrf_read_register(dev, NRF_STATUS, &reg) != NRF_OK) {
 800185c:	0022      	movs	r2, r4
 800185e:	2107      	movs	r1, #7
    uint8_t reg = 0;
 8001860:	7023      	strb	r3, [r4, #0]
NRF_RESULT nrf_clear_interrupts(nrf24l01* dev) {
 8001862:	0005      	movs	r5, r0
    if (nrf_read_register(dev, NRF_STATUS, &reg) != NRF_OK) {
 8001864:	f7ff ff88 	bl	8001778 <nrf_read_register>
 8001868:	0003      	movs	r3, r0
        return NRF_ERROR;
 800186a:	2001      	movs	r0, #1
    if (nrf_read_register(dev, NRF_STATUS, &reg) != NRF_OK) {
 800186c:	2b00      	cmp	r3, #0
 800186e:	d10b      	bne.n	8001888 <nrf_clear_interrupts+0x34>
    }

    reg |= 7 << 4; // setting bits 4,5,6
 8001870:	7822      	ldrb	r2, [r4, #0]
 8001872:	3370      	adds	r3, #112	; 0x70
 8001874:	4313      	orrs	r3, r2

    if (nrf_write_register(dev, NRF_STATUS, &reg) != NRF_OK) {
 8001876:	2107      	movs	r1, #7
 8001878:	0022      	movs	r2, r4
 800187a:	0028      	movs	r0, r5
    reg |= 7 << 4; // setting bits 4,5,6
 800187c:	7023      	strb	r3, [r4, #0]
    if (nrf_write_register(dev, NRF_STATUS, &reg) != NRF_OK) {
 800187e:	f7ff ff8a 	bl	8001796 <nrf_write_register>
 8001882:	1e43      	subs	r3, r0, #1
 8001884:	4198      	sbcs	r0, r3
        return NRF_ERROR;
 8001886:	b2c0      	uxtb	r0, r0
        return NRF_ERROR;
    }
    return NRF_OK;
}
 8001888:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0800188a <nrf_set_rf_channel>:

NRF_RESULT nrf_set_rf_channel(nrf24l01* dev, uint8_t ch) {
 800188a:	b573      	push	{r0, r1, r4, r5, r6, lr}
    ch &= 0x7F;
    uint8_t reg = 0;
 800188c:	466b      	mov	r3, sp
 800188e:	1ddc      	adds	r4, r3, #7
 8001890:	2300      	movs	r3, #0
NRF_RESULT nrf_set_rf_channel(nrf24l01* dev, uint8_t ch) {
 8001892:	000d      	movs	r5, r1
    if (nrf_read_register(dev, NRF_RF_CH, &reg) != NRF_OK) { return NRF_ERROR; }
 8001894:	0022      	movs	r2, r4
 8001896:	2105      	movs	r1, #5
NRF_RESULT nrf_set_rf_channel(nrf24l01* dev, uint8_t ch) {
 8001898:	0006      	movs	r6, r0
    uint8_t reg = 0;
 800189a:	7023      	strb	r3, [r4, #0]
    if (nrf_read_register(dev, NRF_RF_CH, &reg) != NRF_OK) { return NRF_ERROR; }
 800189c:	f7ff ff6c 	bl	8001778 <nrf_read_register>
 80018a0:	2800      	cmp	r0, #0
 80018a2:	d001      	beq.n	80018a8 <nrf_set_rf_channel+0x1e>
 80018a4:	2001      	movs	r0, #1
    if (nrf_write_register(dev, NRF_RF_CH, &reg) != NRF_OK) {
        return NRF_ERROR;
    }
    dev->config.rf_channel = ch;
    return NRF_OK;
}
 80018a6:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
    ch &= 0x7F;
 80018a8:	237f      	movs	r3, #127	; 0x7f
 80018aa:	401d      	ands	r5, r3
    reg |= ch; // setting channel
 80018ac:	7823      	ldrb	r3, [r4, #0]
    if (nrf_write_register(dev, NRF_RF_CH, &reg) != NRF_OK) {
 80018ae:	0022      	movs	r2, r4
    reg |= ch; // setting channel
 80018b0:	432b      	orrs	r3, r5
    if (nrf_write_register(dev, NRF_RF_CH, &reg) != NRF_OK) {
 80018b2:	2105      	movs	r1, #5
 80018b4:	0030      	movs	r0, r6
    reg |= ch; // setting channel
 80018b6:	7023      	strb	r3, [r4, #0]
    if (nrf_write_register(dev, NRF_RF_CH, &reg) != NRF_OK) {
 80018b8:	f7ff ff6d 	bl	8001796 <nrf_write_register>
 80018bc:	2800      	cmp	r0, #0
 80018be:	d1f1      	bne.n	80018a4 <nrf_set_rf_channel+0x1a>
    dev->config.rf_channel = ch;
 80018c0:	71f5      	strb	r5, [r6, #7]
    return NRF_OK;
 80018c2:	e7f0      	b.n	80018a6 <nrf_set_rf_channel+0x1c>

080018c4 <nrf_set_retransmittion_count>:

NRF_RESULT nrf_set_retransmittion_count(nrf24l01* dev, uint8_t count) {
 80018c4:	b573      	push	{r0, r1, r4, r5, r6, lr}
    count &= 0x0F;
    uint8_t reg = 0;
 80018c6:	466b      	mov	r3, sp
 80018c8:	1ddc      	adds	r4, r3, #7
 80018ca:	2300      	movs	r3, #0
NRF_RESULT nrf_set_retransmittion_count(nrf24l01* dev, uint8_t count) {
 80018cc:	000d      	movs	r5, r1
    if (nrf_read_register(dev, NRF_SETUP_RETR, &reg) != NRF_OK) {
 80018ce:	0022      	movs	r2, r4
 80018d0:	2104      	movs	r1, #4
NRF_RESULT nrf_set_retransmittion_count(nrf24l01* dev, uint8_t count) {
 80018d2:	0006      	movs	r6, r0
    uint8_t reg = 0;
 80018d4:	7023      	strb	r3, [r4, #0]
    if (nrf_read_register(dev, NRF_SETUP_RETR, &reg) != NRF_OK) {
 80018d6:	f7ff ff4f 	bl	8001778 <nrf_read_register>
 80018da:	2800      	cmp	r0, #0
 80018dc:	d001      	beq.n	80018e2 <nrf_set_retransmittion_count+0x1e>
        return NRF_ERROR;
 80018de:	2001      	movs	r0, #1
    if (nrf_write_register(dev, NRF_SETUP_RETR, &reg) != NRF_OK) {
        return NRF_ERROR;
    }
    dev->config.retransmit_count = count;
    return NRF_OK;
}
 80018e0:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
    count &= 0x0F;
 80018e2:	220f      	movs	r2, #15
    reg &= 0xF0;  // clearing bits 0,1,2,3
 80018e4:	7823      	ldrb	r3, [r4, #0]
    count &= 0x0F;
 80018e6:	4015      	ands	r5, r2
    reg &= 0xF0;  // clearing bits 0,1,2,3
 80018e8:	4393      	bics	r3, r2
    reg |= count; // setting count
 80018ea:	432b      	orrs	r3, r5
    if (nrf_write_register(dev, NRF_SETUP_RETR, &reg) != NRF_OK) {
 80018ec:	0022      	movs	r2, r4
 80018ee:	2104      	movs	r1, #4
 80018f0:	0030      	movs	r0, r6
    reg |= count; // setting count
 80018f2:	7023      	strb	r3, [r4, #0]
    if (nrf_write_register(dev, NRF_SETUP_RETR, &reg) != NRF_OK) {
 80018f4:	f7ff ff4f 	bl	8001796 <nrf_write_register>
 80018f8:	2800      	cmp	r0, #0
 80018fa:	d1f0      	bne.n	80018de <nrf_set_retransmittion_count+0x1a>
    dev->config.retransmit_count = count;
 80018fc:	7175      	strb	r5, [r6, #5]
    return NRF_OK;
 80018fe:	e7ef      	b.n	80018e0 <nrf_set_retransmittion_count+0x1c>

08001900 <nrf_set_retransmittion_delay>:

NRF_RESULT nrf_set_retransmittion_delay(nrf24l01* dev, uint8_t delay) {
 8001900:	b573      	push	{r0, r1, r4, r5, r6, lr}
    delay &= 0x0F;
    uint8_t reg = 0;
 8001902:	466b      	mov	r3, sp
 8001904:	1ddc      	adds	r4, r3, #7
 8001906:	2300      	movs	r3, #0
NRF_RESULT nrf_set_retransmittion_delay(nrf24l01* dev, uint8_t delay) {
 8001908:	000d      	movs	r5, r1
    if (nrf_read_register(dev, NRF_SETUP_RETR, &reg) != NRF_OK) {
 800190a:	0022      	movs	r2, r4
 800190c:	2104      	movs	r1, #4
NRF_RESULT nrf_set_retransmittion_delay(nrf24l01* dev, uint8_t delay) {
 800190e:	0006      	movs	r6, r0
    uint8_t reg = 0;
 8001910:	7023      	strb	r3, [r4, #0]
    if (nrf_read_register(dev, NRF_SETUP_RETR, &reg) != NRF_OK) {
 8001912:	f7ff ff31 	bl	8001778 <nrf_read_register>
 8001916:	2800      	cmp	r0, #0
 8001918:	d001      	beq.n	800191e <nrf_set_retransmittion_delay+0x1e>
        return NRF_ERROR;
 800191a:	2001      	movs	r0, #1
    if (nrf_write_register(dev, NRF_SETUP_RETR, &reg) != NRF_OK) {
        return NRF_ERROR;
    }
    dev->config.retransmit_delay = delay;
    return NRF_OK;
}
 800191c:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
    delay &= 0x0F;
 800191e:	220f      	movs	r2, #15
    reg &= 0x0F;       // clearing bits 1,2,6,7
 8001920:	7823      	ldrb	r3, [r4, #0]
    delay &= 0x0F;
 8001922:	4015      	ands	r5, r2
    reg &= 0x0F;       // clearing bits 1,2,6,7
 8001924:	4013      	ands	r3, r2
    reg |= delay << 4; // setting delay
 8001926:	012a      	lsls	r2, r5, #4
 8001928:	4313      	orrs	r3, r2
    if (nrf_write_register(dev, NRF_SETUP_RETR, &reg) != NRF_OK) {
 800192a:	2104      	movs	r1, #4
 800192c:	0022      	movs	r2, r4
 800192e:	0030      	movs	r0, r6
    reg |= delay << 4; // setting delay
 8001930:	7023      	strb	r3, [r4, #0]
    if (nrf_write_register(dev, NRF_SETUP_RETR, &reg) != NRF_OK) {
 8001932:	f7ff ff30 	bl	8001796 <nrf_write_register>
 8001936:	2800      	cmp	r0, #0
 8001938:	d1ef      	bne.n	800191a <nrf_set_retransmittion_delay+0x1a>
    dev->config.retransmit_delay = delay;
 800193a:	71b5      	strb	r5, [r6, #6]
    return NRF_OK;
 800193c:	e7ee      	b.n	800191c <nrf_set_retransmittion_delay+0x1c>

0800193e <nrf_set_address_width>:

NRF_RESULT nrf_set_address_width(nrf24l01* dev, NRF_ADDR_WIDTH width) {
 800193e:	b573      	push	{r0, r1, r4, r5, r6, lr}
    uint8_t reg = 0;
 8001940:	466b      	mov	r3, sp
 8001942:	1ddc      	adds	r4, r3, #7
 8001944:	2300      	movs	r3, #0
NRF_RESULT nrf_set_address_width(nrf24l01* dev, NRF_ADDR_WIDTH width) {
 8001946:	000e      	movs	r6, r1
    if (nrf_read_register(dev, NRF_SETUP_AW, &reg) != NRF_OK) {
 8001948:	0022      	movs	r2, r4
 800194a:	2103      	movs	r1, #3
NRF_RESULT nrf_set_address_width(nrf24l01* dev, NRF_ADDR_WIDTH width) {
 800194c:	0005      	movs	r5, r0
    uint8_t reg = 0;
 800194e:	7023      	strb	r3, [r4, #0]
    if (nrf_read_register(dev, NRF_SETUP_AW, &reg) != NRF_OK) {
 8001950:	f7ff ff12 	bl	8001778 <nrf_read_register>
 8001954:	2800      	cmp	r0, #0
 8001956:	d001      	beq.n	800195c <nrf_set_address_width+0x1e>
        return NRF_ERROR;
 8001958:	2001      	movs	r0, #1
    if (nrf_write_register(dev, NRF_SETUP_AW, &reg) != NRF_OK) {
        return NRF_ERROR;
    }
    dev->config.addr_width = width;
    return NRF_OK;
}
 800195a:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
    reg &= 0x03;  // clearing bits 0,1
 800195c:	2103      	movs	r1, #3
 800195e:	7823      	ldrb	r3, [r4, #0]
    if (nrf_write_register(dev, NRF_SETUP_AW, &reg) != NRF_OK) {
 8001960:	0022      	movs	r2, r4
    reg &= 0x03;  // clearing bits 0,1
 8001962:	400b      	ands	r3, r1
    reg |= width; // setting delay
 8001964:	4333      	orrs	r3, r6
    if (nrf_write_register(dev, NRF_SETUP_AW, &reg) != NRF_OK) {
 8001966:	0028      	movs	r0, r5
    reg |= width; // setting delay
 8001968:	7023      	strb	r3, [r4, #0]
    if (nrf_write_register(dev, NRF_SETUP_AW, &reg) != NRF_OK) {
 800196a:	f7ff ff14 	bl	8001796 <nrf_write_register>
 800196e:	2800      	cmp	r0, #0
 8001970:	d1f2      	bne.n	8001958 <nrf_set_address_width+0x1a>
    dev->config.addr_width = width;
 8001972:	70ee      	strb	r6, [r5, #3]
    return NRF_OK;
 8001974:	e7f1      	b.n	800195a <nrf_set_address_width+0x1c>

08001976 <nrf_set_rx_pipes>:

NRF_RESULT nrf_set_rx_pipes(nrf24l01* dev, uint8_t pipes) {
 8001976:	b507      	push	{r0, r1, r2, lr}
 8001978:	466b      	mov	r3, sp
 800197a:	1dda      	adds	r2, r3, #7
 800197c:	7011      	strb	r1, [r2, #0]
    if (nrf_write_register(dev, NRF_EN_RXADDR, &pipes) != NRF_OK) {
 800197e:	2102      	movs	r1, #2
 8001980:	f7ff ff09 	bl	8001796 <nrf_write_register>
 8001984:	1e43      	subs	r3, r0, #1
 8001986:	4198      	sbcs	r0, r3
        return NRF_ERROR;
    }
    return NRF_OK;
}
 8001988:	b2c0      	uxtb	r0, r0
 800198a:	bd0e      	pop	{r1, r2, r3, pc}

0800198c <nrf_enable_auto_ack>:

NRF_RESULT nrf_enable_auto_ack(nrf24l01* dev, uint8_t pipe) {
 800198c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    uint8_t reg = 0;
 800198e:	466b      	mov	r3, sp
 8001990:	1ddc      	adds	r4, r3, #7
 8001992:	2300      	movs	r3, #0
NRF_RESULT nrf_enable_auto_ack(nrf24l01* dev, uint8_t pipe) {
 8001994:	000e      	movs	r6, r1
    if (nrf_read_register(dev, NRF_EN_AA, &reg) != NRF_OK) { return NRF_ERROR; }
 8001996:	0022      	movs	r2, r4
 8001998:	2101      	movs	r1, #1
NRF_RESULT nrf_enable_auto_ack(nrf24l01* dev, uint8_t pipe) {
 800199a:	0005      	movs	r5, r0
    uint8_t reg = 0;
 800199c:	7023      	strb	r3, [r4, #0]
    if (nrf_read_register(dev, NRF_EN_AA, &reg) != NRF_OK) { return NRF_ERROR; }
 800199e:	f7ff feeb 	bl	8001778 <nrf_read_register>
 80019a2:	2101      	movs	r1, #1
 80019a4:	2800      	cmp	r0, #0
 80019a6:	d10b      	bne.n	80019c0 <nrf_enable_auto_ack+0x34>

    reg |= 1 << pipe;
 80019a8:	000b      	movs	r3, r1
 80019aa:	40b3      	lsls	r3, r6
 80019ac:	7822      	ldrb	r2, [r4, #0]

    if (nrf_write_register(dev, NRF_EN_AA, &reg) != NRF_OK) {
 80019ae:	0028      	movs	r0, r5
    reg |= 1 << pipe;
 80019b0:	4313      	orrs	r3, r2
    if (nrf_write_register(dev, NRF_EN_AA, &reg) != NRF_OK) {
 80019b2:	0022      	movs	r2, r4
    reg |= 1 << pipe;
 80019b4:	7023      	strb	r3, [r4, #0]
    if (nrf_write_register(dev, NRF_EN_AA, &reg) != NRF_OK) {
 80019b6:	f7ff feee 	bl	8001796 <nrf_write_register>
 80019ba:	1e41      	subs	r1, r0, #1
 80019bc:	4188      	sbcs	r0, r1
    if (nrf_read_register(dev, NRF_EN_AA, &reg) != NRF_OK) { return NRF_ERROR; }
 80019be:	b2c1      	uxtb	r1, r0
        return NRF_ERROR;
    }
    return NRF_OK;
}
 80019c0:	0008      	movs	r0, r1
 80019c2:	bd76      	pop	{r1, r2, r4, r5, r6, pc}

080019c4 <nrf_enable_crc>:

NRF_RESULT nrf_enable_crc(nrf24l01* dev, bool activate) {
 80019c4:	b573      	push	{r0, r1, r4, r5, r6, lr}
    uint8_t reg = 0;
 80019c6:	466b      	mov	r3, sp
NRF_RESULT nrf_enable_crc(nrf24l01* dev, bool activate) {
 80019c8:	000e      	movs	r6, r1
    uint8_t reg = 0;
 80019ca:	2100      	movs	r1, #0
 80019cc:	1ddc      	adds	r4, r3, #7
    if (nrf_read_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 80019ce:	0022      	movs	r2, r4
NRF_RESULT nrf_enable_crc(nrf24l01* dev, bool activate) {
 80019d0:	0005      	movs	r5, r0
    uint8_t reg = 0;
 80019d2:	7021      	strb	r1, [r4, #0]
    if (nrf_read_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 80019d4:	f7ff fed0 	bl	8001778 <nrf_read_register>
 80019d8:	0003      	movs	r3, r0
        return NRF_ERROR;
 80019da:	2001      	movs	r0, #1
    if (nrf_read_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d10d      	bne.n	80019fc <nrf_enable_crc+0x38>
 80019e0:	7823      	ldrb	r3, [r4, #0]
 80019e2:	2208      	movs	r2, #8
    }

    if (activate) {
 80019e4:	2e00      	cmp	r6, #0
 80019e6:	d00a      	beq.n	80019fe <nrf_enable_crc+0x3a>
        reg |= 1 << 3;
 80019e8:	4313      	orrs	r3, r2
    } else {
        reg &= ~(1 << 3);
    }

    if (nrf_write_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 80019ea:	0022      	movs	r2, r4
 80019ec:	2100      	movs	r1, #0
 80019ee:	0028      	movs	r0, r5
        reg &= ~(1 << 3);
 80019f0:	7023      	strb	r3, [r4, #0]
    if (nrf_write_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 80019f2:	f7ff fed0 	bl	8001796 <nrf_write_register>
 80019f6:	1e43      	subs	r3, r0, #1
 80019f8:	4198      	sbcs	r0, r3
        return NRF_ERROR;
 80019fa:	b2c0      	uxtb	r0, r0
        return NRF_ERROR;
    }
    return NRF_OK;
}
 80019fc:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
        reg &= ~(1 << 3);
 80019fe:	4393      	bics	r3, r2
 8001a00:	e7f3      	b.n	80019ea <nrf_enable_crc+0x26>

08001a02 <nrf_set_crc_width>:

NRF_RESULT nrf_set_crc_width(nrf24l01* dev, NRF_CRC_WIDTH width) {
 8001a02:	b573      	push	{r0, r1, r4, r5, r6, lr}
    uint8_t reg = 0;
 8001a04:	466b      	mov	r3, sp
NRF_RESULT nrf_set_crc_width(nrf24l01* dev, NRF_CRC_WIDTH width) {
 8001a06:	000e      	movs	r6, r1
    uint8_t reg = 0;
 8001a08:	2100      	movs	r1, #0
 8001a0a:	1ddc      	adds	r4, r3, #7
    if (nrf_read_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 8001a0c:	0022      	movs	r2, r4
NRF_RESULT nrf_set_crc_width(nrf24l01* dev, NRF_CRC_WIDTH width) {
 8001a0e:	0005      	movs	r5, r0
    uint8_t reg = 0;
 8001a10:	7021      	strb	r1, [r4, #0]
    if (nrf_read_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 8001a12:	f7ff feb1 	bl	8001778 <nrf_read_register>
 8001a16:	2800      	cmp	r0, #0
 8001a18:	d001      	beq.n	8001a1e <nrf_set_crc_width+0x1c>
        return NRF_ERROR;
 8001a1a:	2001      	movs	r0, #1
    if (nrf_write_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
        return NRF_ERROR;
    }
    dev->config.crc_width = width;
    return NRF_OK;
}
 8001a1c:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 8001a1e:	7823      	ldrb	r3, [r4, #0]
    if (width == NRF_CRC_WIDTH_2B) {
 8001a20:	2e01      	cmp	r6, #1
 8001a22:	d10b      	bne.n	8001a3c <nrf_set_crc_width+0x3a>
        reg |= 1 << 2;
 8001a24:	2204      	movs	r2, #4
 8001a26:	4313      	orrs	r3, r2
    if (nrf_write_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 8001a28:	0022      	movs	r2, r4
 8001a2a:	2100      	movs	r1, #0
 8001a2c:	0028      	movs	r0, r5
        reg &= ~(1 << 3);
 8001a2e:	7023      	strb	r3, [r4, #0]
    if (nrf_write_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 8001a30:	f7ff feb1 	bl	8001796 <nrf_write_register>
 8001a34:	2800      	cmp	r0, #0
 8001a36:	d1f0      	bne.n	8001a1a <nrf_set_crc_width+0x18>
    dev->config.crc_width = width;
 8001a38:	70ae      	strb	r6, [r5, #2]
    return NRF_OK;
 8001a3a:	e7ef      	b.n	8001a1c <nrf_set_crc_width+0x1a>
        reg &= ~(1 << 3);
 8001a3c:	2208      	movs	r2, #8
 8001a3e:	4393      	bics	r3, r2
 8001a40:	e7f2      	b.n	8001a28 <nrf_set_crc_width+0x26>

08001a42 <nrf_power_up>:

NRF_RESULT nrf_power_up(nrf24l01* dev, bool power_up) {
 8001a42:	b573      	push	{r0, r1, r4, r5, r6, lr}
    uint8_t reg = 0;
 8001a44:	466b      	mov	r3, sp
NRF_RESULT nrf_power_up(nrf24l01* dev, bool power_up) {
 8001a46:	000e      	movs	r6, r1
    uint8_t reg = 0;
 8001a48:	2100      	movs	r1, #0
 8001a4a:	1ddc      	adds	r4, r3, #7
    if (nrf_read_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 8001a4c:	0022      	movs	r2, r4
NRF_RESULT nrf_power_up(nrf24l01* dev, bool power_up) {
 8001a4e:	0005      	movs	r5, r0
    uint8_t reg = 0;
 8001a50:	7021      	strb	r1, [r4, #0]
    if (nrf_read_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 8001a52:	f7ff fe91 	bl	8001778 <nrf_read_register>
 8001a56:	0003      	movs	r3, r0
        return NRF_ERROR;
 8001a58:	2001      	movs	r0, #1
    if (nrf_read_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d10d      	bne.n	8001a7a <nrf_power_up+0x38>
 8001a5e:	7823      	ldrb	r3, [r4, #0]
 8001a60:	2202      	movs	r2, #2
    }

    if (power_up) {
 8001a62:	2e00      	cmp	r6, #0
 8001a64:	d00a      	beq.n	8001a7c <nrf_power_up+0x3a>
        reg |= 1 << 1;
 8001a66:	4313      	orrs	r3, r2
    } else {
        reg &= ~(1 << 1);
    }

    if (nrf_write_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 8001a68:	0022      	movs	r2, r4
 8001a6a:	2100      	movs	r1, #0
 8001a6c:	0028      	movs	r0, r5
        reg &= ~(1 << 1);
 8001a6e:	7023      	strb	r3, [r4, #0]
    if (nrf_write_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 8001a70:	f7ff fe91 	bl	8001796 <nrf_write_register>
 8001a74:	1e43      	subs	r3, r0, #1
 8001a76:	4198      	sbcs	r0, r3
        return NRF_ERROR;
 8001a78:	b2c0      	uxtb	r0, r0
        return NRF_ERROR;
    }
    return NRF_OK;
}
 8001a7a:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
        reg &= ~(1 << 1);
 8001a7c:	4393      	bics	r3, r2
 8001a7e:	e7f3      	b.n	8001a68 <nrf_power_up+0x26>

08001a80 <nrf_rx_tx_control>:

NRF_RESULT nrf_rx_tx_control(nrf24l01* dev, NRF_TXRX_STATE rx) {
 8001a80:	b573      	push	{r0, r1, r4, r5, r6, lr}
    uint8_t reg = 0;
 8001a82:	466b      	mov	r3, sp
NRF_RESULT nrf_rx_tx_control(nrf24l01* dev, NRF_TXRX_STATE rx) {
 8001a84:	000e      	movs	r6, r1
    uint8_t reg = 0;
 8001a86:	2100      	movs	r1, #0
 8001a88:	1ddc      	adds	r4, r3, #7
    if (nrf_read_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 8001a8a:	0022      	movs	r2, r4
NRF_RESULT nrf_rx_tx_control(nrf24l01* dev, NRF_TXRX_STATE rx) {
 8001a8c:	0005      	movs	r5, r0
    uint8_t reg = 0;
 8001a8e:	7021      	strb	r1, [r4, #0]
    if (nrf_read_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 8001a90:	f7ff fe72 	bl	8001778 <nrf_read_register>
 8001a94:	2301      	movs	r3, #1
 8001a96:	0002      	movs	r2, r0
        return NRF_ERROR;
 8001a98:	0018      	movs	r0, r3
    if (nrf_read_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 8001a9a:	2a00      	cmp	r2, #0
 8001a9c:	d10c      	bne.n	8001ab8 <nrf_rx_tx_control+0x38>
 8001a9e:	7822      	ldrb	r2, [r4, #0]
    }

    if (rx) {
 8001aa0:	2e00      	cmp	r6, #0
 8001aa2:	d00a      	beq.n	8001aba <nrf_rx_tx_control+0x3a>
        reg |= 1;
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	7023      	strb	r3, [r4, #0]
    } else {
        reg &= ~(1);
    }

    if (nrf_write_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 8001aa8:	0022      	movs	r2, r4
 8001aaa:	2100      	movs	r1, #0
 8001aac:	0028      	movs	r0, r5
 8001aae:	f7ff fe72 	bl	8001796 <nrf_write_register>
 8001ab2:	1e43      	subs	r3, r0, #1
 8001ab4:	4198      	sbcs	r0, r3
        return NRF_ERROR;
 8001ab6:	b2c0      	uxtb	r0, r0
        return NRF_ERROR;
    }
    return NRF_OK;
}
 8001ab8:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
        reg &= ~(1);
 8001aba:	439a      	bics	r2, r3
 8001abc:	7022      	strb	r2, [r4, #0]
 8001abe:	e7f3      	b.n	8001aa8 <nrf_rx_tx_control+0x28>

08001ac0 <nrf_enable_rx_data_ready_irq>:

NRF_RESULT nrf_enable_rx_data_ready_irq(nrf24l01* dev, bool activate) {
 8001ac0:	b573      	push	{r0, r1, r4, r5, r6, lr}
    uint8_t reg = 0;
 8001ac2:	466b      	mov	r3, sp
NRF_RESULT nrf_enable_rx_data_ready_irq(nrf24l01* dev, bool activate) {
 8001ac4:	000e      	movs	r6, r1
    uint8_t reg = 0;
 8001ac6:	2100      	movs	r1, #0
 8001ac8:	1ddc      	adds	r4, r3, #7
    if (nrf_read_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 8001aca:	0022      	movs	r2, r4
NRF_RESULT nrf_enable_rx_data_ready_irq(nrf24l01* dev, bool activate) {
 8001acc:	0005      	movs	r5, r0
    uint8_t reg = 0;
 8001ace:	7021      	strb	r1, [r4, #0]
    if (nrf_read_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 8001ad0:	f7ff fe52 	bl	8001778 <nrf_read_register>
 8001ad4:	0003      	movs	r3, r0
        return NRF_ERROR;
 8001ad6:	2001      	movs	r0, #1
    if (nrf_read_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d10d      	bne.n	8001af8 <nrf_enable_rx_data_ready_irq+0x38>
 8001adc:	7823      	ldrb	r3, [r4, #0]
 8001ade:	2240      	movs	r2, #64	; 0x40
    }

    if (!activate) {
 8001ae0:	2e00      	cmp	r6, #0
 8001ae2:	d10a      	bne.n	8001afa <nrf_enable_rx_data_ready_irq+0x3a>
        reg |= 1 << 6;
 8001ae4:	4313      	orrs	r3, r2
    } else {
        reg &= ~(1 << 6);
    }

    if (nrf_write_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 8001ae6:	0022      	movs	r2, r4
 8001ae8:	2100      	movs	r1, #0
 8001aea:	0028      	movs	r0, r5
        reg &= ~(1 << 6);
 8001aec:	7023      	strb	r3, [r4, #0]
    if (nrf_write_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 8001aee:	f7ff fe52 	bl	8001796 <nrf_write_register>
 8001af2:	1e43      	subs	r3, r0, #1
 8001af4:	4198      	sbcs	r0, r3
        return NRF_ERROR;
 8001af6:	b2c0      	uxtb	r0, r0
        return NRF_ERROR;
    }
    return NRF_OK;
}
 8001af8:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
        reg &= ~(1 << 6);
 8001afa:	4393      	bics	r3, r2
 8001afc:	e7f3      	b.n	8001ae6 <nrf_enable_rx_data_ready_irq+0x26>

08001afe <nrf_enable_tx_data_sent_irq>:

NRF_RESULT nrf_enable_tx_data_sent_irq(nrf24l01* dev, bool activate) {
 8001afe:	b573      	push	{r0, r1, r4, r5, r6, lr}
    uint8_t reg = 0;
 8001b00:	466b      	mov	r3, sp
NRF_RESULT nrf_enable_tx_data_sent_irq(nrf24l01* dev, bool activate) {
 8001b02:	000e      	movs	r6, r1
    uint8_t reg = 0;
 8001b04:	2100      	movs	r1, #0
 8001b06:	1ddc      	adds	r4, r3, #7
    if (nrf_read_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 8001b08:	0022      	movs	r2, r4
NRF_RESULT nrf_enable_tx_data_sent_irq(nrf24l01* dev, bool activate) {
 8001b0a:	0005      	movs	r5, r0
    uint8_t reg = 0;
 8001b0c:	7021      	strb	r1, [r4, #0]
    if (nrf_read_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 8001b0e:	f7ff fe33 	bl	8001778 <nrf_read_register>
 8001b12:	0003      	movs	r3, r0
        return NRF_ERROR;
 8001b14:	2001      	movs	r0, #1
    if (nrf_read_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d10d      	bne.n	8001b36 <nrf_enable_tx_data_sent_irq+0x38>
 8001b1a:	7823      	ldrb	r3, [r4, #0]
 8001b1c:	2220      	movs	r2, #32
    }
    if (!activate) {
 8001b1e:	2e00      	cmp	r6, #0
 8001b20:	d10a      	bne.n	8001b38 <nrf_enable_tx_data_sent_irq+0x3a>
        reg |= 1 << 5;
 8001b22:	4313      	orrs	r3, r2
    } else {
        reg &= ~(1 << 5);
    }
    if (nrf_write_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 8001b24:	0022      	movs	r2, r4
 8001b26:	2100      	movs	r1, #0
 8001b28:	0028      	movs	r0, r5
        reg &= ~(1 << 5);
 8001b2a:	7023      	strb	r3, [r4, #0]
    if (nrf_write_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 8001b2c:	f7ff fe33 	bl	8001796 <nrf_write_register>
 8001b30:	1e43      	subs	r3, r0, #1
 8001b32:	4198      	sbcs	r0, r3
        return NRF_ERROR;
 8001b34:	b2c0      	uxtb	r0, r0
        return NRF_ERROR;
    }
    return NRF_OK;
}
 8001b36:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
        reg &= ~(1 << 5);
 8001b38:	4393      	bics	r3, r2
 8001b3a:	e7f3      	b.n	8001b24 <nrf_enable_tx_data_sent_irq+0x26>

08001b3c <nrf_enable_max_retransmit_irq>:

NRF_RESULT nrf_enable_max_retransmit_irq(nrf24l01* dev, bool activate) {
 8001b3c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    uint8_t reg = 0;
 8001b3e:	466b      	mov	r3, sp
NRF_RESULT nrf_enable_max_retransmit_irq(nrf24l01* dev, bool activate) {
 8001b40:	000e      	movs	r6, r1
    uint8_t reg = 0;
 8001b42:	2100      	movs	r1, #0
 8001b44:	1ddc      	adds	r4, r3, #7
    if (nrf_read_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 8001b46:	0022      	movs	r2, r4
NRF_RESULT nrf_enable_max_retransmit_irq(nrf24l01* dev, bool activate) {
 8001b48:	0005      	movs	r5, r0
    uint8_t reg = 0;
 8001b4a:	7021      	strb	r1, [r4, #0]
    if (nrf_read_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 8001b4c:	f7ff fe14 	bl	8001778 <nrf_read_register>
 8001b50:	0003      	movs	r3, r0
        return NRF_ERROR;
 8001b52:	2001      	movs	r0, #1
    if (nrf_read_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d10d      	bne.n	8001b74 <nrf_enable_max_retransmit_irq+0x38>
 8001b58:	7823      	ldrb	r3, [r4, #0]
 8001b5a:	2210      	movs	r2, #16
    }
    if (!activate) {
 8001b5c:	2e00      	cmp	r6, #0
 8001b5e:	d10a      	bne.n	8001b76 <nrf_enable_max_retransmit_irq+0x3a>
        reg |= 1 << 4;
 8001b60:	4313      	orrs	r3, r2
    } else {
        reg &= ~(1 << 4);
    }
    if (nrf_write_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 8001b62:	0022      	movs	r2, r4
 8001b64:	2100      	movs	r1, #0
 8001b66:	0028      	movs	r0, r5
        reg &= ~(1 << 4);
 8001b68:	7023      	strb	r3, [r4, #0]
    if (nrf_write_register(dev, NRF_CONFIG, &reg) != NRF_OK) {
 8001b6a:	f7ff fe14 	bl	8001796 <nrf_write_register>
 8001b6e:	1e43      	subs	r3, r0, #1
 8001b70:	4198      	sbcs	r0, r3
        return NRF_ERROR;
 8001b72:	b2c0      	uxtb	r0, r0
        return NRF_ERROR;
    }
    return NRF_OK;
}
 8001b74:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
        reg &= ~(1 << 4);
 8001b76:	4393      	bics	r3, r2
 8001b78:	e7f3      	b.n	8001b62 <nrf_enable_max_retransmit_irq+0x26>

08001b7a <nrf_set_rx_address_p0>:

NRF_RESULT nrf_set_rx_address_p0(nrf24l01* dev, const uint8_t* address) {
    uint8_t rx[5];
    if (nrf_send_command(dev, NRF_CMD_W_REGISTER | NRF_RX_ADDR_P0, address, rx,
 8001b7a:	2305      	movs	r3, #5
NRF_RESULT nrf_set_rx_address_p0(nrf24l01* dev, const uint8_t* address) {
 8001b7c:	b530      	push	{r4, r5, lr}
 8001b7e:	b085      	sub	sp, #20
 8001b80:	000d      	movs	r5, r1
    if (nrf_send_command(dev, NRF_CMD_W_REGISTER | NRF_RX_ADDR_P0, address, rx,
 8001b82:	9300      	str	r3, [sp, #0]
 8001b84:	000a      	movs	r2, r1
 8001b86:	ab02      	add	r3, sp, #8
 8001b88:	212a      	movs	r1, #42	; 0x2a
NRF_RESULT nrf_set_rx_address_p0(nrf24l01* dev, const uint8_t* address) {
 8001b8a:	0004      	movs	r4, r0
    if (nrf_send_command(dev, NRF_CMD_W_REGISTER | NRF_RX_ADDR_P0, address, rx,
 8001b8c:	f7ff fdb2 	bl	80016f4 <nrf_send_command>
 8001b90:	2800      	cmp	r0, #0
 8001b92:	d102      	bne.n	8001b9a <nrf_set_rx_address_p0+0x20>
                         5) != NRF_OK) {
        return NRF_ERROR;
    }
    dev->config.rx_address = address;
 8001b94:	60a5      	str	r5, [r4, #8]
    return NRF_OK;
}
 8001b96:	b005      	add	sp, #20
 8001b98:	bd30      	pop	{r4, r5, pc}
        return NRF_ERROR;
 8001b9a:	2001      	movs	r0, #1
 8001b9c:	e7fb      	b.n	8001b96 <nrf_set_rx_address_p0+0x1c>

08001b9e <nrf_set_rx_address_p1>:

NRF_RESULT nrf_set_rx_address_p1(nrf24l01* dev, const uint8_t* address) {
    uint8_t rx[5];
    if (nrf_send_command(dev, NRF_CMD_W_REGISTER | NRF_RX_ADDR_P1, address, rx,
 8001b9e:	2305      	movs	r3, #5
NRF_RESULT nrf_set_rx_address_p1(nrf24l01* dev, const uint8_t* address) {
 8001ba0:	b530      	push	{r4, r5, lr}
 8001ba2:	b085      	sub	sp, #20
 8001ba4:	000d      	movs	r5, r1
    if (nrf_send_command(dev, NRF_CMD_W_REGISTER | NRF_RX_ADDR_P1, address, rx,
 8001ba6:	9300      	str	r3, [sp, #0]
 8001ba8:	000a      	movs	r2, r1
 8001baa:	ab02      	add	r3, sp, #8
 8001bac:	212b      	movs	r1, #43	; 0x2b
NRF_RESULT nrf_set_rx_address_p1(nrf24l01* dev, const uint8_t* address) {
 8001bae:	0004      	movs	r4, r0
    if (nrf_send_command(dev, NRF_CMD_W_REGISTER | NRF_RX_ADDR_P1, address, rx,
 8001bb0:	f7ff fda0 	bl	80016f4 <nrf_send_command>
 8001bb4:	2800      	cmp	r0, #0
 8001bb6:	d102      	bne.n	8001bbe <nrf_set_rx_address_p1+0x20>
                         5) != NRF_OK) {
        return NRF_ERROR;
    }
    dev->config.rx_address = address;
 8001bb8:	60a5      	str	r5, [r4, #8]
    return NRF_OK;
}
 8001bba:	b005      	add	sp, #20
 8001bbc:	bd30      	pop	{r4, r5, pc}
        return NRF_ERROR;
 8001bbe:	2001      	movs	r0, #1
 8001bc0:	e7fb      	b.n	8001bba <nrf_set_rx_address_p1+0x1c>

08001bc2 <nrf_set_tx_address>:

NRF_RESULT nrf_set_tx_address(nrf24l01* dev, const uint8_t* address) {
    uint8_t rx[5];
    if (nrf_send_command(dev, NRF_CMD_W_REGISTER | NRF_TX_ADDR, address, rx,
 8001bc2:	2305      	movs	r3, #5
NRF_RESULT nrf_set_tx_address(nrf24l01* dev, const uint8_t* address) {
 8001bc4:	b530      	push	{r4, r5, lr}
 8001bc6:	b085      	sub	sp, #20
 8001bc8:	000d      	movs	r5, r1
    if (nrf_send_command(dev, NRF_CMD_W_REGISTER | NRF_TX_ADDR, address, rx,
 8001bca:	9300      	str	r3, [sp, #0]
 8001bcc:	000a      	movs	r2, r1
 8001bce:	ab02      	add	r3, sp, #8
 8001bd0:	2130      	movs	r1, #48	; 0x30
NRF_RESULT nrf_set_tx_address(nrf24l01* dev, const uint8_t* address) {
 8001bd2:	0004      	movs	r4, r0
    if (nrf_send_command(dev, NRF_CMD_W_REGISTER | NRF_TX_ADDR, address, rx,
 8001bd4:	f7ff fd8e 	bl	80016f4 <nrf_send_command>
 8001bd8:	2800      	cmp	r0, #0
 8001bda:	d102      	bne.n	8001be2 <nrf_set_tx_address+0x20>
                         5) != NRF_OK) {
        return NRF_ERROR;
    }
    dev->config.tx_address = address;
 8001bdc:	60e5      	str	r5, [r4, #12]
    return NRF_OK;
}
 8001bde:	b005      	add	sp, #20
 8001be0:	bd30      	pop	{r4, r5, pc}
        return NRF_ERROR;
 8001be2:	2001      	movs	r0, #1
 8001be4:	e7fb      	b.n	8001bde <nrf_set_tx_address+0x1c>

08001be6 <nrf_set_rx_payload_width_p0>:

NRF_RESULT nrf_set_rx_payload_width_p0(nrf24l01* dev, uint8_t width) {
 8001be6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001be8:	466b      	mov	r3, sp
 8001bea:	1ddd      	adds	r5, r3, #7
    width &= 0x3F;
 8001bec:	233f      	movs	r3, #63	; 0x3f
 8001bee:	4019      	ands	r1, r3
 8001bf0:	7029      	strb	r1, [r5, #0]
    if (nrf_write_register(dev, NRF_RX_PW_P0, &width) != NRF_OK) {
 8001bf2:	002a      	movs	r2, r5
 8001bf4:	2111      	movs	r1, #17
NRF_RESULT nrf_set_rx_payload_width_p0(nrf24l01* dev, uint8_t width) {
 8001bf6:	0004      	movs	r4, r0
    if (nrf_write_register(dev, NRF_RX_PW_P0, &width) != NRF_OK) {
 8001bf8:	f7ff fdcd 	bl	8001796 <nrf_write_register>
 8001bfc:	2800      	cmp	r0, #0
 8001bfe:	d003      	beq.n	8001c08 <nrf_set_rx_payload_width_p0+0x22>
        dev->config.payload_length = 0;
 8001c00:	2300      	movs	r3, #0
        return NRF_ERROR;
 8001c02:	2001      	movs	r0, #1
        dev->config.payload_length = 0;
 8001c04:	7123      	strb	r3, [r4, #4]
    }
    dev->config.payload_length = width;
    return NRF_OK;
}
 8001c06:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    dev->config.payload_length = width;
 8001c08:	782b      	ldrb	r3, [r5, #0]
 8001c0a:	7123      	strb	r3, [r4, #4]
    return NRF_OK;
 8001c0c:	e7fb      	b.n	8001c06 <nrf_set_rx_payload_width_p0+0x20>

08001c0e <nrf_set_rx_payload_width_p1>:

NRF_RESULT nrf_set_rx_payload_width_p1(nrf24l01* dev, uint8_t width) {
 8001c0e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001c10:	466b      	mov	r3, sp
 8001c12:	1ddd      	adds	r5, r3, #7
    width &= 0x3F;
 8001c14:	233f      	movs	r3, #63	; 0x3f
 8001c16:	4019      	ands	r1, r3
 8001c18:	7029      	strb	r1, [r5, #0]
    if (nrf_write_register(dev, NRF_RX_PW_P1, &width) != NRF_OK) {
 8001c1a:	002a      	movs	r2, r5
 8001c1c:	2112      	movs	r1, #18
NRF_RESULT nrf_set_rx_payload_width_p1(nrf24l01* dev, uint8_t width) {
 8001c1e:	0004      	movs	r4, r0
    if (nrf_write_register(dev, NRF_RX_PW_P1, &width) != NRF_OK) {
 8001c20:	f7ff fdb9 	bl	8001796 <nrf_write_register>
 8001c24:	2800      	cmp	r0, #0
 8001c26:	d003      	beq.n	8001c30 <nrf_set_rx_payload_width_p1+0x22>
        dev->config.payload_length = 0;
 8001c28:	2300      	movs	r3, #0
        return NRF_ERROR;
 8001c2a:	2001      	movs	r0, #1
        dev->config.payload_length = 0;
 8001c2c:	7123      	strb	r3, [r4, #4]
    }
    dev->config.payload_length = width;
    return NRF_OK;
}
 8001c2e:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    dev->config.payload_length = width;
 8001c30:	782b      	ldrb	r3, [r5, #0]
 8001c32:	7123      	strb	r3, [r4, #4]
    return NRF_OK;
 8001c34:	e7fb      	b.n	8001c2e <nrf_set_rx_payload_width_p1+0x20>

08001c36 <nrf_init>:
NRF_RESULT nrf_init(nrf24l01* dev, nrf24l01_config* config) {
 8001c36:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001c38:	0004      	movs	r4, r0
    dev->config = *config;
 8001c3a:	2234      	movs	r2, #52	; 0x34
 8001c3c:	f000 f9a2 	bl	8001f84 <memcpy>
    ce_reset(dev);
 8001c40:	0020      	movs	r0, r4
 8001c42:	f7ff fd49 	bl	80016d8 <ce_reset>
    HAL_GPIO_WritePin(dev->config.csn_port, dev->config.csn_pin,
 8001c46:	8c21      	ldrh	r1, [r4, #32]
 8001c48:	2200      	movs	r2, #0
 8001c4a:	69e0      	ldr	r0, [r4, #28]
 8001c4c:	f7fe fd5c 	bl	8000708 <HAL_GPIO_WritePin>
    nrf_power_up(dev, true);
 8001c50:	2101      	movs	r1, #1
 8001c52:	0020      	movs	r0, r4
 8001c54:	f7ff fef5 	bl	8001a42 <nrf_power_up>
    uint8_t config_reg = 0;
 8001c58:	466b      	mov	r3, sp
 8001c5a:	1ddd      	adds	r5, r3, #7
 8001c5c:	2300      	movs	r3, #0
    while ((config_reg & 2) == 0) { // wait for powerup
 8001c5e:	2602      	movs	r6, #2
    uint8_t config_reg = 0;
 8001c60:	702b      	strb	r3, [r5, #0]
    while ((config_reg & 2) == 0) { // wait for powerup
 8001c62:	7829      	ldrb	r1, [r5, #0]
 8001c64:	4031      	ands	r1, r6
 8001c66:	d052      	beq.n	8001d0e <nrf_init+0xd8>
    nrf_set_rx_payload_width_p0(dev, dev->config.payload_length);
 8001c68:	7921      	ldrb	r1, [r4, #4]
 8001c6a:	0020      	movs	r0, r4
 8001c6c:	f7ff ffbb 	bl	8001be6 <nrf_set_rx_payload_width_p0>
    nrf_set_rx_payload_width_p1(dev, dev->config.payload_length);
 8001c70:	7921      	ldrb	r1, [r4, #4]
 8001c72:	0020      	movs	r0, r4
 8001c74:	f7ff ffcb 	bl	8001c0e <nrf_set_rx_payload_width_p1>
    nrf_set_rx_address_p1(dev, dev->config.rx_address);
 8001c78:	68a1      	ldr	r1, [r4, #8]
 8001c7a:	0020      	movs	r0, r4
 8001c7c:	f7ff ff8f 	bl	8001b9e <nrf_set_rx_address_p1>
    nrf_set_rx_address_p0(dev, dev->config.tx_address);
 8001c80:	68e1      	ldr	r1, [r4, #12]
 8001c82:	0020      	movs	r0, r4
 8001c84:	f7ff ff79 	bl	8001b7a <nrf_set_rx_address_p0>
    nrf_set_tx_address(dev, dev->config.tx_address);
 8001c88:	68e1      	ldr	r1, [r4, #12]
 8001c8a:	0020      	movs	r0, r4
 8001c8c:	f7ff ff99 	bl	8001bc2 <nrf_set_tx_address>
    nrf_enable_rx_data_ready_irq(dev, 1);
 8001c90:	2101      	movs	r1, #1
 8001c92:	0020      	movs	r0, r4
 8001c94:	f7ff ff14 	bl	8001ac0 <nrf_enable_rx_data_ready_irq>
    nrf_enable_tx_data_sent_irq(dev, 1);
 8001c98:	2101      	movs	r1, #1
 8001c9a:	0020      	movs	r0, r4
 8001c9c:	f7ff ff2f 	bl	8001afe <nrf_enable_tx_data_sent_irq>
    nrf_enable_max_retransmit_irq(dev, 1);
 8001ca0:	2101      	movs	r1, #1
 8001ca2:	0020      	movs	r0, r4
 8001ca4:	f7ff ff4a 	bl	8001b3c <nrf_enable_max_retransmit_irq>
    nrf_enable_crc(dev, 1);
 8001ca8:	2101      	movs	r1, #1
 8001caa:	0020      	movs	r0, r4
 8001cac:	f7ff fe8a 	bl	80019c4 <nrf_enable_crc>
    nrf_set_crc_width(dev, dev->config.crc_width);
 8001cb0:	78a1      	ldrb	r1, [r4, #2]
 8001cb2:	0020      	movs	r0, r4
 8001cb4:	f7ff fea5 	bl	8001a02 <nrf_set_crc_width>
    nrf_set_address_width(dev, dev->config.addr_width);
 8001cb8:	78e1      	ldrb	r1, [r4, #3]
 8001cba:	0020      	movs	r0, r4
 8001cbc:	f7ff fe3f 	bl	800193e <nrf_set_address_width>
    nrf_set_rf_channel(dev, dev->config.rf_channel);
 8001cc0:	79e1      	ldrb	r1, [r4, #7]
 8001cc2:	0020      	movs	r0, r4
 8001cc4:	f7ff fde1 	bl	800188a <nrf_set_rf_channel>
    nrf_set_data_rate(dev, dev->config.data_rate);
 8001cc8:	7821      	ldrb	r1, [r4, #0]
 8001cca:	0020      	movs	r0, r4
 8001ccc:	f7ff fd98 	bl	8001800 <nrf_set_data_rate>
    nrf_set_retransmittion_count(dev, dev->config.retransmit_count);
 8001cd0:	7961      	ldrb	r1, [r4, #5]
 8001cd2:	0020      	movs	r0, r4
 8001cd4:	f7ff fdf6 	bl	80018c4 <nrf_set_retransmittion_count>
    nrf_set_retransmittion_delay(dev, dev->config.retransmit_delay);
 8001cd8:	79a1      	ldrb	r1, [r4, #6]
 8001cda:	0020      	movs	r0, r4
 8001cdc:	f7ff fe10 	bl	8001900 <nrf_set_retransmittion_delay>
    nrf_set_rx_pipes(dev, 0x03);
 8001ce0:	2103      	movs	r1, #3
 8001ce2:	0020      	movs	r0, r4
 8001ce4:	f7ff fe47 	bl	8001976 <nrf_set_rx_pipes>
    nrf_enable_auto_ack(dev, 0);
 8001ce8:	2100      	movs	r1, #0
 8001cea:	0020      	movs	r0, r4
 8001cec:	f7ff fe4e 	bl	800198c <nrf_enable_auto_ack>
    nrf_clear_interrupts(dev);
 8001cf0:	0020      	movs	r0, r4
 8001cf2:	f7ff fdaf 	bl	8001854 <nrf_clear_interrupts>
    nrf_rx_tx_control(dev, NRF_STATE_RX);
 8001cf6:	2101      	movs	r1, #1
 8001cf8:	0020      	movs	r0, r4
 8001cfa:	f7ff fec1 	bl	8001a80 <nrf_rx_tx_control>
    nrf_flush_rx(dev);
 8001cfe:	0020      	movs	r0, r4
 8001d00:	f7ff fd6d 	bl	80017de <nrf_flush_rx>
    ce_set(dev);
 8001d04:	0020      	movs	r0, r4
 8001d06:	f7ff fcee 	bl	80016e6 <ce_set>
}
 8001d0a:	2000      	movs	r0, #0
 8001d0c:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
        nrf_read_register(dev, NRF_CONFIG, &config_reg);
 8001d0e:	002a      	movs	r2, r5
 8001d10:	0020      	movs	r0, r4
 8001d12:	f7ff fd31 	bl	8001778 <nrf_read_register>
 8001d16:	e7a4      	b.n	8001c62 <nrf_init+0x2c>

08001d18 <nrf_send_packet>:

NRF_RESULT nrf_send_packet(nrf24l01* dev, const uint8_t* data) {
 8001d18:	b570      	push	{r4, r5, r6, lr}

    dev->tx_busy = 1;
 8001d1a:	0005      	movs	r5, r0
 8001d1c:	2301      	movs	r3, #1
NRF_RESULT nrf_send_packet(nrf24l01* dev, const uint8_t* data) {
 8001d1e:	0004      	movs	r4, r0
 8001d20:	000e      	movs	r6, r1
    dev->tx_busy = 1;
 8001d22:	3534      	adds	r5, #52	; 0x34
 8001d24:	702b      	strb	r3, [r5, #0]

    ce_reset(dev);
 8001d26:	f7ff fcd7 	bl	80016d8 <ce_reset>
    nrf_rx_tx_control(dev, NRF_STATE_TX);
 8001d2a:	2100      	movs	r1, #0
 8001d2c:	0020      	movs	r0, r4
 8001d2e:	f7ff fea7 	bl	8001a80 <nrf_rx_tx_control>
    nrf_write_tx_payload(dev, data);
 8001d32:	0031      	movs	r1, r6
 8001d34:	0020      	movs	r0, r4
 8001d36:	f7ff fd3e 	bl	80017b6 <nrf_write_tx_payload>
    ce_set(dev);
 8001d3a:	0020      	movs	r0, r4
 8001d3c:	f7ff fcd3 	bl	80016e6 <ce_set>

    while (dev->tx_busy == 1) {} // wait for end of transmittion
 8001d40:	782b      	ldrb	r3, [r5, #0]
 8001d42:	2b01      	cmp	r3, #1
 8001d44:	d0fc      	beq.n	8001d40 <nrf_send_packet+0x28>

    return dev->tx_result;
 8001d46:	3435      	adds	r4, #53	; 0x35
 8001d48:	7820      	ldrb	r0, [r4, #0]
 8001d4a:	b2c0      	uxtb	r0, r0
}
 8001d4c:	bd70      	pop	{r4, r5, r6, pc}
	...

08001d50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d50:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d52:	2001      	movs	r0, #1
 8001d54:	4b11      	ldr	r3, [pc, #68]	; (8001d9c <HAL_MspInit+0x4c>)
 8001d56:	6999      	ldr	r1, [r3, #24]
 8001d58:	4301      	orrs	r1, r0
 8001d5a:	6199      	str	r1, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d5c:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d5e:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d60:	0549      	lsls	r1, r1, #21
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d62:	4002      	ands	r2, r0
 8001d64:	9200      	str	r2, [sp, #0]
 8001d66:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d68:	69da      	ldr	r2, [r3, #28]

  /* System interrupt init*/
  /* SVC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 8001d6a:	3806      	subs	r0, #6
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d6c:	430a      	orrs	r2, r1
 8001d6e:	61da      	str	r2, [r3, #28]
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 8001d70:	2200      	movs	r2, #0
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d72:	69db      	ldr	r3, [r3, #28]
 8001d74:	400b      	ands	r3, r1
 8001d76:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 8001d78:	0011      	movs	r1, r2
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d7a:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 8001d7c:	f7fe fbb6 	bl	80004ec <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8001d80:	2200      	movs	r2, #0
 8001d82:	2002      	movs	r0, #2
 8001d84:	0011      	movs	r1, r2
 8001d86:	4240      	negs	r0, r0
 8001d88:	f7fe fbb0 	bl	80004ec <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	2001      	movs	r0, #1
 8001d90:	0011      	movs	r1, r2
 8001d92:	4240      	negs	r0, r0
 8001d94:	f7fe fbaa 	bl	80004ec <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d98:	bd07      	pop	{r0, r1, r2, pc}
 8001d9a:	46c0      	nop			; (mov r8, r8)
 8001d9c:	40021000 	.word	0x40021000

08001da0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001da0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 8001da2:	4b0d      	ldr	r3, [pc, #52]	; (8001dd8 <HAL_ADC_MspInit+0x38>)
 8001da4:	6802      	ldr	r2, [r0, #0]
 8001da6:	429a      	cmp	r2, r3
 8001da8:	d113      	bne.n	8001dd2 <HAL_ADC_MspInit+0x32>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001daa:	2080      	movs	r0, #128	; 0x80
 8001dac:	4a0b      	ldr	r2, [pc, #44]	; (8001ddc <HAL_ADC_MspInit+0x3c>)
 8001dae:	0080      	lsls	r0, r0, #2
 8001db0:	6991      	ldr	r1, [r2, #24]
 8001db2:	4301      	orrs	r1, r0
 8001db4:	6191      	str	r1, [r2, #24]
 8001db6:	6993      	ldr	r3, [r2, #24]
    PA1     ------> ADC_IN1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001db8:	a901      	add	r1, sp, #4
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001dba:	4003      	ands	r3, r0
 8001dbc:	9300      	str	r3, [sp, #0]
 8001dbe:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001dc0:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dc2:	2090      	movs	r0, #144	; 0x90
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001dc4:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001dc6:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc8:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dca:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dcc:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dce:	f7fe fbeb 	bl	80005a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001dd2:	b007      	add	sp, #28
 8001dd4:	bd00      	pop	{pc}
 8001dd6:	46c0      	nop			; (mov r8, r8)
 8001dd8:	40012400 	.word	0x40012400
 8001ddc:	40021000 	.word	0x40021000

08001de0 <HAL_SPI_MspInit>:
  }

}

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001de0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hspi->Instance==SPI1)
 8001de2:	4b0f      	ldr	r3, [pc, #60]	; (8001e20 <HAL_SPI_MspInit+0x40>)
 8001de4:	6802      	ldr	r2, [r0, #0]
 8001de6:	429a      	cmp	r2, r3
 8001de8:	d117      	bne.n	8001e1a <HAL_SPI_MspInit+0x3a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001dea:	2080      	movs	r0, #128	; 0x80
 8001dec:	4a0d      	ldr	r2, [pc, #52]	; (8001e24 <HAL_SPI_MspInit+0x44>)
 8001dee:	0140      	lsls	r0, r0, #5
 8001df0:	6991      	ldr	r1, [r2, #24]
 8001df2:	4301      	orrs	r1, r0
 8001df4:	6191      	str	r1, [r2, #24]
 8001df6:	6993      	ldr	r3, [r2, #24]
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001df8:	2203      	movs	r2, #3
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001dfa:	4003      	ands	r3, r0
 8001dfc:	9300      	str	r3, [sp, #0]
 8001dfe:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001e00:	23e0      	movs	r3, #224	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e02:	2090      	movs	r0, #144	; 0x90
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001e04:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e06:	3bde      	subs	r3, #222	; 0xde
 8001e08:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0a:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e0c:	a901      	add	r1, sp, #4
 8001e0e:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e10:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e12:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8001e14:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e16:	f7fe fbc7 	bl	80005a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001e1a:	b007      	add	sp, #28
 8001e1c:	bd00      	pop	{pc}
 8001e1e:	46c0      	nop			; (mov r8, r8)
 8001e20:	40013000 	.word	0x40013000
 8001e24:	40021000 	.word	0x40021000

08001e28 <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e28:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 8001e2a:	4b10      	ldr	r3, [pc, #64]	; (8001e6c <HAL_UART_MspInit+0x44>)
 8001e2c:	6802      	ldr	r2, [r0, #0]
 8001e2e:	429a      	cmp	r2, r3
 8001e30:	d119      	bne.n	8001e66 <HAL_UART_MspInit+0x3e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e32:	2080      	movs	r0, #128	; 0x80
 8001e34:	4a0e      	ldr	r2, [pc, #56]	; (8001e70 <HAL_UART_MspInit+0x48>)
 8001e36:	01c0      	lsls	r0, r0, #7
 8001e38:	6991      	ldr	r1, [r2, #24]
 8001e3a:	4301      	orrs	r1, r0
 8001e3c:	6191      	str	r1, [r2, #24]
 8001e3e:	6993      	ldr	r3, [r2, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e40:	a901      	add	r1, sp, #4
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e42:	4003      	ands	r3, r0
 8001e44:	9300      	str	r3, [sp, #0]
 8001e46:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001e48:	23c0      	movs	r3, #192	; 0xc0
 8001e4a:	00db      	lsls	r3, r3, #3
 8001e4c:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e4e:	2302      	movs	r3, #2
 8001e50:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e52:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e54:	2090      	movs	r0, #144	; 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e56:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e58:	3303      	adds	r3, #3
 8001e5a:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e5c:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8001e5e:	3b02      	subs	r3, #2
 8001e60:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e62:	f7fe fba1 	bl	80005a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001e66:	b007      	add	sp, #28
 8001e68:	bd00      	pop	{pc}
 8001e6a:	46c0      	nop			; (mov r8, r8)
 8001e6c:	40013800 	.word	0x40013800
 8001e70:	40021000 	.word	0x40021000

08001e74 <NMI_Handler>:
 8001e74:	4770      	bx	lr

08001e76 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8001e76:	e7fe      	b.n	8001e76 <HardFault_Handler>

08001e78 <SVC_Handler>:
 8001e78:	4770      	bx	lr

08001e7a <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e7a:	4770      	bx	lr

08001e7c <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8001e7c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e7e:	f7fe f9fb 	bl	8000278 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8001e82:	f7fe fb8c 	bl	800059e <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e86:	bd10      	pop	{r4, pc}

08001e88 <SystemInit>:
  */
void SystemInit(void)
{
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 8001e88:	2101      	movs	r1, #1
 8001e8a:	4b11      	ldr	r3, [pc, #68]	; (8001ed0 <SystemInit+0x48>)
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 8001e8c:	4811      	ldr	r0, [pc, #68]	; (8001ed4 <SystemInit+0x4c>)
  RCC->CR |= (uint32_t)0x00000001U;
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	430a      	orrs	r2, r1
 8001e92:	601a      	str	r2, [r3, #0]
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 8001e94:	685a      	ldr	r2, [r3, #4]
 8001e96:	4002      	ands	r2, r0
 8001e98:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	480e      	ldr	r0, [pc, #56]	; (8001ed8 <SystemInit+0x50>)
 8001e9e:	4002      	ands	r2, r0
 8001ea0:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8001ea2:	681a      	ldr	r2, [r3, #0]
 8001ea4:	480d      	ldr	r0, [pc, #52]	; (8001edc <SystemInit+0x54>)
 8001ea6:	4002      	ands	r2, r0
 8001ea8:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 8001eaa:	685a      	ldr	r2, [r3, #4]
 8001eac:	480c      	ldr	r0, [pc, #48]	; (8001ee0 <SystemInit+0x58>)
 8001eae:	4002      	ands	r2, r0

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8001eb0:	200f      	movs	r0, #15
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 8001eb2:	605a      	str	r2, [r3, #4]
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8001eb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001eb6:	4382      	bics	r2, r0
 8001eb8:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F091xC) || defined (STM32F098xx)
  /* Reset USART3SW[1:0], USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFF0FEACU;
#elif defined (STM32F030x6) || defined (STM32F030x8) || defined (STM32F031x6) || defined (STM32F038xx) || defined (STM32F030xC)
  /* Reset USART1SW[1:0], I2C1SW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEECU;
 8001eba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ebc:	4809      	ldr	r0, [pc, #36]	; (8001ee4 <SystemInit+0x5c>)
 8001ebe:	4002      	ands	r2, r0
 8001ec0:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 8001ec2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ec4:	438a      	bics	r2, r1
 8001ec6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8001ec8:	2200      	movs	r2, #0
 8001eca:	609a      	str	r2, [r3, #8]

}
 8001ecc:	4770      	bx	lr
 8001ece:	46c0      	nop			; (mov r8, r8)
 8001ed0:	40021000 	.word	0x40021000
 8001ed4:	08ffb80c 	.word	0x08ffb80c
 8001ed8:	fef6ffff 	.word	0xfef6ffff
 8001edc:	fffbffff 	.word	0xfffbffff
 8001ee0:	ffc0ffff 	.word	0xffc0ffff
 8001ee4:	fffffeec 	.word	0xfffffeec

08001ee8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001ee8:	480d      	ldr	r0, [pc, #52]	; (8001f20 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001eea:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001eec:	480d      	ldr	r0, [pc, #52]	; (8001f24 <LoopForever+0x6>)
  ldr r1, =_edata
 8001eee:	490e      	ldr	r1, [pc, #56]	; (8001f28 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ef0:	4a0e      	ldr	r2, [pc, #56]	; (8001f2c <LoopForever+0xe>)
  movs r3, #0
 8001ef2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ef4:	e002      	b.n	8001efc <LoopCopyDataInit>

08001ef6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ef6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ef8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001efa:	3304      	adds	r3, #4

08001efc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001efc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001efe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f00:	d3f9      	bcc.n	8001ef6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f02:	4a0b      	ldr	r2, [pc, #44]	; (8001f30 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001f04:	4c0b      	ldr	r4, [pc, #44]	; (8001f34 <LoopForever+0x16>)
  movs r3, #0
 8001f06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f08:	e001      	b.n	8001f0e <LoopFillZerobss>

08001f0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f0c:	3204      	adds	r2, #4

08001f0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f10:	d3fb      	bcc.n	8001f0a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001f12:	f7ff ffb9 	bl	8001e88 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001f16:	f000 f811 	bl	8001f3c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001f1a:	f7ff fb0b 	bl	8001534 <main>

08001f1e <LoopForever>:

LoopForever:
    b LoopForever
 8001f1e:	e7fe      	b.n	8001f1e <LoopForever>
  ldr   r0, =_estack
 8001f20:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8001f24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f28:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8001f2c:	08002000 	.word	0x08002000
  ldr r2, =_sbss
 8001f30:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8001f34:	20000190 	.word	0x20000190

08001f38 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001f38:	e7fe      	b.n	8001f38 <ADC1_IRQHandler>
	...

08001f3c <__libc_init_array>:
 8001f3c:	b570      	push	{r4, r5, r6, lr}
 8001f3e:	2600      	movs	r6, #0
 8001f40:	4d0c      	ldr	r5, [pc, #48]	; (8001f74 <__libc_init_array+0x38>)
 8001f42:	4c0d      	ldr	r4, [pc, #52]	; (8001f78 <__libc_init_array+0x3c>)
 8001f44:	1b64      	subs	r4, r4, r5
 8001f46:	10a4      	asrs	r4, r4, #2
 8001f48:	42a6      	cmp	r6, r4
 8001f4a:	d109      	bne.n	8001f60 <__libc_init_array+0x24>
 8001f4c:	2600      	movs	r6, #0
 8001f4e:	f000 f823 	bl	8001f98 <_init>
 8001f52:	4d0a      	ldr	r5, [pc, #40]	; (8001f7c <__libc_init_array+0x40>)
 8001f54:	4c0a      	ldr	r4, [pc, #40]	; (8001f80 <__libc_init_array+0x44>)
 8001f56:	1b64      	subs	r4, r4, r5
 8001f58:	10a4      	asrs	r4, r4, #2
 8001f5a:	42a6      	cmp	r6, r4
 8001f5c:	d105      	bne.n	8001f6a <__libc_init_array+0x2e>
 8001f5e:	bd70      	pop	{r4, r5, r6, pc}
 8001f60:	00b3      	lsls	r3, r6, #2
 8001f62:	58eb      	ldr	r3, [r5, r3]
 8001f64:	4798      	blx	r3
 8001f66:	3601      	adds	r6, #1
 8001f68:	e7ee      	b.n	8001f48 <__libc_init_array+0xc>
 8001f6a:	00b3      	lsls	r3, r6, #2
 8001f6c:	58eb      	ldr	r3, [r5, r3]
 8001f6e:	4798      	blx	r3
 8001f70:	3601      	adds	r6, #1
 8001f72:	e7f2      	b.n	8001f5a <__libc_init_array+0x1e>
 8001f74:	08001ff8 	.word	0x08001ff8
 8001f78:	08001ff8 	.word	0x08001ff8
 8001f7c:	08001ff8 	.word	0x08001ff8
 8001f80:	08001ffc 	.word	0x08001ffc

08001f84 <memcpy>:
 8001f84:	2300      	movs	r3, #0
 8001f86:	b510      	push	{r4, lr}
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	d100      	bne.n	8001f8e <memcpy+0xa>
 8001f8c:	bd10      	pop	{r4, pc}
 8001f8e:	5ccc      	ldrb	r4, [r1, r3]
 8001f90:	54c4      	strb	r4, [r0, r3]
 8001f92:	3301      	adds	r3, #1
 8001f94:	e7f8      	b.n	8001f88 <memcpy+0x4>
	...

08001f98 <_init>:
 8001f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f9a:	46c0      	nop			; (mov r8, r8)
 8001f9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f9e:	bc08      	pop	{r3}
 8001fa0:	469e      	mov	lr, r3
 8001fa2:	4770      	bx	lr

08001fa4 <_fini>:
 8001fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fa6:	46c0      	nop			; (mov r8, r8)
 8001fa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001faa:	bc08      	pop	{r3}
 8001fac:	469e      	mov	lr, r3
 8001fae:	4770      	bx	lr
