
RC_CONTORLER_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000659c  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000011c4  08006780  08006780  00016780  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08007944  08007944  00017944  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08007948  08007948  00017948  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000088  20000000  0800794c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000880  20000088  080079d4  00020088  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000908  080079d4  00020908  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
  9 .debug_info   00022258  00000000  00000000  000200b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000043fc  00000000  00000000  00042309  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000e502  00000000  00000000  00046705  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001280  00000000  00000000  00054c08  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000019f8  00000000  00000000  00055e88  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000ae81  00000000  00000000  00057880  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00006679  00000000  00000000  00062701  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00068d7a  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00004408  00000000  00000000  00068df8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000088 	.word	0x20000088
 8000200:	00000000 	.word	0x00000000
 8000204:	08006768 	.word	0x08006768

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	2000008c 	.word	0x2000008c
 8000220:	08006768 	.word	0x08006768

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <__aeabi_frsub>:
 8000234:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000238:	e002      	b.n	8000240 <__addsf3>
 800023a:	bf00      	nop

0800023c <__aeabi_fsub>:
 800023c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000240 <__addsf3>:
 8000240:	0042      	lsls	r2, r0, #1
 8000242:	bf1f      	itttt	ne
 8000244:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000248:	ea92 0f03 	teqne	r2, r3
 800024c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000250:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000254:	d06a      	beq.n	800032c <__addsf3+0xec>
 8000256:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800025a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800025e:	bfc1      	itttt	gt
 8000260:	18d2      	addgt	r2, r2, r3
 8000262:	4041      	eorgt	r1, r0
 8000264:	4048      	eorgt	r0, r1
 8000266:	4041      	eorgt	r1, r0
 8000268:	bfb8      	it	lt
 800026a:	425b      	neglt	r3, r3
 800026c:	2b19      	cmp	r3, #25
 800026e:	bf88      	it	hi
 8000270:	4770      	bxhi	lr
 8000272:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000276:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800027a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800027e:	bf18      	it	ne
 8000280:	4240      	negne	r0, r0
 8000282:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000286:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800028a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800028e:	bf18      	it	ne
 8000290:	4249      	negne	r1, r1
 8000292:	ea92 0f03 	teq	r2, r3
 8000296:	d03f      	beq.n	8000318 <__addsf3+0xd8>
 8000298:	f1a2 0201 	sub.w	r2, r2, #1
 800029c:	fa41 fc03 	asr.w	ip, r1, r3
 80002a0:	eb10 000c 	adds.w	r0, r0, ip
 80002a4:	f1c3 0320 	rsb	r3, r3, #32
 80002a8:	fa01 f103 	lsl.w	r1, r1, r3
 80002ac:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80002b0:	d502      	bpl.n	80002b8 <__addsf3+0x78>
 80002b2:	4249      	negs	r1, r1
 80002b4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80002b8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80002bc:	d313      	bcc.n	80002e6 <__addsf3+0xa6>
 80002be:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80002c2:	d306      	bcc.n	80002d2 <__addsf3+0x92>
 80002c4:	0840      	lsrs	r0, r0, #1
 80002c6:	ea4f 0131 	mov.w	r1, r1, rrx
 80002ca:	f102 0201 	add.w	r2, r2, #1
 80002ce:	2afe      	cmp	r2, #254	; 0xfe
 80002d0:	d251      	bcs.n	8000376 <__addsf3+0x136>
 80002d2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80002d6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80002da:	bf08      	it	eq
 80002dc:	f020 0001 	biceq.w	r0, r0, #1
 80002e0:	ea40 0003 	orr.w	r0, r0, r3
 80002e4:	4770      	bx	lr
 80002e6:	0049      	lsls	r1, r1, #1
 80002e8:	eb40 0000 	adc.w	r0, r0, r0
 80002ec:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80002f0:	f1a2 0201 	sub.w	r2, r2, #1
 80002f4:	d1ed      	bne.n	80002d2 <__addsf3+0x92>
 80002f6:	fab0 fc80 	clz	ip, r0
 80002fa:	f1ac 0c08 	sub.w	ip, ip, #8
 80002fe:	ebb2 020c 	subs.w	r2, r2, ip
 8000302:	fa00 f00c 	lsl.w	r0, r0, ip
 8000306:	bfaa      	itet	ge
 8000308:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 800030c:	4252      	neglt	r2, r2
 800030e:	4318      	orrge	r0, r3
 8000310:	bfbc      	itt	lt
 8000312:	40d0      	lsrlt	r0, r2
 8000314:	4318      	orrlt	r0, r3
 8000316:	4770      	bx	lr
 8000318:	f092 0f00 	teq	r2, #0
 800031c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000320:	bf06      	itte	eq
 8000322:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000326:	3201      	addeq	r2, #1
 8000328:	3b01      	subne	r3, #1
 800032a:	e7b5      	b.n	8000298 <__addsf3+0x58>
 800032c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000330:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000334:	bf18      	it	ne
 8000336:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800033a:	d021      	beq.n	8000380 <__addsf3+0x140>
 800033c:	ea92 0f03 	teq	r2, r3
 8000340:	d004      	beq.n	800034c <__addsf3+0x10c>
 8000342:	f092 0f00 	teq	r2, #0
 8000346:	bf08      	it	eq
 8000348:	4608      	moveq	r0, r1
 800034a:	4770      	bx	lr
 800034c:	ea90 0f01 	teq	r0, r1
 8000350:	bf1c      	itt	ne
 8000352:	2000      	movne	r0, #0
 8000354:	4770      	bxne	lr
 8000356:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 800035a:	d104      	bne.n	8000366 <__addsf3+0x126>
 800035c:	0040      	lsls	r0, r0, #1
 800035e:	bf28      	it	cs
 8000360:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000364:	4770      	bx	lr
 8000366:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800036a:	bf3c      	itt	cc
 800036c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000370:	4770      	bxcc	lr
 8000372:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000376:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800037a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800037e:	4770      	bx	lr
 8000380:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000384:	bf16      	itet	ne
 8000386:	4608      	movne	r0, r1
 8000388:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 800038c:	4601      	movne	r1, r0
 800038e:	0242      	lsls	r2, r0, #9
 8000390:	bf06      	itte	eq
 8000392:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000396:	ea90 0f01 	teqeq	r0, r1
 800039a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 800039e:	4770      	bx	lr

080003a0 <__aeabi_ui2f>:
 80003a0:	f04f 0300 	mov.w	r3, #0
 80003a4:	e004      	b.n	80003b0 <__aeabi_i2f+0x8>
 80003a6:	bf00      	nop

080003a8 <__aeabi_i2f>:
 80003a8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80003ac:	bf48      	it	mi
 80003ae:	4240      	negmi	r0, r0
 80003b0:	ea5f 0c00 	movs.w	ip, r0
 80003b4:	bf08      	it	eq
 80003b6:	4770      	bxeq	lr
 80003b8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80003bc:	4601      	mov	r1, r0
 80003be:	f04f 0000 	mov.w	r0, #0
 80003c2:	e01c      	b.n	80003fe <__aeabi_l2f+0x2a>

080003c4 <__aeabi_ul2f>:
 80003c4:	ea50 0201 	orrs.w	r2, r0, r1
 80003c8:	bf08      	it	eq
 80003ca:	4770      	bxeq	lr
 80003cc:	f04f 0300 	mov.w	r3, #0
 80003d0:	e00a      	b.n	80003e8 <__aeabi_l2f+0x14>
 80003d2:	bf00      	nop

080003d4 <__aeabi_l2f>:
 80003d4:	ea50 0201 	orrs.w	r2, r0, r1
 80003d8:	bf08      	it	eq
 80003da:	4770      	bxeq	lr
 80003dc:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80003e0:	d502      	bpl.n	80003e8 <__aeabi_l2f+0x14>
 80003e2:	4240      	negs	r0, r0
 80003e4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003e8:	ea5f 0c01 	movs.w	ip, r1
 80003ec:	bf02      	ittt	eq
 80003ee:	4684      	moveq	ip, r0
 80003f0:	4601      	moveq	r1, r0
 80003f2:	2000      	moveq	r0, #0
 80003f4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80003f8:	bf08      	it	eq
 80003fa:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80003fe:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000402:	fabc f28c 	clz	r2, ip
 8000406:	3a08      	subs	r2, #8
 8000408:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 800040c:	db10      	blt.n	8000430 <__aeabi_l2f+0x5c>
 800040e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000412:	4463      	add	r3, ip
 8000414:	fa00 fc02 	lsl.w	ip, r0, r2
 8000418:	f1c2 0220 	rsb	r2, r2, #32
 800041c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000420:	fa20 f202 	lsr.w	r2, r0, r2
 8000424:	eb43 0002 	adc.w	r0, r3, r2
 8000428:	bf08      	it	eq
 800042a:	f020 0001 	biceq.w	r0, r0, #1
 800042e:	4770      	bx	lr
 8000430:	f102 0220 	add.w	r2, r2, #32
 8000434:	fa01 fc02 	lsl.w	ip, r1, r2
 8000438:	f1c2 0220 	rsb	r2, r2, #32
 800043c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000440:	fa21 f202 	lsr.w	r2, r1, r2
 8000444:	eb43 0002 	adc.w	r0, r3, r2
 8000448:	bf08      	it	eq
 800044a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800044e:	4770      	bx	lr

08000450 <__aeabi_fmul>:
 8000450:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000454:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000458:	bf1e      	ittt	ne
 800045a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800045e:	ea92 0f0c 	teqne	r2, ip
 8000462:	ea93 0f0c 	teqne	r3, ip
 8000466:	d06f      	beq.n	8000548 <__aeabi_fmul+0xf8>
 8000468:	441a      	add	r2, r3
 800046a:	ea80 0c01 	eor.w	ip, r0, r1
 800046e:	0240      	lsls	r0, r0, #9
 8000470:	bf18      	it	ne
 8000472:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000476:	d01e      	beq.n	80004b6 <__aeabi_fmul+0x66>
 8000478:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800047c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000480:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000484:	fba0 3101 	umull	r3, r1, r0, r1
 8000488:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800048c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000490:	bf3e      	ittt	cc
 8000492:	0049      	lslcc	r1, r1, #1
 8000494:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000498:	005b      	lslcc	r3, r3, #1
 800049a:	ea40 0001 	orr.w	r0, r0, r1
 800049e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80004a2:	2afd      	cmp	r2, #253	; 0xfd
 80004a4:	d81d      	bhi.n	80004e2 <__aeabi_fmul+0x92>
 80004a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80004aa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80004ae:	bf08      	it	eq
 80004b0:	f020 0001 	biceq.w	r0, r0, #1
 80004b4:	4770      	bx	lr
 80004b6:	f090 0f00 	teq	r0, #0
 80004ba:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80004be:	bf08      	it	eq
 80004c0:	0249      	lsleq	r1, r1, #9
 80004c2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80004c6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80004ca:	3a7f      	subs	r2, #127	; 0x7f
 80004cc:	bfc2      	ittt	gt
 80004ce:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80004d2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80004d6:	4770      	bxgt	lr
 80004d8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004dc:	f04f 0300 	mov.w	r3, #0
 80004e0:	3a01      	subs	r2, #1
 80004e2:	dc5d      	bgt.n	80005a0 <__aeabi_fmul+0x150>
 80004e4:	f112 0f19 	cmn.w	r2, #25
 80004e8:	bfdc      	itt	le
 80004ea:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80004ee:	4770      	bxle	lr
 80004f0:	f1c2 0200 	rsb	r2, r2, #0
 80004f4:	0041      	lsls	r1, r0, #1
 80004f6:	fa21 f102 	lsr.w	r1, r1, r2
 80004fa:	f1c2 0220 	rsb	r2, r2, #32
 80004fe:	fa00 fc02 	lsl.w	ip, r0, r2
 8000502:	ea5f 0031 	movs.w	r0, r1, rrx
 8000506:	f140 0000 	adc.w	r0, r0, #0
 800050a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800050e:	bf08      	it	eq
 8000510:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000514:	4770      	bx	lr
 8000516:	f092 0f00 	teq	r2, #0
 800051a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800051e:	bf02      	ittt	eq
 8000520:	0040      	lsleq	r0, r0, #1
 8000522:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000526:	3a01      	subeq	r2, #1
 8000528:	d0f9      	beq.n	800051e <__aeabi_fmul+0xce>
 800052a:	ea40 000c 	orr.w	r0, r0, ip
 800052e:	f093 0f00 	teq	r3, #0
 8000532:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000536:	bf02      	ittt	eq
 8000538:	0049      	lsleq	r1, r1, #1
 800053a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800053e:	3b01      	subeq	r3, #1
 8000540:	d0f9      	beq.n	8000536 <__aeabi_fmul+0xe6>
 8000542:	ea41 010c 	orr.w	r1, r1, ip
 8000546:	e78f      	b.n	8000468 <__aeabi_fmul+0x18>
 8000548:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800054c:	ea92 0f0c 	teq	r2, ip
 8000550:	bf18      	it	ne
 8000552:	ea93 0f0c 	teqne	r3, ip
 8000556:	d00a      	beq.n	800056e <__aeabi_fmul+0x11e>
 8000558:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800055c:	bf18      	it	ne
 800055e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000562:	d1d8      	bne.n	8000516 <__aeabi_fmul+0xc6>
 8000564:	ea80 0001 	eor.w	r0, r0, r1
 8000568:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800056c:	4770      	bx	lr
 800056e:	f090 0f00 	teq	r0, #0
 8000572:	bf17      	itett	ne
 8000574:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000578:	4608      	moveq	r0, r1
 800057a:	f091 0f00 	teqne	r1, #0
 800057e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000582:	d014      	beq.n	80005ae <__aeabi_fmul+0x15e>
 8000584:	ea92 0f0c 	teq	r2, ip
 8000588:	d101      	bne.n	800058e <__aeabi_fmul+0x13e>
 800058a:	0242      	lsls	r2, r0, #9
 800058c:	d10f      	bne.n	80005ae <__aeabi_fmul+0x15e>
 800058e:	ea93 0f0c 	teq	r3, ip
 8000592:	d103      	bne.n	800059c <__aeabi_fmul+0x14c>
 8000594:	024b      	lsls	r3, r1, #9
 8000596:	bf18      	it	ne
 8000598:	4608      	movne	r0, r1
 800059a:	d108      	bne.n	80005ae <__aeabi_fmul+0x15e>
 800059c:	ea80 0001 	eor.w	r0, r0, r1
 80005a0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80005a4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80005a8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80005ac:	4770      	bx	lr
 80005ae:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80005b2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80005b6:	4770      	bx	lr

080005b8 <__aeabi_fdiv>:
 80005b8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005bc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80005c0:	bf1e      	ittt	ne
 80005c2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80005c6:	ea92 0f0c 	teqne	r2, ip
 80005ca:	ea93 0f0c 	teqne	r3, ip
 80005ce:	d069      	beq.n	80006a4 <__aeabi_fdiv+0xec>
 80005d0:	eba2 0203 	sub.w	r2, r2, r3
 80005d4:	ea80 0c01 	eor.w	ip, r0, r1
 80005d8:	0249      	lsls	r1, r1, #9
 80005da:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80005de:	d037      	beq.n	8000650 <__aeabi_fdiv+0x98>
 80005e0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80005e4:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80005e8:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80005ec:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80005f0:	428b      	cmp	r3, r1
 80005f2:	bf38      	it	cc
 80005f4:	005b      	lslcc	r3, r3, #1
 80005f6:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80005fa:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80005fe:	428b      	cmp	r3, r1
 8000600:	bf24      	itt	cs
 8000602:	1a5b      	subcs	r3, r3, r1
 8000604:	ea40 000c 	orrcs.w	r0, r0, ip
 8000608:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 800060c:	bf24      	itt	cs
 800060e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000612:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000616:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 800061a:	bf24      	itt	cs
 800061c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000620:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000624:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000628:	bf24      	itt	cs
 800062a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800062e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000632:	011b      	lsls	r3, r3, #4
 8000634:	bf18      	it	ne
 8000636:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 800063a:	d1e0      	bne.n	80005fe <__aeabi_fdiv+0x46>
 800063c:	2afd      	cmp	r2, #253	; 0xfd
 800063e:	f63f af50 	bhi.w	80004e2 <__aeabi_fmul+0x92>
 8000642:	428b      	cmp	r3, r1
 8000644:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000648:	bf08      	it	eq
 800064a:	f020 0001 	biceq.w	r0, r0, #1
 800064e:	4770      	bx	lr
 8000650:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000654:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000658:	327f      	adds	r2, #127	; 0x7f
 800065a:	bfc2      	ittt	gt
 800065c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000660:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000664:	4770      	bxgt	lr
 8000666:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800066a:	f04f 0300 	mov.w	r3, #0
 800066e:	3a01      	subs	r2, #1
 8000670:	e737      	b.n	80004e2 <__aeabi_fmul+0x92>
 8000672:	f092 0f00 	teq	r2, #0
 8000676:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800067a:	bf02      	ittt	eq
 800067c:	0040      	lsleq	r0, r0, #1
 800067e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000682:	3a01      	subeq	r2, #1
 8000684:	d0f9      	beq.n	800067a <__aeabi_fdiv+0xc2>
 8000686:	ea40 000c 	orr.w	r0, r0, ip
 800068a:	f093 0f00 	teq	r3, #0
 800068e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000692:	bf02      	ittt	eq
 8000694:	0049      	lsleq	r1, r1, #1
 8000696:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800069a:	3b01      	subeq	r3, #1
 800069c:	d0f9      	beq.n	8000692 <__aeabi_fdiv+0xda>
 800069e:	ea41 010c 	orr.w	r1, r1, ip
 80006a2:	e795      	b.n	80005d0 <__aeabi_fdiv+0x18>
 80006a4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80006a8:	ea92 0f0c 	teq	r2, ip
 80006ac:	d108      	bne.n	80006c0 <__aeabi_fdiv+0x108>
 80006ae:	0242      	lsls	r2, r0, #9
 80006b0:	f47f af7d 	bne.w	80005ae <__aeabi_fmul+0x15e>
 80006b4:	ea93 0f0c 	teq	r3, ip
 80006b8:	f47f af70 	bne.w	800059c <__aeabi_fmul+0x14c>
 80006bc:	4608      	mov	r0, r1
 80006be:	e776      	b.n	80005ae <__aeabi_fmul+0x15e>
 80006c0:	ea93 0f0c 	teq	r3, ip
 80006c4:	d104      	bne.n	80006d0 <__aeabi_fdiv+0x118>
 80006c6:	024b      	lsls	r3, r1, #9
 80006c8:	f43f af4c 	beq.w	8000564 <__aeabi_fmul+0x114>
 80006cc:	4608      	mov	r0, r1
 80006ce:	e76e      	b.n	80005ae <__aeabi_fmul+0x15e>
 80006d0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80006d4:	bf18      	it	ne
 80006d6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80006da:	d1ca      	bne.n	8000672 <__aeabi_fdiv+0xba>
 80006dc:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80006e0:	f47f af5c 	bne.w	800059c <__aeabi_fmul+0x14c>
 80006e4:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80006e8:	f47f af3c 	bne.w	8000564 <__aeabi_fmul+0x114>
 80006ec:	e75f      	b.n	80005ae <__aeabi_fmul+0x15e>
 80006ee:	bf00      	nop

080006f0 <__aeabi_f2uiz>:
 80006f0:	0042      	lsls	r2, r0, #1
 80006f2:	d20e      	bcs.n	8000712 <__aeabi_f2uiz+0x22>
 80006f4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80006f8:	d30b      	bcc.n	8000712 <__aeabi_f2uiz+0x22>
 80006fa:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80006fe:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000702:	d409      	bmi.n	8000718 <__aeabi_f2uiz+0x28>
 8000704:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000708:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800070c:	fa23 f002 	lsr.w	r0, r3, r2
 8000710:	4770      	bx	lr
 8000712:	f04f 0000 	mov.w	r0, #0
 8000716:	4770      	bx	lr
 8000718:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800071c:	d101      	bne.n	8000722 <__aeabi_f2uiz+0x32>
 800071e:	0242      	lsls	r2, r0, #9
 8000720:	d102      	bne.n	8000728 <__aeabi_f2uiz+0x38>
 8000722:	f04f 30ff 	mov.w	r0, #4294967295
 8000726:	4770      	bx	lr
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	4770      	bx	lr
 800072e:	bf00      	nop

08000730 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000730:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000732:	4b0e      	ldr	r3, [pc, #56]	; (800076c <HAL_InitTick+0x3c>)
{
 8000734:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000736:	7818      	ldrb	r0, [r3, #0]
 8000738:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800073c:	fbb3 f3f0 	udiv	r3, r3, r0
 8000740:	4a0b      	ldr	r2, [pc, #44]	; (8000770 <HAL_InitTick+0x40>)
 8000742:	6810      	ldr	r0, [r2, #0]
 8000744:	fbb0 f0f3 	udiv	r0, r0, r3
 8000748:	f000 fad2 	bl	8000cf0 <HAL_SYSTICK_Config>
 800074c:	4604      	mov	r4, r0
 800074e:	b958      	cbnz	r0, 8000768 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000750:	2d0f      	cmp	r5, #15
 8000752:	d809      	bhi.n	8000768 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000754:	4602      	mov	r2, r0
 8000756:	4629      	mov	r1, r5
 8000758:	f04f 30ff 	mov.w	r0, #4294967295
 800075c:	f000 fa86 	bl	8000c6c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000760:	4b04      	ldr	r3, [pc, #16]	; (8000774 <HAL_InitTick+0x44>)
 8000762:	4620      	mov	r0, r4
 8000764:	601d      	str	r5, [r3, #0]
 8000766:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000768:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800076a:	bd38      	pop	{r3, r4, r5, pc}
 800076c:	20000000 	.word	0x20000000
 8000770:	20000020 	.word	0x20000020
 8000774:	20000004 	.word	0x20000004

08000778 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000778:	4a07      	ldr	r2, [pc, #28]	; (8000798 <HAL_Init+0x20>)
{
 800077a:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800077c:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800077e:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000780:	f043 0310 	orr.w	r3, r3, #16
 8000784:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000786:	f000 fa5f 	bl	8000c48 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800078a:	2000      	movs	r0, #0
 800078c:	f7ff ffd0 	bl	8000730 <HAL_InitTick>
  HAL_MspInit();
 8000790:	f004 fbee 	bl	8004f70 <HAL_MspInit>
}
 8000794:	2000      	movs	r0, #0
 8000796:	bd08      	pop	{r3, pc}
 8000798:	40022000 	.word	0x40022000

0800079c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800079c:	4a03      	ldr	r2, [pc, #12]	; (80007ac <HAL_IncTick+0x10>)
 800079e:	4b04      	ldr	r3, [pc, #16]	; (80007b0 <HAL_IncTick+0x14>)
 80007a0:	6811      	ldr	r1, [r2, #0]
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	440b      	add	r3, r1
 80007a6:	6013      	str	r3, [r2, #0]
 80007a8:	4770      	bx	lr
 80007aa:	bf00      	nop
 80007ac:	20000560 	.word	0x20000560
 80007b0:	20000000 	.word	0x20000000

080007b4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80007b4:	4b01      	ldr	r3, [pc, #4]	; (80007bc <HAL_GetTick+0x8>)
 80007b6:	6818      	ldr	r0, [r3, #0]
}
 80007b8:	4770      	bx	lr
 80007ba:	bf00      	nop
 80007bc:	20000560 	.word	0x20000560

080007c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80007c0:	b538      	push	{r3, r4, r5, lr}
 80007c2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80007c4:	f7ff fff6 	bl	80007b4 <HAL_GetTick>
 80007c8:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80007ca:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80007cc:	bf1e      	ittt	ne
 80007ce:	4b04      	ldrne	r3, [pc, #16]	; (80007e0 <HAL_Delay+0x20>)
 80007d0:	781b      	ldrbne	r3, [r3, #0]
 80007d2:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80007d4:	f7ff ffee 	bl	80007b4 <HAL_GetTick>
 80007d8:	1b40      	subs	r0, r0, r5
 80007da:	4284      	cmp	r4, r0
 80007dc:	d8fa      	bhi.n	80007d4 <HAL_Delay+0x14>
  {
  }
}
 80007de:	bd38      	pop	{r3, r4, r5, pc}
 80007e0:	20000000 	.word	0x20000000

080007e4 <HAL_ADC_ConvCpltCallback>:
 80007e4:	4770      	bx	lr

080007e6 <ADC_DMAConvCplt>:
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80007e6:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 80007e8:	b510      	push	{r4, lr}
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80007ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80007ec:	f012 0f50 	tst.w	r2, #80	; 0x50
 80007f0:	d11b      	bne.n	800082a <ADC_DMAConvCplt+0x44>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80007f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80007f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80007f8:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80007fa:	681a      	ldr	r2, [r3, #0]
 80007fc:	6892      	ldr	r2, [r2, #8]
 80007fe:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8000802:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8000806:	d10c      	bne.n	8000822 <ADC_DMAConvCplt+0x3c>
 8000808:	7b1a      	ldrb	r2, [r3, #12]
 800080a:	b952      	cbnz	r2, 8000822 <ADC_DMAConvCplt+0x3c>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800080c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800080e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000812:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000814:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000816:	04d2      	lsls	r2, r2, #19
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000818:	bf5e      	ittt	pl
 800081a:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
 800081c:	f042 0201 	orrpl.w	r2, r2, #1
 8000820:	629a      	strpl	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8000822:	4618      	mov	r0, r3
 8000824:	f7ff ffde 	bl	80007e4 <HAL_ADC_ConvCpltCallback>
 8000828:	bd10      	pop	{r4, pc}
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800082a:	6a1b      	ldr	r3, [r3, #32]
  }
}
 800082c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	4718      	bx	r3

08000834 <HAL_ADC_ConvHalfCpltCallback>:
 8000834:	4770      	bx	lr

08000836 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8000836:	b508      	push	{r3, lr}
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8000838:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800083a:	f7ff fffb 	bl	8000834 <HAL_ADC_ConvHalfCpltCallback>
 800083e:	bd08      	pop	{r3, pc}

08000840 <HAL_ADC_ErrorCallback>:
{
 8000840:	4770      	bx	lr

08000842 <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000842:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 8000844:	b508      	push	{r3, lr}
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8000846:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000848:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800084c:	6283      	str	r3, [r0, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800084e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000850:	f043 0304 	orr.w	r3, r3, #4
 8000854:	62c3      	str	r3, [r0, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8000856:	f7ff fff3 	bl	8000840 <HAL_ADC_ErrorCallback>
 800085a:	bd08      	pop	{r3, pc}

0800085c <HAL_ADC_ConfigChannel>:
  __IO uint32_t wait_loop_index = 0U;
 800085c:	2300      	movs	r3, #0
{ 
 800085e:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 8000860:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8000862:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8000866:	2b01      	cmp	r3, #1
 8000868:	d074      	beq.n	8000954 <HAL_ADC_ConfigChannel+0xf8>
 800086a:	2301      	movs	r3, #1
  if (sConfig->Rank < 7U)
 800086c:	684d      	ldr	r5, [r1, #4]
  __HAL_LOCK(hadc);
 800086e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  if (sConfig->Rank < 7U)
 8000872:	2d06      	cmp	r5, #6
 8000874:	6802      	ldr	r2, [r0, #0]
 8000876:	ea4f 0385 	mov.w	r3, r5, lsl #2
 800087a:	680c      	ldr	r4, [r1, #0]
 800087c:	d825      	bhi.n	80008ca <HAL_ADC_ConfigChannel+0x6e>
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800087e:	442b      	add	r3, r5
 8000880:	251f      	movs	r5, #31
 8000882:	6b56      	ldr	r6, [r2, #52]	; 0x34
 8000884:	3b05      	subs	r3, #5
 8000886:	409d      	lsls	r5, r3
 8000888:	ea26 0505 	bic.w	r5, r6, r5
 800088c:	fa04 f303 	lsl.w	r3, r4, r3
 8000890:	432b      	orrs	r3, r5
 8000892:	6353      	str	r3, [r2, #52]	; 0x34
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000894:	2c09      	cmp	r4, #9
 8000896:	ea4f 0344 	mov.w	r3, r4, lsl #1
 800089a:	688d      	ldr	r5, [r1, #8]
 800089c:	d92f      	bls.n	80008fe <HAL_ADC_ConfigChannel+0xa2>
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800089e:	2607      	movs	r6, #7
 80008a0:	4423      	add	r3, r4
 80008a2:	68d1      	ldr	r1, [r2, #12]
 80008a4:	3b1e      	subs	r3, #30
 80008a6:	409e      	lsls	r6, r3
 80008a8:	ea21 0106 	bic.w	r1, r1, r6
 80008ac:	fa05 f303 	lsl.w	r3, r5, r3
 80008b0:	430b      	orrs	r3, r1
 80008b2:	60d3      	str	r3, [r2, #12]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80008b4:	f1a4 0310 	sub.w	r3, r4, #16
 80008b8:	2b01      	cmp	r3, #1
 80008ba:	d92b      	bls.n	8000914 <HAL_ADC_ConfigChannel+0xb8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80008bc:	2300      	movs	r3, #0
  __HAL_UNLOCK(hadc);
 80008be:	2200      	movs	r2, #0
 80008c0:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
}
 80008c4:	4618      	mov	r0, r3
 80008c6:	b002      	add	sp, #8
 80008c8:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13U)
 80008ca:	2d0c      	cmp	r5, #12
 80008cc:	d80b      	bhi.n	80008e6 <HAL_ADC_ConfigChannel+0x8a>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80008ce:	442b      	add	r3, r5
 80008d0:	251f      	movs	r5, #31
 80008d2:	6b16      	ldr	r6, [r2, #48]	; 0x30
 80008d4:	3b23      	subs	r3, #35	; 0x23
 80008d6:	409d      	lsls	r5, r3
 80008d8:	ea26 0505 	bic.w	r5, r6, r5
 80008dc:	fa04 f303 	lsl.w	r3, r4, r3
 80008e0:	432b      	orrs	r3, r5
 80008e2:	6313      	str	r3, [r2, #48]	; 0x30
 80008e4:	e7d6      	b.n	8000894 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80008e6:	442b      	add	r3, r5
 80008e8:	251f      	movs	r5, #31
 80008ea:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
 80008ec:	3b41      	subs	r3, #65	; 0x41
 80008ee:	409d      	lsls	r5, r3
 80008f0:	ea26 0505 	bic.w	r5, r6, r5
 80008f4:	fa04 f303 	lsl.w	r3, r4, r3
 80008f8:	432b      	orrs	r3, r5
 80008fa:	62d3      	str	r3, [r2, #44]	; 0x2c
 80008fc:	e7ca      	b.n	8000894 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80008fe:	2607      	movs	r6, #7
 8000900:	6911      	ldr	r1, [r2, #16]
 8000902:	4423      	add	r3, r4
 8000904:	409e      	lsls	r6, r3
 8000906:	ea21 0106 	bic.w	r1, r1, r6
 800090a:	fa05 f303 	lsl.w	r3, r5, r3
 800090e:	430b      	orrs	r3, r1
 8000910:	6113      	str	r3, [r2, #16]
 8000912:	e7cf      	b.n	80008b4 <HAL_ADC_ConfigChannel+0x58>
    if (hadc->Instance == ADC1)
 8000914:	4b10      	ldr	r3, [pc, #64]	; (8000958 <HAL_ADC_ConfigChannel+0xfc>)
 8000916:	429a      	cmp	r2, r3
 8000918:	d116      	bne.n	8000948 <HAL_ADC_ConfigChannel+0xec>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800091a:	6893      	ldr	r3, [r2, #8]
 800091c:	021b      	lsls	r3, r3, #8
 800091e:	d4cd      	bmi.n	80008bc <HAL_ADC_ConfigChannel+0x60>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000920:	6893      	ldr	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000922:	2c10      	cmp	r4, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000924:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000928:	6093      	str	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800092a:	d1c7      	bne.n	80008bc <HAL_ADC_ConfigChannel+0x60>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800092c:	4b0b      	ldr	r3, [pc, #44]	; (800095c <HAL_ADC_ConfigChannel+0x100>)
 800092e:	4a0c      	ldr	r2, [pc, #48]	; (8000960 <HAL_ADC_ConfigChannel+0x104>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	fbb3 f2f2 	udiv	r2, r3, r2
 8000936:	230a      	movs	r3, #10
 8000938:	4353      	muls	r3, r2
            wait_loop_index--;
 800093a:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 800093c:	9b01      	ldr	r3, [sp, #4]
 800093e:	2b00      	cmp	r3, #0
 8000940:	d0bc      	beq.n	80008bc <HAL_ADC_ConfigChannel+0x60>
            wait_loop_index--;
 8000942:	9b01      	ldr	r3, [sp, #4]
 8000944:	3b01      	subs	r3, #1
 8000946:	e7f8      	b.n	800093a <HAL_ADC_ConfigChannel+0xde>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000948:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800094a:	f043 0320 	orr.w	r3, r3, #32
 800094e:	6283      	str	r3, [r0, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 8000950:	2301      	movs	r3, #1
 8000952:	e7b4      	b.n	80008be <HAL_ADC_ConfigChannel+0x62>
  __HAL_LOCK(hadc);
 8000954:	2302      	movs	r3, #2
 8000956:	e7b5      	b.n	80008c4 <HAL_ADC_ConfigChannel+0x68>
 8000958:	40012400 	.word	0x40012400
 800095c:	20000020 	.word	0x20000020
 8000960:	000f4240 	.word	0x000f4240

08000964 <ADC_Enable>:
  __IO uint32_t wait_loop_index = 0U;
 8000964:	2300      	movs	r3, #0
{
 8000966:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 8000968:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 800096a:	6803      	ldr	r3, [r0, #0]
{
 800096c:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 800096e:	689a      	ldr	r2, [r3, #8]
 8000970:	07d2      	lsls	r2, r2, #31
 8000972:	d502      	bpl.n	800097a <ADC_Enable+0x16>
  return HAL_OK;
 8000974:	2000      	movs	r0, #0
}
 8000976:	b002      	add	sp, #8
 8000978:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_ADC_ENABLE(hadc);
 800097a:	689a      	ldr	r2, [r3, #8]
 800097c:	f042 0201 	orr.w	r2, r2, #1
 8000980:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000982:	4b12      	ldr	r3, [pc, #72]	; (80009cc <ADC_Enable+0x68>)
 8000984:	4a12      	ldr	r2, [pc, #72]	; (80009d0 <ADC_Enable+0x6c>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	fbb3 f3f2 	udiv	r3, r3, r2
      wait_loop_index--;
 800098c:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 800098e:	9b01      	ldr	r3, [sp, #4]
 8000990:	b9c3      	cbnz	r3, 80009c4 <ADC_Enable+0x60>
    tickstart = HAL_GetTick();
 8000992:	f7ff ff0f 	bl	80007b4 <HAL_GetTick>
 8000996:	4606      	mov	r6, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000998:	6823      	ldr	r3, [r4, #0]
 800099a:	689d      	ldr	r5, [r3, #8]
 800099c:	f015 0501 	ands.w	r5, r5, #1
 80009a0:	d1e8      	bne.n	8000974 <ADC_Enable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80009a2:	f7ff ff07 	bl	80007b4 <HAL_GetTick>
 80009a6:	1b80      	subs	r0, r0, r6
 80009a8:	2802      	cmp	r0, #2
 80009aa:	d9f5      	bls.n	8000998 <ADC_Enable+0x34>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80009ac:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        __HAL_UNLOCK(hadc);
 80009ae:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80009b2:	f043 0310 	orr.w	r3, r3, #16
 80009b6:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80009b8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        __HAL_UNLOCK(hadc);
 80009ba:	2001      	movs	r0, #1
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80009bc:	f043 0301 	orr.w	r3, r3, #1
 80009c0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80009c2:	e7d8      	b.n	8000976 <ADC_Enable+0x12>
      wait_loop_index--;
 80009c4:	9b01      	ldr	r3, [sp, #4]
 80009c6:	3b01      	subs	r3, #1
 80009c8:	e7e0      	b.n	800098c <ADC_Enable+0x28>
 80009ca:	bf00      	nop
 80009cc:	20000020 	.word	0x20000020
 80009d0:	000f4240 	.word	0x000f4240

080009d4 <HAL_ADC_Start_DMA>:
{
 80009d4:	e92d 41d8 	stmdb	sp!, {r3, r4, r6, r7, r8, lr}
 80009d8:	4690      	mov	r8, r2
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80009da:	4b40      	ldr	r3, [pc, #256]	; (8000adc <HAL_ADC_Start_DMA+0x108>)
 80009dc:	6802      	ldr	r2, [r0, #0]
{
 80009de:	4604      	mov	r4, r0
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80009e0:	429a      	cmp	r2, r3
{
 80009e2:	460f      	mov	r7, r1
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80009e4:	d002      	beq.n	80009ec <HAL_ADC_Start_DMA+0x18>
 80009e6:	493e      	ldr	r1, [pc, #248]	; (8000ae0 <HAL_ADC_Start_DMA+0x10c>)
 80009e8:	428a      	cmp	r2, r1
 80009ea:	d103      	bne.n	80009f4 <HAL_ADC_Start_DMA+0x20>
 80009ec:	685b      	ldr	r3, [r3, #4]
 80009ee:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 80009f2:	d16e      	bne.n	8000ad2 <HAL_ADC_Start_DMA+0xfe>
    __HAL_LOCK(hadc);
 80009f4:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80009f8:	2b01      	cmp	r3, #1
 80009fa:	d06c      	beq.n	8000ad6 <HAL_ADC_Start_DMA+0x102>
 80009fc:	2301      	movs	r3, #1
    tmp_hal_status = ADC_Enable(hadc);
 80009fe:	4620      	mov	r0, r4
    __HAL_LOCK(hadc);
 8000a00:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    tmp_hal_status = ADC_Enable(hadc);
 8000a04:	f7ff ffae 	bl	8000964 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8000a08:	4606      	mov	r6, r0
 8000a0a:	2800      	cmp	r0, #0
 8000a0c:	d15d      	bne.n	8000aca <HAL_ADC_Start_DMA+0xf6>
      ADC_STATE_CLR_SET(hadc->State,
 8000a0e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000a10:	6821      	ldr	r1, [r4, #0]
      ADC_STATE_CLR_SET(hadc->State,
 8000a12:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000a16:	4b32      	ldr	r3, [pc, #200]	; (8000ae0 <HAL_ADC_Start_DMA+0x10c>)
      ADC_STATE_CLR_SET(hadc->State,
 8000a18:	f020 0001 	bic.w	r0, r0, #1
 8000a1c:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000a20:	4299      	cmp	r1, r3
      ADC_STATE_CLR_SET(hadc->State,
 8000a22:	62a0      	str	r0, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000a24:	d104      	bne.n	8000a30 <HAL_ADC_Start_DMA+0x5c>
 8000a26:	4a2d      	ldr	r2, [pc, #180]	; (8000adc <HAL_ADC_Start_DMA+0x108>)
 8000a28:	6853      	ldr	r3, [r2, #4]
 8000a2a:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 8000a2e:	d13e      	bne.n	8000aae <HAL_ADC_Start_DMA+0xda>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000a30:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000a32:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8000a36:	62a3      	str	r3, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000a38:	684b      	ldr	r3, [r1, #4]
 8000a3a:	055a      	lsls	r2, r3, #21
 8000a3c:	d505      	bpl.n	8000a4a <HAL_ADC_Start_DMA+0x76>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000a3e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000a40:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000a44:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000a48:	62a3      	str	r3, [r4, #40]	; 0x28
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000a4a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000a4c:	6a20      	ldr	r0, [r4, #32]
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000a4e:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000a52:	bf18      	it	ne
 8000a54:	6ae3      	ldrne	r3, [r4, #44]	; 0x2c
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000a56:	463a      	mov	r2, r7
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000a58:	bf18      	it	ne
 8000a5a:	f023 0306 	bicne.w	r3, r3, #6
        ADC_CLEAR_ERRORCODE(hadc);
 8000a5e:	62e3      	str	r3, [r4, #44]	; 0x2c
      __HAL_UNLOCK(hadc);
 8000a60:	2300      	movs	r3, #0
 8000a62:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000a66:	4b1f      	ldr	r3, [pc, #124]	; (8000ae4 <HAL_ADC_Start_DMA+0x110>)
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000a68:	314c      	adds	r1, #76	; 0x4c
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000a6a:	6283      	str	r3, [r0, #40]	; 0x28
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000a6c:	4b1e      	ldr	r3, [pc, #120]	; (8000ae8 <HAL_ADC_Start_DMA+0x114>)
 8000a6e:	62c3      	str	r3, [r0, #44]	; 0x2c
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000a70:	4b1e      	ldr	r3, [pc, #120]	; (8000aec <HAL_ADC_Start_DMA+0x118>)
 8000a72:	6303      	str	r3, [r0, #48]	; 0x30
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000a74:	f06f 0302 	mvn.w	r3, #2
 8000a78:	f841 3c4c 	str.w	r3, [r1, #-76]
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8000a7c:	f851 3c44 	ldr.w	r3, [r1, #-68]
 8000a80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a84:	f841 3c44 	str.w	r3, [r1, #-68]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000a88:	4643      	mov	r3, r8
 8000a8a:	f000 f987 	bl	8000d9c <HAL_DMA_Start_IT>
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8000a8e:	6823      	ldr	r3, [r4, #0]
 8000a90:	689a      	ldr	r2, [r3, #8]
 8000a92:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8000a96:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000a9a:	689a      	ldr	r2, [r3, #8]
 8000a9c:	bf0c      	ite	eq
 8000a9e:	f442 02a0 	orreq.w	r2, r2, #5242880	; 0x500000
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000aa2:	f442 1280 	orrne.w	r2, r2, #1048576	; 0x100000
 8000aa6:	609a      	str	r2, [r3, #8]
}
 8000aa8:	4630      	mov	r0, r6
 8000aaa:	e8bd 81d8 	ldmia.w	sp!, {r3, r4, r6, r7, r8, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000aae:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000ab0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000ab4:	62a3      	str	r3, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000ab6:	6853      	ldr	r3, [r2, #4]
 8000ab8:	055b      	lsls	r3, r3, #21
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000aba:	bf41      	itttt	mi
 8000abc:	6aa0      	ldrmi	r0, [r4, #40]	; 0x28
 8000abe:	f420 5040 	bicmi.w	r0, r0, #12288	; 0x3000
 8000ac2:	f440 5080 	orrmi.w	r0, r0, #4096	; 0x1000
 8000ac6:	62a0      	strmi	r0, [r4, #40]	; 0x28
 8000ac8:	e7bf      	b.n	8000a4a <HAL_ADC_Start_DMA+0x76>
      __HAL_UNLOCK(hadc);
 8000aca:	2300      	movs	r3, #0
 8000acc:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 8000ad0:	e7ea      	b.n	8000aa8 <HAL_ADC_Start_DMA+0xd4>
    tmp_hal_status = HAL_ERROR;
 8000ad2:	2601      	movs	r6, #1
 8000ad4:	e7e8      	b.n	8000aa8 <HAL_ADC_Start_DMA+0xd4>
    __HAL_LOCK(hadc);
 8000ad6:	2602      	movs	r6, #2
 8000ad8:	e7e6      	b.n	8000aa8 <HAL_ADC_Start_DMA+0xd4>
 8000ada:	bf00      	nop
 8000adc:	40012400 	.word	0x40012400
 8000ae0:	40012800 	.word	0x40012800
 8000ae4:	080007e7 	.word	0x080007e7
 8000ae8:	08000837 	.word	0x08000837
 8000aec:	08000843 	.word	0x08000843

08000af0 <ADC_ConversionStop_Disable>:
{
 8000af0:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000af2:	6803      	ldr	r3, [r0, #0]
{
 8000af4:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000af6:	689a      	ldr	r2, [r3, #8]
 8000af8:	07d2      	lsls	r2, r2, #31
 8000afa:	d401      	bmi.n	8000b00 <ADC_ConversionStop_Disable+0x10>
  return HAL_OK;
 8000afc:	2000      	movs	r0, #0
 8000afe:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 8000b00:	689a      	ldr	r2, [r3, #8]
 8000b02:	f022 0201 	bic.w	r2, r2, #1
 8000b06:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8000b08:	f7ff fe54 	bl	80007b4 <HAL_GetTick>
 8000b0c:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000b0e:	6823      	ldr	r3, [r4, #0]
 8000b10:	689b      	ldr	r3, [r3, #8]
 8000b12:	07db      	lsls	r3, r3, #31
 8000b14:	d5f2      	bpl.n	8000afc <ADC_ConversionStop_Disable+0xc>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000b16:	f7ff fe4d 	bl	80007b4 <HAL_GetTick>
 8000b1a:	1b40      	subs	r0, r0, r5
 8000b1c:	2802      	cmp	r0, #2
 8000b1e:	d9f6      	bls.n	8000b0e <ADC_ConversionStop_Disable+0x1e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000b20:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b22:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000b24:	f043 0310 	orr.w	r3, r3, #16
 8000b28:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b2a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000b2c:	f043 0301 	orr.w	r3, r3, #1
 8000b30:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000b32:	bd38      	pop	{r3, r4, r5, pc}

08000b34 <HAL_ADC_Init>:
{
 8000b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(hadc == NULL)
 8000b36:	4604      	mov	r4, r0
 8000b38:	2800      	cmp	r0, #0
 8000b3a:	d077      	beq.n	8000c2c <HAL_ADC_Init+0xf8>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000b3c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000b3e:	b923      	cbnz	r3, 8000b4a <HAL_ADC_Init+0x16>
    ADC_CLEAR_ERRORCODE(hadc);
 8000b40:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 8000b42:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 8000b46:	f004 fa35 	bl	8004fb4 <HAL_ADC_MspInit>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000b4a:	4620      	mov	r0, r4
 8000b4c:	f7ff ffd0 	bl	8000af0 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000b50:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000b52:	f013 0310 	ands.w	r3, r3, #16
 8000b56:	d16b      	bne.n	8000c30 <HAL_ADC_Init+0xfc>
 8000b58:	2800      	cmp	r0, #0
 8000b5a:	d169      	bne.n	8000c30 <HAL_ADC_Init+0xfc>
    ADC_STATE_CLR_SET(hadc->State,
 8000b5c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000b5e:	4937      	ldr	r1, [pc, #220]	; (8000c3c <HAL_ADC_Init+0x108>)
    ADC_STATE_CLR_SET(hadc->State,
 8000b60:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 8000b64:	f022 0202 	bic.w	r2, r2, #2
 8000b68:	f042 0202 	orr.w	r2, r2, #2
 8000b6c:	62a2      	str	r2, [r4, #40]	; 0x28
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000b6e:	e894 0024 	ldmia.w	r4, {r2, r5}
 8000b72:	428a      	cmp	r2, r1
 8000b74:	69e1      	ldr	r1, [r4, #28]
 8000b76:	d104      	bne.n	8000b82 <HAL_ADC_Init+0x4e>
 8000b78:	f5b1 2f40 	cmp.w	r1, #786432	; 0xc0000
 8000b7c:	bf08      	it	eq
 8000b7e:	f44f 2100 	moveq.w	r1, #524288	; 0x80000
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000b82:	7b26      	ldrb	r6, [r4, #12]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000b84:	ea45 0546 	orr.w	r5, r5, r6, lsl #1
 8000b88:	4329      	orrs	r1, r5
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000b8a:	68a5      	ldr	r5, [r4, #8]
 8000b8c:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8000b90:	d035      	beq.n	8000bfe <HAL_ADC_Init+0xca>
 8000b92:	2d01      	cmp	r5, #1
 8000b94:	bf08      	it	eq
 8000b96:	f44f 7380 	moveq.w	r3, #256	; 0x100
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000b9a:	7d27      	ldrb	r7, [r4, #20]
 8000b9c:	2f01      	cmp	r7, #1
 8000b9e:	d106      	bne.n	8000bae <HAL_ADC_Init+0x7a>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000ba0:	bb7e      	cbnz	r6, 8000c02 <HAL_ADC_Init+0xce>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000ba2:	69a6      	ldr	r6, [r4, #24]
 8000ba4:	3e01      	subs	r6, #1
 8000ba6:	ea43 3346 	orr.w	r3, r3, r6, lsl #13
 8000baa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
      MODIFY_REG(hadc->Instance->CR1,
 8000bae:	6856      	ldr	r6, [r2, #4]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000bb0:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR1,
 8000bb4:	f426 4669 	bic.w	r6, r6, #59648	; 0xe900
 8000bb8:	ea43 0306 	orr.w	r3, r3, r6
 8000bbc:	6053      	str	r3, [r2, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8000bbe:	6896      	ldr	r6, [r2, #8]
 8000bc0:	4b1f      	ldr	r3, [pc, #124]	; (8000c40 <HAL_ADC_Init+0x10c>)
 8000bc2:	ea03 0306 	and.w	r3, r3, r6
 8000bc6:	ea43 0301 	orr.w	r3, r3, r1
 8000bca:	6093      	str	r3, [r2, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000bcc:	d001      	beq.n	8000bd2 <HAL_ADC_Init+0x9e>
 8000bce:	2d01      	cmp	r5, #1
 8000bd0:	d120      	bne.n	8000c14 <HAL_ADC_Init+0xe0>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000bd2:	6923      	ldr	r3, [r4, #16]
 8000bd4:	3b01      	subs	r3, #1
 8000bd6:	051b      	lsls	r3, r3, #20
    MODIFY_REG(hadc->Instance->SQR1,
 8000bd8:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
 8000bda:	f425 0570 	bic.w	r5, r5, #15728640	; 0xf00000
 8000bde:	432b      	orrs	r3, r5
 8000be0:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000be2:	6892      	ldr	r2, [r2, #8]
 8000be4:	4b17      	ldr	r3, [pc, #92]	; (8000c44 <HAL_ADC_Init+0x110>)
 8000be6:	4013      	ands	r3, r2
 8000be8:	4299      	cmp	r1, r3
 8000bea:	d115      	bne.n	8000c18 <HAL_ADC_Init+0xe4>
      ADC_CLEAR_ERRORCODE(hadc);
 8000bec:	2300      	movs	r3, #0
 8000bee:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 8000bf0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000bf2:	f023 0303 	bic.w	r3, r3, #3
 8000bf6:	f043 0301 	orr.w	r3, r3, #1
 8000bfa:	62a3      	str	r3, [r4, #40]	; 0x28
 8000bfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000bfe:	462b      	mov	r3, r5
 8000c00:	e7cb      	b.n	8000b9a <HAL_ADC_Init+0x66>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000c02:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8000c04:	f046 0620 	orr.w	r6, r6, #32
 8000c08:	62a6      	str	r6, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c0a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000c0c:	f046 0601 	orr.w	r6, r6, #1
 8000c10:	62e6      	str	r6, [r4, #44]	; 0x2c
 8000c12:	e7cc      	b.n	8000bae <HAL_ADC_Init+0x7a>
  uint32_t tmp_sqr1 = 0U;
 8000c14:	2300      	movs	r3, #0
 8000c16:	e7df      	b.n	8000bd8 <HAL_ADC_Init+0xa4>
      ADC_STATE_CLR_SET(hadc->State,
 8000c18:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000c1a:	f023 0312 	bic.w	r3, r3, #18
 8000c1e:	f043 0310 	orr.w	r3, r3, #16
 8000c22:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c24:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000c26:	f043 0301 	orr.w	r3, r3, #1
 8000c2a:	62e3      	str	r3, [r4, #44]	; 0x2c
    return HAL_ERROR;
 8000c2c:	2001      	movs	r0, #1
}
 8000c2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c30:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000c32:	f043 0310 	orr.w	r3, r3, #16
 8000c36:	62a3      	str	r3, [r4, #40]	; 0x28
 8000c38:	e7f8      	b.n	8000c2c <HAL_ADC_Init+0xf8>
 8000c3a:	bf00      	nop
 8000c3c:	40013c00 	.word	0x40013c00
 8000c40:	ffe1f7fd 	.word	0xffe1f7fd
 8000c44:	ff1f0efe 	.word	0xff1f0efe

08000c48 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c48:	4a07      	ldr	r2, [pc, #28]	; (8000c68 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c4a:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c4c:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c4e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c52:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000c56:	041b      	lsls	r3, r3, #16
 8000c58:	0c1b      	lsrs	r3, r3, #16
 8000c5a:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8000c62:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000c64:	60d3      	str	r3, [r2, #12]
 8000c66:	4770      	bx	lr
 8000c68:	e000ed00 	.word	0xe000ed00

08000c6c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c6c:	4b17      	ldr	r3, [pc, #92]	; (8000ccc <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c6e:	b530      	push	{r4, r5, lr}
 8000c70:	68dc      	ldr	r4, [r3, #12]
 8000c72:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c76:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c7a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c7c:	2b04      	cmp	r3, #4
 8000c7e:	bf28      	it	cs
 8000c80:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c82:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c84:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c88:	bf98      	it	ls
 8000c8a:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c8c:	fa05 f303 	lsl.w	r3, r5, r3
 8000c90:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c94:	bf88      	it	hi
 8000c96:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c98:	4019      	ands	r1, r3
 8000c9a:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c9c:	fa05 f404 	lsl.w	r4, r5, r4
 8000ca0:	3c01      	subs	r4, #1
 8000ca2:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 8000ca4:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ca6:	ea42 0201 	orr.w	r2, r2, r1
 8000caa:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cae:	bfa9      	itett	ge
 8000cb0:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cb4:	4b06      	ldrlt	r3, [pc, #24]	; (8000cd0 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cb6:	b2d2      	uxtbge	r2, r2
 8000cb8:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cbc:	bfbb      	ittet	lt
 8000cbe:	f000 000f 	andlt.w	r0, r0, #15
 8000cc2:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cc4:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cc8:	541a      	strblt	r2, [r3, r0]
 8000cca:	bd30      	pop	{r4, r5, pc}
 8000ccc:	e000ed00 	.word	0xe000ed00
 8000cd0:	e000ed14 	.word	0xe000ed14

08000cd4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000cd4:	2800      	cmp	r0, #0
 8000cd6:	db08      	blt.n	8000cea <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cd8:	2301      	movs	r3, #1
 8000cda:	0942      	lsrs	r2, r0, #5
 8000cdc:	f000 001f 	and.w	r0, r0, #31
 8000ce0:	fa03 f000 	lsl.w	r0, r3, r0
 8000ce4:	4b01      	ldr	r3, [pc, #4]	; (8000cec <HAL_NVIC_EnableIRQ+0x18>)
 8000ce6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000cea:	4770      	bx	lr
 8000cec:	e000e100 	.word	0xe000e100

08000cf0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cf0:	3801      	subs	r0, #1
 8000cf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000cf6:	d20a      	bcs.n	8000d0e <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cf8:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cfa:	4b06      	ldr	r3, [pc, #24]	; (8000d14 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cfc:	4a06      	ldr	r2, [pc, #24]	; (8000d18 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cfe:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d00:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d04:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d06:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d08:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d0a:	601a      	str	r2, [r3, #0]
 8000d0c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000d0e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000d10:	4770      	bx	lr
 8000d12:	bf00      	nop
 8000d14:	e000e010 	.word	0xe000e010
 8000d18:	e000ed00 	.word	0xe000ed00

08000d1c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000d1c:	b510      	push	{r4, lr}
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000d1e:	2800      	cmp	r0, #0
 8000d20:	d032      	beq.n	8000d88 <HAL_DMA_Init+0x6c>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000d22:	6801      	ldr	r1, [r0, #0]
 8000d24:	4b19      	ldr	r3, [pc, #100]	; (8000d8c <HAL_DMA_Init+0x70>)
 8000d26:	2414      	movs	r4, #20
 8000d28:	4299      	cmp	r1, r3
 8000d2a:	d825      	bhi.n	8000d78 <HAL_DMA_Init+0x5c>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000d2c:	4a18      	ldr	r2, [pc, #96]	; (8000d90 <HAL_DMA_Init+0x74>)
    hdma->DmaBaseAddress = DMA1;
 8000d2e:	f2a3 4307 	subw	r3, r3, #1031	; 0x407
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000d32:	440a      	add	r2, r1
 8000d34:	fbb2 f2f4 	udiv	r2, r2, r4
 8000d38:	0092      	lsls	r2, r2, #2
 8000d3a:	6402      	str	r2, [r0, #64]	; 0x40
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000d3c:	6884      	ldr	r4, [r0, #8]
    hdma->DmaBaseAddress = DMA2;
 8000d3e:	63c3      	str	r3, [r0, #60]	; 0x3c
  tmp |=  hdma->Init.Direction        |
 8000d40:	6843      	ldr	r3, [r0, #4]
  tmp = hdma->Instance->CCR;
 8000d42:	680a      	ldr	r2, [r1, #0]
  tmp |=  hdma->Init.Direction        |
 8000d44:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d46:	68c4      	ldr	r4, [r0, #12]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000d48:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d4c:	4323      	orrs	r3, r4
 8000d4e:	6904      	ldr	r4, [r0, #16]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000d50:	f022 0230 	bic.w	r2, r2, #48	; 0x30
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d54:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d56:	6944      	ldr	r4, [r0, #20]
 8000d58:	4323      	orrs	r3, r4
 8000d5a:	6984      	ldr	r4, [r0, #24]
 8000d5c:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 8000d5e:	69c4      	ldr	r4, [r0, #28]
 8000d60:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 8000d62:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000d64:	600b      	str	r3, [r1, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000d66:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000d68:	2300      	movs	r3, #0
  hdma->State = HAL_DMA_STATE_READY;
 8000d6a:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000d6e:	6383      	str	r3, [r0, #56]	; 0x38
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000d70:	f880 3020 	strb.w	r3, [r0, #32]

  return HAL_OK;
 8000d74:	4618      	mov	r0, r3
 8000d76:	bd10      	pop	{r4, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8000d78:	4b06      	ldr	r3, [pc, #24]	; (8000d94 <HAL_DMA_Init+0x78>)
 8000d7a:	440b      	add	r3, r1
 8000d7c:	fbb3 f3f4 	udiv	r3, r3, r4
 8000d80:	009b      	lsls	r3, r3, #2
 8000d82:	6403      	str	r3, [r0, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8000d84:	4b04      	ldr	r3, [pc, #16]	; (8000d98 <HAL_DMA_Init+0x7c>)
 8000d86:	e7d9      	b.n	8000d3c <HAL_DMA_Init+0x20>
    return HAL_ERROR;
 8000d88:	2001      	movs	r0, #1
}
 8000d8a:	bd10      	pop	{r4, pc}
 8000d8c:	40020407 	.word	0x40020407
 8000d90:	bffdfff8 	.word	0xbffdfff8
 8000d94:	bffdfbf8 	.word	0xbffdfbf8
 8000d98:	40020400 	.word	0x40020400

08000d9c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000d9c:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000d9e:	f890 4020 	ldrb.w	r4, [r0, #32]
 8000da2:	2c01      	cmp	r4, #1
 8000da4:	d035      	beq.n	8000e12 <HAL_DMA_Start_IT+0x76>
 8000da6:	2401      	movs	r4, #1
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000da8:	f890 5021 	ldrb.w	r5, [r0, #33]	; 0x21
  __HAL_LOCK(hdma);
 8000dac:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8000db0:	42a5      	cmp	r5, r4
 8000db2:	f04f 0600 	mov.w	r6, #0
 8000db6:	f04f 0402 	mov.w	r4, #2
 8000dba:	d128      	bne.n	8000e0e <HAL_DMA_Start_IT+0x72>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000dbc:	f880 4021 	strb.w	r4, [r0, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000dc0:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000dc2:	6386      	str	r6, [r0, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 8000dc4:	6826      	ldr	r6, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000dc6:	6c07      	ldr	r7, [r0, #64]	; 0x40
    __HAL_DMA_DISABLE(hdma);
 8000dc8:	f026 0601 	bic.w	r6, r6, #1
 8000dcc:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000dce:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
 8000dd0:	40bd      	lsls	r5, r7
 8000dd2:	6075      	str	r5, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000dd4:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000dd6:	6843      	ldr	r3, [r0, #4]
 8000dd8:	6805      	ldr	r5, [r0, #0]
 8000dda:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback)
 8000ddc:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000dde:	bf0b      	itete	eq
 8000de0:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8000de2:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8000de4:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8000de6:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 8000de8:	b14b      	cbz	r3, 8000dfe <HAL_DMA_Start_IT+0x62>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000dea:	6823      	ldr	r3, [r4, #0]
 8000dec:	f043 030e 	orr.w	r3, r3, #14
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000df0:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8000df2:	682b      	ldr	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000df4:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8000df6:	f043 0301 	orr.w	r3, r3, #1
 8000dfa:	602b      	str	r3, [r5, #0]
 8000dfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000dfe:	6823      	ldr	r3, [r4, #0]
 8000e00:	f023 0304 	bic.w	r3, r3, #4
 8000e04:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000e06:	6823      	ldr	r3, [r4, #0]
 8000e08:	f043 030a 	orr.w	r3, r3, #10
 8000e0c:	e7f0      	b.n	8000df0 <HAL_DMA_Start_IT+0x54>
    __HAL_UNLOCK(hdma); 
 8000e0e:	f880 6020 	strb.w	r6, [r0, #32]
  __HAL_LOCK(hdma);
 8000e12:	2002      	movs	r0, #2
}
 8000e14:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08000e18 <HAL_DMA_IRQHandler>:
{
 8000e18:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000e1a:	2504      	movs	r5, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000e1c:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000e1e:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000e20:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8000e22:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000e24:	4095      	lsls	r5, r2
 8000e26:	4225      	tst	r5, r4
  uint32_t source_it = hdma->Instance->CCR;
 8000e28:	6819      	ldr	r1, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000e2a:	d055      	beq.n	8000ed8 <HAL_DMA_IRQHandler+0xc0>
 8000e2c:	074d      	lsls	r5, r1, #29
 8000e2e:	d553      	bpl.n	8000ed8 <HAL_DMA_IRQHandler+0xc0>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000e30:	681a      	ldr	r2, [r3, #0]
 8000e32:	0696      	lsls	r6, r2, #26
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000e34:	bf5e      	ittt	pl
 8000e36:	681a      	ldrpl	r2, [r3, #0]
 8000e38:	f022 0204 	bicpl.w	r2, r2, #4
 8000e3c:	601a      	strpl	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000e3e:	4a60      	ldr	r2, [pc, #384]	; (8000fc0 <HAL_DMA_IRQHandler+0x1a8>)
 8000e40:	4293      	cmp	r3, r2
 8000e42:	d91f      	bls.n	8000e84 <HAL_DMA_IRQHandler+0x6c>
 8000e44:	f502 7262 	add.w	r2, r2, #904	; 0x388
 8000e48:	4293      	cmp	r3, r2
 8000e4a:	d014      	beq.n	8000e76 <HAL_DMA_IRQHandler+0x5e>
 8000e4c:	3214      	adds	r2, #20
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d013      	beq.n	8000e7a <HAL_DMA_IRQHandler+0x62>
 8000e52:	3214      	adds	r2, #20
 8000e54:	4293      	cmp	r3, r2
 8000e56:	d012      	beq.n	8000e7e <HAL_DMA_IRQHandler+0x66>
 8000e58:	3214      	adds	r2, #20
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	bf0c      	ite	eq
 8000e5e:	f44f 4380 	moveq.w	r3, #16384	; 0x4000
 8000e62:	f44f 2380 	movne.w	r3, #262144	; 0x40000
 8000e66:	4a57      	ldr	r2, [pc, #348]	; (8000fc4 <HAL_DMA_IRQHandler+0x1ac>)
 8000e68:	6053      	str	r3, [r2, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 8000e6a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (hdma->XferErrorCallback != NULL)
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	f000 80a5 	beq.w	8000fbc <HAL_DMA_IRQHandler+0x1a4>
}
 8000e72:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8000e74:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000e76:	2304      	movs	r3, #4
 8000e78:	e7f5      	b.n	8000e66 <HAL_DMA_IRQHandler+0x4e>
 8000e7a:	2340      	movs	r3, #64	; 0x40
 8000e7c:	e7f3      	b.n	8000e66 <HAL_DMA_IRQHandler+0x4e>
 8000e7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e82:	e7f0      	b.n	8000e66 <HAL_DMA_IRQHandler+0x4e>
 8000e84:	4950      	ldr	r1, [pc, #320]	; (8000fc8 <HAL_DMA_IRQHandler+0x1b0>)
 8000e86:	428b      	cmp	r3, r1
 8000e88:	d016      	beq.n	8000eb8 <HAL_DMA_IRQHandler+0xa0>
 8000e8a:	3114      	adds	r1, #20
 8000e8c:	428b      	cmp	r3, r1
 8000e8e:	d015      	beq.n	8000ebc <HAL_DMA_IRQHandler+0xa4>
 8000e90:	3114      	adds	r1, #20
 8000e92:	428b      	cmp	r3, r1
 8000e94:	d014      	beq.n	8000ec0 <HAL_DMA_IRQHandler+0xa8>
 8000e96:	3114      	adds	r1, #20
 8000e98:	428b      	cmp	r3, r1
 8000e9a:	d014      	beq.n	8000ec6 <HAL_DMA_IRQHandler+0xae>
 8000e9c:	3114      	adds	r1, #20
 8000e9e:	428b      	cmp	r3, r1
 8000ea0:	d014      	beq.n	8000ecc <HAL_DMA_IRQHandler+0xb4>
 8000ea2:	3114      	adds	r1, #20
 8000ea4:	428b      	cmp	r3, r1
 8000ea6:	d014      	beq.n	8000ed2 <HAL_DMA_IRQHandler+0xba>
 8000ea8:	4293      	cmp	r3, r2
 8000eaa:	bf14      	ite	ne
 8000eac:	f44f 2380 	movne.w	r3, #262144	; 0x40000
 8000eb0:	f04f 6380 	moveq.w	r3, #67108864	; 0x4000000
 8000eb4:	4a45      	ldr	r2, [pc, #276]	; (8000fcc <HAL_DMA_IRQHandler+0x1b4>)
 8000eb6:	e7d7      	b.n	8000e68 <HAL_DMA_IRQHandler+0x50>
 8000eb8:	2304      	movs	r3, #4
 8000eba:	e7fb      	b.n	8000eb4 <HAL_DMA_IRQHandler+0x9c>
 8000ebc:	2340      	movs	r3, #64	; 0x40
 8000ebe:	e7f9      	b.n	8000eb4 <HAL_DMA_IRQHandler+0x9c>
 8000ec0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ec4:	e7f6      	b.n	8000eb4 <HAL_DMA_IRQHandler+0x9c>
 8000ec6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000eca:	e7f3      	b.n	8000eb4 <HAL_DMA_IRQHandler+0x9c>
 8000ecc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000ed0:	e7f0      	b.n	8000eb4 <HAL_DMA_IRQHandler+0x9c>
 8000ed2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000ed6:	e7ed      	b.n	8000eb4 <HAL_DMA_IRQHandler+0x9c>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8000ed8:	2502      	movs	r5, #2
 8000eda:	4095      	lsls	r5, r2
 8000edc:	4225      	tst	r5, r4
 8000ede:	d057      	beq.n	8000f90 <HAL_DMA_IRQHandler+0x178>
 8000ee0:	078d      	lsls	r5, r1, #30
 8000ee2:	d555      	bpl.n	8000f90 <HAL_DMA_IRQHandler+0x178>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000ee4:	681a      	ldr	r2, [r3, #0]
 8000ee6:	0694      	lsls	r4, r2, #26
 8000ee8:	d406      	bmi.n	8000ef8 <HAL_DMA_IRQHandler+0xe0>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8000eea:	681a      	ldr	r2, [r3, #0]
 8000eec:	f022 020a 	bic.w	r2, r2, #10
 8000ef0:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000ef8:	4a31      	ldr	r2, [pc, #196]	; (8000fc0 <HAL_DMA_IRQHandler+0x1a8>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d91e      	bls.n	8000f3c <HAL_DMA_IRQHandler+0x124>
 8000efe:	f502 7262 	add.w	r2, r2, #904	; 0x388
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d013      	beq.n	8000f2e <HAL_DMA_IRQHandler+0x116>
 8000f06:	3214      	adds	r2, #20
 8000f08:	4293      	cmp	r3, r2
 8000f0a:	d012      	beq.n	8000f32 <HAL_DMA_IRQHandler+0x11a>
 8000f0c:	3214      	adds	r2, #20
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d011      	beq.n	8000f36 <HAL_DMA_IRQHandler+0x11e>
 8000f12:	3214      	adds	r2, #20
 8000f14:	4293      	cmp	r3, r2
 8000f16:	bf0c      	ite	eq
 8000f18:	f44f 5300 	moveq.w	r3, #8192	; 0x2000
 8000f1c:	f44f 3300 	movne.w	r3, #131072	; 0x20000
 8000f20:	4a28      	ldr	r2, [pc, #160]	; (8000fc4 <HAL_DMA_IRQHandler+0x1ac>)
 8000f22:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 8000f24:	2300      	movs	r3, #0
 8000f26:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8000f2a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000f2c:	e79e      	b.n	8000e6c <HAL_DMA_IRQHandler+0x54>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000f2e:	2302      	movs	r3, #2
 8000f30:	e7f6      	b.n	8000f20 <HAL_DMA_IRQHandler+0x108>
 8000f32:	2320      	movs	r3, #32
 8000f34:	e7f4      	b.n	8000f20 <HAL_DMA_IRQHandler+0x108>
 8000f36:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f3a:	e7f1      	b.n	8000f20 <HAL_DMA_IRQHandler+0x108>
 8000f3c:	4922      	ldr	r1, [pc, #136]	; (8000fc8 <HAL_DMA_IRQHandler+0x1b0>)
 8000f3e:	428b      	cmp	r3, r1
 8000f40:	d016      	beq.n	8000f70 <HAL_DMA_IRQHandler+0x158>
 8000f42:	3114      	adds	r1, #20
 8000f44:	428b      	cmp	r3, r1
 8000f46:	d015      	beq.n	8000f74 <HAL_DMA_IRQHandler+0x15c>
 8000f48:	3114      	adds	r1, #20
 8000f4a:	428b      	cmp	r3, r1
 8000f4c:	d014      	beq.n	8000f78 <HAL_DMA_IRQHandler+0x160>
 8000f4e:	3114      	adds	r1, #20
 8000f50:	428b      	cmp	r3, r1
 8000f52:	d014      	beq.n	8000f7e <HAL_DMA_IRQHandler+0x166>
 8000f54:	3114      	adds	r1, #20
 8000f56:	428b      	cmp	r3, r1
 8000f58:	d014      	beq.n	8000f84 <HAL_DMA_IRQHandler+0x16c>
 8000f5a:	3114      	adds	r1, #20
 8000f5c:	428b      	cmp	r3, r1
 8000f5e:	d014      	beq.n	8000f8a <HAL_DMA_IRQHandler+0x172>
 8000f60:	4293      	cmp	r3, r2
 8000f62:	bf14      	ite	ne
 8000f64:	f44f 3300 	movne.w	r3, #131072	; 0x20000
 8000f68:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 8000f6c:	4a17      	ldr	r2, [pc, #92]	; (8000fcc <HAL_DMA_IRQHandler+0x1b4>)
 8000f6e:	e7d8      	b.n	8000f22 <HAL_DMA_IRQHandler+0x10a>
 8000f70:	2302      	movs	r3, #2
 8000f72:	e7fb      	b.n	8000f6c <HAL_DMA_IRQHandler+0x154>
 8000f74:	2320      	movs	r3, #32
 8000f76:	e7f9      	b.n	8000f6c <HAL_DMA_IRQHandler+0x154>
 8000f78:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f7c:	e7f6      	b.n	8000f6c <HAL_DMA_IRQHandler+0x154>
 8000f7e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f82:	e7f3      	b.n	8000f6c <HAL_DMA_IRQHandler+0x154>
 8000f84:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f88:	e7f0      	b.n	8000f6c <HAL_DMA_IRQHandler+0x154>
 8000f8a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000f8e:	e7ed      	b.n	8000f6c <HAL_DMA_IRQHandler+0x154>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000f90:	2508      	movs	r5, #8
 8000f92:	4095      	lsls	r5, r2
 8000f94:	4225      	tst	r5, r4
 8000f96:	d011      	beq.n	8000fbc <HAL_DMA_IRQHandler+0x1a4>
 8000f98:	0709      	lsls	r1, r1, #28
 8000f9a:	d50f      	bpl.n	8000fbc <HAL_DMA_IRQHandler+0x1a4>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f9c:	6819      	ldr	r1, [r3, #0]
 8000f9e:	f021 010e 	bic.w	r1, r1, #14
 8000fa2:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	fa03 f202 	lsl.w	r2, r3, r2
 8000faa:	6072      	str	r2, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000fac:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 8000fae:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 8000fb8:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8000fba:	e757      	b.n	8000e6c <HAL_DMA_IRQHandler+0x54>
}
 8000fbc:	bc70      	pop	{r4, r5, r6}
 8000fbe:	4770      	bx	lr
 8000fc0:	40020080 	.word	0x40020080
 8000fc4:	40020400 	.word	0x40020400
 8000fc8:	40020008 	.word	0x40020008
 8000fcc:	40020000 	.word	0x40020000

08000fd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fd0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000fd4:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 8000fd6:	4626      	mov	r6, r4
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000fd8:	4f6c      	ldr	r7, [pc, #432]	; (800118c <HAL_GPIO_Init+0x1bc>)
 8000fda:	4b6d      	ldr	r3, [pc, #436]	; (8001190 <HAL_GPIO_Init+0x1c0>)
        temp = AFIO->EXTICR[position >> 2u];
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000fdc:	f8df e1b8 	ldr.w	lr, [pc, #440]	; 8001198 <HAL_GPIO_Init+0x1c8>
      switch (GPIO_Init->Mode)
 8000fe0:	f8df c1b8 	ldr.w	ip, [pc, #440]	; 800119c <HAL_GPIO_Init+0x1cc>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fe4:	680a      	ldr	r2, [r1, #0]
 8000fe6:	fa32 f506 	lsrs.w	r5, r2, r6
 8000fea:	d102      	bne.n	8000ff2 <HAL_GPIO_Init+0x22>
      }
    }

	position++;
  }
}
 8000fec:	b003      	add	sp, #12
 8000fee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 8000ff2:	f04f 0801 	mov.w	r8, #1
 8000ff6:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ffa:	ea02 0208 	and.w	r2, r2, r8
    if (iocurrent == ioposition)
 8000ffe:	4590      	cmp	r8, r2
 8001000:	f040 8084 	bne.w	800110c <HAL_GPIO_Init+0x13c>
      switch (GPIO_Init->Mode)
 8001004:	684d      	ldr	r5, [r1, #4]
 8001006:	2d12      	cmp	r5, #18
 8001008:	f000 80b1 	beq.w	800116e <HAL_GPIO_Init+0x19e>
 800100c:	f200 8087 	bhi.w	800111e <HAL_GPIO_Init+0x14e>
 8001010:	2d02      	cmp	r5, #2
 8001012:	f000 80a9 	beq.w	8001168 <HAL_GPIO_Init+0x198>
 8001016:	d87b      	bhi.n	8001110 <HAL_GPIO_Init+0x140>
 8001018:	2d00      	cmp	r5, #0
 800101a:	f000 808c 	beq.w	8001136 <HAL_GPIO_Init+0x166>
 800101e:	2d01      	cmp	r5, #1
 8001020:	f000 80a0 	beq.w	8001164 <HAL_GPIO_Init+0x194>
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001024:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001028:	2aff      	cmp	r2, #255	; 0xff
 800102a:	bf93      	iteet	ls
 800102c:	4682      	movls	sl, r0
 800102e:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 8001032:	3d08      	subhi	r5, #8
 8001034:	f8d0 b000 	ldrls.w	fp, [r0]
 8001038:	bf92      	itee	ls
 800103a:	00b5      	lslls	r5, r6, #2
 800103c:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8001040:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001042:	fa09 f805 	lsl.w	r8, r9, r5
 8001046:	ea2b 0808 	bic.w	r8, fp, r8
 800104a:	fa04 f505 	lsl.w	r5, r4, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800104e:	bf88      	it	hi
 8001050:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001054:	ea48 0505 	orr.w	r5, r8, r5
 8001058:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800105c:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8001060:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8001064:	d052      	beq.n	800110c <HAL_GPIO_Init+0x13c>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001066:	69bd      	ldr	r5, [r7, #24]
 8001068:	f026 0803 	bic.w	r8, r6, #3
 800106c:	f045 0501 	orr.w	r5, r5, #1
 8001070:	61bd      	str	r5, [r7, #24]
 8001072:	69bd      	ldr	r5, [r7, #24]
 8001074:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8001078:	f005 0501 	and.w	r5, r5, #1
 800107c:	9501      	str	r5, [sp, #4]
 800107e:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001082:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001086:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001088:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 800108c:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001090:	fa09 f90b 	lsl.w	r9, r9, fp
 8001094:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001098:	4d3e      	ldr	r5, [pc, #248]	; (8001194 <HAL_GPIO_Init+0x1c4>)
 800109a:	42a8      	cmp	r0, r5
 800109c:	d06c      	beq.n	8001178 <HAL_GPIO_Init+0x1a8>
 800109e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80010a2:	42a8      	cmp	r0, r5
 80010a4:	d06a      	beq.n	800117c <HAL_GPIO_Init+0x1ac>
 80010a6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80010aa:	42a8      	cmp	r0, r5
 80010ac:	d068      	beq.n	8001180 <HAL_GPIO_Init+0x1b0>
 80010ae:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80010b2:	42a8      	cmp	r0, r5
 80010b4:	d066      	beq.n	8001184 <HAL_GPIO_Init+0x1b4>
 80010b6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80010ba:	42a8      	cmp	r0, r5
 80010bc:	d064      	beq.n	8001188 <HAL_GPIO_Init+0x1b8>
 80010be:	4570      	cmp	r0, lr
 80010c0:	bf0c      	ite	eq
 80010c2:	2505      	moveq	r5, #5
 80010c4:	2506      	movne	r5, #6
 80010c6:	fa05 f50b 	lsl.w	r5, r5, fp
 80010ca:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 80010ce:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 80010d2:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010d4:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 80010d8:	bf14      	ite	ne
 80010da:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80010dc:	4395      	biceq	r5, r2
 80010de:	601d      	str	r5, [r3, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 80010e0:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010e2:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80010e6:	bf14      	ite	ne
 80010e8:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80010ea:	4395      	biceq	r5, r2
 80010ec:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 80010ee:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010f0:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 80010f4:	bf14      	ite	ne
 80010f6:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80010f8:	4395      	biceq	r5, r2
 80010fa:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 80010fc:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010fe:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8001102:	bf14      	ite	ne
 8001104:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001106:	ea25 0202 	biceq.w	r2, r5, r2
 800110a:	60da      	str	r2, [r3, #12]
	position++;
 800110c:	3601      	adds	r6, #1
 800110e:	e769      	b.n	8000fe4 <HAL_GPIO_Init+0x14>
      switch (GPIO_Init->Mode)
 8001110:	2d03      	cmp	r5, #3
 8001112:	d025      	beq.n	8001160 <HAL_GPIO_Init+0x190>
 8001114:	2d11      	cmp	r5, #17
 8001116:	d185      	bne.n	8001024 <HAL_GPIO_Init+0x54>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001118:	68cc      	ldr	r4, [r1, #12]
 800111a:	3404      	adds	r4, #4
          break;
 800111c:	e782      	b.n	8001024 <HAL_GPIO_Init+0x54>
      switch (GPIO_Init->Mode)
 800111e:	4565      	cmp	r5, ip
 8001120:	d009      	beq.n	8001136 <HAL_GPIO_Init+0x166>
 8001122:	d812      	bhi.n	800114a <HAL_GPIO_Init+0x17a>
 8001124:	f8df 9078 	ldr.w	r9, [pc, #120]	; 80011a0 <HAL_GPIO_Init+0x1d0>
 8001128:	454d      	cmp	r5, r9
 800112a:	d004      	beq.n	8001136 <HAL_GPIO_Init+0x166>
 800112c:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8001130:	454d      	cmp	r5, r9
 8001132:	f47f af77 	bne.w	8001024 <HAL_GPIO_Init+0x54>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001136:	688c      	ldr	r4, [r1, #8]
 8001138:	b1e4      	cbz	r4, 8001174 <HAL_GPIO_Init+0x1a4>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800113a:	2c01      	cmp	r4, #1
            GPIOx->BSRR = ioposition;
 800113c:	bf0c      	ite	eq
 800113e:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8001142:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001146:	2408      	movs	r4, #8
 8001148:	e76c      	b.n	8001024 <HAL_GPIO_Init+0x54>
      switch (GPIO_Init->Mode)
 800114a:	f8df 9058 	ldr.w	r9, [pc, #88]	; 80011a4 <HAL_GPIO_Init+0x1d4>
 800114e:	454d      	cmp	r5, r9
 8001150:	d0f1      	beq.n	8001136 <HAL_GPIO_Init+0x166>
 8001152:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8001156:	454d      	cmp	r5, r9
 8001158:	d0ed      	beq.n	8001136 <HAL_GPIO_Init+0x166>
 800115a:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 800115e:	e7e7      	b.n	8001130 <HAL_GPIO_Init+0x160>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001160:	2400      	movs	r4, #0
 8001162:	e75f      	b.n	8001024 <HAL_GPIO_Init+0x54>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001164:	68cc      	ldr	r4, [r1, #12]
          break;
 8001166:	e75d      	b.n	8001024 <HAL_GPIO_Init+0x54>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001168:	68cc      	ldr	r4, [r1, #12]
 800116a:	3408      	adds	r4, #8
          break;
 800116c:	e75a      	b.n	8001024 <HAL_GPIO_Init+0x54>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800116e:	68cc      	ldr	r4, [r1, #12]
 8001170:	340c      	adds	r4, #12
          break;
 8001172:	e757      	b.n	8001024 <HAL_GPIO_Init+0x54>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001174:	2404      	movs	r4, #4
 8001176:	e755      	b.n	8001024 <HAL_GPIO_Init+0x54>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001178:	2500      	movs	r5, #0
 800117a:	e7a4      	b.n	80010c6 <HAL_GPIO_Init+0xf6>
 800117c:	2501      	movs	r5, #1
 800117e:	e7a2      	b.n	80010c6 <HAL_GPIO_Init+0xf6>
 8001180:	2502      	movs	r5, #2
 8001182:	e7a0      	b.n	80010c6 <HAL_GPIO_Init+0xf6>
 8001184:	2503      	movs	r5, #3
 8001186:	e79e      	b.n	80010c6 <HAL_GPIO_Init+0xf6>
 8001188:	2504      	movs	r5, #4
 800118a:	e79c      	b.n	80010c6 <HAL_GPIO_Init+0xf6>
 800118c:	40021000 	.word	0x40021000
 8001190:	40010400 	.word	0x40010400
 8001194:	40010800 	.word	0x40010800
 8001198:	40011c00 	.word	0x40011c00
 800119c:	10210000 	.word	0x10210000
 80011a0:	10110000 	.word	0x10110000
 80011a4:	10310000 	.word	0x10310000

080011a8 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80011a8:	6883      	ldr	r3, [r0, #8]
 80011aa:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80011ac:	bf14      	ite	ne
 80011ae:	2001      	movne	r0, #1
 80011b0:	2000      	moveq	r0, #0
 80011b2:	4770      	bx	lr

080011b4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80011b4:	b10a      	cbz	r2, 80011ba <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80011b6:	6101      	str	r1, [r0, #16]
 80011b8:	4770      	bx	lr
 80011ba:	0409      	lsls	r1, r1, #16
 80011bc:	e7fb      	b.n	80011b6 <HAL_GPIO_WritePin+0x2>

080011be <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 80011be:	68c3      	ldr	r3, [r0, #12]
 80011c0:	420b      	tst	r3, r1
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80011c2:	bf14      	ite	ne
 80011c4:	6141      	strne	r1, [r0, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80011c6:	6101      	streq	r1, [r0, #16]
 80011c8:	4770      	bx	lr
	...

080011cc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80011cc:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80011ce:	4b04      	ldr	r3, [pc, #16]	; (80011e0 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 80011d0:	6959      	ldr	r1, [r3, #20]
 80011d2:	4201      	tst	r1, r0
 80011d4:	d002      	beq.n	80011dc <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80011d6:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80011d8:	f002 fb9e 	bl	8003918 <HAL_GPIO_EXTI_Callback>
 80011dc:	bd08      	pop	{r3, pc}
 80011de:	bf00      	nop
 80011e0:	40010400 	.word	0x40010400

080011e4 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80011e4:	6801      	ldr	r1, [r0, #0]
 80011e6:	2200      	movs	r2, #0
 80011e8:	694b      	ldr	r3, [r1, #20]
 80011ea:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 80011ee:	d010      	beq.n	8001212 <I2C_IsAcknowledgeFailed+0x2e>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80011f0:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 80011f4:	614b      	str	r3, [r1, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 80011f6:	2320      	movs	r3, #32
    hi2c->PreviousState       = I2C_STATE_NONE;
 80011f8:	6302      	str	r2, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80011fa:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80011fe:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001202:	6c03      	ldr	r3, [r0, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001204:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001208:	f043 0304 	orr.w	r3, r3, #4
 800120c:	6403      	str	r3, [r0, #64]	; 0x40

    return HAL_ERROR;
 800120e:	2001      	movs	r0, #1
 8001210:	4770      	bx	lr
  }
  return HAL_OK;
 8001212:	4618      	mov	r0, r3
}
 8001214:	4770      	bx	lr

08001216 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8001216:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800121a:	4604      	mov	r4, r0
 800121c:	4617      	mov	r7, r2
 800121e:	4699      	mov	r9, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001220:	f3c1 4807 	ubfx	r8, r1, #16, #8
 8001224:	b28e      	uxth	r6, r1
 8001226:	6825      	ldr	r5, [r4, #0]
 8001228:	f1b8 0f01 	cmp.w	r8, #1
 800122c:	bf0c      	ite	eq
 800122e:	696b      	ldreq	r3, [r5, #20]
 8001230:	69ab      	ldrne	r3, [r5, #24]
 8001232:	ea36 0303 	bics.w	r3, r6, r3
 8001236:	bf14      	ite	ne
 8001238:	2001      	movne	r0, #1
 800123a:	2000      	moveq	r0, #0
 800123c:	b908      	cbnz	r0, 8001242 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x2c>
}
 800123e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001242:	696b      	ldr	r3, [r5, #20]
 8001244:	055a      	lsls	r2, r3, #21
 8001246:	d516      	bpl.n	8001276 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x60>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001248:	682b      	ldr	r3, [r5, #0]
      hi2c->State               = HAL_I2C_STATE_READY;
 800124a:	2220      	movs	r2, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800124c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001250:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001252:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8001256:	616b      	str	r3, [r5, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001258:	2300      	movs	r3, #0
 800125a:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800125c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001260:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001264:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001266:	f042 0204 	orr.w	r2, r2, #4
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800126a:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800126c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8001270:	2001      	movs	r0, #1
 8001272:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (Timeout != HAL_MAX_DELAY)
 8001276:	1c7b      	adds	r3, r7, #1
 8001278:	d0d5      	beq.n	8001226 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800127a:	f7ff fa9b 	bl	80007b4 <HAL_GetTick>
 800127e:	eba0 0009 	sub.w	r0, r0, r9
 8001282:	4287      	cmp	r7, r0
 8001284:	d301      	bcc.n	800128a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x74>
 8001286:	2f00      	cmp	r7, #0
 8001288:	d1cd      	bne.n	8001226 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        hi2c->PreviousState       = I2C_STATE_NONE;
 800128a:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 800128c:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 800128e:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001290:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001294:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001298:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800129a:	f042 0220 	orr.w	r2, r2, #32
 800129e:	e7e4      	b.n	800126a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x54>

080012a0 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 80012a0:	b570      	push	{r4, r5, r6, lr}
 80012a2:	4604      	mov	r4, r0
 80012a4:	460d      	mov	r5, r1
 80012a6:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80012a8:	6823      	ldr	r3, [r4, #0]
 80012aa:	695b      	ldr	r3, [r3, #20]
 80012ac:	075b      	lsls	r3, r3, #29
 80012ae:	d501      	bpl.n	80012b4 <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 80012b0:	2000      	movs	r0, #0
 80012b2:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80012b4:	4620      	mov	r0, r4
 80012b6:	f7ff ff95 	bl	80011e4 <I2C_IsAcknowledgeFailed>
 80012ba:	b9a8      	cbnz	r0, 80012e8 <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 80012bc:	1c6a      	adds	r2, r5, #1
 80012be:	d0f3      	beq.n	80012a8 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80012c0:	f7ff fa78 	bl	80007b4 <HAL_GetTick>
 80012c4:	1b80      	subs	r0, r0, r6
 80012c6:	4285      	cmp	r5, r0
 80012c8:	d301      	bcc.n	80012ce <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 80012ca:	2d00      	cmp	r5, #0
 80012cc:	d1ec      	bne.n	80012a8 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 80012ce:	2300      	movs	r3, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 80012d0:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 80012d2:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80012d4:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80012d8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80012dc:	6c22      	ldr	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 80012de:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80012e2:	f042 0220 	orr.w	r2, r2, #32
 80012e6:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 80012e8:	2001      	movs	r0, #1
}
 80012ea:	bd70      	pop	{r4, r5, r6, pc}

080012ec <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 80012ec:	b570      	push	{r4, r5, r6, lr}
 80012ee:	4604      	mov	r4, r0
 80012f0:	460d      	mov	r5, r1
 80012f2:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80012f4:	6820      	ldr	r0, [r4, #0]
 80012f6:	6943      	ldr	r3, [r0, #20]
 80012f8:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 80012fc:	d001      	beq.n	8001302 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
  return HAL_OK;
 80012fe:	2000      	movs	r0, #0
}
 8001300:	bd70      	pop	{r4, r5, r6, pc}
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001302:	6942      	ldr	r2, [r0, #20]
 8001304:	06d2      	lsls	r2, r2, #27
 8001306:	d50e      	bpl.n	8001326 <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001308:	f06f 0210 	mvn.w	r2, #16
 800130c:	6142      	str	r2, [r0, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 800130e:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001310:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001312:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001316:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800131a:	6c22      	ldr	r2, [r4, #64]	; 0x40
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800131c:	6422      	str	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 800131e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8001322:	2001      	movs	r0, #1
 8001324:	bd70      	pop	{r4, r5, r6, pc}
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001326:	f7ff fa45 	bl	80007b4 <HAL_GetTick>
 800132a:	1b80      	subs	r0, r0, r6
 800132c:	42a8      	cmp	r0, r5
 800132e:	d801      	bhi.n	8001334 <I2C_WaitOnRXNEFlagUntilTimeout+0x48>
 8001330:	2d00      	cmp	r5, #0
 8001332:	d1df      	bne.n	80012f4 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001334:	2300      	movs	r3, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 8001336:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001338:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800133a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800133e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001342:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001344:	f042 0220 	orr.w	r2, r2, #32
 8001348:	e7e8      	b.n	800131c <I2C_WaitOnRXNEFlagUntilTimeout+0x30>

0800134a <I2C_WaitOnFlagUntilTimeout>:
{
 800134a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800134e:	4604      	mov	r4, r0
 8001350:	4690      	mov	r8, r2
 8001352:	461f      	mov	r7, r3
 8001354:	9e08      	ldr	r6, [sp, #32]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001356:	f3c1 4907 	ubfx	r9, r1, #16, #8
 800135a:	b28d      	uxth	r5, r1
 800135c:	6823      	ldr	r3, [r4, #0]
 800135e:	f1b9 0f01 	cmp.w	r9, #1
 8001362:	bf0c      	ite	eq
 8001364:	695b      	ldreq	r3, [r3, #20]
 8001366:	699b      	ldrne	r3, [r3, #24]
 8001368:	ea35 0303 	bics.w	r3, r5, r3
 800136c:	bf0c      	ite	eq
 800136e:	2301      	moveq	r3, #1
 8001370:	2300      	movne	r3, #0
 8001372:	4543      	cmp	r3, r8
 8001374:	d002      	beq.n	800137c <I2C_WaitOnFlagUntilTimeout+0x32>
  return HAL_OK;
 8001376:	2000      	movs	r0, #0
}
 8001378:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (Timeout != HAL_MAX_DELAY)
 800137c:	1c7b      	adds	r3, r7, #1
 800137e:	d0ed      	beq.n	800135c <I2C_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001380:	f7ff fa18 	bl	80007b4 <HAL_GetTick>
 8001384:	1b80      	subs	r0, r0, r6
 8001386:	4287      	cmp	r7, r0
 8001388:	d301      	bcc.n	800138e <I2C_WaitOnFlagUntilTimeout+0x44>
 800138a:	2f00      	cmp	r7, #0
 800138c:	d1e6      	bne.n	800135c <I2C_WaitOnFlagUntilTimeout+0x12>
      hi2c->PreviousState       = I2C_STATE_NONE;
 800138e:	2300      	movs	r3, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 8001390:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001392:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001394:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001398:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800139c:	6c22      	ldr	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 800139e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80013a2:	f042 0220 	orr.w	r2, r2, #32
 80013a6:	6422      	str	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 80013a8:	2001      	movs	r0, #1
 80013aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080013ae <I2C_WaitOnTXEFlagUntilTimeout>:
{
 80013ae:	b570      	push	{r4, r5, r6, lr}
 80013b0:	4604      	mov	r4, r0
 80013b2:	460d      	mov	r5, r1
 80013b4:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80013b6:	6823      	ldr	r3, [r4, #0]
 80013b8:	695b      	ldr	r3, [r3, #20]
 80013ba:	061b      	lsls	r3, r3, #24
 80013bc:	d501      	bpl.n	80013c2 <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;
 80013be:	2000      	movs	r0, #0
 80013c0:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80013c2:	4620      	mov	r0, r4
 80013c4:	f7ff ff0e 	bl	80011e4 <I2C_IsAcknowledgeFailed>
 80013c8:	b9a8      	cbnz	r0, 80013f6 <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 80013ca:	1c6a      	adds	r2, r5, #1
 80013cc:	d0f3      	beq.n	80013b6 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80013ce:	f7ff f9f1 	bl	80007b4 <HAL_GetTick>
 80013d2:	1b80      	subs	r0, r0, r6
 80013d4:	4285      	cmp	r5, r0
 80013d6:	d301      	bcc.n	80013dc <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 80013d8:	2d00      	cmp	r5, #0
 80013da:	d1ec      	bne.n	80013b6 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 80013dc:	2300      	movs	r3, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 80013de:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 80013e0:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80013e2:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80013e6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80013ea:	6c22      	ldr	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 80013ec:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80013f0:	f042 0220 	orr.w	r2, r2, #32
 80013f4:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 80013f6:	2001      	movs	r0, #1
}
 80013f8:	bd70      	pop	{r4, r5, r6, pc}
	...

080013fc <I2C_RequestMemoryRead>:
{
 80013fc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8001400:	4698      	mov	r8, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001402:	6803      	ldr	r3, [r0, #0]
{
 8001404:	4616      	mov	r6, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001406:	681a      	ldr	r2, [r3, #0]
{
 8001408:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800140a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800140e:	601a      	str	r2, [r3, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001410:	681a      	ldr	r2, [r3, #0]
{
 8001412:	460f      	mov	r7, r1
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001414:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001418:	601a      	str	r2, [r3, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800141a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800141e:	9500      	str	r5, [sp, #0]
 8001420:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001422:	2200      	movs	r2, #0
{
 8001424:	4604      	mov	r4, r0
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001426:	f7ff ff90 	bl	800134a <I2C_WaitOnFlagUntilTimeout>
 800142a:	b118      	cbz	r0, 8001434 <I2C_RequestMemoryRead+0x38>
    return HAL_ERROR;
 800142c:	2001      	movs	r0, #1
}
 800142e:	b004      	add	sp, #16
 8001430:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001434:	6823      	ldr	r3, [r4, #0]
 8001436:	b2ff      	uxtb	r7, r7
 8001438:	f007 02fe 	and.w	r2, r7, #254	; 0xfe
 800143c:	611a      	str	r2, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800143e:	4929      	ldr	r1, [pc, #164]	; (80014e4 <I2C_RequestMemoryRead+0xe8>)
 8001440:	462b      	mov	r3, r5
 8001442:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001444:	4620      	mov	r0, r4
 8001446:	f7ff fee6 	bl	8001216 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800144a:	2800      	cmp	r0, #0
 800144c:	d1ee      	bne.n	800142c <I2C_RequestMemoryRead+0x30>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800144e:	6823      	ldr	r3, [r4, #0]
 8001450:	9003      	str	r0, [sp, #12]
 8001452:	695a      	ldr	r2, [r3, #20]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001454:	990a      	ldr	r1, [sp, #40]	; 0x28
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001456:	9203      	str	r2, [sp, #12]
 8001458:	699b      	ldr	r3, [r3, #24]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800145a:	462a      	mov	r2, r5
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800145c:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800145e:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001460:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001462:	f7ff ffa4 	bl	80013ae <I2C_WaitOnTXEFlagUntilTimeout>
 8001466:	b140      	cbz	r0, 800147a <I2C_RequestMemoryRead+0x7e>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001468:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800146a:	2b04      	cmp	r3, #4
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800146c:	bf01      	itttt	eq
 800146e:	6822      	ldreq	r2, [r4, #0]
 8001470:	6813      	ldreq	r3, [r2, #0]
 8001472:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 8001476:	6013      	streq	r3, [r2, #0]
 8001478:	e7d8      	b.n	800142c <I2C_RequestMemoryRead+0x30>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800147a:	f1b8 0f01 	cmp.w	r8, #1
 800147e:	6823      	ldr	r3, [r4, #0]
 8001480:	d125      	bne.n	80014ce <I2C_RequestMemoryRead+0xd2>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001482:	b2f6      	uxtb	r6, r6
 8001484:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001486:	462a      	mov	r2, r5
 8001488:	990a      	ldr	r1, [sp, #40]	; 0x28
 800148a:	4620      	mov	r0, r4
 800148c:	f7ff ff8f 	bl	80013ae <I2C_WaitOnTXEFlagUntilTimeout>
 8001490:	4602      	mov	r2, r0
 8001492:	2800      	cmp	r0, #0
 8001494:	d1e8      	bne.n	8001468 <I2C_RequestMemoryRead+0x6c>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001496:	6821      	ldr	r1, [r4, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001498:	4620      	mov	r0, r4
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800149a:	680b      	ldr	r3, [r1, #0]
 800149c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014a0:	600b      	str	r3, [r1, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80014a2:	9500      	str	r5, [sp, #0]
 80014a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80014a6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80014aa:	f7ff ff4e 	bl	800134a <I2C_WaitOnFlagUntilTimeout>
 80014ae:	2800      	cmp	r0, #0
 80014b0:	d1bc      	bne.n	800142c <I2C_RequestMemoryRead+0x30>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80014b2:	6823      	ldr	r3, [r4, #0]
 80014b4:	f047 0701 	orr.w	r7, r7, #1
 80014b8:	611f      	str	r7, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80014ba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80014bc:	462b      	mov	r3, r5
 80014be:	4909      	ldr	r1, [pc, #36]	; (80014e4 <I2C_RequestMemoryRead+0xe8>)
 80014c0:	4620      	mov	r0, r4
 80014c2:	f7ff fea8 	bl	8001216 <I2C_WaitOnMasterAddressFlagUntilTimeout>
    return HAL_ERROR;
 80014c6:	3000      	adds	r0, #0
 80014c8:	bf18      	it	ne
 80014ca:	2001      	movne	r0, #1
 80014cc:	e7af      	b.n	800142e <I2C_RequestMemoryRead+0x32>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80014ce:	0a32      	lsrs	r2, r6, #8
 80014d0:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80014d2:	990a      	ldr	r1, [sp, #40]	; 0x28
 80014d4:	462a      	mov	r2, r5
 80014d6:	4620      	mov	r0, r4
 80014d8:	f7ff ff69 	bl	80013ae <I2C_WaitOnTXEFlagUntilTimeout>
 80014dc:	2800      	cmp	r0, #0
 80014de:	d1c3      	bne.n	8001468 <I2C_RequestMemoryRead+0x6c>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80014e0:	6823      	ldr	r3, [r4, #0]
 80014e2:	e7ce      	b.n	8001482 <I2C_RequestMemoryRead+0x86>
 80014e4:	00010002 	.word	0x00010002

080014e8 <HAL_I2C_Init>:
{
 80014e8:	b570      	push	{r4, r5, r6, lr}
  if (hi2c == NULL)
 80014ea:	4604      	mov	r4, r0
 80014ec:	b908      	cbnz	r0, 80014f2 <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 80014ee:	2001      	movs	r0, #1
 80014f0:	bd70      	pop	{r4, r5, r6, pc}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80014f2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80014f6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80014fa:	b91b      	cbnz	r3, 8001504 <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 80014fc:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8001500:	f003 fdc8 	bl	8005094 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001504:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 8001506:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001508:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 800150c:	6813      	ldr	r3, [r2, #0]
 800150e:	f023 0301 	bic.w	r3, r3, #1
 8001512:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001514:	f000 ff0e 	bl	8002334 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001518:	6865      	ldr	r5, [r4, #4]
 800151a:	4b41      	ldr	r3, [pc, #260]	; (8001620 <HAL_I2C_Init+0x138>)
 800151c:	429d      	cmp	r5, r3
 800151e:	d84d      	bhi.n	80015bc <HAL_I2C_Init+0xd4>
 8001520:	4b40      	ldr	r3, [pc, #256]	; (8001624 <HAL_I2C_Init+0x13c>)
 8001522:	4298      	cmp	r0, r3
 8001524:	d9e3      	bls.n	80014ee <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 8001526:	4940      	ldr	r1, [pc, #256]	; (8001628 <HAL_I2C_Init+0x140>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001528:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 800152a:	fbb0 f1f1 	udiv	r1, r0, r1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800152e:	6853      	ldr	r3, [r2, #4]
 8001530:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001534:	430b      	orrs	r3, r1
 8001536:	6053      	str	r3, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001538:	6a13      	ldr	r3, [r2, #32]
 800153a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800153e:	3101      	adds	r1, #1
 8001540:	4319      	orrs	r1, r3
 8001542:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001544:	69d1      	ldr	r1, [r2, #28]
 8001546:	4b36      	ldr	r3, [pc, #216]	; (8001620 <HAL_I2C_Init+0x138>)
 8001548:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 800154c:	429d      	cmp	r5, r3
 800154e:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8001552:	f100 30ff 	add.w	r0, r0, #4294967295
 8001556:	d848      	bhi.n	80015ea <HAL_I2C_Init+0x102>
 8001558:	006d      	lsls	r5, r5, #1
 800155a:	fbb0 f0f5 	udiv	r0, r0, r5
 800155e:	3001      	adds	r0, #1
 8001560:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8001564:	2b04      	cmp	r3, #4
 8001566:	bf38      	it	cc
 8001568:	2304      	movcc	r3, #4
 800156a:	430b      	orrs	r3, r1
 800156c:	61d3      	str	r3, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800156e:	6811      	ldr	r1, [r2, #0]
 8001570:	6a20      	ldr	r0, [r4, #32]
 8001572:	69e3      	ldr	r3, [r4, #28]
 8001574:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8001578:	4303      	orrs	r3, r0
 800157a:	430b      	orrs	r3, r1
 800157c:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800157e:	6891      	ldr	r1, [r2, #8]
 8001580:	68e0      	ldr	r0, [r4, #12]
 8001582:	6923      	ldr	r3, [r4, #16]
 8001584:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 8001588:	4303      	orrs	r3, r0
 800158a:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 800158e:	430b      	orrs	r3, r1
 8001590:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001592:	68d1      	ldr	r1, [r2, #12]
 8001594:	69a0      	ldr	r0, [r4, #24]
 8001596:	6963      	ldr	r3, [r4, #20]
 8001598:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 800159c:	4303      	orrs	r3, r0
 800159e:	430b      	orrs	r3, r1
 80015a0:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 80015a2:	6813      	ldr	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015a4:	2000      	movs	r0, #0
  __HAL_I2C_ENABLE(hi2c);
 80015a6:	f043 0301 	orr.w	r3, r3, #1
 80015aa:	6013      	str	r3, [r2, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 80015ac:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015ae:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80015b0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80015b4:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80015b6:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 80015ba:	bd70      	pop	{r4, r5, r6, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80015bc:	4b1b      	ldr	r3, [pc, #108]	; (800162c <HAL_I2C_Init+0x144>)
 80015be:	4298      	cmp	r0, r3
 80015c0:	d995      	bls.n	80014ee <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 80015c2:	4e19      	ldr	r6, [pc, #100]	; (8001628 <HAL_I2C_Init+0x140>)
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80015c4:	f44f 7196 	mov.w	r1, #300	; 0x12c
  freqrange = I2C_FREQRANGE(pclk1);
 80015c8:	fbb0 f6f6 	udiv	r6, r0, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80015cc:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80015ce:	4371      	muls	r1, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80015d0:	6853      	ldr	r3, [r2, #4]
 80015d2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80015d6:	4333      	orrs	r3, r6
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80015d8:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80015dc:	6053      	str	r3, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80015de:	6a13      	ldr	r3, [r2, #32]
 80015e0:	fbb1 f1f6 	udiv	r1, r1, r6
 80015e4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80015e8:	e7a9      	b.n	800153e <HAL_I2C_Init+0x56>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80015ea:	68a3      	ldr	r3, [r4, #8]
 80015ec:	b953      	cbnz	r3, 8001604 <HAL_I2C_Init+0x11c>
 80015ee:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 80015f2:	fbb0 f0f3 	udiv	r0, r0, r3
 80015f6:	1c43      	adds	r3, r0, #1
 80015f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015fc:	b16b      	cbz	r3, 800161a <HAL_I2C_Init+0x132>
 80015fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001602:	e7b2      	b.n	800156a <HAL_I2C_Init+0x82>
 8001604:	2319      	movs	r3, #25
 8001606:	436b      	muls	r3, r5
 8001608:	fbb0 f0f3 	udiv	r0, r0, r3
 800160c:	1c43      	adds	r3, r0, #1
 800160e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001612:	b113      	cbz	r3, 800161a <HAL_I2C_Init+0x132>
 8001614:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001618:	e7a7      	b.n	800156a <HAL_I2C_Init+0x82>
 800161a:	2301      	movs	r3, #1
 800161c:	e7a5      	b.n	800156a <HAL_I2C_Init+0x82>
 800161e:	bf00      	nop
 8001620:	000186a0 	.word	0x000186a0
 8001624:	001e847f 	.word	0x001e847f
 8001628:	000f4240 	.word	0x000f4240
 800162c:	003d08ff 	.word	0x003d08ff

08001630 <HAL_I2C_Master_Transmit>:
{
 8001630:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8001634:	4604      	mov	r4, r0
 8001636:	461f      	mov	r7, r3
 8001638:	460d      	mov	r5, r1
 800163a:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 800163c:	f7ff f8ba 	bl	80007b4 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001640:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  uint32_t tickstart = HAL_GetTick();
 8001644:	4606      	mov	r6, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001646:	2b20      	cmp	r3, #32
 8001648:	d004      	beq.n	8001654 <HAL_I2C_Master_Transmit+0x24>
    return HAL_BUSY;
 800164a:	2502      	movs	r5, #2
}
 800164c:	4628      	mov	r0, r5
 800164e:	b004      	add	sp, #16
 8001650:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001654:	9000      	str	r0, [sp, #0]
 8001656:	2319      	movs	r3, #25
 8001658:	2201      	movs	r2, #1
 800165a:	4958      	ldr	r1, [pc, #352]	; (80017bc <HAL_I2C_Master_Transmit+0x18c>)
 800165c:	4620      	mov	r0, r4
 800165e:	f7ff fe74 	bl	800134a <I2C_WaitOnFlagUntilTimeout>
 8001662:	2800      	cmp	r0, #0
 8001664:	d1f1      	bne.n	800164a <HAL_I2C_Master_Transmit+0x1a>
    __HAL_LOCK(hi2c);
 8001666:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800166a:	2b01      	cmp	r3, #1
 800166c:	d0ed      	beq.n	800164a <HAL_I2C_Master_Transmit+0x1a>
 800166e:	2301      	movs	r3, #1
 8001670:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001674:	6823      	ldr	r3, [r4, #0]
 8001676:	681a      	ldr	r2, [r3, #0]
 8001678:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 800167a:	bf5e      	ittt	pl
 800167c:	681a      	ldrpl	r2, [r3, #0]
 800167e:	f042 0201 	orrpl.w	r2, r2, #1
 8001682:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001684:	681a      	ldr	r2, [r3, #0]
 8001686:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800168a:	601a      	str	r2, [r3, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800168c:	2221      	movs	r2, #33	; 0x21
 800168e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001692:	2210      	movs	r2, #16
 8001694:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001698:	2200      	movs	r2, #0
 800169a:	6422      	str	r2, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 800169c:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800169e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
 80016a0:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferSize    = hi2c->XferCount;
 80016a4:	8522      	strh	r2, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80016a6:	4a46      	ldr	r2, [pc, #280]	; (80017c0 <HAL_I2C_Master_Transmit+0x190>)
 80016a8:	62e2      	str	r2, [r4, #44]	; 0x2c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80016aa:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80016ac:	2a08      	cmp	r2, #8
 80016ae:	d004      	beq.n	80016ba <HAL_I2C_Master_Transmit+0x8a>
 80016b0:	2a01      	cmp	r2, #1
 80016b2:	d002      	beq.n	80016ba <HAL_I2C_Master_Transmit+0x8a>
 80016b4:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 80016b8:	d104      	bne.n	80016c4 <HAL_I2C_Master_Transmit+0x94>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80016c0:	601a      	str	r2, [r3, #0]
 80016c2:	e002      	b.n	80016ca <HAL_I2C_Master_Transmit+0x9a>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80016c4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80016c6:	2a12      	cmp	r2, #18
 80016c8:	d0f7      	beq.n	80016ba <HAL_I2C_Master_Transmit+0x8a>
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80016ca:	9600      	str	r6, [sp, #0]
 80016cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80016ce:	2200      	movs	r2, #0
 80016d0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80016d4:	4620      	mov	r0, r4
 80016d6:	f7ff fe38 	bl	800134a <I2C_WaitOnFlagUntilTimeout>
 80016da:	b108      	cbz	r0, 80016e0 <HAL_I2C_Master_Transmit+0xb0>
        return HAL_ERROR;
 80016dc:	2501      	movs	r5, #1
 80016de:	e7b5      	b.n	800164c <HAL_I2C_Master_Transmit+0x1c>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80016e0:	6923      	ldr	r3, [r4, #16]
 80016e2:	6822      	ldr	r2, [r4, #0]
 80016e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80016e8:	d113      	bne.n	8001712 <HAL_I2C_Master_Transmit+0xe2>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80016ea:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 80016ee:	6115      	str	r5, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80016f0:	4633      	mov	r3, r6
 80016f2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80016f4:	4933      	ldr	r1, [pc, #204]	; (80017c4 <HAL_I2C_Master_Transmit+0x194>)
 80016f6:	4620      	mov	r0, r4
 80016f8:	f7ff fd8d 	bl	8001216 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80016fc:	4605      	mov	r5, r0
 80016fe:	2800      	cmp	r0, #0
 8001700:	d1ec      	bne.n	80016dc <HAL_I2C_Master_Transmit+0xac>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001702:	6823      	ldr	r3, [r4, #0]
 8001704:	9003      	str	r0, [sp, #12]
 8001706:	695a      	ldr	r2, [r3, #20]
 8001708:	9203      	str	r2, [sp, #12]
 800170a:	699b      	ldr	r3, [r3, #24]
 800170c:	9303      	str	r3, [sp, #12]
 800170e:	9b03      	ldr	r3, [sp, #12]
    while (hi2c->XferSize > 0U)
 8001710:	e044      	b.n	800179c <HAL_I2C_Master_Transmit+0x16c>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001712:	11eb      	asrs	r3, r5, #7
 8001714:	f003 0306 	and.w	r3, r3, #6
 8001718:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 800171c:	6113      	str	r3, [r2, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800171e:	492a      	ldr	r1, [pc, #168]	; (80017c8 <HAL_I2C_Master_Transmit+0x198>)
 8001720:	4633      	mov	r3, r6
 8001722:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001724:	4620      	mov	r0, r4
 8001726:	f7ff fd76 	bl	8001216 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800172a:	2800      	cmp	r0, #0
 800172c:	d1d6      	bne.n	80016dc <HAL_I2C_Master_Transmit+0xac>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800172e:	6823      	ldr	r3, [r4, #0]
 8001730:	b2ed      	uxtb	r5, r5
 8001732:	611d      	str	r5, [r3, #16]
 8001734:	e7dc      	b.n	80016f0 <HAL_I2C_Master_Transmit+0xc0>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001736:	4632      	mov	r2, r6
 8001738:	990a      	ldr	r1, [sp, #40]	; 0x28
 800173a:	4620      	mov	r0, r4
 800173c:	f7ff fe37 	bl	80013ae <I2C_WaitOnTXEFlagUntilTimeout>
 8001740:	b140      	cbz	r0, 8001754 <HAL_I2C_Master_Transmit+0x124>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001742:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001744:	2b04      	cmp	r3, #4
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001746:	bf01      	itttt	eq
 8001748:	6822      	ldreq	r2, [r4, #0]
 800174a:	6813      	ldreq	r3, [r2, #0]
 800174c:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 8001750:	6013      	streq	r3, [r2, #0]
 8001752:	e7c3      	b.n	80016dc <HAL_I2C_Master_Transmit+0xac>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001754:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001756:	6820      	ldr	r0, [r4, #0]
 8001758:	461a      	mov	r2, r3
 800175a:	f812 1b01 	ldrb.w	r1, [r2], #1
 800175e:	6101      	str	r1, [r0, #16]
      hi2c->pBuffPtr++;
 8001760:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8001762:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001764:	3a01      	subs	r2, #1
 8001766:	b292      	uxth	r2, r2
 8001768:	8562      	strh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800176a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800176c:	6947      	ldr	r7, [r0, #20]
      hi2c->XferSize--;
 800176e:	1e51      	subs	r1, r2, #1
 8001770:	b289      	uxth	r1, r1
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001772:	077f      	lsls	r7, r7, #29
      hi2c->XferSize--;
 8001774:	8521      	strh	r1, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001776:	d50a      	bpl.n	800178e <HAL_I2C_Master_Transmit+0x15e>
 8001778:	b149      	cbz	r1, 800178e <HAL_I2C_Master_Transmit+0x15e>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800177a:	7859      	ldrb	r1, [r3, #1]
        hi2c->pBuffPtr++;
 800177c:	3302      	adds	r3, #2
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800177e:	6101      	str	r1, [r0, #16]
        hi2c->pBuffPtr++;
 8001780:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8001782:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8001784:	3a02      	subs	r2, #2
        hi2c->XferCount--;
 8001786:	3b01      	subs	r3, #1
 8001788:	b29b      	uxth	r3, r3
 800178a:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 800178c:	8522      	strh	r2, [r4, #40]	; 0x28
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800178e:	4632      	mov	r2, r6
 8001790:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001792:	4620      	mov	r0, r4
 8001794:	f7ff fd84 	bl	80012a0 <I2C_WaitOnBTFFlagUntilTimeout>
 8001798:	2800      	cmp	r0, #0
 800179a:	d1d2      	bne.n	8001742 <HAL_I2C_Master_Transmit+0x112>
    while (hi2c->XferSize > 0U)
 800179c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d1c9      	bne.n	8001736 <HAL_I2C_Master_Transmit+0x106>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017a2:	6821      	ldr	r1, [r4, #0]
 80017a4:	680a      	ldr	r2, [r1, #0]
 80017a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80017aa:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80017ac:	2220      	movs	r2, #32
    __HAL_UNLOCK(hi2c);
 80017ae:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 80017b2:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80017b6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 80017ba:	e747      	b.n	800164c <HAL_I2C_Master_Transmit+0x1c>
 80017bc:	00100002 	.word	0x00100002
 80017c0:	ffff0000 	.word	0xffff0000
 80017c4:	00010002 	.word	0x00010002
 80017c8:	00010008 	.word	0x00010008

080017cc <HAL_I2C_Master_Receive>:
{
 80017cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80017d0:	4604      	mov	r4, r0
 80017d2:	b089      	sub	sp, #36	; 0x24
 80017d4:	4698      	mov	r8, r3
 80017d6:	460f      	mov	r7, r1
 80017d8:	4691      	mov	r9, r2
 80017da:	9e10      	ldr	r6, [sp, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 80017dc:	f7fe ffea 	bl	80007b4 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80017e0:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  uint32_t tickstart = HAL_GetTick();
 80017e4:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 80017e6:	2b20      	cmp	r3, #32
 80017e8:	d004      	beq.n	80017f4 <HAL_I2C_Master_Receive+0x28>
    return HAL_BUSY;
 80017ea:	2702      	movs	r7, #2
}
 80017ec:	4638      	mov	r0, r7
 80017ee:	b009      	add	sp, #36	; 0x24
 80017f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80017f4:	9000      	str	r0, [sp, #0]
 80017f6:	2319      	movs	r3, #25
 80017f8:	2201      	movs	r2, #1
 80017fa:	499c      	ldr	r1, [pc, #624]	; (8001a6c <HAL_I2C_Master_Receive+0x2a0>)
 80017fc:	4620      	mov	r0, r4
 80017fe:	f7ff fda4 	bl	800134a <I2C_WaitOnFlagUntilTimeout>
 8001802:	2800      	cmp	r0, #0
 8001804:	d1f1      	bne.n	80017ea <HAL_I2C_Master_Receive+0x1e>
    __HAL_LOCK(hi2c);
 8001806:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800180a:	2b01      	cmp	r3, #1
 800180c:	d0ed      	beq.n	80017ea <HAL_I2C_Master_Receive+0x1e>
 800180e:	2301      	movs	r3, #1
 8001810:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001814:	6823      	ldr	r3, [r4, #0]
 8001816:	681a      	ldr	r2, [r3, #0]
 8001818:	07d0      	lsls	r0, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 800181a:	bf5e      	ittt	pl
 800181c:	681a      	ldrpl	r2, [r3, #0]
 800181e:	f042 0201 	orrpl.w	r2, r2, #1
 8001822:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001824:	681a      	ldr	r2, [r3, #0]
 8001826:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800182a:	601a      	str	r2, [r3, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800182c:	2222      	movs	r2, #34	; 0x22
 800182e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001832:	2210      	movs	r2, #16
 8001834:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001838:	2200      	movs	r2, #0
 800183a:	6422      	str	r2, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 800183c:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001840:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
 8001842:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    hi2c->XferSize    = hi2c->XferCount;
 8001846:	8522      	strh	r2, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001848:	4a89      	ldr	r2, [pc, #548]	; (8001a70 <HAL_I2C_Master_Receive+0x2a4>)
 800184a:	62e2      	str	r2, [r4, #44]	; 0x2c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800184c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800184e:	6819      	ldr	r1, [r3, #0]
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001850:	2a08      	cmp	r2, #8
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001852:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8001856:	6019      	str	r1, [r3, #0]
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001858:	d004      	beq.n	8001864 <HAL_I2C_Master_Receive+0x98>
 800185a:	2a01      	cmp	r2, #1
 800185c:	d002      	beq.n	8001864 <HAL_I2C_Master_Receive+0x98>
 800185e:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8001862:	d104      	bne.n	800186e <HAL_I2C_Master_Receive+0xa2>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800186a:	601a      	str	r2, [r3, #0]
 800186c:	e002      	b.n	8001874 <HAL_I2C_Master_Receive+0xa8>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800186e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001870:	2a11      	cmp	r2, #17
 8001872:	d0f7      	beq.n	8001864 <HAL_I2C_Master_Receive+0x98>
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001874:	9500      	str	r5, [sp, #0]
 8001876:	4633      	mov	r3, r6
 8001878:	2200      	movs	r2, #0
 800187a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800187e:	4620      	mov	r0, r4
 8001880:	f7ff fd63 	bl	800134a <I2C_WaitOnFlagUntilTimeout>
 8001884:	b108      	cbz	r0, 800188a <HAL_I2C_Master_Receive+0xbe>
      return HAL_ERROR;
 8001886:	2701      	movs	r7, #1
 8001888:	e7b0      	b.n	80017ec <HAL_I2C_Master_Receive+0x20>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800188a:	6923      	ldr	r3, [r4, #16]
 800188c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001890:	6823      	ldr	r3, [r4, #0]
 8001892:	d143      	bne.n	800191c <HAL_I2C_Master_Receive+0x150>
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001894:	f047 0701 	orr.w	r7, r7, #1
 8001898:	b2ff      	uxtb	r7, r7
 800189a:	611f      	str	r7, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800189c:	462b      	mov	r3, r5
 800189e:	4632      	mov	r2, r6
 80018a0:	4974      	ldr	r1, [pc, #464]	; (8001a74 <HAL_I2C_Master_Receive+0x2a8>)
 80018a2:	4620      	mov	r0, r4
 80018a4:	f7ff fcb7 	bl	8001216 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80018a8:	4607      	mov	r7, r0
 80018aa:	2800      	cmp	r0, #0
 80018ac:	d1eb      	bne.n	8001886 <HAL_I2C_Master_Receive+0xba>
    if (hi2c->XferSize == 0U)
 80018ae:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 80018b0:	6823      	ldr	r3, [r4, #0]
 80018b2:	2a00      	cmp	r2, #0
 80018b4:	d066      	beq.n	8001984 <HAL_I2C_Master_Receive+0x1b8>
    else if (hi2c->XferSize == 1U)
 80018b6:	2a01      	cmp	r2, #1
 80018b8:	d177      	bne.n	80019aa <HAL_I2C_Master_Receive+0x1de>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80018c0:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018c2:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80018c4:	6823      	ldr	r3, [r4, #0]
 80018c6:	9704      	str	r7, [sp, #16]
 80018c8:	695a      	ldr	r2, [r3, #20]
 80018ca:	9204      	str	r2, [sp, #16]
 80018cc:	699a      	ldr	r2, [r3, #24]
 80018ce:	9204      	str	r2, [sp, #16]
 80018d0:	9a04      	ldr	r2, [sp, #16]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018d2:	681a      	ldr	r2, [r3, #0]
 80018d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80018d8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80018da:	b662      	cpsie	i
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80018dc:	f8df 819c 	ldr.w	r8, [pc, #412]	; 8001a7c <HAL_I2C_Master_Receive+0x2b0>
    while (hi2c->XferSize > 0U)
 80018e0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d058      	beq.n	8001998 <HAL_I2C_Master_Receive+0x1cc>
      if (hi2c->XferSize <= 3U)
 80018e6:	2b03      	cmp	r3, #3
 80018e8:	f200 80ca 	bhi.w	8001a80 <HAL_I2C_Master_Receive+0x2b4>
        if (hi2c->XferSize == 1U)
 80018ec:	2b01      	cmp	r3, #1
 80018ee:	d178      	bne.n	80019e2 <HAL_I2C_Master_Receive+0x216>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018f0:	462a      	mov	r2, r5
 80018f2:	4631      	mov	r1, r6
 80018f4:	4620      	mov	r0, r4
 80018f6:	f7ff fcf9 	bl	80012ec <I2C_WaitOnRXNEFlagUntilTimeout>
 80018fa:	2800      	cmp	r0, #0
 80018fc:	d1c3      	bne.n	8001886 <HAL_I2C_Master_Receive+0xba>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80018fe:	6822      	ldr	r2, [r4, #0]
 8001900:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001902:	6912      	ldr	r2, [r2, #16]
 8001904:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8001906:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001908:	3301      	adds	r3, #1
 800190a:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 800190c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800190e:	3b01      	subs	r3, #1
 8001910:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8001912:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001914:	3b01      	subs	r3, #1
 8001916:	b29b      	uxth	r3, r3
 8001918:	8563      	strh	r3, [r4, #42]	; 0x2a
 800191a:	e7e1      	b.n	80018e0 <HAL_I2C_Master_Receive+0x114>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800191c:	ea4f 18e7 	mov.w	r8, r7, asr #7
 8001920:	f008 0806 	and.w	r8, r8, #6
 8001924:	f048 02f0 	orr.w	r2, r8, #240	; 0xf0
 8001928:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800192a:	4953      	ldr	r1, [pc, #332]	; (8001a78 <HAL_I2C_Master_Receive+0x2ac>)
 800192c:	462b      	mov	r3, r5
 800192e:	4632      	mov	r2, r6
 8001930:	4620      	mov	r0, r4
 8001932:	f7ff fc70 	bl	8001216 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001936:	2800      	cmp	r0, #0
 8001938:	d1a5      	bne.n	8001886 <HAL_I2C_Master_Receive+0xba>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800193a:	6823      	ldr	r3, [r4, #0]
 800193c:	b2ff      	uxtb	r7, r7
 800193e:	611f      	str	r7, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001940:	4632      	mov	r2, r6
 8001942:	462b      	mov	r3, r5
 8001944:	494b      	ldr	r1, [pc, #300]	; (8001a74 <HAL_I2C_Master_Receive+0x2a8>)
 8001946:	4620      	mov	r0, r4
 8001948:	f7ff fc65 	bl	8001216 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800194c:	4602      	mov	r2, r0
 800194e:	2800      	cmp	r0, #0
 8001950:	d199      	bne.n	8001886 <HAL_I2C_Master_Receive+0xba>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001952:	6823      	ldr	r3, [r4, #0]
 8001954:	9007      	str	r0, [sp, #28]
 8001956:	6959      	ldr	r1, [r3, #20]
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001958:	4620      	mov	r0, r4
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800195a:	9107      	str	r1, [sp, #28]
 800195c:	6999      	ldr	r1, [r3, #24]
 800195e:	9107      	str	r1, [sp, #28]
 8001960:	9907      	ldr	r1, [sp, #28]
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001962:	6819      	ldr	r1, [r3, #0]
 8001964:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8001968:	6019      	str	r1, [r3, #0]
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800196a:	9500      	str	r5, [sp, #0]
 800196c:	4633      	mov	r3, r6
 800196e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001972:	f7ff fcea 	bl	800134a <I2C_WaitOnFlagUntilTimeout>
 8001976:	2800      	cmp	r0, #0
 8001978:	d185      	bne.n	8001886 <HAL_I2C_Master_Receive+0xba>
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800197a:	6822      	ldr	r2, [r4, #0]
 800197c:	f048 03f1 	orr.w	r3, r8, #241	; 0xf1
 8001980:	6113      	str	r3, [r2, #16]
 8001982:	e78b      	b.n	800189c <HAL_I2C_Master_Receive+0xd0>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001984:	9703      	str	r7, [sp, #12]
 8001986:	695a      	ldr	r2, [r3, #20]
 8001988:	9203      	str	r2, [sp, #12]
 800198a:	699a      	ldr	r2, [r3, #24]
 800198c:	9203      	str	r2, [sp, #12]
 800198e:	9a03      	ldr	r2, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001996:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8001998:	2320      	movs	r3, #32
 800199a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800199e:	2300      	movs	r3, #0
 80019a0:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 80019a4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 80019a8:	e720      	b.n	80017ec <HAL_I2C_Master_Receive+0x20>
    else if (hi2c->XferSize == 2U)
 80019aa:	2a02      	cmp	r2, #2
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80019ac:	681a      	ldr	r2, [r3, #0]
    else if (hi2c->XferSize == 2U)
 80019ae:	d10e      	bne.n	80019ce <HAL_I2C_Master_Receive+0x202>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80019b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80019b4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80019b6:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80019b8:	6823      	ldr	r3, [r4, #0]
 80019ba:	9705      	str	r7, [sp, #20]
 80019bc:	695a      	ldr	r2, [r3, #20]
 80019be:	9205      	str	r2, [sp, #20]
 80019c0:	699a      	ldr	r2, [r3, #24]
 80019c2:	9205      	str	r2, [sp, #20]
 80019c4:	9a05      	ldr	r2, [sp, #20]
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80019cc:	e784      	b.n	80018d8 <HAL_I2C_Master_Receive+0x10c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80019ce:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80019d2:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80019d4:	9706      	str	r7, [sp, #24]
 80019d6:	695a      	ldr	r2, [r3, #20]
 80019d8:	9206      	str	r2, [sp, #24]
 80019da:	699b      	ldr	r3, [r3, #24]
 80019dc:	9306      	str	r3, [sp, #24]
 80019de:	9b06      	ldr	r3, [sp, #24]
 80019e0:	e77c      	b.n	80018dc <HAL_I2C_Master_Receive+0x110>
        else if (hi2c->XferSize == 2U)
 80019e2:	2b02      	cmp	r3, #2
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80019e4:	9500      	str	r5, [sp, #0]
 80019e6:	4633      	mov	r3, r6
 80019e8:	f04f 0200 	mov.w	r2, #0
 80019ec:	4641      	mov	r1, r8
 80019ee:	4620      	mov	r0, r4
        else if (hi2c->XferSize == 2U)
 80019f0:	d119      	bne.n	8001a26 <HAL_I2C_Master_Receive+0x25a>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80019f2:	f7ff fcaa 	bl	800134a <I2C_WaitOnFlagUntilTimeout>
 80019f6:	2800      	cmp	r0, #0
 80019f8:	f47f af45 	bne.w	8001886 <HAL_I2C_Master_Receive+0xba>
 80019fc:	b672      	cpsid	i
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019fe:	6823      	ldr	r3, [r4, #0]
 8001a00:	681a      	ldr	r2, [r3, #0]
 8001a02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a06:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a08:	691b      	ldr	r3, [r3, #16]
 8001a0a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001a0c:	7013      	strb	r3, [r2, #0]
          hi2c->pBuffPtr++;
 8001a0e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001a10:	3301      	adds	r3, #1
 8001a12:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8001a14:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001a16:	3b01      	subs	r3, #1
 8001a18:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8001a1a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001a1c:	3b01      	subs	r3, #1
 8001a1e:	b29b      	uxth	r3, r3
 8001a20:	8563      	strh	r3, [r4, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001a22:	b662      	cpsie	i
 8001a24:	e76b      	b.n	80018fe <HAL_I2C_Master_Receive+0x132>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001a26:	f7ff fc90 	bl	800134a <I2C_WaitOnFlagUntilTimeout>
 8001a2a:	4602      	mov	r2, r0
 8001a2c:	2800      	cmp	r0, #0
 8001a2e:	f47f af2a 	bne.w	8001886 <HAL_I2C_Master_Receive+0xba>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a32:	6821      	ldr	r1, [r4, #0]
 8001a34:	680b      	ldr	r3, [r1, #0]
 8001a36:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001a3a:	600b      	str	r3, [r1, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001a3c:	b672      	cpsid	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a3e:	6821      	ldr	r1, [r4, #0]
 8001a40:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001a42:	6909      	ldr	r1, [r1, #16]
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001a44:	4620      	mov	r0, r4
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a46:	7019      	strb	r1, [r3, #0]
          hi2c->pBuffPtr++;
 8001a48:	6a63      	ldr	r3, [r4, #36]	; 0x24
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001a4a:	9500      	str	r5, [sp, #0]
          hi2c->pBuffPtr++;
 8001a4c:	3301      	adds	r3, #1
 8001a4e:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8001a50:	8d23      	ldrh	r3, [r4, #40]	; 0x28
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001a52:	4641      	mov	r1, r8
          hi2c->XferSize--;
 8001a54:	3b01      	subs	r3, #1
 8001a56:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8001a58:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001a5a:	3b01      	subs	r3, #1
 8001a5c:	b29b      	uxth	r3, r3
 8001a5e:	8563      	strh	r3, [r4, #42]	; 0x2a
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001a60:	4633      	mov	r3, r6
 8001a62:	f7ff fc72 	bl	800134a <I2C_WaitOnFlagUntilTimeout>
 8001a66:	2800      	cmp	r0, #0
 8001a68:	d0c9      	beq.n	80019fe <HAL_I2C_Master_Receive+0x232>
 8001a6a:	e70c      	b.n	8001886 <HAL_I2C_Master_Receive+0xba>
 8001a6c:	00100002 	.word	0x00100002
 8001a70:	ffff0000 	.word	0xffff0000
 8001a74:	00010002 	.word	0x00010002
 8001a78:	00010008 	.word	0x00010008
 8001a7c:	00010004 	.word	0x00010004
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a80:	462a      	mov	r2, r5
 8001a82:	4631      	mov	r1, r6
 8001a84:	4620      	mov	r0, r4
 8001a86:	f7ff fc31 	bl	80012ec <I2C_WaitOnRXNEFlagUntilTimeout>
 8001a8a:	2800      	cmp	r0, #0
 8001a8c:	f47f aefb 	bne.w	8001886 <HAL_I2C_Master_Receive+0xba>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a90:	6822      	ldr	r2, [r4, #0]
 8001a92:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001a94:	6912      	ldr	r2, [r2, #16]
 8001a96:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8001a98:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001a9a:	1c53      	adds	r3, r2, #1
 8001a9c:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 8001a9e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001aa0:	3b01      	subs	r3, #1
 8001aa2:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8001aa4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001aa6:	3b01      	subs	r3, #1
 8001aa8:	b29b      	uxth	r3, r3
 8001aaa:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001aac:	6823      	ldr	r3, [r4, #0]
 8001aae:	6959      	ldr	r1, [r3, #20]
 8001ab0:	0749      	lsls	r1, r1, #29
 8001ab2:	f57f af15 	bpl.w	80018e0 <HAL_I2C_Master_Receive+0x114>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ab6:	691b      	ldr	r3, [r3, #16]
 8001ab8:	7053      	strb	r3, [r2, #1]
 8001aba:	e724      	b.n	8001906 <HAL_I2C_Master_Receive+0x13a>

08001abc <HAL_I2C_Mem_Read>:
{
 8001abc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001ac0:	4604      	mov	r4, r0
 8001ac2:	b087      	sub	sp, #28
 8001ac4:	4699      	mov	r9, r3
 8001ac6:	460d      	mov	r5, r1
 8001ac8:	4690      	mov	r8, r2
 8001aca:	9f10      	ldr	r7, [sp, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 8001acc:	f7fe fe72 	bl	80007b4 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ad0:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  uint32_t tickstart = HAL_GetTick();
 8001ad4:	4606      	mov	r6, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ad6:	2b20      	cmp	r3, #32
 8001ad8:	d004      	beq.n	8001ae4 <HAL_I2C_Mem_Read+0x28>
    return HAL_BUSY;
 8001ada:	2502      	movs	r5, #2
}
 8001adc:	4628      	mov	r0, r5
 8001ade:	b007      	add	sp, #28
 8001ae0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001ae4:	9000      	str	r0, [sp, #0]
 8001ae6:	2319      	movs	r3, #25
 8001ae8:	2201      	movs	r2, #1
 8001aea:	497e      	ldr	r1, [pc, #504]	; (8001ce4 <HAL_I2C_Mem_Read+0x228>)
 8001aec:	4620      	mov	r0, r4
 8001aee:	f7ff fc2c 	bl	800134a <I2C_WaitOnFlagUntilTimeout>
 8001af2:	2800      	cmp	r0, #0
 8001af4:	d1f1      	bne.n	8001ada <HAL_I2C_Mem_Read+0x1e>
    __HAL_LOCK(hi2c);
 8001af6:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8001afa:	2b01      	cmp	r3, #1
 8001afc:	d0ed      	beq.n	8001ada <HAL_I2C_Mem_Read+0x1e>
 8001afe:	2301      	movs	r3, #1
 8001b00:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001b04:	6823      	ldr	r3, [r4, #0]
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001b06:	4629      	mov	r1, r5
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	07d0      	lsls	r0, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8001b0c:	bf58      	it	pl
 8001b0e:	681a      	ldrpl	r2, [r3, #0]
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001b10:	4620      	mov	r0, r4
      __HAL_I2C_ENABLE(hi2c);
 8001b12:	bf5c      	itt	pl
 8001b14:	f042 0201 	orrpl.w	r2, r2, #1
 8001b18:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b20:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001b22:	2322      	movs	r3, #34	; 0x22
 8001b24:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001b28:	2340      	movs	r3, #64	; 0x40
 8001b2a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8001b32:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001b34:	9601      	str	r6, [sp, #4]
    hi2c->pBuffPtr    = pData;
 8001b36:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001b38:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001b3c:	9700      	str	r7, [sp, #0]
    hi2c->XferCount   = Size;
 8001b3e:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001b40:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001b42:	4642      	mov	r2, r8
    hi2c->XferSize    = hi2c->XferCount;
 8001b44:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001b46:	4b68      	ldr	r3, [pc, #416]	; (8001ce8 <HAL_I2C_Mem_Read+0x22c>)
 8001b48:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001b4a:	464b      	mov	r3, r9
 8001b4c:	f7ff fc56 	bl	80013fc <I2C_RequestMemoryRead>
 8001b50:	4605      	mov	r5, r0
 8001b52:	b108      	cbz	r0, 8001b58 <HAL_I2C_Mem_Read+0x9c>
      return HAL_ERROR;
 8001b54:	2501      	movs	r5, #1
 8001b56:	e7c1      	b.n	8001adc <HAL_I2C_Mem_Read+0x20>
    if (hi2c->XferSize == 0U)
 8001b58:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8001b5a:	6823      	ldr	r3, [r4, #0]
 8001b5c:	b992      	cbnz	r2, 8001b84 <HAL_I2C_Mem_Read+0xc8>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b5e:	9002      	str	r0, [sp, #8]
 8001b60:	695a      	ldr	r2, [r3, #20]
 8001b62:	9202      	str	r2, [sp, #8]
 8001b64:	699a      	ldr	r2, [r3, #24]
 8001b66:	9202      	str	r2, [sp, #8]
 8001b68:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b6a:	681a      	ldr	r2, [r3, #0]
 8001b6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b70:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8001b72:	2320      	movs	r3, #32
 8001b74:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8001b7e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8001b82:	e7ab      	b.n	8001adc <HAL_I2C_Mem_Read+0x20>
    else if (hi2c->XferSize == 1U)
 8001b84:	2a01      	cmp	r2, #1
 8001b86:	d12f      	bne.n	8001be8 <HAL_I2C_Mem_Read+0x12c>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b8e:	601a      	str	r2, [r3, #0]
 8001b90:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b92:	6823      	ldr	r3, [r4, #0]
 8001b94:	9003      	str	r0, [sp, #12]
 8001b96:	695a      	ldr	r2, [r3, #20]
 8001b98:	9203      	str	r2, [sp, #12]
 8001b9a:	699a      	ldr	r2, [r3, #24]
 8001b9c:	9203      	str	r2, [sp, #12]
 8001b9e:	9a03      	ldr	r2, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ba6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001ba8:	b662      	cpsie	i
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001baa:	f8df 8140 	ldr.w	r8, [pc, #320]	; 8001cec <HAL_I2C_Mem_Read+0x230>
    while (hi2c->XferSize > 0U)
 8001bae:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d0de      	beq.n	8001b72 <HAL_I2C_Mem_Read+0xb6>
      if (hi2c->XferSize <= 3U)
 8001bb4:	2b03      	cmp	r3, #3
 8001bb6:	d877      	bhi.n	8001ca8 <HAL_I2C_Mem_Read+0x1ec>
        if (hi2c->XferSize == 1U)
 8001bb8:	2b01      	cmp	r3, #1
 8001bba:	d131      	bne.n	8001c20 <HAL_I2C_Mem_Read+0x164>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001bbc:	4632      	mov	r2, r6
 8001bbe:	4639      	mov	r1, r7
 8001bc0:	4620      	mov	r0, r4
 8001bc2:	f7ff fb93 	bl	80012ec <I2C_WaitOnRXNEFlagUntilTimeout>
 8001bc6:	2800      	cmp	r0, #0
 8001bc8:	d1c4      	bne.n	8001b54 <HAL_I2C_Mem_Read+0x98>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001bca:	6822      	ldr	r2, [r4, #0]
 8001bcc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001bce:	6912      	ldr	r2, [r2, #16]
 8001bd0:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8001bd2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001bd4:	3301      	adds	r3, #1
 8001bd6:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8001bd8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001bda:	3b01      	subs	r3, #1
 8001bdc:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8001bde:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001be0:	3b01      	subs	r3, #1
 8001be2:	b29b      	uxth	r3, r3
 8001be4:	8563      	strh	r3, [r4, #42]	; 0x2a
 8001be6:	e7e2      	b.n	8001bae <HAL_I2C_Mem_Read+0xf2>
    else if (hi2c->XferSize == 2U)
 8001be8:	2a02      	cmp	r2, #2
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001bea:	681a      	ldr	r2, [r3, #0]
    else if (hi2c->XferSize == 2U)
 8001bec:	d10e      	bne.n	8001c0c <HAL_I2C_Mem_Read+0x150>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001bee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001bf2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001bf4:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001bf6:	6823      	ldr	r3, [r4, #0]
 8001bf8:	9004      	str	r0, [sp, #16]
 8001bfa:	695a      	ldr	r2, [r3, #20]
 8001bfc:	9204      	str	r2, [sp, #16]
 8001bfe:	699a      	ldr	r2, [r3, #24]
 8001c00:	9204      	str	r2, [sp, #16]
 8001c02:	9a04      	ldr	r2, [sp, #16]
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c0a:	e7cc      	b.n	8001ba6 <HAL_I2C_Mem_Read+0xea>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c0c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001c10:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c12:	9005      	str	r0, [sp, #20]
 8001c14:	695a      	ldr	r2, [r3, #20]
 8001c16:	9205      	str	r2, [sp, #20]
 8001c18:	699b      	ldr	r3, [r3, #24]
 8001c1a:	9305      	str	r3, [sp, #20]
 8001c1c:	9b05      	ldr	r3, [sp, #20]
 8001c1e:	e7c4      	b.n	8001baa <HAL_I2C_Mem_Read+0xee>
        else if (hi2c->XferSize == 2U)
 8001c20:	2b02      	cmp	r3, #2
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001c22:	9600      	str	r6, [sp, #0]
 8001c24:	463b      	mov	r3, r7
 8001c26:	f04f 0200 	mov.w	r2, #0
 8001c2a:	4641      	mov	r1, r8
 8001c2c:	4620      	mov	r0, r4
        else if (hi2c->XferSize == 2U)
 8001c2e:	d118      	bne.n	8001c62 <HAL_I2C_Mem_Read+0x1a6>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001c30:	f7ff fb8b 	bl	800134a <I2C_WaitOnFlagUntilTimeout>
 8001c34:	2800      	cmp	r0, #0
 8001c36:	d18d      	bne.n	8001b54 <HAL_I2C_Mem_Read+0x98>
 8001c38:	b672      	cpsid	i
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c3a:	6823      	ldr	r3, [r4, #0]
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c42:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c44:	691b      	ldr	r3, [r3, #16]
 8001c46:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001c48:	7013      	strb	r3, [r2, #0]
          hi2c->pBuffPtr++;
 8001c4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001c4c:	3301      	adds	r3, #1
 8001c4e:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8001c50:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001c52:	3b01      	subs	r3, #1
 8001c54:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8001c56:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001c58:	3b01      	subs	r3, #1
 8001c5a:	b29b      	uxth	r3, r3
 8001c5c:	8563      	strh	r3, [r4, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001c5e:	b662      	cpsie	i
 8001c60:	e7b3      	b.n	8001bca <HAL_I2C_Mem_Read+0x10e>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001c62:	f7ff fb72 	bl	800134a <I2C_WaitOnFlagUntilTimeout>
 8001c66:	4602      	mov	r2, r0
 8001c68:	2800      	cmp	r0, #0
 8001c6a:	f47f af73 	bne.w	8001b54 <HAL_I2C_Mem_Read+0x98>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c6e:	6821      	ldr	r1, [r4, #0]
 8001c70:	680b      	ldr	r3, [r1, #0]
 8001c72:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001c76:	600b      	str	r3, [r1, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001c78:	b672      	cpsid	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c7a:	6821      	ldr	r1, [r4, #0]
 8001c7c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001c7e:	6909      	ldr	r1, [r1, #16]
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001c80:	4620      	mov	r0, r4
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c82:	7019      	strb	r1, [r3, #0]
          hi2c->pBuffPtr++;
 8001c84:	6a63      	ldr	r3, [r4, #36]	; 0x24
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001c86:	9600      	str	r6, [sp, #0]
          hi2c->pBuffPtr++;
 8001c88:	3301      	adds	r3, #1
 8001c8a:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8001c8c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001c8e:	4641      	mov	r1, r8
          hi2c->XferSize--;
 8001c90:	3b01      	subs	r3, #1
 8001c92:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8001c94:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001c96:	3b01      	subs	r3, #1
 8001c98:	b29b      	uxth	r3, r3
 8001c9a:	8563      	strh	r3, [r4, #42]	; 0x2a
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001c9c:	463b      	mov	r3, r7
 8001c9e:	f7ff fb54 	bl	800134a <I2C_WaitOnFlagUntilTimeout>
 8001ca2:	2800      	cmp	r0, #0
 8001ca4:	d0c9      	beq.n	8001c3a <HAL_I2C_Mem_Read+0x17e>
 8001ca6:	e755      	b.n	8001b54 <HAL_I2C_Mem_Read+0x98>
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ca8:	4632      	mov	r2, r6
 8001caa:	4639      	mov	r1, r7
 8001cac:	4620      	mov	r0, r4
 8001cae:	f7ff fb1d 	bl	80012ec <I2C_WaitOnRXNEFlagUntilTimeout>
 8001cb2:	2800      	cmp	r0, #0
 8001cb4:	f47f af4e 	bne.w	8001b54 <HAL_I2C_Mem_Read+0x98>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001cb8:	6822      	ldr	r2, [r4, #0]
 8001cba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001cbc:	6912      	ldr	r2, [r2, #16]
 8001cbe:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8001cc0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001cc2:	1c53      	adds	r3, r2, #1
 8001cc4:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 8001cc6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001cc8:	3b01      	subs	r3, #1
 8001cca:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8001ccc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001cce:	3b01      	subs	r3, #1
 8001cd0:	b29b      	uxth	r3, r3
 8001cd2:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001cd4:	6823      	ldr	r3, [r4, #0]
 8001cd6:	6959      	ldr	r1, [r3, #20]
 8001cd8:	0749      	lsls	r1, r1, #29
 8001cda:	f57f af68 	bpl.w	8001bae <HAL_I2C_Mem_Read+0xf2>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001cde:	691b      	ldr	r3, [r3, #16]
 8001ce0:	7053      	strb	r3, [r2, #1]
 8001ce2:	e776      	b.n	8001bd2 <HAL_I2C_Mem_Read+0x116>
 8001ce4:	00100002 	.word	0x00100002
 8001ce8:	ffff0000 	.word	0xffff0000
 8001cec:	00010004 	.word	0x00010004

08001cf0 <HAL_I2C_IsDeviceReady>:
{
 8001cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001cf4:	4604      	mov	r4, r0
 8001cf6:	b085      	sub	sp, #20
 8001cf8:	4698      	mov	r8, r3
 8001cfa:	4689      	mov	r9, r1
 8001cfc:	4692      	mov	sl, r2
  uint32_t tickstart = HAL_GetTick();
 8001cfe:	f7fe fd59 	bl	80007b4 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d02:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  uint32_t tickstart = HAL_GetTick();
 8001d06:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d08:	2b20      	cmp	r3, #32
 8001d0a:	d003      	beq.n	8001d14 <HAL_I2C_IsDeviceReady+0x24>
    return HAL_BUSY;
 8001d0c:	2002      	movs	r0, #2
}
 8001d0e:	b005      	add	sp, #20
 8001d10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001d14:	9000      	str	r0, [sp, #0]
 8001d16:	2319      	movs	r3, #25
 8001d18:	2201      	movs	r2, #1
 8001d1a:	4949      	ldr	r1, [pc, #292]	; (8001e40 <HAL_I2C_IsDeviceReady+0x150>)
 8001d1c:	4620      	mov	r0, r4
 8001d1e:	f7ff fb14 	bl	800134a <I2C_WaitOnFlagUntilTimeout>
 8001d22:	2800      	cmp	r0, #0
 8001d24:	d1f2      	bne.n	8001d0c <HAL_I2C_IsDeviceReady+0x1c>
    __HAL_LOCK(hi2c);
 8001d26:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8001d2a:	2b01      	cmp	r3, #1
 8001d2c:	d0ee      	beq.n	8001d0c <HAL_I2C_IsDeviceReady+0x1c>
 8001d2e:	2301      	movs	r3, #1
 8001d30:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001d34:	6823      	ldr	r3, [r4, #0]
  uint32_t I2C_Trials = 1U;
 8001d36:	2701      	movs	r7, #1
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001d38:	681a      	ldr	r2, [r3, #0]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001d3a:	f8df b104 	ldr.w	fp, [pc, #260]	; 8001e40 <HAL_I2C_IsDeviceReady+0x150>
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001d3e:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8001d40:	bf58      	it	pl
 8001d42:	681a      	ldrpl	r2, [r3, #0]
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001d44:	f009 09fe 	and.w	r9, r9, #254	; 0xfe
      __HAL_I2C_ENABLE(hi2c);
 8001d48:	bf5c      	itt	pl
 8001d4a:	f042 0201 	orrpl.w	r2, r2, #1
 8001d4e:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d56:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8001d58:	2324      	movs	r3, #36	; 0x24
 8001d5a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001d62:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 8001d66:	62e3      	str	r3, [r4, #44]	; 0x2c
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001d68:	6822      	ldr	r2, [r4, #0]
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001d6a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001d6e:	6813      	ldr	r3, [r2, #0]
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001d70:	4620      	mov	r0, r4
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001d72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d76:	6013      	str	r3, [r2, #0]
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001d78:	9500      	str	r5, [sp, #0]
 8001d7a:	4643      	mov	r3, r8
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	f7ff fae4 	bl	800134a <I2C_WaitOnFlagUntilTimeout>
 8001d82:	b108      	cbz	r0, 8001d88 <HAL_I2C_IsDeviceReady+0x98>
    return HAL_ERROR;
 8001d84:	2001      	movs	r0, #1
 8001d86:	e7c2      	b.n	8001d0e <HAL_I2C_IsDeviceReady+0x1e>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001d88:	6823      	ldr	r3, [r4, #0]
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8001d8a:	26a0      	movs	r6, #160	; 0xa0
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001d8c:	f8c3 9010 	str.w	r9, [r3, #16]
      tickstart = HAL_GetTick();
 8001d90:	f7fe fd10 	bl	80007b4 <HAL_GetTick>
 8001d94:	4605      	mov	r5, r0
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001d96:	6823      	ldr	r3, [r4, #0]
 8001d98:	695a      	ldr	r2, [r3, #20]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001d9a:	695b      	ldr	r3, [r3, #20]
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001d9c:	f3c2 0240 	ubfx	r2, r2, #1, #1
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001da0:	f3c3 2380 	ubfx	r3, r3, #10, #1
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001da4:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 8001da8:	29a0      	cmp	r1, #160	; 0xa0
 8001daa:	d001      	beq.n	8001db0 <HAL_I2C_IsDeviceReady+0xc0>
 8001dac:	b902      	cbnz	r2, 8001db0 <HAL_I2C_IsDeviceReady+0xc0>
 8001dae:	b303      	cbz	r3, 8001df2 <HAL_I2C_IsDeviceReady+0x102>
      hi2c->State = HAL_I2C_STATE_READY;
 8001db0:	2620      	movs	r6, #32
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001db2:	6823      	ldr	r3, [r4, #0]
      hi2c->State = HAL_I2C_STATE_READY;
 8001db4:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001db8:	695a      	ldr	r2, [r3, #20]
 8001dba:	f012 0f02 	tst.w	r2, #2
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001dbe:	681a      	ldr	r2, [r3, #0]
 8001dc0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001dc4:	601a      	str	r2, [r3, #0]
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001dc6:	d026      	beq.n	8001e16 <HAL_I2C_IsDeviceReady+0x126>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001dc8:	2200      	movs	r2, #0
 8001dca:	9203      	str	r2, [sp, #12]
 8001dcc:	695a      	ldr	r2, [r3, #20]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001dce:	491c      	ldr	r1, [pc, #112]	; (8001e40 <HAL_I2C_IsDeviceReady+0x150>)
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001dd0:	9203      	str	r2, [sp, #12]
 8001dd2:	699b      	ldr	r3, [r3, #24]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001dd4:	2201      	movs	r2, #1
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001dd6:	9303      	str	r3, [sp, #12]
 8001dd8:	9b03      	ldr	r3, [sp, #12]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001dda:	9500      	str	r5, [sp, #0]
 8001ddc:	2319      	movs	r3, #25
 8001dde:	4620      	mov	r0, r4
 8001de0:	f7ff fab3 	bl	800134a <I2C_WaitOnFlagUntilTimeout>
 8001de4:	2800      	cmp	r0, #0
 8001de6:	d1cd      	bne.n	8001d84 <HAL_I2C_IsDeviceReady+0x94>
        hi2c->State = HAL_I2C_STATE_READY;
 8001de8:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 8001dec:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
        return HAL_OK;
 8001df0:	e78d      	b.n	8001d0e <HAL_I2C_IsDeviceReady+0x1e>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001df2:	f7fe fcdf 	bl	80007b4 <HAL_GetTick>
 8001df6:	1b40      	subs	r0, r0, r5
 8001df8:	4580      	cmp	r8, r0
 8001dfa:	d302      	bcc.n	8001e02 <HAL_I2C_IsDeviceReady+0x112>
 8001dfc:	f1b8 0f00 	cmp.w	r8, #0
 8001e00:	d101      	bne.n	8001e06 <HAL_I2C_IsDeviceReady+0x116>
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8001e02:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001e06:	6823      	ldr	r3, [r4, #0]
 8001e08:	695a      	ldr	r2, [r3, #20]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001e0a:	695b      	ldr	r3, [r3, #20]
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001e0c:	f3c2 0240 	ubfx	r2, r2, #1, #1
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001e10:	f3c3 2380 	ubfx	r3, r3, #10, #1
 8001e14:	e7c6      	b.n	8001da4 <HAL_I2C_IsDeviceReady+0xb4>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e16:	f46f 6280 	mvn.w	r2, #1024	; 0x400
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001e1a:	4659      	mov	r1, fp
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e1c:	615a      	str	r2, [r3, #20]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001e1e:	4620      	mov	r0, r4
 8001e20:	9500      	str	r5, [sp, #0]
 8001e22:	2319      	movs	r3, #25
 8001e24:	2201      	movs	r2, #1
 8001e26:	f7ff fa90 	bl	800134a <I2C_WaitOnFlagUntilTimeout>
 8001e2a:	2800      	cmp	r0, #0
 8001e2c:	d1aa      	bne.n	8001d84 <HAL_I2C_IsDeviceReady+0x94>
      I2C_Trials++;
 8001e2e:	3701      	adds	r7, #1
    while (I2C_Trials < Trials);
 8001e30:	4557      	cmp	r7, sl
 8001e32:	d399      	bcc.n	8001d68 <HAL_I2C_IsDeviceReady+0x78>
    hi2c->State = HAL_I2C_STATE_READY;
 8001e34:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8001e38:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
 8001e3c:	e7a2      	b.n	8001d84 <HAL_I2C_IsDeviceReady+0x94>
 8001e3e:	bf00      	nop
 8001e40:	00100002 	.word	0x00100002

08001e44 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e44:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e48:	4605      	mov	r5, r0
 8001e4a:	b908      	cbnz	r0, 8001e50 <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 8001e4c:	2001      	movs	r0, #1
 8001e4e:	e03c      	b.n	8001eca <HAL_RCC_OscConfig+0x86>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e50:	6803      	ldr	r3, [r0, #0]
 8001e52:	07db      	lsls	r3, r3, #31
 8001e54:	d410      	bmi.n	8001e78 <HAL_RCC_OscConfig+0x34>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e56:	682b      	ldr	r3, [r5, #0]
 8001e58:	079f      	lsls	r7, r3, #30
 8001e5a:	d45d      	bmi.n	8001f18 <HAL_RCC_OscConfig+0xd4>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e5c:	682b      	ldr	r3, [r5, #0]
 8001e5e:	0719      	lsls	r1, r3, #28
 8001e60:	f100 8094 	bmi.w	8001f8c <HAL_RCC_OscConfig+0x148>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e64:	682b      	ldr	r3, [r5, #0]
 8001e66:	075a      	lsls	r2, r3, #29
 8001e68:	f100 80be 	bmi.w	8001fe8 <HAL_RCC_OscConfig+0x1a4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e6c:	69e8      	ldr	r0, [r5, #28]
 8001e6e:	2800      	cmp	r0, #0
 8001e70:	f040 812c 	bne.w	80020cc <HAL_RCC_OscConfig+0x288>
        }
      }
    }
  }

  return HAL_OK;
 8001e74:	2000      	movs	r0, #0
 8001e76:	e028      	b.n	8001eca <HAL_RCC_OscConfig+0x86>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e78:	4c8f      	ldr	r4, [pc, #572]	; (80020b8 <HAL_RCC_OscConfig+0x274>)
 8001e7a:	6863      	ldr	r3, [r4, #4]
 8001e7c:	f003 030c 	and.w	r3, r3, #12
 8001e80:	2b04      	cmp	r3, #4
 8001e82:	d007      	beq.n	8001e94 <HAL_RCC_OscConfig+0x50>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e84:	6863      	ldr	r3, [r4, #4]
 8001e86:	f003 030c 	and.w	r3, r3, #12
 8001e8a:	2b08      	cmp	r3, #8
 8001e8c:	d109      	bne.n	8001ea2 <HAL_RCC_OscConfig+0x5e>
 8001e8e:	6863      	ldr	r3, [r4, #4]
 8001e90:	03de      	lsls	r6, r3, #15
 8001e92:	d506      	bpl.n	8001ea2 <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e94:	6823      	ldr	r3, [r4, #0]
 8001e96:	039c      	lsls	r4, r3, #14
 8001e98:	d5dd      	bpl.n	8001e56 <HAL_RCC_OscConfig+0x12>
 8001e9a:	686b      	ldr	r3, [r5, #4]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d1da      	bne.n	8001e56 <HAL_RCC_OscConfig+0x12>
 8001ea0:	e7d4      	b.n	8001e4c <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ea2:	686b      	ldr	r3, [r5, #4]
 8001ea4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ea8:	d112      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x8c>
 8001eaa:	6823      	ldr	r3, [r4, #0]
 8001eac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001eb0:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001eb2:	f7fe fc7f 	bl	80007b4 <HAL_GetTick>
 8001eb6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eb8:	6823      	ldr	r3, [r4, #0]
 8001eba:	0398      	lsls	r0, r3, #14
 8001ebc:	d4cb      	bmi.n	8001e56 <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ebe:	f7fe fc79 	bl	80007b4 <HAL_GetTick>
 8001ec2:	1b80      	subs	r0, r0, r6
 8001ec4:	2864      	cmp	r0, #100	; 0x64
 8001ec6:	d9f7      	bls.n	8001eb8 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8001ec8:	2003      	movs	r0, #3
}
 8001eca:	b002      	add	sp, #8
 8001ecc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ed0:	b99b      	cbnz	r3, 8001efa <HAL_RCC_OscConfig+0xb6>
 8001ed2:	6823      	ldr	r3, [r4, #0]
 8001ed4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ed8:	6023      	str	r3, [r4, #0]
 8001eda:	6823      	ldr	r3, [r4, #0]
 8001edc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ee0:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001ee2:	f7fe fc67 	bl	80007b4 <HAL_GetTick>
 8001ee6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ee8:	6823      	ldr	r3, [r4, #0]
 8001eea:	0399      	lsls	r1, r3, #14
 8001eec:	d5b3      	bpl.n	8001e56 <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001eee:	f7fe fc61 	bl	80007b4 <HAL_GetTick>
 8001ef2:	1b80      	subs	r0, r0, r6
 8001ef4:	2864      	cmp	r0, #100	; 0x64
 8001ef6:	d9f7      	bls.n	8001ee8 <HAL_RCC_OscConfig+0xa4>
 8001ef8:	e7e6      	b.n	8001ec8 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001efa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001efe:	6823      	ldr	r3, [r4, #0]
 8001f00:	d103      	bne.n	8001f0a <HAL_RCC_OscConfig+0xc6>
 8001f02:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f06:	6023      	str	r3, [r4, #0]
 8001f08:	e7cf      	b.n	8001eaa <HAL_RCC_OscConfig+0x66>
 8001f0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f0e:	6023      	str	r3, [r4, #0]
 8001f10:	6823      	ldr	r3, [r4, #0]
 8001f12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f16:	e7cb      	b.n	8001eb0 <HAL_RCC_OscConfig+0x6c>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f18:	4c67      	ldr	r4, [pc, #412]	; (80020b8 <HAL_RCC_OscConfig+0x274>)
 8001f1a:	6863      	ldr	r3, [r4, #4]
 8001f1c:	f013 0f0c 	tst.w	r3, #12
 8001f20:	d007      	beq.n	8001f32 <HAL_RCC_OscConfig+0xee>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001f22:	6863      	ldr	r3, [r4, #4]
 8001f24:	f003 030c 	and.w	r3, r3, #12
 8001f28:	2b08      	cmp	r3, #8
 8001f2a:	d110      	bne.n	8001f4e <HAL_RCC_OscConfig+0x10a>
 8001f2c:	6863      	ldr	r3, [r4, #4]
 8001f2e:	03da      	lsls	r2, r3, #15
 8001f30:	d40d      	bmi.n	8001f4e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f32:	6823      	ldr	r3, [r4, #0]
 8001f34:	079b      	lsls	r3, r3, #30
 8001f36:	d502      	bpl.n	8001f3e <HAL_RCC_OscConfig+0xfa>
 8001f38:	692b      	ldr	r3, [r5, #16]
 8001f3a:	2b01      	cmp	r3, #1
 8001f3c:	d186      	bne.n	8001e4c <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f3e:	6823      	ldr	r3, [r4, #0]
 8001f40:	696a      	ldr	r2, [r5, #20]
 8001f42:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001f46:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001f4a:	6023      	str	r3, [r4, #0]
 8001f4c:	e786      	b.n	8001e5c <HAL_RCC_OscConfig+0x18>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f4e:	692a      	ldr	r2, [r5, #16]
 8001f50:	4b5a      	ldr	r3, [pc, #360]	; (80020bc <HAL_RCC_OscConfig+0x278>)
 8001f52:	b16a      	cbz	r2, 8001f70 <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_ENABLE();
 8001f54:	2201      	movs	r2, #1
 8001f56:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001f58:	f7fe fc2c 	bl	80007b4 <HAL_GetTick>
 8001f5c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f5e:	6823      	ldr	r3, [r4, #0]
 8001f60:	079f      	lsls	r7, r3, #30
 8001f62:	d4ec      	bmi.n	8001f3e <HAL_RCC_OscConfig+0xfa>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f64:	f7fe fc26 	bl	80007b4 <HAL_GetTick>
 8001f68:	1b80      	subs	r0, r0, r6
 8001f6a:	2802      	cmp	r0, #2
 8001f6c:	d9f7      	bls.n	8001f5e <HAL_RCC_OscConfig+0x11a>
 8001f6e:	e7ab      	b.n	8001ec8 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8001f70:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001f72:	f7fe fc1f 	bl	80007b4 <HAL_GetTick>
 8001f76:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f78:	6823      	ldr	r3, [r4, #0]
 8001f7a:	0798      	lsls	r0, r3, #30
 8001f7c:	f57f af6e 	bpl.w	8001e5c <HAL_RCC_OscConfig+0x18>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f80:	f7fe fc18 	bl	80007b4 <HAL_GetTick>
 8001f84:	1b80      	subs	r0, r0, r6
 8001f86:	2802      	cmp	r0, #2
 8001f88:	d9f6      	bls.n	8001f78 <HAL_RCC_OscConfig+0x134>
 8001f8a:	e79d      	b.n	8001ec8 <HAL_RCC_OscConfig+0x84>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f8c:	69aa      	ldr	r2, [r5, #24]
 8001f8e:	4c4a      	ldr	r4, [pc, #296]	; (80020b8 <HAL_RCC_OscConfig+0x274>)
 8001f90:	4b4b      	ldr	r3, [pc, #300]	; (80020c0 <HAL_RCC_OscConfig+0x27c>)
 8001f92:	b1da      	cbz	r2, 8001fcc <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 8001f94:	2201      	movs	r2, #1
 8001f96:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001f98:	f7fe fc0c 	bl	80007b4 <HAL_GetTick>
 8001f9c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f9e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001fa0:	079b      	lsls	r3, r3, #30
 8001fa2:	d50d      	bpl.n	8001fc0 <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001fa4:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001fa8:	4b46      	ldr	r3, [pc, #280]	; (80020c4 <HAL_RCC_OscConfig+0x280>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	fbb3 f3f2 	udiv	r3, r3, r2
 8001fb0:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8001fb2:	bf00      	nop
  }
  while (Delay --);
 8001fb4:	9b01      	ldr	r3, [sp, #4]
 8001fb6:	1e5a      	subs	r2, r3, #1
 8001fb8:	9201      	str	r2, [sp, #4]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d1f9      	bne.n	8001fb2 <HAL_RCC_OscConfig+0x16e>
 8001fbe:	e751      	b.n	8001e64 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fc0:	f7fe fbf8 	bl	80007b4 <HAL_GetTick>
 8001fc4:	1b80      	subs	r0, r0, r6
 8001fc6:	2802      	cmp	r0, #2
 8001fc8:	d9e9      	bls.n	8001f9e <HAL_RCC_OscConfig+0x15a>
 8001fca:	e77d      	b.n	8001ec8 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8001fcc:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001fce:	f7fe fbf1 	bl	80007b4 <HAL_GetTick>
 8001fd2:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fd4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001fd6:	079f      	lsls	r7, r3, #30
 8001fd8:	f57f af44 	bpl.w	8001e64 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fdc:	f7fe fbea 	bl	80007b4 <HAL_GetTick>
 8001fe0:	1b80      	subs	r0, r0, r6
 8001fe2:	2802      	cmp	r0, #2
 8001fe4:	d9f6      	bls.n	8001fd4 <HAL_RCC_OscConfig+0x190>
 8001fe6:	e76f      	b.n	8001ec8 <HAL_RCC_OscConfig+0x84>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fe8:	4c33      	ldr	r4, [pc, #204]	; (80020b8 <HAL_RCC_OscConfig+0x274>)
 8001fea:	69e3      	ldr	r3, [r4, #28]
 8001fec:	00d8      	lsls	r0, r3, #3
 8001fee:	d424      	bmi.n	800203a <HAL_RCC_OscConfig+0x1f6>
      pwrclkchanged = SET;
 8001ff0:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ff2:	69e3      	ldr	r3, [r4, #28]
 8001ff4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ff8:	61e3      	str	r3, [r4, #28]
 8001ffa:	69e3      	ldr	r3, [r4, #28]
 8001ffc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002000:	9300      	str	r3, [sp, #0]
 8002002:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002004:	4e30      	ldr	r6, [pc, #192]	; (80020c8 <HAL_RCC_OscConfig+0x284>)
 8002006:	6833      	ldr	r3, [r6, #0]
 8002008:	05d9      	lsls	r1, r3, #23
 800200a:	d518      	bpl.n	800203e <HAL_RCC_OscConfig+0x1fa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800200c:	68eb      	ldr	r3, [r5, #12]
 800200e:	2b01      	cmp	r3, #1
 8002010:	d126      	bne.n	8002060 <HAL_RCC_OscConfig+0x21c>
 8002012:	6a23      	ldr	r3, [r4, #32]
 8002014:	f043 0301 	orr.w	r3, r3, #1
 8002018:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800201a:	f7fe fbcb 	bl	80007b4 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800201e:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002022:	4680      	mov	r8, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002024:	6a23      	ldr	r3, [r4, #32]
 8002026:	079b      	lsls	r3, r3, #30
 8002028:	d53f      	bpl.n	80020aa <HAL_RCC_OscConfig+0x266>
    if (pwrclkchanged == SET)
 800202a:	2f00      	cmp	r7, #0
 800202c:	f43f af1e 	beq.w	8001e6c <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002030:	69e3      	ldr	r3, [r4, #28]
 8002032:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002036:	61e3      	str	r3, [r4, #28]
 8002038:	e718      	b.n	8001e6c <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 800203a:	2700      	movs	r7, #0
 800203c:	e7e2      	b.n	8002004 <HAL_RCC_OscConfig+0x1c0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800203e:	6833      	ldr	r3, [r6, #0]
 8002040:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002044:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8002046:	f7fe fbb5 	bl	80007b4 <HAL_GetTick>
 800204a:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800204c:	6833      	ldr	r3, [r6, #0]
 800204e:	05da      	lsls	r2, r3, #23
 8002050:	d4dc      	bmi.n	800200c <HAL_RCC_OscConfig+0x1c8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002052:	f7fe fbaf 	bl	80007b4 <HAL_GetTick>
 8002056:	eba0 0008 	sub.w	r0, r0, r8
 800205a:	2864      	cmp	r0, #100	; 0x64
 800205c:	d9f6      	bls.n	800204c <HAL_RCC_OscConfig+0x208>
 800205e:	e733      	b.n	8001ec8 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002060:	b9ab      	cbnz	r3, 800208e <HAL_RCC_OscConfig+0x24a>
 8002062:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002064:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002068:	f023 0301 	bic.w	r3, r3, #1
 800206c:	6223      	str	r3, [r4, #32]
 800206e:	6a23      	ldr	r3, [r4, #32]
 8002070:	f023 0304 	bic.w	r3, r3, #4
 8002074:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8002076:	f7fe fb9d 	bl	80007b4 <HAL_GetTick>
 800207a:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800207c:	6a23      	ldr	r3, [r4, #32]
 800207e:	0798      	lsls	r0, r3, #30
 8002080:	d5d3      	bpl.n	800202a <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002082:	f7fe fb97 	bl	80007b4 <HAL_GetTick>
 8002086:	1b80      	subs	r0, r0, r6
 8002088:	4540      	cmp	r0, r8
 800208a:	d9f7      	bls.n	800207c <HAL_RCC_OscConfig+0x238>
 800208c:	e71c      	b.n	8001ec8 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800208e:	2b05      	cmp	r3, #5
 8002090:	6a23      	ldr	r3, [r4, #32]
 8002092:	d103      	bne.n	800209c <HAL_RCC_OscConfig+0x258>
 8002094:	f043 0304 	orr.w	r3, r3, #4
 8002098:	6223      	str	r3, [r4, #32]
 800209a:	e7ba      	b.n	8002012 <HAL_RCC_OscConfig+0x1ce>
 800209c:	f023 0301 	bic.w	r3, r3, #1
 80020a0:	6223      	str	r3, [r4, #32]
 80020a2:	6a23      	ldr	r3, [r4, #32]
 80020a4:	f023 0304 	bic.w	r3, r3, #4
 80020a8:	e7b6      	b.n	8002018 <HAL_RCC_OscConfig+0x1d4>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020aa:	f7fe fb83 	bl	80007b4 <HAL_GetTick>
 80020ae:	eba0 0008 	sub.w	r0, r0, r8
 80020b2:	42b0      	cmp	r0, r6
 80020b4:	d9b6      	bls.n	8002024 <HAL_RCC_OscConfig+0x1e0>
 80020b6:	e707      	b.n	8001ec8 <HAL_RCC_OscConfig+0x84>
 80020b8:	40021000 	.word	0x40021000
 80020bc:	42420000 	.word	0x42420000
 80020c0:	42420480 	.word	0x42420480
 80020c4:	20000020 	.word	0x20000020
 80020c8:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020cc:	4b2a      	ldr	r3, [pc, #168]	; (8002178 <HAL_RCC_OscConfig+0x334>)
 80020ce:	685a      	ldr	r2, [r3, #4]
 80020d0:	461c      	mov	r4, r3
 80020d2:	f002 020c 	and.w	r2, r2, #12
 80020d6:	2a08      	cmp	r2, #8
 80020d8:	d03d      	beq.n	8002156 <HAL_RCC_OscConfig+0x312>
 80020da:	2300      	movs	r3, #0
 80020dc:	4e27      	ldr	r6, [pc, #156]	; (800217c <HAL_RCC_OscConfig+0x338>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020de:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 80020e0:	6033      	str	r3, [r6, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020e2:	d12b      	bne.n	800213c <HAL_RCC_OscConfig+0x2f8>
        tickstart = HAL_GetTick();
 80020e4:	f7fe fb66 	bl	80007b4 <HAL_GetTick>
 80020e8:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020ea:	6823      	ldr	r3, [r4, #0]
 80020ec:	0199      	lsls	r1, r3, #6
 80020ee:	d41f      	bmi.n	8002130 <HAL_RCC_OscConfig+0x2ec>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80020f0:	6a2b      	ldr	r3, [r5, #32]
 80020f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020f6:	d105      	bne.n	8002104 <HAL_RCC_OscConfig+0x2c0>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80020f8:	6862      	ldr	r2, [r4, #4]
 80020fa:	68a9      	ldr	r1, [r5, #8]
 80020fc:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8002100:	430a      	orrs	r2, r1
 8002102:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002104:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8002106:	6862      	ldr	r2, [r4, #4]
 8002108:	430b      	orrs	r3, r1
 800210a:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 800210e:	4313      	orrs	r3, r2
 8002110:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8002112:	2301      	movs	r3, #1
 8002114:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8002116:	f7fe fb4d 	bl	80007b4 <HAL_GetTick>
 800211a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800211c:	6823      	ldr	r3, [r4, #0]
 800211e:	019a      	lsls	r2, r3, #6
 8002120:	f53f aea8 	bmi.w	8001e74 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002124:	f7fe fb46 	bl	80007b4 <HAL_GetTick>
 8002128:	1b40      	subs	r0, r0, r5
 800212a:	2802      	cmp	r0, #2
 800212c:	d9f6      	bls.n	800211c <HAL_RCC_OscConfig+0x2d8>
 800212e:	e6cb      	b.n	8001ec8 <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002130:	f7fe fb40 	bl	80007b4 <HAL_GetTick>
 8002134:	1bc0      	subs	r0, r0, r7
 8002136:	2802      	cmp	r0, #2
 8002138:	d9d7      	bls.n	80020ea <HAL_RCC_OscConfig+0x2a6>
 800213a:	e6c5      	b.n	8001ec8 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 800213c:	f7fe fb3a 	bl	80007b4 <HAL_GetTick>
 8002140:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002142:	6823      	ldr	r3, [r4, #0]
 8002144:	019b      	lsls	r3, r3, #6
 8002146:	f57f ae95 	bpl.w	8001e74 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800214a:	f7fe fb33 	bl	80007b4 <HAL_GetTick>
 800214e:	1b40      	subs	r0, r0, r5
 8002150:	2802      	cmp	r0, #2
 8002152:	d9f6      	bls.n	8002142 <HAL_RCC_OscConfig+0x2fe>
 8002154:	e6b8      	b.n	8001ec8 <HAL_RCC_OscConfig+0x84>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002156:	2801      	cmp	r0, #1
 8002158:	f43f aeb7 	beq.w	8001eca <HAL_RCC_OscConfig+0x86>
        pll_config = RCC->CFGR;
 800215c:	6858      	ldr	r0, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800215e:	6a2b      	ldr	r3, [r5, #32]
 8002160:	f400 3280 	and.w	r2, r0, #65536	; 0x10000
 8002164:	429a      	cmp	r2, r3
 8002166:	f47f ae71 	bne.w	8001e4c <HAL_RCC_OscConfig+0x8>
 800216a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800216c:	f400 1070 	and.w	r0, r0, #3932160	; 0x3c0000
    return HAL_ERROR;
 8002170:	1ac0      	subs	r0, r0, r3
 8002172:	bf18      	it	ne
 8002174:	2001      	movne	r0, #1
 8002176:	e6a8      	b.n	8001eca <HAL_RCC_OscConfig+0x86>
 8002178:	40021000 	.word	0x40021000
 800217c:	42420060 	.word	0x42420060

08002180 <HAL_RCC_GetSysClockFreq>:
{
 8002180:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002182:	4b19      	ldr	r3, [pc, #100]	; (80021e8 <HAL_RCC_GetSysClockFreq+0x68>)
{
 8002184:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002186:	ac02      	add	r4, sp, #8
 8002188:	f103 0510 	add.w	r5, r3, #16
 800218c:	4622      	mov	r2, r4
 800218e:	6818      	ldr	r0, [r3, #0]
 8002190:	6859      	ldr	r1, [r3, #4]
 8002192:	3308      	adds	r3, #8
 8002194:	c203      	stmia	r2!, {r0, r1}
 8002196:	42ab      	cmp	r3, r5
 8002198:	4614      	mov	r4, r2
 800219a:	d1f7      	bne.n	800218c <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800219c:	2301      	movs	r3, #1
 800219e:	f88d 3004 	strb.w	r3, [sp, #4]
 80021a2:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 80021a4:	4911      	ldr	r1, [pc, #68]	; (80021ec <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80021a6:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 80021aa:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80021ac:	f003 020c 	and.w	r2, r3, #12
 80021b0:	2a08      	cmp	r2, #8
 80021b2:	d117      	bne.n	80021e4 <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80021b4:	f3c3 4283 	ubfx	r2, r3, #18, #4
 80021b8:	a806      	add	r0, sp, #24
 80021ba:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80021bc:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80021be:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80021c2:	d50c      	bpl.n	80021de <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80021c4:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80021c6:	480a      	ldr	r0, [pc, #40]	; (80021f0 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80021c8:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80021cc:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80021ce:	aa06      	add	r2, sp, #24
 80021d0:	4413      	add	r3, r2
 80021d2:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80021d6:	fbb0 f0f3 	udiv	r0, r0, r3
}
 80021da:	b007      	add	sp, #28
 80021dc:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80021de:	4805      	ldr	r0, [pc, #20]	; (80021f4 <HAL_RCC_GetSysClockFreq+0x74>)
 80021e0:	4350      	muls	r0, r2
 80021e2:	e7fa      	b.n	80021da <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 80021e4:	4802      	ldr	r0, [pc, #8]	; (80021f0 <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 80021e6:	e7f8      	b.n	80021da <HAL_RCC_GetSysClockFreq+0x5a>
 80021e8:	08006780 	.word	0x08006780
 80021ec:	40021000 	.word	0x40021000
 80021f0:	007a1200 	.word	0x007a1200
 80021f4:	003d0900 	.word	0x003d0900

080021f8 <HAL_RCC_ClockConfig>:
{
 80021f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80021fc:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 80021fe:	4604      	mov	r4, r0
 8002200:	b910      	cbnz	r0, 8002208 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8002202:	2001      	movs	r0, #1
 8002204:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002208:	4a45      	ldr	r2, [pc, #276]	; (8002320 <HAL_RCC_ClockConfig+0x128>)
 800220a:	6813      	ldr	r3, [r2, #0]
 800220c:	f003 0307 	and.w	r3, r3, #7
 8002210:	428b      	cmp	r3, r1
 8002212:	d329      	bcc.n	8002268 <HAL_RCC_ClockConfig+0x70>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002214:	6821      	ldr	r1, [r4, #0]
 8002216:	078e      	lsls	r6, r1, #30
 8002218:	d431      	bmi.n	800227e <HAL_RCC_ClockConfig+0x86>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800221a:	07ca      	lsls	r2, r1, #31
 800221c:	d444      	bmi.n	80022a8 <HAL_RCC_ClockConfig+0xb0>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800221e:	4a40      	ldr	r2, [pc, #256]	; (8002320 <HAL_RCC_ClockConfig+0x128>)
 8002220:	6813      	ldr	r3, [r2, #0]
 8002222:	f003 0307 	and.w	r3, r3, #7
 8002226:	429d      	cmp	r5, r3
 8002228:	d367      	bcc.n	80022fa <HAL_RCC_ClockConfig+0x102>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800222a:	6822      	ldr	r2, [r4, #0]
 800222c:	4d3d      	ldr	r5, [pc, #244]	; (8002324 <HAL_RCC_ClockConfig+0x12c>)
 800222e:	f012 0f04 	tst.w	r2, #4
 8002232:	d16e      	bne.n	8002312 <HAL_RCC_ClockConfig+0x11a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002234:	0713      	lsls	r3, r2, #28
 8002236:	d506      	bpl.n	8002246 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002238:	686b      	ldr	r3, [r5, #4]
 800223a:	6922      	ldr	r2, [r4, #16]
 800223c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8002240:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002244:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002246:	f7ff ff9b 	bl	8002180 <HAL_RCC_GetSysClockFreq>
 800224a:	686b      	ldr	r3, [r5, #4]
 800224c:	4a36      	ldr	r2, [pc, #216]	; (8002328 <HAL_RCC_ClockConfig+0x130>)
 800224e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002252:	5cd3      	ldrb	r3, [r2, r3]
 8002254:	40d8      	lsrs	r0, r3
 8002256:	4b35      	ldr	r3, [pc, #212]	; (800232c <HAL_RCC_ClockConfig+0x134>)
 8002258:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 800225a:	4b35      	ldr	r3, [pc, #212]	; (8002330 <HAL_RCC_ClockConfig+0x138>)
 800225c:	6818      	ldr	r0, [r3, #0]
 800225e:	f7fe fa67 	bl	8000730 <HAL_InitTick>
  return HAL_OK;
 8002262:	2000      	movs	r0, #0
 8002264:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002268:	6813      	ldr	r3, [r2, #0]
 800226a:	f023 0307 	bic.w	r3, r3, #7
 800226e:	430b      	orrs	r3, r1
 8002270:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002272:	6813      	ldr	r3, [r2, #0]
 8002274:	f003 0307 	and.w	r3, r3, #7
 8002278:	4299      	cmp	r1, r3
 800227a:	d1c2      	bne.n	8002202 <HAL_RCC_ClockConfig+0xa>
 800227c:	e7ca      	b.n	8002214 <HAL_RCC_ClockConfig+0x1c>
 800227e:	4b29      	ldr	r3, [pc, #164]	; (8002324 <HAL_RCC_ClockConfig+0x12c>)
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002280:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002284:	bf1e      	ittt	ne
 8002286:	685a      	ldrne	r2, [r3, #4]
 8002288:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 800228c:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800228e:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002290:	bf42      	ittt	mi
 8002292:	685a      	ldrmi	r2, [r3, #4]
 8002294:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8002298:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800229a:	685a      	ldr	r2, [r3, #4]
 800229c:	68a0      	ldr	r0, [r4, #8]
 800229e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80022a2:	4302      	orrs	r2, r0
 80022a4:	605a      	str	r2, [r3, #4]
 80022a6:	e7b8      	b.n	800221a <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022a8:	6862      	ldr	r2, [r4, #4]
 80022aa:	4e1e      	ldr	r6, [pc, #120]	; (8002324 <HAL_RCC_ClockConfig+0x12c>)
 80022ac:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022ae:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022b0:	d11b      	bne.n	80022ea <HAL_RCC_ClockConfig+0xf2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022b2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022b6:	d0a4      	beq.n	8002202 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022b8:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022ba:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022be:	f023 0303 	bic.w	r3, r3, #3
 80022c2:	4313      	orrs	r3, r2
 80022c4:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 80022c6:	f7fe fa75 	bl	80007b4 <HAL_GetTick>
 80022ca:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022cc:	6873      	ldr	r3, [r6, #4]
 80022ce:	6862      	ldr	r2, [r4, #4]
 80022d0:	f003 030c 	and.w	r3, r3, #12
 80022d4:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80022d8:	d0a1      	beq.n	800221e <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022da:	f7fe fa6b 	bl	80007b4 <HAL_GetTick>
 80022de:	1bc0      	subs	r0, r0, r7
 80022e0:	4540      	cmp	r0, r8
 80022e2:	d9f3      	bls.n	80022cc <HAL_RCC_ClockConfig+0xd4>
        return HAL_TIMEOUT;
 80022e4:	2003      	movs	r0, #3
}
 80022e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022ea:	2a02      	cmp	r2, #2
 80022ec:	d102      	bne.n	80022f4 <HAL_RCC_ClockConfig+0xfc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022ee:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80022f2:	e7e0      	b.n	80022b6 <HAL_RCC_ClockConfig+0xbe>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022f4:	f013 0f02 	tst.w	r3, #2
 80022f8:	e7dd      	b.n	80022b6 <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022fa:	6813      	ldr	r3, [r2, #0]
 80022fc:	f023 0307 	bic.w	r3, r3, #7
 8002300:	432b      	orrs	r3, r5
 8002302:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002304:	6813      	ldr	r3, [r2, #0]
 8002306:	f003 0307 	and.w	r3, r3, #7
 800230a:	429d      	cmp	r5, r3
 800230c:	f47f af79 	bne.w	8002202 <HAL_RCC_ClockConfig+0xa>
 8002310:	e78b      	b.n	800222a <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002312:	686b      	ldr	r3, [r5, #4]
 8002314:	68e1      	ldr	r1, [r4, #12]
 8002316:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800231a:	430b      	orrs	r3, r1
 800231c:	606b      	str	r3, [r5, #4]
 800231e:	e789      	b.n	8002234 <HAL_RCC_ClockConfig+0x3c>
 8002320:	40022000 	.word	0x40022000
 8002324:	40021000 	.word	0x40021000
 8002328:	08007894 	.word	0x08007894
 800232c:	20000020 	.word	0x20000020
 8002330:	20000004 	.word	0x20000004

08002334 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002334:	4b04      	ldr	r3, [pc, #16]	; (8002348 <HAL_RCC_GetPCLK1Freq+0x14>)
 8002336:	4a05      	ldr	r2, [pc, #20]	; (800234c <HAL_RCC_GetPCLK1Freq+0x18>)
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800233e:	5cd3      	ldrb	r3, [r2, r3]
 8002340:	4a03      	ldr	r2, [pc, #12]	; (8002350 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002342:	6810      	ldr	r0, [r2, #0]
}
 8002344:	40d8      	lsrs	r0, r3
 8002346:	4770      	bx	lr
 8002348:	40021000 	.word	0x40021000
 800234c:	080078a4 	.word	0x080078a4
 8002350:	20000020 	.word	0x20000020

08002354 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002354:	4b04      	ldr	r3, [pc, #16]	; (8002368 <HAL_RCC_GetPCLK2Freq+0x14>)
 8002356:	4a05      	ldr	r2, [pc, #20]	; (800236c <HAL_RCC_GetPCLK2Freq+0x18>)
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800235e:	5cd3      	ldrb	r3, [r2, r3]
 8002360:	4a03      	ldr	r2, [pc, #12]	; (8002370 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002362:	6810      	ldr	r0, [r2, #0]
}
 8002364:	40d8      	lsrs	r0, r3
 8002366:	4770      	bx	lr
 8002368:	40021000 	.word	0x40021000
 800236c:	080078a4 	.word	0x080078a4
 8002370:	20000020 	.word	0x20000020

08002374 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002374:	6803      	ldr	r3, [r0, #0]
{
 8002376:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800237a:	07d9      	lsls	r1, r3, #31
{
 800237c:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800237e:	d520      	bpl.n	80023c2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002380:	4c35      	ldr	r4, [pc, #212]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8002382:	69e3      	ldr	r3, [r4, #28]
 8002384:	00da      	lsls	r2, r3, #3
 8002386:	d432      	bmi.n	80023ee <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8002388:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800238a:	69e3      	ldr	r3, [r4, #28]
 800238c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002390:	61e3      	str	r3, [r4, #28]
 8002392:	69e3      	ldr	r3, [r4, #28]
 8002394:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002398:	9301      	str	r3, [sp, #4]
 800239a:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800239c:	4e2f      	ldr	r6, [pc, #188]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800239e:	6833      	ldr	r3, [r6, #0]
 80023a0:	05db      	lsls	r3, r3, #23
 80023a2:	d526      	bpl.n	80023f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80023a4:	6a23      	ldr	r3, [r4, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80023a6:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80023aa:	d136      	bne.n	800241a <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80023ac:	6a23      	ldr	r3, [r4, #32]
 80023ae:	686a      	ldr	r2, [r5, #4]
 80023b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023b4:	4313      	orrs	r3, r2
 80023b6:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80023b8:	b11f      	cbz	r7, 80023c2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023ba:	69e3      	ldr	r3, [r4, #28]
 80023bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023c0:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80023c2:	6828      	ldr	r0, [r5, #0]
 80023c4:	0783      	lsls	r3, r0, #30
 80023c6:	d506      	bpl.n	80023d6 <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80023c8:	4a23      	ldr	r2, [pc, #140]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 80023ca:	68a9      	ldr	r1, [r5, #8]
 80023cc:	6853      	ldr	r3, [r2, #4]
 80023ce:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80023d2:	430b      	orrs	r3, r1
 80023d4:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80023d6:	f010 0010 	ands.w	r0, r0, #16
 80023da:	d01b      	beq.n	8002414 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80023dc:	4a1e      	ldr	r2, [pc, #120]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 80023de:	6969      	ldr	r1, [r5, #20]
 80023e0:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80023e2:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80023e4:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80023e8:	430b      	orrs	r3, r1
 80023ea:	6053      	str	r3, [r2, #4]
 80023ec:	e012      	b.n	8002414 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;
 80023ee:	2700      	movs	r7, #0
 80023f0:	e7d4      	b.n	800239c <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023f2:	6833      	ldr	r3, [r6, #0]
 80023f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023f8:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80023fa:	f7fe f9db 	bl	80007b4 <HAL_GetTick>
 80023fe:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002400:	6833      	ldr	r3, [r6, #0]
 8002402:	05d8      	lsls	r0, r3, #23
 8002404:	d4ce      	bmi.n	80023a4 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002406:	f7fe f9d5 	bl	80007b4 <HAL_GetTick>
 800240a:	eba0 0008 	sub.w	r0, r0, r8
 800240e:	2864      	cmp	r0, #100	; 0x64
 8002410:	d9f6      	bls.n	8002400 <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 8002412:	2003      	movs	r0, #3
}
 8002414:	b002      	add	sp, #8
 8002416:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800241a:	686a      	ldr	r2, [r5, #4]
 800241c:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8002420:	4293      	cmp	r3, r2
 8002422:	d0c3      	beq.n	80023ac <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 8002424:	2001      	movs	r0, #1
 8002426:	4a0e      	ldr	r2, [pc, #56]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0xec>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002428:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 800242a:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800242c:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800242e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002432:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 8002434:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002436:	07d9      	lsls	r1, r3, #31
 8002438:	d5b8      	bpl.n	80023ac <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 800243a:	f7fe f9bb 	bl	80007b4 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800243e:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8002442:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002444:	6a23      	ldr	r3, [r4, #32]
 8002446:	079a      	lsls	r2, r3, #30
 8002448:	d4b0      	bmi.n	80023ac <HAL_RCCEx_PeriphCLKConfig+0x38>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800244a:	f7fe f9b3 	bl	80007b4 <HAL_GetTick>
 800244e:	1b80      	subs	r0, r0, r6
 8002450:	4540      	cmp	r0, r8
 8002452:	d9f7      	bls.n	8002444 <HAL_RCCEx_PeriphCLKConfig+0xd0>
 8002454:	e7dd      	b.n	8002412 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8002456:	bf00      	nop
 8002458:	40021000 	.word	0x40021000
 800245c:	40007000 	.word	0x40007000
 8002460:	42420440 	.word	0x42420440

08002464 <SPI_WaitFlagStateUntilTimeout.constprop.8>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8002464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002466:	4604      	mov	r4, r0
 8002468:	460e      	mov	r6, r1
 800246a:	4615      	mov	r5, r2
 800246c:	461f      	mov	r7, r3
                                                       uint32_t Timeout, uint32_t Tickstart)
{
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800246e:	6821      	ldr	r1, [r4, #0]
 8002470:	688a      	ldr	r2, [r1, #8]
 8002472:	ea36 0302 	bics.w	r3, r6, r2
 8002476:	d001      	beq.n	800247c <SPI_WaitFlagStateUntilTimeout.constprop.8+0x18>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8002478:	2000      	movs	r0, #0
}
 800247a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (Timeout != HAL_MAX_DELAY)
 800247c:	1c6b      	adds	r3, r5, #1
 800247e:	d0f7      	beq.n	8002470 <SPI_WaitFlagStateUntilTimeout.constprop.8+0xc>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002480:	f7fe f998 	bl	80007b4 <HAL_GetTick>
 8002484:	1bc0      	subs	r0, r0, r7
 8002486:	4285      	cmp	r5, r0
 8002488:	d8f1      	bhi.n	800246e <SPI_WaitFlagStateUntilTimeout.constprop.8+0xa>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800248a:	6823      	ldr	r3, [r4, #0]
 800248c:	685a      	ldr	r2, [r3, #4]
 800248e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002492:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002494:	6862      	ldr	r2, [r4, #4]
 8002496:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 800249a:	d10a      	bne.n	80024b2 <SPI_WaitFlagStateUntilTimeout.constprop.8+0x4e>
 800249c:	68a2      	ldr	r2, [r4, #8]
 800249e:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80024a2:	d002      	beq.n	80024aa <SPI_WaitFlagStateUntilTimeout.constprop.8+0x46>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80024a4:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80024a8:	d103      	bne.n	80024b2 <SPI_WaitFlagStateUntilTimeout.constprop.8+0x4e>
          __HAL_SPI_DISABLE(hspi);
 80024aa:	681a      	ldr	r2, [r3, #0]
 80024ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80024b0:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80024b2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80024b4:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80024b8:	d107      	bne.n	80024ca <SPI_WaitFlagStateUntilTimeout.constprop.8+0x66>
          SPI_RESET_CRC(hspi);
 80024ba:	681a      	ldr	r2, [r3, #0]
 80024bc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80024c0:	601a      	str	r2, [r3, #0]
 80024c2:	681a      	ldr	r2, [r3, #0]
 80024c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80024c8:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 80024ca:	2301      	movs	r3, #1
 80024cc:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 80024d0:	2300      	movs	r3, #0
 80024d2:	2003      	movs	r0, #3
 80024d4:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 80024d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080024da <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80024da:	b538      	push	{r3, r4, r5, lr}
 80024dc:	4613      	mov	r3, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80024de:	6842      	ldr	r2, [r0, #4]
{
 80024e0:	4604      	mov	r4, r0
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80024e2:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 80024e6:	d116      	bne.n	8002516 <SPI_EndRxTransaction+0x3c>
 80024e8:	6880      	ldr	r0, [r0, #8]
 80024ea:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80024ee:	d002      	beq.n	80024f6 <SPI_EndRxTransaction+0x1c>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80024f0:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 80024f4:	d10f      	bne.n	8002516 <SPI_EndRxTransaction+0x3c>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80024f6:	6822      	ldr	r2, [r4, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 80024f8:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
    __HAL_SPI_DISABLE(hspi);
 80024fc:	6815      	ldr	r5, [r2, #0]
 80024fe:	f025 0540 	bic.w	r5, r5, #64	; 0x40
 8002502:	6015      	str	r5, [r2, #0]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8002504:	d107      	bne.n	8002516 <SPI_EndRxTransaction+0x3c>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002506:	460a      	mov	r2, r1
 8002508:	2101      	movs	r1, #1
 800250a:	4620      	mov	r0, r4
 800250c:	f7ff ffaa 	bl	8002464 <SPI_WaitFlagStateUntilTimeout.constprop.8>
 8002510:	b920      	cbnz	r0, 800251c <SPI_EndRxTransaction+0x42>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
 8002512:	2000      	movs	r0, #0
 8002514:	bd38      	pop	{r3, r4, r5, pc}
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002516:	460a      	mov	r2, r1
 8002518:	2180      	movs	r1, #128	; 0x80
 800251a:	e7f6      	b.n	800250a <SPI_EndRxTransaction+0x30>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800251c:	6d63      	ldr	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 800251e:	2003      	movs	r0, #3
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002520:	f043 0320 	orr.w	r3, r3, #32
 8002524:	6563      	str	r3, [r4, #84]	; 0x54
}
 8002526:	bd38      	pop	{r3, r4, r5, pc}

08002528 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002528:	b510      	push	{r4, lr}
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800252a:	4613      	mov	r3, r2
 800252c:	460a      	mov	r2, r1
 800252e:	2180      	movs	r1, #128	; 0x80
{
 8002530:	4604      	mov	r4, r0
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002532:	f7ff ff97 	bl	8002464 <SPI_WaitFlagStateUntilTimeout.constprop.8>
 8002536:	b120      	cbz	r0, 8002542 <SPI_EndRxTxTransaction+0x1a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
 8002538:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800253a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800253c:	f043 0320 	orr.w	r3, r3, #32
 8002540:	6563      	str	r3, [r4, #84]	; 0x54
  }
  return HAL_OK;
}
 8002542:	bd10      	pop	{r4, pc}

08002544 <HAL_SPI_Init>:
{
 8002544:	b510      	push	{r4, lr}
  if (hspi == NULL)
 8002546:	4604      	mov	r4, r0
 8002548:	2800      	cmp	r0, #0
 800254a:	d034      	beq.n	80025b6 <HAL_SPI_Init+0x72>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800254c:	2300      	movs	r3, #0
 800254e:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8002550:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8002554:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002558:	b91b      	cbnz	r3, 8002562 <HAL_SPI_Init+0x1e>
    hspi->Lock = HAL_UNLOCKED;
 800255a:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 800255e:	f002 fdf7 	bl	8005150 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 8002562:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 8002564:	6822      	ldr	r2, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8002566:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 800256a:	6813      	ldr	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800256c:	68a0      	ldr	r0, [r4, #8]
  __HAL_SPI_DISABLE(hspi);
 800256e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002572:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002574:	6863      	ldr	r3, [r4, #4]
 8002576:	69a1      	ldr	r1, [r4, #24]
 8002578:	4303      	orrs	r3, r0
 800257a:	68e0      	ldr	r0, [r4, #12]
 800257c:	4303      	orrs	r3, r0
 800257e:	6920      	ldr	r0, [r4, #16]
 8002580:	4303      	orrs	r3, r0
 8002582:	6960      	ldr	r0, [r4, #20]
 8002584:	4303      	orrs	r3, r0
 8002586:	69e0      	ldr	r0, [r4, #28]
 8002588:	4303      	orrs	r3, r0
 800258a:	6a20      	ldr	r0, [r4, #32]
 800258c:	4303      	orrs	r3, r0
 800258e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8002590:	4303      	orrs	r3, r0
 8002592:	f401 7000 	and.w	r0, r1, #512	; 0x200
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002596:	0c09      	lsrs	r1, r1, #16
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002598:	4303      	orrs	r3, r0
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800259a:	f001 0104 	and.w	r1, r1, #4
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800259e:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80025a0:	6051      	str	r1, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80025a2:	69d3      	ldr	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80025a4:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80025a6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80025aa:	61d3      	str	r3, [r2, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 80025ac:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80025ae:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80025b0:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  return HAL_OK;
 80025b4:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80025b6:	2001      	movs	r0, #1
}
 80025b8:	bd10      	pop	{r4, pc}

080025ba <HAL_SPI_Transmit>:
{
 80025ba:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80025be:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 80025c0:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 80025c4:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 80025c6:	2b01      	cmp	r3, #1
{
 80025c8:	460d      	mov	r5, r1
 80025ca:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 80025cc:	f000 809c 	beq.w	8002708 <HAL_SPI_Transmit+0x14e>
 80025d0:	2301      	movs	r3, #1
 80025d2:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 80025d6:	f7fe f8ed 	bl	80007b4 <HAL_GetTick>
 80025da:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 80025dc:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 80025e0:	b2c0      	uxtb	r0, r0
 80025e2:	2801      	cmp	r0, #1
 80025e4:	f040 808e 	bne.w	8002704 <HAL_SPI_Transmit+0x14a>
  if ((pData == NULL) || (Size == 0U))
 80025e8:	2d00      	cmp	r5, #0
 80025ea:	d05e      	beq.n	80026aa <HAL_SPI_Transmit+0xf0>
 80025ec:	f1b8 0f00 	cmp.w	r8, #0
 80025f0:	d05b      	beq.n	80026aa <HAL_SPI_Transmit+0xf0>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80025f2:	2303      	movs	r3, #3
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80025f4:	2000      	movs	r0, #0
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80025f6:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80025fa:	68a3      	ldr	r3, [r4, #8]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80025fc:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80025fe:	63a0      	str	r0, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 8002600:	f8a4 8036 	strh.w	r8, [r4, #54]	; 0x36
  hspi->RxXferSize  = 0U;
 8002604:	87a0      	strh	r0, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002606:	87e0      	strh	r0, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002608:	6460      	str	r0, [r4, #68]	; 0x44
  hspi->RxISR       = NULL;
 800260a:	6420      	str	r0, [r4, #64]	; 0x40
 800260c:	6820      	ldr	r0, [r4, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800260e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    SPI_1LINE_TX(hspi);
 8002612:	bf08      	it	eq
 8002614:	6803      	ldreq	r3, [r0, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002616:	6325      	str	r5, [r4, #48]	; 0x30
    SPI_1LINE_TX(hspi);
 8002618:	bf08      	it	eq
 800261a:	f443 4380 	orreq.w	r3, r3, #16384	; 0x4000
  hspi->TxXferSize  = Size;
 800261e:	f8a4 8034 	strh.w	r8, [r4, #52]	; 0x34
    SPI_1LINE_TX(hspi);
 8002622:	bf08      	it	eq
 8002624:	6003      	streq	r3, [r0, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002626:	6803      	ldr	r3, [r0, #0]
 8002628:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 800262a:	bf5e      	ittt	pl
 800262c:	6803      	ldrpl	r3, [r0, #0]
 800262e:	f043 0340 	orrpl.w	r3, r3, #64	; 0x40
 8002632:	6003      	strpl	r3, [r0, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002634:	68e3      	ldr	r3, [r4, #12]
 8002636:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800263a:	6863      	ldr	r3, [r4, #4]
 800263c:	d13e      	bne.n	80026bc <HAL_SPI_Transmit+0x102>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800263e:	b113      	cbz	r3, 8002646 <HAL_SPI_Transmit+0x8c>
 8002640:	f1b8 0f01 	cmp.w	r8, #1
 8002644:	d107      	bne.n	8002656 <HAL_SPI_Transmit+0x9c>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002646:	f835 3b02 	ldrh.w	r3, [r5], #2
 800264a:	60c3      	str	r3, [r0, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800264c:	6325      	str	r5, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800264e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002650:	3b01      	subs	r3, #1
 8002652:	b29b      	uxth	r3, r3
 8002654:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8002656:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002658:	b29b      	uxth	r3, r3
 800265a:	b9a3      	cbnz	r3, 8002686 <HAL_SPI_Transmit+0xcc>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800265c:	463a      	mov	r2, r7
 800265e:	4631      	mov	r1, r6
 8002660:	4620      	mov	r0, r4
 8002662:	f7ff ff61 	bl	8002528 <SPI_EndRxTxTransaction>
 8002666:	2800      	cmp	r0, #0
 8002668:	d149      	bne.n	80026fe <HAL_SPI_Transmit+0x144>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800266a:	68a3      	ldr	r3, [r4, #8]
 800266c:	b933      	cbnz	r3, 800267c <HAL_SPI_Transmit+0xc2>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800266e:	9301      	str	r3, [sp, #4]
 8002670:	6823      	ldr	r3, [r4, #0]
 8002672:	68da      	ldr	r2, [r3, #12]
 8002674:	9201      	str	r2, [sp, #4]
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	9301      	str	r3, [sp, #4]
 800267a:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800267c:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 800267e:	3000      	adds	r0, #0
 8002680:	bf18      	it	ne
 8002682:	2001      	movne	r0, #1
 8002684:	e011      	b.n	80026aa <HAL_SPI_Transmit+0xf0>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002686:	6822      	ldr	r2, [r4, #0]
 8002688:	6893      	ldr	r3, [r2, #8]
 800268a:	0798      	lsls	r0, r3, #30
 800268c:	d505      	bpl.n	800269a <HAL_SPI_Transmit+0xe0>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800268e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002690:	f833 1b02 	ldrh.w	r1, [r3], #2
 8002694:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002696:	6323      	str	r3, [r4, #48]	; 0x30
 8002698:	e7d9      	b.n	800264e <HAL_SPI_Transmit+0x94>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800269a:	f7fe f88b 	bl	80007b4 <HAL_GetTick>
 800269e:	1bc0      	subs	r0, r0, r7
 80026a0:	42b0      	cmp	r0, r6
 80026a2:	d3d8      	bcc.n	8002656 <HAL_SPI_Transmit+0x9c>
 80026a4:	1c71      	adds	r1, r6, #1
 80026a6:	d0d6      	beq.n	8002656 <HAL_SPI_Transmit+0x9c>
          errorcode = HAL_TIMEOUT;
 80026a8:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 80026aa:	2301      	movs	r3, #1
 80026ac:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80026b0:	2300      	movs	r3, #0
 80026b2:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 80026b6:	b002      	add	sp, #8
 80026b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80026bc:	b113      	cbz	r3, 80026c4 <HAL_SPI_Transmit+0x10a>
 80026be:	f1b8 0f01 	cmp.w	r8, #1
 80026c2:	d108      	bne.n	80026d6 <HAL_SPI_Transmit+0x11c>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80026c4:	782b      	ldrb	r3, [r5, #0]
 80026c6:	7303      	strb	r3, [r0, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80026c8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80026ca:	3301      	adds	r3, #1
 80026cc:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80026ce:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80026d0:	3b01      	subs	r3, #1
 80026d2:	b29b      	uxth	r3, r3
 80026d4:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 80026d6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80026d8:	b29b      	uxth	r3, r3
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d0be      	beq.n	800265c <HAL_SPI_Transmit+0xa2>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80026de:	6823      	ldr	r3, [r4, #0]
 80026e0:	689a      	ldr	r2, [r3, #8]
 80026e2:	0792      	lsls	r2, r2, #30
 80026e4:	d503      	bpl.n	80026ee <HAL_SPI_Transmit+0x134>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80026e6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80026e8:	7812      	ldrb	r2, [r2, #0]
 80026ea:	731a      	strb	r2, [r3, #12]
 80026ec:	e7ec      	b.n	80026c8 <HAL_SPI_Transmit+0x10e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80026ee:	f7fe f861 	bl	80007b4 <HAL_GetTick>
 80026f2:	1bc0      	subs	r0, r0, r7
 80026f4:	4286      	cmp	r6, r0
 80026f6:	d8ee      	bhi.n	80026d6 <HAL_SPI_Transmit+0x11c>
 80026f8:	1c73      	adds	r3, r6, #1
 80026fa:	d0ec      	beq.n	80026d6 <HAL_SPI_Transmit+0x11c>
 80026fc:	e7d4      	b.n	80026a8 <HAL_SPI_Transmit+0xee>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80026fe:	2320      	movs	r3, #32
 8002700:	6563      	str	r3, [r4, #84]	; 0x54
 8002702:	e7b2      	b.n	800266a <HAL_SPI_Transmit+0xb0>
    errorcode = HAL_BUSY;
 8002704:	2002      	movs	r0, #2
 8002706:	e7d0      	b.n	80026aa <HAL_SPI_Transmit+0xf0>
  __HAL_LOCK(hspi);
 8002708:	2002      	movs	r0, #2
 800270a:	e7d4      	b.n	80026b6 <HAL_SPI_Transmit+0xfc>

0800270c <HAL_SPI_TransmitReceive>:
{
 800270c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002710:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8002712:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 8002716:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 8002718:	2b01      	cmp	r3, #1
{
 800271a:	460d      	mov	r5, r1
 800271c:	4691      	mov	r9, r2
 800271e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  __HAL_LOCK(hspi);
 8002720:	f000 80e2 	beq.w	80028e8 <HAL_SPI_TransmitReceive+0x1dc>
 8002724:	2301      	movs	r3, #1
 8002726:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 800272a:	f7fe f843 	bl	80007b4 <HAL_GetTick>
  tmp_state           = hspi->State;
 800272e:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  tickstart = HAL_GetTick();
 8002732:	4680      	mov	r8, r0
  tmp_state           = hspi->State;
 8002734:	b2db      	uxtb	r3, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002736:	2b01      	cmp	r3, #1
  tmp_mode            = hspi->Init.Mode;
 8002738:	6861      	ldr	r1, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800273a:	d00a      	beq.n	8002752 <HAL_SPI_TransmitReceive+0x46>
 800273c:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 8002740:	f040 80d0 	bne.w	80028e4 <HAL_SPI_TransmitReceive+0x1d8>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002744:	68a0      	ldr	r0, [r4, #8]
 8002746:	2800      	cmp	r0, #0
 8002748:	f040 80cc 	bne.w	80028e4 <HAL_SPI_TransmitReceive+0x1d8>
 800274c:	2b04      	cmp	r3, #4
 800274e:	f040 80c9 	bne.w	80028e4 <HAL_SPI_TransmitReceive+0x1d8>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002752:	2d00      	cmp	r5, #0
 8002754:	f000 80c4 	beq.w	80028e0 <HAL_SPI_TransmitReceive+0x1d4>
 8002758:	f1b9 0f00 	cmp.w	r9, #0
 800275c:	f000 80c0 	beq.w	80028e0 <HAL_SPI_TransmitReceive+0x1d4>
 8002760:	2e00      	cmp	r6, #0
 8002762:	f000 80bd 	beq.w	80028e0 <HAL_SPI_TransmitReceive+0x1d4>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002766:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800276a:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800276e:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002770:	bf1c      	itt	ne
 8002772:	2305      	movne	r3, #5
 8002774:	f884 3051 	strbne.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002778:	2300      	movs	r3, #0
 800277a:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->RxISR       = NULL;
 800277c:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 800277e:	6463      	str	r3, [r4, #68]	; 0x44
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002780:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 8002782:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 8002784:	86e6      	strh	r6, [r4, #54]	; 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002786:	681a      	ldr	r2, [r3, #0]
  hspi->RxXferSize  = Size;
 8002788:	87a6      	strh	r6, [r4, #60]	; 0x3c
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800278a:	0650      	lsls	r0, r2, #25
    __HAL_SPI_ENABLE(hspi);
 800278c:	bf58      	it	pl
 800278e:	681a      	ldrpl	r2, [r3, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002790:	6325      	str	r5, [r4, #48]	; 0x30
    __HAL_SPI_ENABLE(hspi);
 8002792:	bf58      	it	pl
 8002794:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
  hspi->TxXferSize  = Size;
 8002798:	86a6      	strh	r6, [r4, #52]	; 0x34
    __HAL_SPI_ENABLE(hspi);
 800279a:	bf58      	it	pl
 800279c:	601a      	strpl	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800279e:	68e2      	ldr	r2, [r4, #12]
 80027a0:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 80027a4:	d158      	bne.n	8002858 <HAL_SPI_TransmitReceive+0x14c>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80027a6:	b109      	cbz	r1, 80027ac <HAL_SPI_TransmitReceive+0xa0>
 80027a8:	2e01      	cmp	r6, #1
 80027aa:	d107      	bne.n	80027bc <HAL_SPI_TransmitReceive+0xb0>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80027ac:	f835 2b02 	ldrh.w	r2, [r5], #2
 80027b0:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 80027b2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80027b4:	6325      	str	r5, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80027b6:	3b01      	subs	r3, #1
 80027b8:	b29b      	uxth	r3, r3
 80027ba:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 80027bc:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80027be:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80027c0:	b29b      	uxth	r3, r3
 80027c2:	b9ab      	cbnz	r3, 80027f0 <HAL_SPI_TransmitReceive+0xe4>
 80027c4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80027c6:	b29b      	uxth	r3, r3
 80027c8:	b993      	cbnz	r3, 80027f0 <HAL_SPI_TransmitReceive+0xe4>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80027ca:	4642      	mov	r2, r8
 80027cc:	4639      	mov	r1, r7
 80027ce:	4620      	mov	r0, r4
 80027d0:	f7ff feaa 	bl	8002528 <SPI_EndRxTxTransaction>
 80027d4:	2800      	cmp	r0, #0
 80027d6:	f040 8081 	bne.w	80028dc <HAL_SPI_TransmitReceive+0x1d0>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80027da:	68a3      	ldr	r3, [r4, #8]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d132      	bne.n	8002846 <HAL_SPI_TransmitReceive+0x13a>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80027e0:	6823      	ldr	r3, [r4, #0]
 80027e2:	9001      	str	r0, [sp, #4]
 80027e4:	68da      	ldr	r2, [r3, #12]
 80027e6:	9201      	str	r2, [sp, #4]
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	9301      	str	r3, [sp, #4]
 80027ec:	9b01      	ldr	r3, [sp, #4]
 80027ee:	e02a      	b.n	8002846 <HAL_SPI_TransmitReceive+0x13a>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80027f0:	6822      	ldr	r2, [r4, #0]
 80027f2:	6893      	ldr	r3, [r2, #8]
 80027f4:	0799      	lsls	r1, r3, #30
 80027f6:	d50d      	bpl.n	8002814 <HAL_SPI_TransmitReceive+0x108>
 80027f8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80027fa:	b29b      	uxth	r3, r3
 80027fc:	b153      	cbz	r3, 8002814 <HAL_SPI_TransmitReceive+0x108>
 80027fe:	b14d      	cbz	r5, 8002814 <HAL_SPI_TransmitReceive+0x108>
        txallowed = 0U;
 8002800:	2500      	movs	r5, #0
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002802:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002804:	f833 1b02 	ldrh.w	r1, [r3], #2
 8002808:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800280a:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800280c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800280e:	3b01      	subs	r3, #1
 8002810:	b29b      	uxth	r3, r3
 8002812:	86e3      	strh	r3, [r4, #54]	; 0x36
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002814:	6893      	ldr	r3, [r2, #8]
 8002816:	07db      	lsls	r3, r3, #31
 8002818:	d50c      	bpl.n	8002834 <HAL_SPI_TransmitReceive+0x128>
 800281a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800281c:	b29b      	uxth	r3, r3
 800281e:	b14b      	cbz	r3, 8002834 <HAL_SPI_TransmitReceive+0x128>
        txallowed = 1U;
 8002820:	2501      	movs	r5, #1
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002822:	68d2      	ldr	r2, [r2, #12]
 8002824:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002826:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800282a:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 800282c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800282e:	3b01      	subs	r3, #1
 8002830:	b29b      	uxth	r3, r3
 8002832:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002834:	f7fd ffbe 	bl	80007b4 <HAL_GetTick>
 8002838:	eba0 0008 	sub.w	r0, r0, r8
 800283c:	4287      	cmp	r7, r0
 800283e:	d8be      	bhi.n	80027be <HAL_SPI_TransmitReceive+0xb2>
 8002840:	1c7e      	adds	r6, r7, #1
 8002842:	d0bc      	beq.n	80027be <HAL_SPI_TransmitReceive+0xb2>
        errorcode = HAL_TIMEOUT;
 8002844:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8002846:	2301      	movs	r3, #1
 8002848:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800284c:	2300      	movs	r3, #0
 800284e:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8002852:	b003      	add	sp, #12
 8002854:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002858:	b109      	cbz	r1, 800285e <HAL_SPI_TransmitReceive+0x152>
 800285a:	2e01      	cmp	r6, #1
 800285c:	d108      	bne.n	8002870 <HAL_SPI_TransmitReceive+0x164>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800285e:	782a      	ldrb	r2, [r5, #0]
 8002860:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002862:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002864:	3301      	adds	r3, #1
 8002866:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8002868:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800286a:	3b01      	subs	r3, #1
 800286c:	b29b      	uxth	r3, r3
 800286e:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8002870:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002872:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002874:	b29b      	uxth	r3, r3
 8002876:	b91b      	cbnz	r3, 8002880 <HAL_SPI_TransmitReceive+0x174>
 8002878:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800287a:	b29b      	uxth	r3, r3
 800287c:	2b00      	cmp	r3, #0
 800287e:	d0a4      	beq.n	80027ca <HAL_SPI_TransmitReceive+0xbe>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002880:	6822      	ldr	r2, [r4, #0]
 8002882:	6893      	ldr	r3, [r2, #8]
 8002884:	0798      	lsls	r0, r3, #30
 8002886:	d50e      	bpl.n	80028a6 <HAL_SPI_TransmitReceive+0x19a>
 8002888:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800288a:	b29b      	uxth	r3, r3
 800288c:	b15b      	cbz	r3, 80028a6 <HAL_SPI_TransmitReceive+0x19a>
 800288e:	b155      	cbz	r5, 80028a6 <HAL_SPI_TransmitReceive+0x19a>
        txallowed = 0U;
 8002890:	2500      	movs	r5, #0
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002892:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002894:	781b      	ldrb	r3, [r3, #0]
 8002896:	7313      	strb	r3, [r2, #12]
        hspi->pTxBuffPtr++;
 8002898:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800289a:	3301      	adds	r3, #1
 800289c:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800289e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80028a0:	3b01      	subs	r3, #1
 80028a2:	b29b      	uxth	r3, r3
 80028a4:	86e3      	strh	r3, [r4, #54]	; 0x36
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80028a6:	6822      	ldr	r2, [r4, #0]
 80028a8:	6893      	ldr	r3, [r2, #8]
 80028aa:	07d9      	lsls	r1, r3, #31
 80028ac:	d50d      	bpl.n	80028ca <HAL_SPI_TransmitReceive+0x1be>
 80028ae:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80028b0:	b29b      	uxth	r3, r3
 80028b2:	b153      	cbz	r3, 80028ca <HAL_SPI_TransmitReceive+0x1be>
        txallowed = 1U;
 80028b4:	2501      	movs	r5, #1
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80028b6:	68d2      	ldr	r2, [r2, #12]
 80028b8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80028ba:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80028bc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80028be:	3301      	adds	r3, #1
 80028c0:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 80028c2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80028c4:	3b01      	subs	r3, #1
 80028c6:	b29b      	uxth	r3, r3
 80028c8:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80028ca:	f7fd ff73 	bl	80007b4 <HAL_GetTick>
 80028ce:	eba0 0008 	sub.w	r0, r0, r8
 80028d2:	4287      	cmp	r7, r0
 80028d4:	d8cd      	bhi.n	8002872 <HAL_SPI_TransmitReceive+0x166>
 80028d6:	1c7b      	adds	r3, r7, #1
 80028d8:	d0cb      	beq.n	8002872 <HAL_SPI_TransmitReceive+0x166>
 80028da:	e7b3      	b.n	8002844 <HAL_SPI_TransmitReceive+0x138>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80028dc:	2320      	movs	r3, #32
 80028de:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 80028e0:	2001      	movs	r0, #1
 80028e2:	e7b0      	b.n	8002846 <HAL_SPI_TransmitReceive+0x13a>
    errorcode = HAL_BUSY;
 80028e4:	2002      	movs	r0, #2
 80028e6:	e7ae      	b.n	8002846 <HAL_SPI_TransmitReceive+0x13a>
  __HAL_LOCK(hspi);
 80028e8:	2002      	movs	r0, #2
 80028ea:	e7b2      	b.n	8002852 <HAL_SPI_TransmitReceive+0x146>

080028ec <HAL_SPI_Receive>:
{
 80028ec:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80028f0:	461d      	mov	r5, r3
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80028f2:	6843      	ldr	r3, [r0, #4]
{
 80028f4:	4604      	mov	r4, r0
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80028f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
{
 80028fa:	4688      	mov	r8, r1
 80028fc:	4617      	mov	r7, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80028fe:	d10c      	bne.n	800291a <HAL_SPI_Receive+0x2e>
 8002900:	6883      	ldr	r3, [r0, #8]
 8002902:	b953      	cbnz	r3, 800291a <HAL_SPI_Receive+0x2e>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002904:	2304      	movs	r3, #4
 8002906:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800290a:	4613      	mov	r3, r2
 800290c:	9500      	str	r5, [sp, #0]
 800290e:	460a      	mov	r2, r1
 8002910:	f7ff fefc 	bl	800270c <HAL_SPI_TransmitReceive>
}
 8002914:	b002      	add	sp, #8
 8002916:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hspi);
 800291a:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 800291e:	2b01      	cmp	r3, #1
 8002920:	d079      	beq.n	8002a16 <HAL_SPI_Receive+0x12a>
 8002922:	2301      	movs	r3, #1
 8002924:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  tickstart = HAL_GetTick();
 8002928:	f7fd ff44 	bl	80007b4 <HAL_GetTick>
 800292c:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 800292e:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 8002932:	b2c0      	uxtb	r0, r0
 8002934:	2801      	cmp	r0, #1
 8002936:	d16c      	bne.n	8002a12 <HAL_SPI_Receive+0x126>
  if ((pData == NULL) || (Size == 0U))
 8002938:	f1b8 0f00 	cmp.w	r8, #0
 800293c:	d057      	beq.n	80029ee <HAL_SPI_Receive+0x102>
 800293e:	2f00      	cmp	r7, #0
 8002940:	d055      	beq.n	80029ee <HAL_SPI_Receive+0x102>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002942:	2304      	movs	r3, #4
 8002944:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002948:	2300      	movs	r3, #0
 800294a:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800294c:	6323      	str	r3, [r4, #48]	; 0x30
  hspi->RxXferCount = Size;
 800294e:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->TxXferSize  = 0U;
 8002950:	86a3      	strh	r3, [r4, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002952:	86e3      	strh	r3, [r4, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002954:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002956:	6463      	str	r3, [r4, #68]	; 0x44
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002958:	68a3      	ldr	r3, [r4, #8]
  hspi->RxXferSize  = Size;
 800295a:	87a7      	strh	r7, [r4, #60]	; 0x3c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800295c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002960:	6823      	ldr	r3, [r4, #0]
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002962:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
    SPI_1LINE_RX(hspi);
 8002966:	bf02      	ittt	eq
 8002968:	681a      	ldreq	r2, [r3, #0]
 800296a:	f422 4280 	biceq.w	r2, r2, #16384	; 0x4000
 800296e:	601a      	streq	r2, [r3, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	0657      	lsls	r7, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8002974:	bf5e      	ittt	pl
 8002976:	681a      	ldrpl	r2, [r3, #0]
 8002978:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 800297c:	601a      	strpl	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800297e:	68e3      	ldr	r3, [r4, #12]
 8002980:	b1f3      	cbz	r3, 80029c0 <HAL_SPI_Receive+0xd4>
    while (hspi->RxXferCount > 0U)
 8002982:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002984:	b29b      	uxth	r3, r3
 8002986:	b1fb      	cbz	r3, 80029c8 <HAL_SPI_Receive+0xdc>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002988:	6823      	ldr	r3, [r4, #0]
 800298a:	689a      	ldr	r2, [r3, #8]
 800298c:	07d2      	lsls	r2, r2, #31
 800298e:	d535      	bpl.n	80029fc <HAL_SPI_Receive+0x110>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002990:	68da      	ldr	r2, [r3, #12]
 8002992:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002994:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002998:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 800299a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800299c:	3b01      	subs	r3, #1
 800299e:	b29b      	uxth	r3, r3
 80029a0:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80029a2:	e7ee      	b.n	8002982 <HAL_SPI_Receive+0x96>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80029a4:	6823      	ldr	r3, [r4, #0]
 80029a6:	689a      	ldr	r2, [r3, #8]
 80029a8:	07d0      	lsls	r0, r2, #31
 80029aa:	d518      	bpl.n	80029de <HAL_SPI_Receive+0xf2>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80029ac:	7b1b      	ldrb	r3, [r3, #12]
 80029ae:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80029b0:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80029b2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80029b4:	3301      	adds	r3, #1
 80029b6:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 80029b8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80029ba:	3b01      	subs	r3, #1
 80029bc:	b29b      	uxth	r3, r3
 80029be:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->RxXferCount > 0U)
 80029c0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80029c2:	b29b      	uxth	r3, r3
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d1ed      	bne.n	80029a4 <HAL_SPI_Receive+0xb8>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80029c8:	4632      	mov	r2, r6
 80029ca:	4629      	mov	r1, r5
 80029cc:	4620      	mov	r0, r4
 80029ce:	f7ff fd84 	bl	80024da <SPI_EndRxTransaction>
 80029d2:	b9d8      	cbnz	r0, 8002a0c <HAL_SPI_Receive+0x120>
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80029d4:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 80029d6:	3000      	adds	r0, #0
 80029d8:	bf18      	it	ne
 80029da:	2001      	movne	r0, #1
 80029dc:	e007      	b.n	80029ee <HAL_SPI_Receive+0x102>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80029de:	f7fd fee9 	bl	80007b4 <HAL_GetTick>
 80029e2:	1b80      	subs	r0, r0, r6
 80029e4:	4285      	cmp	r5, r0
 80029e6:	d8eb      	bhi.n	80029c0 <HAL_SPI_Receive+0xd4>
 80029e8:	1c69      	adds	r1, r5, #1
 80029ea:	d0e9      	beq.n	80029c0 <HAL_SPI_Receive+0xd4>
          errorcode = HAL_TIMEOUT;
 80029ec:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 80029ee:	2301      	movs	r3, #1
 80029f0:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80029f4:	2300      	movs	r3, #0
 80029f6:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  return errorcode;
 80029fa:	e78b      	b.n	8002914 <HAL_SPI_Receive+0x28>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80029fc:	f7fd feda 	bl	80007b4 <HAL_GetTick>
 8002a00:	1b80      	subs	r0, r0, r6
 8002a02:	4285      	cmp	r5, r0
 8002a04:	d8bd      	bhi.n	8002982 <HAL_SPI_Receive+0x96>
 8002a06:	1c6b      	adds	r3, r5, #1
 8002a08:	d0bb      	beq.n	8002982 <HAL_SPI_Receive+0x96>
 8002a0a:	e7ef      	b.n	80029ec <HAL_SPI_Receive+0x100>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002a0c:	2320      	movs	r3, #32
 8002a0e:	6563      	str	r3, [r4, #84]	; 0x54
 8002a10:	e7e0      	b.n	80029d4 <HAL_SPI_Receive+0xe8>
    errorcode = HAL_BUSY;
 8002a12:	2002      	movs	r0, #2
 8002a14:	e7eb      	b.n	80029ee <HAL_SPI_Receive+0x102>
  __HAL_LOCK(hspi);
 8002a16:	2002      	movs	r0, #2
 8002a18:	e77c      	b.n	8002914 <HAL_SPI_Receive+0x28>

08002a1a <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a1a:	6803      	ldr	r3, [r0, #0]
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
}
 8002a1c:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a1e:	68da      	ldr	r2, [r3, #12]
 8002a20:	f042 0201 	orr.w	r2, r2, #1
 8002a24:	60da      	str	r2, [r3, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a26:	689a      	ldr	r2, [r3, #8]
 8002a28:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a2c:	2a06      	cmp	r2, #6
    __HAL_TIM_ENABLE(htim);
 8002a2e:	bf1e      	ittt	ne
 8002a30:	681a      	ldrne	r2, [r3, #0]
 8002a32:	f042 0201 	orrne.w	r2, r2, #1
 8002a36:	601a      	strne	r2, [r3, #0]
}
 8002a38:	4770      	bx	lr

08002a3a <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002a3a:	6803      	ldr	r3, [r0, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8002a3c:	b189      	cbz	r1, 8002a62 <HAL_TIM_Encoder_Start+0x28>
 8002a3e:	2904      	cmp	r1, #4
 8002a40:	d007      	beq.n	8002a52 <HAL_TIM_Encoder_Start+0x18>
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002a42:	6a1a      	ldr	r2, [r3, #32]
 8002a44:	f022 0201 	bic.w	r2, r2, #1
 8002a48:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002a4a:	6a1a      	ldr	r2, [r3, #32]
 8002a4c:	f042 0201 	orr.w	r2, r2, #1
 8002a50:	621a      	str	r2, [r3, #32]
  TIMx->CCER &= ~tmp;
 8002a52:	6a1a      	ldr	r2, [r3, #32]
 8002a54:	f022 0210 	bic.w	r2, r2, #16
 8002a58:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002a5a:	6a1a      	ldr	r2, [r3, #32]
 8002a5c:	f042 0210 	orr.w	r2, r2, #16
 8002a60:	e006      	b.n	8002a70 <HAL_TIM_Encoder_Start+0x36>
  TIMx->CCER &= ~tmp;
 8002a62:	6a1a      	ldr	r2, [r3, #32]
 8002a64:	f022 0201 	bic.w	r2, r2, #1
 8002a68:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002a6a:	6a1a      	ldr	r2, [r3, #32]
 8002a6c:	f042 0201 	orr.w	r2, r2, #1
 8002a70:	621a      	str	r2, [r3, #32]
  __HAL_TIM_ENABLE(htim);
 8002a72:	681a      	ldr	r2, [r3, #0]
}
 8002a74:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE(htim);
 8002a76:	f042 0201 	orr.w	r2, r2, #1
 8002a7a:	601a      	str	r2, [r3, #0]
}
 8002a7c:	4770      	bx	lr

08002a7e <HAL_TIM_OC_DelayElapsedCallback>:
 8002a7e:	4770      	bx	lr

08002a80 <HAL_TIM_IC_CaptureCallback>:
 8002a80:	4770      	bx	lr

08002a82 <HAL_TIM_PWM_PulseFinishedCallback>:
 8002a82:	4770      	bx	lr

08002a84 <HAL_TIM_TriggerCallback>:
 8002a84:	4770      	bx	lr

08002a86 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002a86:	6803      	ldr	r3, [r0, #0]
{
 8002a88:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002a8a:	691a      	ldr	r2, [r3, #16]
{
 8002a8c:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002a8e:	0791      	lsls	r1, r2, #30
 8002a90:	d50e      	bpl.n	8002ab0 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002a92:	68da      	ldr	r2, [r3, #12]
 8002a94:	0792      	lsls	r2, r2, #30
 8002a96:	d50b      	bpl.n	8002ab0 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002a98:	f06f 0202 	mvn.w	r2, #2
 8002a9c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a9e:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002aa0:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002aa2:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002aa4:	079b      	lsls	r3, r3, #30
 8002aa6:	d077      	beq.n	8002b98 <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 8002aa8:	f7ff ffea 	bl	8002a80 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002aac:	2300      	movs	r3, #0
 8002aae:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002ab0:	6823      	ldr	r3, [r4, #0]
 8002ab2:	691a      	ldr	r2, [r3, #16]
 8002ab4:	0750      	lsls	r0, r2, #29
 8002ab6:	d510      	bpl.n	8002ada <HAL_TIM_IRQHandler+0x54>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002ab8:	68da      	ldr	r2, [r3, #12]
 8002aba:	0751      	lsls	r1, r2, #29
 8002abc:	d50d      	bpl.n	8002ada <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002abe:	f06f 0204 	mvn.w	r2, #4
 8002ac2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ac4:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ac6:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ac8:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002aca:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8002ace:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ad0:	d068      	beq.n	8002ba4 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8002ad2:	f7ff ffd5 	bl	8002a80 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002ada:	6823      	ldr	r3, [r4, #0]
 8002adc:	691a      	ldr	r2, [r3, #16]
 8002ade:	0712      	lsls	r2, r2, #28
 8002ae0:	d50f      	bpl.n	8002b02 <HAL_TIM_IRQHandler+0x7c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002ae2:	68da      	ldr	r2, [r3, #12]
 8002ae4:	0710      	lsls	r0, r2, #28
 8002ae6:	d50c      	bpl.n	8002b02 <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002ae8:	f06f 0208 	mvn.w	r2, #8
 8002aec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002aee:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002af0:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002af2:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002af4:	0799      	lsls	r1, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8002af6:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002af8:	d05a      	beq.n	8002bb0 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8002afa:	f7ff ffc1 	bl	8002a80 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002afe:	2300      	movs	r3, #0
 8002b00:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002b02:	6823      	ldr	r3, [r4, #0]
 8002b04:	691a      	ldr	r2, [r3, #16]
 8002b06:	06d2      	lsls	r2, r2, #27
 8002b08:	d510      	bpl.n	8002b2c <HAL_TIM_IRQHandler+0xa6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002b0a:	68da      	ldr	r2, [r3, #12]
 8002b0c:	06d0      	lsls	r0, r2, #27
 8002b0e:	d50d      	bpl.n	8002b2c <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002b10:	f06f 0210 	mvn.w	r2, #16
 8002b14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b16:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b18:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b1a:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b1c:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8002b20:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b22:	d04b      	beq.n	8002bbc <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8002b24:	f7ff ffac 	bl	8002a80 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002b2c:	6823      	ldr	r3, [r4, #0]
 8002b2e:	691a      	ldr	r2, [r3, #16]
 8002b30:	07d1      	lsls	r1, r2, #31
 8002b32:	d508      	bpl.n	8002b46 <HAL_TIM_IRQHandler+0xc0>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002b34:	68da      	ldr	r2, [r3, #12]
 8002b36:	07d2      	lsls	r2, r2, #31
 8002b38:	d505      	bpl.n	8002b46 <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002b3a:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b3e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002b40:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b42:	f000 fecf 	bl	80038e4 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002b46:	6823      	ldr	r3, [r4, #0]
 8002b48:	691a      	ldr	r2, [r3, #16]
 8002b4a:	0610      	lsls	r0, r2, #24
 8002b4c:	d508      	bpl.n	8002b60 <HAL_TIM_IRQHandler+0xda>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002b4e:	68da      	ldr	r2, [r3, #12]
 8002b50:	0611      	lsls	r1, r2, #24
 8002b52:	d505      	bpl.n	8002b60 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002b54:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8002b58:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002b5a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002b5c:	f000 f906 	bl	8002d6c <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002b60:	6823      	ldr	r3, [r4, #0]
 8002b62:	691a      	ldr	r2, [r3, #16]
 8002b64:	0652      	lsls	r2, r2, #25
 8002b66:	d508      	bpl.n	8002b7a <HAL_TIM_IRQHandler+0xf4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002b68:	68da      	ldr	r2, [r3, #12]
 8002b6a:	0650      	lsls	r0, r2, #25
 8002b6c:	d505      	bpl.n	8002b7a <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002b6e:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 8002b72:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002b74:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002b76:	f7ff ff85 	bl	8002a84 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002b7a:	6823      	ldr	r3, [r4, #0]
 8002b7c:	691a      	ldr	r2, [r3, #16]
 8002b7e:	0691      	lsls	r1, r2, #26
 8002b80:	d522      	bpl.n	8002bc8 <HAL_TIM_IRQHandler+0x142>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002b82:	68da      	ldr	r2, [r3, #12]
 8002b84:	0692      	lsls	r2, r2, #26
 8002b86:	d51f      	bpl.n	8002bc8 <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002b88:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8002b8c:	4620      	mov	r0, r4
}
 8002b8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002b92:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8002b94:	f000 b8e9 	b.w	8002d6a <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b98:	f7ff ff71 	bl	8002a7e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b9c:	4620      	mov	r0, r4
 8002b9e:	f7ff ff70 	bl	8002a82 <HAL_TIM_PWM_PulseFinishedCallback>
 8002ba2:	e783      	b.n	8002aac <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ba4:	f7ff ff6b 	bl	8002a7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ba8:	4620      	mov	r0, r4
 8002baa:	f7ff ff6a 	bl	8002a82 <HAL_TIM_PWM_PulseFinishedCallback>
 8002bae:	e792      	b.n	8002ad6 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bb0:	f7ff ff65 	bl	8002a7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bb4:	4620      	mov	r0, r4
 8002bb6:	f7ff ff64 	bl	8002a82 <HAL_TIM_PWM_PulseFinishedCallback>
 8002bba:	e7a0      	b.n	8002afe <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bbc:	f7ff ff5f 	bl	8002a7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bc0:	4620      	mov	r0, r4
 8002bc2:	f7ff ff5e 	bl	8002a82 <HAL_TIM_PWM_PulseFinishedCallback>
 8002bc6:	e7af      	b.n	8002b28 <HAL_TIM_IRQHandler+0xa2>
 8002bc8:	bd10      	pop	{r4, pc}
	...

08002bcc <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002bcc:	4a24      	ldr	r2, [pc, #144]	; (8002c60 <TIM_Base_SetConfig+0x94>)
  tmpcr1 = TIMx->CR1;
 8002bce:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002bd0:	4290      	cmp	r0, r2
 8002bd2:	d012      	beq.n	8002bfa <TIM_Base_SetConfig+0x2e>
 8002bd4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002bd8:	4290      	cmp	r0, r2
 8002bda:	d00e      	beq.n	8002bfa <TIM_Base_SetConfig+0x2e>
 8002bdc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002be0:	d00b      	beq.n	8002bfa <TIM_Base_SetConfig+0x2e>
 8002be2:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8002be6:	4290      	cmp	r0, r2
 8002be8:	d007      	beq.n	8002bfa <TIM_Base_SetConfig+0x2e>
 8002bea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002bee:	4290      	cmp	r0, r2
 8002bf0:	d003      	beq.n	8002bfa <TIM_Base_SetConfig+0x2e>
 8002bf2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002bf6:	4290      	cmp	r0, r2
 8002bf8:	d11d      	bne.n	8002c36 <TIM_Base_SetConfig+0x6a>
    tmpcr1 |= Structure->CounterMode;
 8002bfa:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002bfc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002c00:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c02:	4a17      	ldr	r2, [pc, #92]	; (8002c60 <TIM_Base_SetConfig+0x94>)
 8002c04:	4290      	cmp	r0, r2
 8002c06:	d012      	beq.n	8002c2e <TIM_Base_SetConfig+0x62>
 8002c08:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c0c:	4290      	cmp	r0, r2
 8002c0e:	d00e      	beq.n	8002c2e <TIM_Base_SetConfig+0x62>
 8002c10:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002c14:	d00b      	beq.n	8002c2e <TIM_Base_SetConfig+0x62>
 8002c16:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8002c1a:	4290      	cmp	r0, r2
 8002c1c:	d007      	beq.n	8002c2e <TIM_Base_SetConfig+0x62>
 8002c1e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002c22:	4290      	cmp	r0, r2
 8002c24:	d003      	beq.n	8002c2e <TIM_Base_SetConfig+0x62>
 8002c26:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002c2a:	4290      	cmp	r0, r2
 8002c2c:	d103      	bne.n	8002c36 <TIM_Base_SetConfig+0x6a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c2e:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c34:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c36:	694a      	ldr	r2, [r1, #20]
 8002c38:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c3c:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8002c3e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c40:	688b      	ldr	r3, [r1, #8]
 8002c42:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002c44:	680b      	ldr	r3, [r1, #0]
 8002c46:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c48:	4b05      	ldr	r3, [pc, #20]	; (8002c60 <TIM_Base_SetConfig+0x94>)
 8002c4a:	4298      	cmp	r0, r3
 8002c4c:	d003      	beq.n	8002c56 <TIM_Base_SetConfig+0x8a>
 8002c4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c52:	4298      	cmp	r0, r3
 8002c54:	d101      	bne.n	8002c5a <TIM_Base_SetConfig+0x8e>
    TIMx->RCR = Structure->RepetitionCounter;
 8002c56:	690b      	ldr	r3, [r1, #16]
 8002c58:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	6143      	str	r3, [r0, #20]
 8002c5e:	4770      	bx	lr
 8002c60:	40012c00 	.word	0x40012c00

08002c64 <HAL_TIM_Base_Init>:
{
 8002c64:	b510      	push	{r4, lr}
  if (htim == NULL)
 8002c66:	4604      	mov	r4, r0
 8002c68:	b1a0      	cbz	r0, 8002c94 <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8002c6a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002c6e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002c72:	b91b      	cbnz	r3, 8002c7c <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002c74:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002c78:	f002 fadc 	bl	8005234 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8002c7c:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c7e:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8002c80:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c84:	1d21      	adds	r1, r4, #4
 8002c86:	f7ff ffa1 	bl	8002bcc <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8002c8a:	2301      	movs	r3, #1
  return HAL_OK;
 8002c8c:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002c8e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002c92:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002c94:	2001      	movs	r0, #1
}
 8002c96:	bd10      	pop	{r4, pc}

08002c98 <HAL_TIM_Encoder_Init>:
{
 8002c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c9a:	460c      	mov	r4, r1
  if (htim == NULL)
 8002c9c:	4605      	mov	r5, r0
 8002c9e:	2800      	cmp	r0, #0
 8002ca0:	d043      	beq.n	8002d2a <HAL_TIM_Encoder_Init+0x92>
  if (htim->State == HAL_TIM_STATE_RESET)
 8002ca2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002ca6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002caa:	b91b      	cbnz	r3, 8002cb4 <HAL_TIM_Encoder_Init+0x1c>
    htim->Lock = HAL_UNLOCKED;
 8002cac:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Encoder_MspInit(htim);
 8002cb0:	f002 fa90 	bl	80051d4 <HAL_TIM_Encoder_MspInit>
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002cb4:	4629      	mov	r1, r5
  htim->State = HAL_TIM_STATE_BUSY;
 8002cb6:	2302      	movs	r3, #2
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002cb8:	f851 0b04 	ldr.w	r0, [r1], #4
  htim->State = HAL_TIM_STATE_BUSY;
 8002cbc:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002cc0:	6883      	ldr	r3, [r0, #8]
 8002cc2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002cc6:	f023 0307 	bic.w	r3, r3, #7
 8002cca:	6083      	str	r3, [r0, #8]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ccc:	f7ff ff7e 	bl	8002bcc <TIM_Base_SetConfig>
  tmpsmcr = htim->Instance->SMCR;
 8002cd0:	6828      	ldr	r0, [r5, #0]
  tmpsmcr |= sConfig->EncoderMode;
 8002cd2:	6823      	ldr	r3, [r4, #0]
  tmpsmcr = htim->Instance->SMCR;
 8002cd4:	6886      	ldr	r6, [r0, #8]
  tmpccmr1 = htim->Instance->CCMR1;
 8002cd6:	6982      	ldr	r2, [r0, #24]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002cd8:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr |= sConfig->EncoderMode;
 8002cda:	431e      	orrs	r6, r3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002cdc:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002cde:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002ce2:	f022 0203 	bic.w	r2, r2, #3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002ce6:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
 8002cea:	4313      	orrs	r3, r2
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002cec:	f423 427c 	bic.w	r2, r3, #64512	; 0xfc00
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002cf0:	6923      	ldr	r3, [r4, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002cf2:	69e1      	ldr	r1, [r4, #28]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002cf4:	011b      	lsls	r3, r3, #4
 8002cf6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002cfa:	68e1      	ldr	r1, [r4, #12]
  tmpccer = htim->Instance->CCER;
 8002cfc:	6a07      	ldr	r7, [r0, #32]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002cfe:	430b      	orrs	r3, r1
 8002d00:	6a21      	ldr	r1, [r4, #32]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002d02:	f022 02fc 	bic.w	r2, r2, #252	; 0xfc
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002d06:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
 8002d0a:	4313      	orrs	r3, r2
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002d0c:	6961      	ldr	r1, [r4, #20]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002d0e:	f027 0222 	bic.w	r2, r7, #34	; 0x22
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002d12:	6867      	ldr	r7, [r4, #4]
  htim->Instance->SMCR = tmpsmcr;
 8002d14:	6086      	str	r6, [r0, #8]
  htim->Instance->CCMR1 = tmpccmr1;
 8002d16:	6183      	str	r3, [r0, #24]
  htim->State = HAL_TIM_STATE_READY;
 8002d18:	2301      	movs	r3, #1
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002d1a:	ea47 1701 	orr.w	r7, r7, r1, lsl #4
 8002d1e:	4317      	orrs	r7, r2
  htim->Instance->CCER = tmpccer;
 8002d20:	6207      	str	r7, [r0, #32]
  htim->State = HAL_TIM_STATE_READY;
 8002d22:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
  return HAL_OK;
 8002d26:	2000      	movs	r0, #0
 8002d28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8002d2a:	2001      	movs	r0, #1
}
 8002d2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002d2e <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002d2e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8002d32:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	f04f 0302 	mov.w	r3, #2
 8002d3a:	d014      	beq.n	8002d66 <HAL_TIMEx_MasterConfigSynchronization+0x38>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002d3c:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8002d3e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 8002d42:	6862      	ldr	r2, [r4, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002d44:	68a3      	ldr	r3, [r4, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002d46:	680d      	ldr	r5, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002d48:	6849      	ldr	r1, [r1, #4]
  tmpcr2 &= ~TIM_CR2_MMS;
 8002d4a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr &= ~TIM_SMCR_MSM;
 8002d4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002d52:	430b      	orrs	r3, r1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002d54:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002d56:	6062      	str	r2, [r4, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002d58:	60a3      	str	r3, [r4, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d60:	2300      	movs	r3, #0
 8002d62:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8002d66:	4618      	mov	r0, r3

  return HAL_OK;
}
 8002d68:	bd30      	pop	{r4, r5, pc}

08002d6a <HAL_TIMEx_CommutCallback>:
 8002d6a:	4770      	bx	lr

08002d6c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002d6c:	4770      	bx	lr
	...

08002d70 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d70:	b538      	push	{r3, r4, r5, lr}
 8002d72:	4605      	mov	r5, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d74:	6803      	ldr	r3, [r0, #0]
 8002d76:	68c1      	ldr	r1, [r0, #12]
 8002d78:	691a      	ldr	r2, [r3, #16]
 8002d7a:	2419      	movs	r4, #25
 8002d7c:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8002d80:	430a      	orrs	r2, r1
 8002d82:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002d84:	6882      	ldr	r2, [r0, #8]
 8002d86:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 8002d88:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002d8a:	4302      	orrs	r2, r0
 8002d8c:	6968      	ldr	r0, [r5, #20]
  MODIFY_REG(huart->Instance->CR1,
 8002d8e:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 8002d92:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002d96:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8002d98:	430a      	orrs	r2, r1
 8002d9a:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002d9c:	695a      	ldr	r2, [r3, #20]
 8002d9e:	69a9      	ldr	r1, [r5, #24]
 8002da0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002da4:	430a      	orrs	r2, r1
 8002da6:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8002da8:	4a0d      	ldr	r2, [pc, #52]	; (8002de0 <UART_SetConfig+0x70>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d114      	bne.n	8002dd8 <UART_SetConfig+0x68>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002dae:	f7ff fad1 	bl	8002354 <HAL_RCC_GetPCLK2Freq>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002db2:	4360      	muls	r0, r4
 8002db4:	686c      	ldr	r4, [r5, #4]
 8002db6:	2264      	movs	r2, #100	; 0x64
 8002db8:	00a4      	lsls	r4, r4, #2
 8002dba:	fbb0 f0f4 	udiv	r0, r0, r4
 8002dbe:	fbb0 f4f2 	udiv	r4, r0, r2
 8002dc2:	fb02 0314 	mls	r3, r2, r4, r0
 8002dc6:	011b      	lsls	r3, r3, #4
 8002dc8:	3332      	adds	r3, #50	; 0x32
 8002dca:	fbb3 f3f2 	udiv	r3, r3, r2
 8002dce:	6829      	ldr	r1, [r5, #0]
 8002dd0:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8002dd4:	608b      	str	r3, [r1, #8]
 8002dd6:	bd38      	pop	{r3, r4, r5, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 8002dd8:	f7ff faac 	bl	8002334 <HAL_RCC_GetPCLK1Freq>
 8002ddc:	e7e9      	b.n	8002db2 <UART_SetConfig+0x42>
 8002dde:	bf00      	nop
 8002de0:	40013800 	.word	0x40013800

08002de4 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8002de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002de6:	4604      	mov	r4, r0
 8002de8:	460e      	mov	r6, r1
 8002dea:	4617      	mov	r7, r2
 8002dec:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002dee:	6821      	ldr	r1, [r4, #0]
 8002df0:	680b      	ldr	r3, [r1, #0]
 8002df2:	ea36 0303 	bics.w	r3, r6, r3
 8002df6:	d101      	bne.n	8002dfc <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8002df8:	2000      	movs	r0, #0
}
 8002dfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (Timeout != HAL_MAX_DELAY)
 8002dfc:	1c6b      	adds	r3, r5, #1
 8002dfe:	d0f7      	beq.n	8002df0 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002e00:	b995      	cbnz	r5, 8002e28 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002e02:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 8002e04:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002e06:	68da      	ldr	r2, [r3, #12]
 8002e08:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002e0c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e0e:	695a      	ldr	r2, [r3, #20]
 8002e10:	f022 0201 	bic.w	r2, r2, #1
 8002e14:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8002e16:	2320      	movs	r3, #32
 8002e18:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002e1c:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8002e20:	2300      	movs	r3, #0
 8002e22:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8002e26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002e28:	f7fd fcc4 	bl	80007b4 <HAL_GetTick>
 8002e2c:	1bc0      	subs	r0, r0, r7
 8002e2e:	4285      	cmp	r5, r0
 8002e30:	d2dd      	bcs.n	8002dee <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 8002e32:	e7e6      	b.n	8002e02 <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08002e34 <HAL_UART_Init>:
{
 8002e34:	b510      	push	{r4, lr}
  if (huart == NULL)
 8002e36:	4604      	mov	r4, r0
 8002e38:	b340      	cbz	r0, 8002e8c <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8002e3a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002e3e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002e42:	b91b      	cbnz	r3, 8002e4c <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8002e44:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8002e48:	f002 fa12 	bl	8005270 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8002e4c:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8002e4e:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002e50:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8002e54:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8002e56:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8002e58:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002e5c:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8002e5e:	f7ff ff87 	bl	8002d70 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e62:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e64:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e66:	691a      	ldr	r2, [r3, #16]
 8002e68:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002e6c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e6e:	695a      	ldr	r2, [r3, #20]
 8002e70:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e74:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8002e76:	68da      	ldr	r2, [r3, #12]
 8002e78:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002e7c:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8002e7e:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e80:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002e82:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002e86:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8002e8a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002e8c:	2001      	movs	r0, #1
}
 8002e8e:	bd10      	pop	{r4, pc}

08002e90 <HAL_UART_Transmit>:
{
 8002e90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002e94:	461f      	mov	r7, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8002e96:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
{
 8002e9a:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 8002e9c:	2b20      	cmp	r3, #32
{
 8002e9e:	460d      	mov	r5, r1
 8002ea0:	4690      	mov	r8, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8002ea2:	d14e      	bne.n	8002f42 <HAL_UART_Transmit+0xb2>
    if ((pData == NULL) || (Size == 0U))
 8002ea4:	2900      	cmp	r1, #0
 8002ea6:	d049      	beq.n	8002f3c <HAL_UART_Transmit+0xac>
 8002ea8:	2a00      	cmp	r2, #0
 8002eaa:	d047      	beq.n	8002f3c <HAL_UART_Transmit+0xac>
    __HAL_LOCK(huart);
 8002eac:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	d046      	beq.n	8002f42 <HAL_UART_Transmit+0xb2>
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ebe:	2321      	movs	r3, #33	; 0x21
 8002ec0:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8002ec4:	f7fd fc76 	bl	80007b4 <HAL_GetTick>
 8002ec8:	4606      	mov	r6, r0
    huart->TxXferSize = Size;
 8002eca:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8002ece:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002ed2:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8002ed4:	b29b      	uxth	r3, r3
 8002ed6:	b96b      	cbnz	r3, 8002ef4 <HAL_UART_Transmit+0x64>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002ed8:	463b      	mov	r3, r7
 8002eda:	4632      	mov	r2, r6
 8002edc:	2140      	movs	r1, #64	; 0x40
 8002ede:	4620      	mov	r0, r4
 8002ee0:	f7ff ff80 	bl	8002de4 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8002ee4:	b9a8      	cbnz	r0, 8002f12 <HAL_UART_Transmit+0x82>
    huart->gState = HAL_UART_STATE_READY;
 8002ee6:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 8002ee8:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    huart->gState = HAL_UART_STATE_READY;
 8002eec:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 8002ef0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 8002ef4:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ef6:	4632      	mov	r2, r6
      huart->TxXferCount--;
 8002ef8:	3b01      	subs	r3, #1
 8002efa:	b29b      	uxth	r3, r3
 8002efc:	84e3      	strh	r3, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002efe:	68a3      	ldr	r3, [r4, #8]
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f00:	2180      	movs	r1, #128	; 0x80
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002f02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f06:	4620      	mov	r0, r4
 8002f08:	463b      	mov	r3, r7
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002f0a:	d10e      	bne.n	8002f2a <HAL_UART_Transmit+0x9a>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f0c:	f7ff ff6a 	bl	8002de4 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8002f10:	b110      	cbz	r0, 8002f18 <HAL_UART_Transmit+0x88>
          return HAL_TIMEOUT;
 8002f12:	2003      	movs	r0, #3
 8002f14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002f18:	882b      	ldrh	r3, [r5, #0]
 8002f1a:	6822      	ldr	r2, [r4, #0]
 8002f1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f20:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002f22:	6923      	ldr	r3, [r4, #16]
 8002f24:	b943      	cbnz	r3, 8002f38 <HAL_UART_Transmit+0xa8>
          pData += 2U;
 8002f26:	3502      	adds	r5, #2
 8002f28:	e7d3      	b.n	8002ed2 <HAL_UART_Transmit+0x42>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f2a:	f7ff ff5b 	bl	8002de4 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8002f2e:	2800      	cmp	r0, #0
 8002f30:	d1ef      	bne.n	8002f12 <HAL_UART_Transmit+0x82>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002f32:	6823      	ldr	r3, [r4, #0]
 8002f34:	782a      	ldrb	r2, [r5, #0]
 8002f36:	605a      	str	r2, [r3, #4]
 8002f38:	3501      	adds	r5, #1
 8002f3a:	e7ca      	b.n	8002ed2 <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 8002f3c:	2001      	movs	r0, #1
 8002f3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8002f42:	2002      	movs	r0, #2
}
 8002f44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002f48 <read_buttons_state>:
const uint16_t long_press_debounce_ms = 200; //ms

void clear_buttons_event() {
}

void read_buttons_state() {
 8002f48:	b538      	push	{r3, r4, r5, lr}
	buttons_state[ENCODER].actual_state = !HAL_GPIO_ReadPin(ENC_PB_GPIO_Port,
 8002f4a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002f4e:	4811      	ldr	r0, [pc, #68]	; (8002f94 <read_buttons_state+0x4c>)
 8002f50:	f7fe f92a 	bl	80011a8 <HAL_GPIO_ReadPin>
 8002f54:	fab0 f080 	clz	r0, r0
 8002f58:	4c0f      	ldr	r4, [pc, #60]	; (8002f98 <read_buttons_state+0x50>)
 8002f5a:	0940      	lsrs	r0, r0, #5
 8002f5c:	7863      	ldrb	r3, [r4, #1]
			ENC_PB_Pin);
	buttons_state[JOY1].actual_state = !HAL_GPIO_ReadPin(JOY1_PB_GPIO_Port,
 8002f5e:	4d0f      	ldr	r5, [pc, #60]	; (8002f9c <read_buttons_state+0x54>)
	buttons_state[ENCODER].actual_state = !HAL_GPIO_ReadPin(ENC_PB_GPIO_Port,
 8002f60:	f360 03c3 	bfi	r3, r0, #3, #1
 8002f64:	7063      	strb	r3, [r4, #1]
	buttons_state[JOY1].actual_state = !HAL_GPIO_ReadPin(JOY1_PB_GPIO_Port,
 8002f66:	2102      	movs	r1, #2
 8002f68:	4628      	mov	r0, r5
 8002f6a:	f7fe f91d 	bl	80011a8 <HAL_GPIO_ReadPin>
 8002f6e:	fab0 f080 	clz	r0, r0
 8002f72:	7963      	ldrb	r3, [r4, #5]
 8002f74:	0940      	lsrs	r0, r0, #5
 8002f76:	f360 03c3 	bfi	r3, r0, #3, #1
 8002f7a:	7163      	strb	r3, [r4, #5]
			JOY1_PB_Pin);
	buttons_state[JOY2].actual_state = !HAL_GPIO_ReadPin(JOY2_PB_GPIO_Port,
 8002f7c:	2104      	movs	r1, #4
 8002f7e:	4628      	mov	r0, r5
 8002f80:	f7fe f912 	bl	80011a8 <HAL_GPIO_ReadPin>
 8002f84:	fab0 f080 	clz	r0, r0
 8002f88:	7a63      	ldrb	r3, [r4, #9]
 8002f8a:	0940      	lsrs	r0, r0, #5
 8002f8c:	f360 03c3 	bfi	r3, r0, #3, #1
 8002f90:	7263      	strb	r3, [r4, #9]
 8002f92:	bd38      	pop	{r3, r4, r5, pc}
 8002f94:	40010800 	.word	0x40010800
 8002f98:	20000564 	.word	0x20000564
 8002f9c:	40010c00 	.word	0x40010c00

08002fa0 <process_buttons>:
			JOY2_PB_Pin);

}

void process_buttons() {
 8002fa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002fa4:	4f32      	ldr	r7, [pc, #200]	; (8003070 <process_buttons+0xd0>)

	read_buttons_state();
 8002fa6:	f7ff ffcf 	bl	8002f48 <read_buttons_state>

	for (int i = 0; i < NUM_OF_BUTTONS; i++) {
 8002faa:	2400      	movs	r4, #0
 8002fac:	463d      	mov	r5, r7

					//LONG PRESS ACTION
					buttons_state[i].long_press_debounce = long_press_debounce_ms;
					buttons_state[i].long_press = 1;

					printf("Long press  %d\r\n", i);
 8002fae:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 8003074 <process_buttons+0xd4>
					printf("Medium press %d \r\n", i);
 8002fb2:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 8003078 <process_buttons+0xd8>
					printf("Short press button %d\r\n", i);
 8002fb6:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800307c <process_buttons+0xdc>
		if (buttons_state[i].long_press_debounce)
 8002fba:	78bb      	ldrb	r3, [r7, #2]
 8002fbc:	b10b      	cbz	r3, 8002fc2 <process_buttons+0x22>
			buttons_state[i].long_press_debounce -= 5;
 8002fbe:	3b05      	subs	r3, #5
 8002fc0:	70bb      	strb	r3, [r7, #2]
		if (buttons_state[i].last_state) {
 8002fc2:	00a6      	lsls	r6, r4, #2
 8002fc4:	19a9      	adds	r1, r5, r6
 8002fc6:	784b      	ldrb	r3, [r1, #1]
 8002fc8:	06d8      	lsls	r0, r3, #27
 8002fca:	d526      	bpl.n	800301a <process_buttons+0x7a>
			buttons_state[i].tick_ms += 5;
 8002fcc:	f835 2024 	ldrh.w	r2, [r5, r4, lsl #2]
 8002fd0:	1d53      	adds	r3, r2, #5
 8002fd2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002fd6:	f363 020a 	bfi	r2, r3, #0, #11
 8002fda:	f825 2024 	strh.w	r2, [r5, r4, lsl #2]
			if (!(buttons_state[i].actual_state)
 8002fde:	784a      	ldrb	r2, [r1, #1]
 8002fe0:	0712      	lsls	r2, r2, #28
 8002fe2:	d502      	bpl.n	8002fea <process_buttons+0x4a>
					|| (buttons_state[i].tick_ms > LONG_PRESS)) {
 8002fe4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002fe8:	d917      	bls.n	800301a <process_buttons+0x7a>
						&& buttons_state[i].tick_ms < MEDIUM_PRESS
 8002fea:	f203 72eb 	addw	r2, r3, #2027	; 0x7eb
				if (buttons_state[i].tick_ms > SHORT_PRESS
 8002fee:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8002ff2:	f5b2 7fef 	cmp.w	r2, #478	; 0x1de
 8002ff6:	d81e      	bhi.n	8003036 <process_buttons+0x96>
						&& (!buttons_state[i].long_press_debounce)) {
 8002ff8:	78ba      	ldrb	r2, [r7, #2]
 8002ffa:	b9e2      	cbnz	r2, 8003036 <process_buttons+0x96>
					printf("Short press button %d\r\n", i);
 8002ffc:	4621      	mov	r1, r4
 8002ffe:	4650      	mov	r0, sl
					buttons_state[i].short_press = 1;
 8003000:	19aa      	adds	r2, r5, r6
 8003002:	7853      	ldrb	r3, [r2, #1]
 8003004:	f043 0320 	orr.w	r3, r3, #32
 8003008:	7053      	strb	r3, [r2, #1]
					printf("Long press  %d\r\n", i);
 800300a:	f002 fa7f 	bl	800550c <iprintf>

				}

				buttons_state[i].tick_ms = 0;
 800300e:	f835 3024 	ldrh.w	r3, [r5, r4, lsl #2]
 8003012:	f36f 030a 	bfc	r3, #0, #11
 8003016:	f825 3024 	strh.w	r3, [r5, r4, lsl #2]
			}
		}
		buttons_state[i].last_state = buttons_state[i].actual_state;
 800301a:	442e      	add	r6, r5
 800301c:	7873      	ldrb	r3, [r6, #1]
	for (int i = 0; i < NUM_OF_BUTTONS; i++) {
 800301e:	3401      	adds	r4, #1
		buttons_state[i].last_state = buttons_state[i].actual_state;
 8003020:	f3c3 02c0 	ubfx	r2, r3, #3, #1
 8003024:	f362 1304 	bfi	r3, r2, #4, #1
	for (int i = 0; i < NUM_OF_BUTTONS; i++) {
 8003028:	2c03      	cmp	r4, #3
		buttons_state[i].last_state = buttons_state[i].actual_state;
 800302a:	7073      	strb	r3, [r6, #1]
 800302c:	f107 0704 	add.w	r7, r7, #4
	for (int i = 0; i < NUM_OF_BUTTONS; i++) {
 8003030:	d1c3      	bne.n	8002fba <process_buttons+0x1a>
	}
}
 8003032:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				} else if (buttons_state[i].tick_ms > MEDIUM_PRESS
 8003036:	f240 51da 	movw	r1, #1498	; 0x5da
						&& buttons_state[i].tick_ms < LONG_PRESS) {
 800303a:	f203 620b 	addw	r2, r3, #1547	; 0x60b
				} else if (buttons_state[i].tick_ms > MEDIUM_PRESS
 800303e:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8003042:	428a      	cmp	r2, r1
 8003044:	d807      	bhi.n	8003056 <process_buttons+0xb6>
					buttons_state[i].medium_press = 1;
 8003046:	19aa      	adds	r2, r5, r6
 8003048:	7853      	ldrb	r3, [r2, #1]
					printf("Medium press %d \r\n", i);
 800304a:	4621      	mov	r1, r4
					buttons_state[i].medium_press = 1;
 800304c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003050:	7053      	strb	r3, [r2, #1]
					printf("Medium press %d \r\n", i);
 8003052:	4648      	mov	r0, r9
 8003054:	e7d9      	b.n	800300a <process_buttons+0x6a>
				else if (buttons_state[i].tick_ms > LONG_PRESS) {
 8003056:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800305a:	ddd8      	ble.n	800300e <process_buttons+0x6e>
					buttons_state[i].long_press_debounce = long_press_debounce_ms;
 800305c:	23c8      	movs	r3, #200	; 0xc8
					buttons_state[i].long_press = 1;
 800305e:	19aa      	adds	r2, r5, r6
					buttons_state[i].long_press_debounce = long_press_debounce_ms;
 8003060:	70bb      	strb	r3, [r7, #2]
					buttons_state[i].long_press = 1;
 8003062:	7853      	ldrb	r3, [r2, #1]
					printf("Long press  %d\r\n", i);
 8003064:	4621      	mov	r1, r4
					buttons_state[i].long_press = 1;
 8003066:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800306a:	7053      	strb	r3, [r2, #1]
					printf("Long press  %d\r\n", i);
 800306c:	4640      	mov	r0, r8
 800306e:	e7cc      	b.n	800300a <process_buttons+0x6a>
 8003070:	20000564 	.word	0x20000564
 8003074:	080067bb 	.word	0x080067bb
 8003078:	080067a8 	.word	0x080067a8
 800307c:	08006790 	.word	0x08006790

08003080 <read_initial_store>:

const uint16_t EEPROM_ADDRESS = 0xA0;

Calib_Data calibration_values;

void read_initial_store() {
 8003080:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	//EEPROM  - TO DO as lib

	//readinga  channel calibration calibration values
	HAL_I2C_Mem_Read(&hi2c1, EEPROM_ADDRESS, 0, 0xFF,
 8003082:	230a      	movs	r3, #10
 8003084:	9302      	str	r3, [sp, #8]
 8003086:	232c      	movs	r3, #44	; 0x2c
 8003088:	4c09      	ldr	r4, [pc, #36]	; (80030b0 <read_initial_store+0x30>)
 800308a:	9301      	str	r3, [sp, #4]
 800308c:	9400      	str	r4, [sp, #0]
 800308e:	23ff      	movs	r3, #255	; 0xff
 8003090:	2200      	movs	r2, #0
 8003092:	21a0      	movs	r1, #160	; 0xa0
 8003094:	4807      	ldr	r0, [pc, #28]	; (80030b4 <read_initial_store+0x34>)
 8003096:	f7fe fd11 	bl	8001abc <HAL_I2C_Mem_Read>
 800309a:	2300      	movs	r3, #0
			calibration_values.calib_raw_data, 44, 10);

	for (int i = 0; i < 11; i++) {
		rc_channels.calibration_values[i] =
 800309c:	4806      	ldr	r0, [pc, #24]	; (80030b8 <read_initial_store+0x38>)
 800309e:	181a      	adds	r2, r3, r0
 80030a0:	58e1      	ldr	r1, [r4, r3]
 80030a2:	3304      	adds	r3, #4
	for (int i = 0; i < 11; i++) {
 80030a4:	2b2c      	cmp	r3, #44	; 0x2c
		rc_channels.calibration_values[i] =
 80030a6:	62d1      	str	r1, [r2, #44]	; 0x2c
	for (int i = 0; i < 11; i++) {
 80030a8:	d1f9      	bne.n	800309e <read_initial_store+0x1e>
				calibration_values.calibration_values_min_max[i];
	}
}
 80030aa:	b004      	add	sp, #16
 80030ac:	bd10      	pop	{r4, pc}
 80030ae:	bf00      	nop
 80030b0:	20000570 	.word	0x20000570
 80030b4:	20000618 	.word	0x20000618
 80030b8:	20000898 	.word	0x20000898

080030bc <MPU6050_SetDataRate>:
	/* Return OK */
	return MPU6050_Result_Ok;
}

MPU6050_Result MPU6050_SetDataRate(I2C_HandleTypeDef* I2Cx,MPU6050* DataStruct, uint8_t rate)
{
 80030bc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint8_t d[2];
	I2C_HandleTypeDef* Handle = I2Cx;
	uint8_t address = DataStruct->Address;
	/* Format array to send */
	d[0] = MPU6050_SMPLRT_DIV;
 80030be:	2319      	movs	r3, #25
{
 80030c0:	4605      	mov	r5, r0
	d[1] = rate;

	/* Set data sample rate */
	while(HAL_I2C_Master_Transmit(Handle,(uint16_t)address,(uint8_t *)d,2,1000)!=HAL_OK);
 80030c2:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
	uint8_t address = DataStruct->Address;
 80030c6:	780c      	ldrb	r4, [r1, #0]
	d[0] = MPU6050_SMPLRT_DIV;
 80030c8:	f88d 300c 	strb.w	r3, [sp, #12]
	d[1] = rate;
 80030cc:	f88d 200d 	strb.w	r2, [sp, #13]
	while(HAL_I2C_Master_Transmit(Handle,(uint16_t)address,(uint8_t *)d,2,1000)!=HAL_OK);
 80030d0:	b2a4      	uxth	r4, r4
 80030d2:	9600      	str	r6, [sp, #0]
 80030d4:	2302      	movs	r3, #2
 80030d6:	aa03      	add	r2, sp, #12
 80030d8:	4621      	mov	r1, r4
 80030da:	4628      	mov	r0, r5
 80030dc:	f7fe faa8 	bl	8001630 <HAL_I2C_Master_Transmit>
 80030e0:	2800      	cmp	r0, #0
 80030e2:	d1f6      	bne.n	80030d2 <MPU6050_SetDataRate+0x16>
				return MPU6050_Result_Error;
	}*/

	/* Return OK */
	return MPU6050_Result_Ok;
}
 80030e4:	b004      	add	sp, #16
 80030e6:	bd70      	pop	{r4, r5, r6, pc}

080030e8 <MPU6050_SetAccelerometer>:
MPU6050_Result MPU6050_SetAccelerometer(I2C_HandleTypeDef* I2Cx,MPU6050* DataStruct, MPU6050_Accelerometer AccelerometerSensitivity)
{
	uint8_t temp;
	I2C_HandleTypeDef* Handle = I2Cx;
	uint8_t address = DataStruct->Address;
	uint8_t regAdd =(uint8_t )MPU6050_ACCEL_CONFIG;
 80030e8:	231c      	movs	r3, #28
{
 80030ea:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80030ee:	4607      	mov	r7, r0
 80030f0:	460c      	mov	r4, r1
 80030f2:	4616      	mov	r6, r2

	/* Config accelerometer */
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address,&regAdd, 1, 1000) != HAL_OK);
 80030f4:	f44f 797a 	mov.w	r9, #1000	; 0x3e8
{
 80030f8:	b085      	sub	sp, #20
	uint8_t address = DataStruct->Address;
 80030fa:	780d      	ldrb	r5, [r1, #0]
	uint8_t regAdd =(uint8_t )MPU6050_ACCEL_CONFIG;
 80030fc:	f10d 0810 	add.w	r8, sp, #16
 8003100:	f808 3d01 	strb.w	r3, [r8, #-1]!
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address,&regAdd, 1, 1000) != HAL_OK);
 8003104:	b2ad      	uxth	r5, r5
 8003106:	f8cd 9000 	str.w	r9, [sp]
 800310a:	2301      	movs	r3, #1
 800310c:	4642      	mov	r2, r8
 800310e:	4629      	mov	r1, r5
 8003110:	4638      	mov	r0, r7
 8003112:	f7fe fa8d 	bl	8001630 <HAL_I2C_Master_Transmit>
 8003116:	2800      	cmp	r0, #0
 8003118:	d1f5      	bne.n	8003106 <MPU6050_SetAccelerometer+0x1e>
	/*{
				return MPU6050_Result_Error;
	}*/
	while(HAL_I2C_Master_Receive(Handle, (uint16_t)address, &temp, 1, 1000) != HAL_OK);
 800311a:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
 800311e:	f8cd 8000 	str.w	r8, [sp]
 8003122:	2301      	movs	r3, #1
 8003124:	f10d 020e 	add.w	r2, sp, #14
 8003128:	4629      	mov	r1, r5
 800312a:	4638      	mov	r0, r7
 800312c:	f7fe fb4e 	bl	80017cc <HAL_I2C_Master_Receive>
 8003130:	2800      	cmp	r0, #0
 8003132:	d1f4      	bne.n	800311e <MPU6050_SetAccelerometer+0x36>
	/*{
				return MPU6050_Result_Error;
	}*/
	temp = (temp & 0xE7) | (uint8_t)AccelerometerSensitivity << 3;
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address,&temp, 1, 1000) != HAL_OK);
 8003134:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
	temp = (temp & 0xE7) | (uint8_t)AccelerometerSensitivity << 3;
 8003138:	f89d 300e 	ldrb.w	r3, [sp, #14]
 800313c:	f023 0318 	bic.w	r3, r3, #24
 8003140:	ea43 03c6 	orr.w	r3, r3, r6, lsl #3
 8003144:	f88d 300e 	strb.w	r3, [sp, #14]
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address,&temp, 1, 1000) != HAL_OK);
 8003148:	f8cd 8000 	str.w	r8, [sp]
 800314c:	2301      	movs	r3, #1
 800314e:	f10d 020e 	add.w	r2, sp, #14
 8003152:	4629      	mov	r1, r5
 8003154:	4638      	mov	r0, r7
 8003156:	f7fe fa6b 	bl	8001630 <HAL_I2C_Master_Transmit>
 800315a:	2800      	cmp	r0, #0
 800315c:	d1f4      	bne.n	8003148 <MPU6050_SetAccelerometer+0x60>
	/*{
				return MPU6050_Result_Error;
	}*/

	/* Set sensitivities for multiplying gyro and accelerometer data */
	switch (AccelerometerSensitivity) {
 800315e:	2e03      	cmp	r6, #3
 8003160:	d806      	bhi.n	8003170 <MPU6050_SetAccelerometer+0x88>
 8003162:	e8df f006 	tbb	[pc, r6]
 8003166:	0902      	.short	0x0902
 8003168:	0f0c      	.short	0x0f0c
		case MPU6050_Accelerometer_2G:
			DataStruct->Acce_Mult = (float)1 / MPU6050_ACCE_SENS_2;
 800316a:	f04f 5362 	mov.w	r3, #947912704	; 0x38800000
			break;
		case MPU6050_Accelerometer_8G:
			DataStruct->Acce_Mult = (float)1 / MPU6050_ACCE_SENS_8;
			break;
		case MPU6050_Accelerometer_16G:
			DataStruct->Acce_Mult = (float)1 / MPU6050_ACCE_SENS_16;
 800316e:	60a3      	str	r3, [r4, #8]
			break;
		}

	/* Return OK */
	return MPU6050_Result_Ok;
}
 8003170:	2000      	movs	r0, #0
 8003172:	b005      	add	sp, #20
 8003174:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			DataStruct->Acce_Mult = (float)1 / MPU6050_ACCE_SENS_4;
 8003178:	f04f 5364 	mov.w	r3, #956301312	; 0x39000000
 800317c:	e7f7      	b.n	800316e <MPU6050_SetAccelerometer+0x86>
			DataStruct->Acce_Mult = (float)1 / MPU6050_ACCE_SENS_8;
 800317e:	f04f 5366 	mov.w	r3, #964689920	; 0x39800000
 8003182:	e7f4      	b.n	800316e <MPU6050_SetAccelerometer+0x86>
			DataStruct->Acce_Mult = (float)1 / MPU6050_ACCE_SENS_16;
 8003184:	f04f 5368 	mov.w	r3, #973078528	; 0x3a000000
 8003188:	e7f1      	b.n	800316e <MPU6050_SetAccelerometer+0x86>
	...

0800318c <MPU6050_SetGyroscope>:
MPU6050_Result MPU6050_SetGyroscope(I2C_HandleTypeDef* I2Cx,MPU6050* DataStruct, MPU6050_Gyroscope GyroscopeSensitivity)
{
	uint8_t temp;
	I2C_HandleTypeDef* Handle = I2Cx;
	uint8_t address = DataStruct->Address;
	uint8_t regAdd =(uint8_t )MPU6050_GYRO_CONFIG;
 800318c:	231b      	movs	r3, #27
{
 800318e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003192:	4607      	mov	r7, r0
 8003194:	460c      	mov	r4, r1
 8003196:	4616      	mov	r6, r2

	/* Config gyroscope */
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address,&regAdd, 1, 1000) != HAL_OK);
 8003198:	f44f 797a 	mov.w	r9, #1000	; 0x3e8
{
 800319c:	b085      	sub	sp, #20
	uint8_t address = DataStruct->Address;
 800319e:	780d      	ldrb	r5, [r1, #0]
	uint8_t regAdd =(uint8_t )MPU6050_GYRO_CONFIG;
 80031a0:	f10d 0810 	add.w	r8, sp, #16
 80031a4:	f808 3d01 	strb.w	r3, [r8, #-1]!
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address,&regAdd, 1, 1000) != HAL_OK);
 80031a8:	b2ad      	uxth	r5, r5
 80031aa:	f8cd 9000 	str.w	r9, [sp]
 80031ae:	2301      	movs	r3, #1
 80031b0:	4642      	mov	r2, r8
 80031b2:	4629      	mov	r1, r5
 80031b4:	4638      	mov	r0, r7
 80031b6:	f7fe fa3b 	bl	8001630 <HAL_I2C_Master_Transmit>
 80031ba:	2800      	cmp	r0, #0
 80031bc:	d1f5      	bne.n	80031aa <MPU6050_SetGyroscope+0x1e>
	/*{
				return MPU6050_Result_Error;
	}*/
	while(HAL_I2C_Master_Receive(Handle, (uint16_t)address, &temp, 1, 1000) != HAL_OK);
 80031be:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
 80031c2:	f8cd 8000 	str.w	r8, [sp]
 80031c6:	2301      	movs	r3, #1
 80031c8:	f10d 020e 	add.w	r2, sp, #14
 80031cc:	4629      	mov	r1, r5
 80031ce:	4638      	mov	r0, r7
 80031d0:	f7fe fafc 	bl	80017cc <HAL_I2C_Master_Receive>
 80031d4:	2800      	cmp	r0, #0
 80031d6:	d1f4      	bne.n	80031c2 <MPU6050_SetGyroscope+0x36>
	/*{
				return MPU6050_Result_Error;
	}*/
	temp = (temp & 0xE7) | (uint8_t)GyroscopeSensitivity << 3;
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address,&temp, 1, 1000) != HAL_OK);
 80031d8:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
	temp = (temp & 0xE7) | (uint8_t)GyroscopeSensitivity << 3;
 80031dc:	f89d 300e 	ldrb.w	r3, [sp, #14]
 80031e0:	f023 0318 	bic.w	r3, r3, #24
 80031e4:	ea43 03c6 	orr.w	r3, r3, r6, lsl #3
 80031e8:	f88d 300e 	strb.w	r3, [sp, #14]
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address,&temp, 1, 1000) != HAL_OK);
 80031ec:	f8cd 8000 	str.w	r8, [sp]
 80031f0:	2301      	movs	r3, #1
 80031f2:	f10d 020e 	add.w	r2, sp, #14
 80031f6:	4629      	mov	r1, r5
 80031f8:	4638      	mov	r0, r7
 80031fa:	f7fe fa19 	bl	8001630 <HAL_I2C_Master_Transmit>
 80031fe:	2800      	cmp	r0, #0
 8003200:	d1f4      	bne.n	80031ec <MPU6050_SetGyroscope+0x60>
	/*{
				return MPU6050_Result_Error;
	}*/

	switch (GyroscopeSensitivity) {
 8003202:	2e03      	cmp	r6, #3
 8003204:	d805      	bhi.n	8003212 <MPU6050_SetGyroscope+0x86>
 8003206:	e8df f006 	tbb	[pc, r6]
 800320a:	0802      	.short	0x0802
 800320c:	0c0a      	.short	0x0c0a
			case MPU6050_Gyroscope_250s:
				DataStruct->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_250;
 800320e:	4b06      	ldr	r3, [pc, #24]	; (8003228 <MPU6050_SetGyroscope+0x9c>)
				break;
			case MPU6050_Gyroscope_1000s:
				DataStruct->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_1000;
				break;
			case MPU6050_Gyroscope_2000s:
				DataStruct->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_2000;
 8003210:	6063      	str	r3, [r4, #4]
			default:
				break;
		}
	/* Return OK */
	return MPU6050_Result_Ok;
}
 8003212:	2000      	movs	r0, #0
 8003214:	b005      	add	sp, #20
 8003216:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				DataStruct->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_500;
 800321a:	4b04      	ldr	r3, [pc, #16]	; (800322c <MPU6050_SetGyroscope+0xa0>)
 800321c:	e7f8      	b.n	8003210 <MPU6050_SetGyroscope+0x84>
				DataStruct->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_1000;
 800321e:	4b04      	ldr	r3, [pc, #16]	; (8003230 <MPU6050_SetGyroscope+0xa4>)
 8003220:	e7f6      	b.n	8003210 <MPU6050_SetGyroscope+0x84>
				DataStruct->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_2000;
 8003222:	4b04      	ldr	r3, [pc, #16]	; (8003234 <MPU6050_SetGyroscope+0xa8>)
 8003224:	e7f4      	b.n	8003210 <MPU6050_SetGyroscope+0x84>
 8003226:	bf00      	nop
 8003228:	3bfa232d 	.word	0x3bfa232d
 800322c:	3c7a232d 	.word	0x3c7a232d
 8003230:	3cf9c190 	.word	0x3cf9c190
 8003234:	3d79c190 	.word	0x3d79c190

08003238 <MPU6050_Init>:
{
 8003238:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800323c:	4698      	mov	r8, r3
	uint8_t WHO_AM_I = (uint8_t)MPU6050_WHO_AM_I;
 800323e:	2375      	movs	r3, #117	; 0x75
	DataStruct->Address = MPU6050_I2C_ADDR | (uint8_t)DeviceNumber;
 8003240:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
	if(HAL_I2C_IsDeviceReady(Handle,address,2,5)!=HAL_OK)
 8003244:	b294      	uxth	r4, r2
	DataStruct->Address = MPU6050_I2C_ADDR | (uint8_t)DeviceNumber;
 8003246:	700a      	strb	r2, [r1, #0]
{
 8003248:	460e      	mov	r6, r1
	uint8_t WHO_AM_I = (uint8_t)MPU6050_WHO_AM_I;
 800324a:	f88d 300a 	strb.w	r3, [sp, #10]
	if(HAL_I2C_IsDeviceReady(Handle,address,2,5)!=HAL_OK)
 800324e:	2202      	movs	r2, #2
 8003250:	2305      	movs	r3, #5
 8003252:	4621      	mov	r1, r4
{
 8003254:	4605      	mov	r5, r0
	if(HAL_I2C_IsDeviceReady(Handle,address,2,5)!=HAL_OK)
 8003256:	f7fe fd4b 	bl	8001cf0 <HAL_I2C_IsDeviceReady>
 800325a:	b118      	cbz	r0, 8003264 <MPU6050_Init+0x2c>
				return MPU6050_Result_Error;
 800325c:	2001      	movs	r0, #1
}
 800325e:	b004      	add	sp, #16
 8003260:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if(HAL_I2C_Master_Transmit(Handle, address, &WHO_AM_I, 1, 1000) != HAL_OK)
 8003264:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
 8003268:	2301      	movs	r3, #1
 800326a:	9700      	str	r7, [sp, #0]
 800326c:	f10d 020a 	add.w	r2, sp, #10
 8003270:	4621      	mov	r1, r4
 8003272:	4628      	mov	r0, r5
 8003274:	f7fe f9dc 	bl	8001630 <HAL_I2C_Master_Transmit>
 8003278:	2800      	cmp	r0, #0
 800327a:	d1ef      	bne.n	800325c <MPU6050_Init+0x24>
		if(HAL_I2C_Master_Receive(Handle, address, &temp, 1, 1000) != HAL_OK)
 800327c:	9700      	str	r7, [sp, #0]
 800327e:	2301      	movs	r3, #1
 8003280:	f10d 020b 	add.w	r2, sp, #11
 8003284:	4621      	mov	r1, r4
 8003286:	4628      	mov	r0, r5
 8003288:	f7fe faa0 	bl	80017cc <HAL_I2C_Master_Receive>
 800328c:	2800      	cmp	r0, #0
 800328e:	d1e5      	bne.n	800325c <MPU6050_Init+0x24>
		while(temp != MPU6050_I_AM)
 8003290:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8003294:	2b68      	cmp	r3, #104	; 0x68
 8003296:	d120      	bne.n	80032da <MPU6050_Init+0xa2>
		d[0] = MPU6050_PWR_MGMT_1;
 8003298:	236b      	movs	r3, #107	; 0x6b
		d[1] = 0x00;
 800329a:	f88d 000d 	strb.w	r0, [sp, #13]
		d[0] = MPU6050_PWR_MGMT_1;
 800329e:	f88d 300c 	strb.w	r3, [sp, #12]
		if(HAL_I2C_Master_Transmit(Handle,(uint16_t)address , (uint8_t *)d, 2, 1000) != HAL_OK)
 80032a2:	4621      	mov	r1, r4
 80032a4:	9700      	str	r7, [sp, #0]
 80032a6:	2302      	movs	r3, #2
 80032a8:	aa03      	add	r2, sp, #12
 80032aa:	4628      	mov	r0, r5
 80032ac:	f7fe f9c0 	bl	8001630 <HAL_I2C_Master_Transmit>
 80032b0:	4604      	mov	r4, r0
 80032b2:	2800      	cmp	r0, #0
 80032b4:	d1d2      	bne.n	800325c <MPU6050_Init+0x24>
	MPU6050_SetDataRate(I2Cx,DataStruct, MPU6050_DataRate_1KHz);
 80032b6:	2207      	movs	r2, #7
 80032b8:	4631      	mov	r1, r6
 80032ba:	4628      	mov	r0, r5
 80032bc:	f7ff fefe 	bl	80030bc <MPU6050_SetDataRate>
	MPU6050_SetAccelerometer(I2Cx,DataStruct, AccelerometerSensitivity);
 80032c0:	4642      	mov	r2, r8
 80032c2:	4631      	mov	r1, r6
 80032c4:	4628      	mov	r0, r5
 80032c6:	f7ff ff0f 	bl	80030e8 <MPU6050_SetAccelerometer>
	MPU6050_SetGyroscope(I2Cx,DataStruct, GyroscopeSensitivity);
 80032ca:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
 80032ce:	4631      	mov	r1, r6
 80032d0:	4628      	mov	r0, r5
 80032d2:	f7ff ff5b 	bl	800318c <MPU6050_SetGyroscope>
	return MPU6050_Result_Ok;
 80032d6:	4620      	mov	r0, r4
 80032d8:	e7c1      	b.n	800325e <MPU6050_Init+0x26>
				return MPU6050_Result_DeviceInvalid;
 80032da:	2003      	movs	r0, #3
 80032dc:	e7bf      	b.n	800325e <MPU6050_Init+0x26>
	...

080032e0 <updateRcChannels>:
	}

}

void updateRcChannels() {
	update_rc_channels(adc_values);
 80032e0:	4801      	ldr	r0, [pc, #4]	; (80032e8 <updateRcChannels+0x8>)
 80032e2:	f001 bae5 	b.w	80048b0 <update_rc_channels>
 80032e6:	bf00      	nop
 80032e8:	20000880 	.word	0x20000880

080032ec <radioTransmit>:
void radioTransmit() {
 80032ec:	b510      	push	{r4, lr}
	if (NRF24_write(txValues, 32)) {
 80032ee:	2120      	movs	r1, #32
 80032f0:	4814      	ldr	r0, [pc, #80]	; (8003344 <radioTransmit+0x58>)
 80032f2:	f000 fceb 	bl	8003ccc <NRF24_write>
 80032f6:	b1f0      	cbz	r0, 8003336 <radioTransmit+0x4a>
		memcpy(txValues, rc_channels.scaled_values, 22);
 80032f8:	4b13      	ldr	r3, [pc, #76]	; (8003348 <radioTransmit+0x5c>)
 80032fa:	4a12      	ldr	r2, [pc, #72]	; (8003344 <radioTransmit+0x58>)
 80032fc:	461c      	mov	r4, r3
 80032fe:	f103 0114 	add.w	r1, r3, #20
 8003302:	f853 0b04 	ldr.w	r0, [r3], #4
 8003306:	428b      	cmp	r3, r1
 8003308:	f842 0b04 	str.w	r0, [r2], #4
 800330c:	d1f9      	bne.n	8003302 <radioTransmit+0x16>
 800330e:	881b      	ldrh	r3, [r3, #0]
		HAL_GPIO_TogglePin(LED_BAT_GPIO_Port, LED_BAT_Pin);
 8003310:	2180      	movs	r1, #128	; 0x80
		memcpy(txValues, rc_channels.scaled_values, 22);
 8003312:	8013      	strh	r3, [r2, #0]
		HAL_GPIO_TogglePin(LED_BAT_GPIO_Port, LED_BAT_Pin);
 8003314:	480d      	ldr	r0, [pc, #52]	; (800334c <radioTransmit+0x60>)
 8003316:	f7fd ff52 	bl	80011be <HAL_GPIO_TogglePin>
		rc_status.frames_sent++;
 800331a:	4a0d      	ldr	r2, [pc, #52]	; (8003350 <radioTransmit+0x64>)
 800331c:	6813      	ldr	r3, [r2, #0]
 800331e:	3301      	adds	r3, #1
 8003320:	6013      	str	r3, [r2, #0]
		if (rc_channels.scaled_values[2] > 2500) {
 8003322:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8003326:	88a2      	ldrh	r2, [r4, #4]
 8003328:	429a      	cmp	r2, r3
 800332a:	d909      	bls.n	8003340 <radioTransmit+0x54>
}
 800332c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			printf("LLS");
 8003330:	4808      	ldr	r0, [pc, #32]	; (8003354 <radioTransmit+0x68>)
 8003332:	f002 b8eb 	b.w	800550c <iprintf>
		printf("FAILED! \n");
 8003336:	4808      	ldr	r0, [pc, #32]	; (8003358 <radioTransmit+0x6c>)
}
 8003338:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		printf("FAILED! \n");
 800333c:	f002 b95a 	b.w	80055f4 <puts>
 8003340:	bd10      	pop	{r4, pc}
 8003342:	bf00      	nop
 8003344:	20000700 	.word	0x20000700
 8003348:	20000898 	.word	0x20000898
 800334c:	40011000 	.word	0x40011000
 8003350:	200008f4 	.word	0x200008f4
 8003354:	08006f76 	.word	0x08006f76
 8003358:	08006f7a 	.word	0x08006f7a

0800335c <updateScreen>:
}
void updateScreen() {
 800335c:	b513      	push	{r0, r1, r4, lr}

	switch (enc_rotation) {
 800335e:	4b19      	ldr	r3, [pc, #100]	; (80033c4 <updateScreen+0x68>)
 8003360:	7818      	ldrb	r0, [r3, #0]
 8003362:	2804      	cmp	r0, #4
 8003364:	d82b      	bhi.n	80033be <updateScreen+0x62>
 8003366:	e8df f000 	tbb	[pc, r0]
 800336a:	0903      	.short	0x0903
 800336c:	1b14      	.short	0x1b14
 800336e:	22          	.byte	0x22
 800336f:	00          	.byte	0x00
	case 0:
		oledPrintMainScreen(&rc_status);
 8003370:	4815      	ldr	r0, [pc, #84]	; (80033c8 <updateScreen+0x6c>)
		oledPrintEncValues(enc_rotation, enc_clicks);
		break;
		// default statements
	}

}
 8003372:	b002      	add	sp, #8
 8003374:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		oledPrintMainScreen(&rc_status);
 8003378:	f001 b9c0 	b.w	80046fc <oledPrintMainScreen>
		oledDrawValueBars(rc_channels.low_pass_values[0],
 800337c:	2401      	movs	r4, #1
 800337e:	4813      	ldr	r0, [pc, #76]	; (80033cc <updateScreen+0x70>)
 8003380:	8b83      	ldrh	r3, [r0, #28]
 8003382:	8b42      	ldrh	r2, [r0, #26]
 8003384:	8b01      	ldrh	r1, [r0, #24]
 8003386:	8ac0      	ldrh	r0, [r0, #22]
		oledDrawValueBars(rc_channels.scaled_values[4],
 8003388:	9400      	str	r4, [sp, #0]
 800338a:	f001 f8f7 	bl	800457c <oledDrawValueBars>
}
 800338e:	b002      	add	sp, #8
 8003390:	bd10      	pop	{r4, pc}
		oledDrawValueBars(rc_channels.scaled_values[4],
 8003392:	480e      	ldr	r0, [pc, #56]	; (80033cc <updateScreen+0x70>)
 8003394:	2405      	movs	r4, #5
 8003396:	89c3      	ldrh	r3, [r0, #14]
 8003398:	8982      	ldrh	r2, [r0, #12]
 800339a:	8941      	ldrh	r1, [r0, #10]
 800339c:	8900      	ldrh	r0, [r0, #8]
 800339e:	e7f3      	b.n	8003388 <updateScreen+0x2c>
		oledPrintCalibMenu(2, 2);
 80033a0:	2102      	movs	r1, #2
 80033a2:	4608      	mov	r0, r1
}
 80033a4:	b002      	add	sp, #8
 80033a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		oledPrintCalibMenu(2, 2);
 80033aa:	f001 b9fd 	b.w	80047a8 <oledPrintCalibMenu>
		oledPrintEncValues(enc_rotation, enc_clicks);
 80033ae:	2004      	movs	r0, #4
 80033b0:	4b07      	ldr	r3, [pc, #28]	; (80033d0 <updateScreen+0x74>)
 80033b2:	7819      	ldrb	r1, [r3, #0]
}
 80033b4:	b002      	add	sp, #8
 80033b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		oledPrintEncValues(enc_rotation, enc_clicks);
 80033ba:	f001 b969 	b.w	8004690 <oledPrintEncValues>
 80033be:	4b04      	ldr	r3, [pc, #16]	; (80033d0 <updateScreen+0x74>)
 80033c0:	7819      	ldrb	r1, [r3, #0]
 80033c2:	e7f7      	b.n	80033b4 <updateScreen+0x58>
 80033c4:	200000a5 	.word	0x200000a5
 80033c8:	200008f4 	.word	0x200008f4
 80033cc:	20000898 	.word	0x20000898
 80033d0:	200000a4 	.word	0x200000a4

080033d4 <SystemClock_Config>:
void SystemClock_Config(void) {
 80033d4:	b510      	push	{r4, lr}
 80033d6:	b096      	sub	sp, #88	; 0x58
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80033d8:	2228      	movs	r2, #40	; 0x28
 80033da:	2100      	movs	r1, #0
 80033dc:	a80c      	add	r0, sp, #48	; 0x30
 80033de:	f002 f88c 	bl	80054fa <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80033e2:	2214      	movs	r2, #20
 80033e4:	2100      	movs	r1, #0
 80033e6:	a801      	add	r0, sp, #4
 80033e8:	f002 f887 	bl	80054fa <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 80033ec:	2218      	movs	r2, #24
 80033ee:	2100      	movs	r1, #0
 80033f0:	eb0d 0002 	add.w	r0, sp, r2
 80033f4:	f002 f881 	bl	80054fa <memset>
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80033f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80033fc:	2201      	movs	r2, #1
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80033fe:	2402      	movs	r4, #2
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003400:	930d      	str	r3, [sp, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003402:	9314      	str	r3, [sp, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8003404:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8003408:	a80c      	add	r0, sp, #48	; 0x30
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800340a:	920c      	str	r2, [sp, #48]	; 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800340c:	9210      	str	r2, [sp, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800340e:	9315      	str	r3, [sp, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003410:	9413      	str	r4, [sp, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8003412:	f7fe fd17 	bl	8001e44 <HAL_RCC_OscConfig>
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8003416:	230f      	movs	r3, #15
 8003418:	9301      	str	r3, [sp, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800341a:	2300      	movs	r3, #0
 800341c:	9303      	str	r3, [sp, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800341e:	f44f 6380 	mov.w	r3, #1024	; 0x400
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8003422:	4621      	mov	r1, r4
 8003424:	a801      	add	r0, sp, #4
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003426:	9304      	str	r3, [sp, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003428:	9305      	str	r3, [sp, #20]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800342a:	9402      	str	r4, [sp, #8]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 800342c:	f7fe fee4 	bl	80021f8 <HAL_RCC_ClockConfig>
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8003430:	f44f 4300 	mov.w	r3, #32768	; 0x8000
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8003434:	a806      	add	r0, sp, #24
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8003436:	9406      	str	r4, [sp, #24]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8003438:	9308      	str	r3, [sp, #32]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 800343a:	f7fe ff9b 	bl	8002374 <HAL_RCCEx_PeriphCLKConfig>
}
 800343e:	b016      	add	sp, #88	; 0x58
 8003440:	bd10      	pop	{r4, pc}
	...

08003444 <main>:
int main(void) {
 8003444:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	__HAL_RCC_GPIOD_CLK_ENABLE()
 8003448:	4db0      	ldr	r5, [pc, #704]	; (800370c <main+0x2c8>)
int main(void) {
 800344a:	b095      	sub	sp, #84	; 0x54
	HAL_Init();
 800344c:	f7fd f994 	bl	8000778 <HAL_Init>
	SystemClock_Config();
 8003450:	f7ff ffc0 	bl	80033d4 <SystemClock_Config>
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8003454:	2210      	movs	r2, #16
 8003456:	2100      	movs	r1, #0
 8003458:	a80b      	add	r0, sp, #44	; 0x2c
 800345a:	f002 f84e 	bl	80054fa <memset>
	__HAL_RCC_GPIOD_CLK_ENABLE()
 800345e:	69ab      	ldr	r3, [r5, #24]
	HAL_GPIO_WritePin(GPIOA, CSN_Pin | CE_Pin, GPIO_PIN_RESET);
 8003460:	2200      	movs	r2, #0
	__HAL_RCC_GPIOD_CLK_ENABLE()
 8003462:	f043 0320 	orr.w	r3, r3, #32
 8003466:	61ab      	str	r3, [r5, #24]
 8003468:	69ab      	ldr	r3, [r5, #24]
	HAL_GPIO_WritePin(GPIOA, CSN_Pin | CE_Pin, GPIO_PIN_RESET);
 800346a:	2112      	movs	r1, #18
	__HAL_RCC_GPIOD_CLK_ENABLE()
 800346c:	f003 0320 	and.w	r3, r3, #32
 8003470:	9305      	str	r3, [sp, #20]
 8003472:	9b05      	ldr	r3, [sp, #20]
	__HAL_RCC_GPIOC_CLK_ENABLE()
 8003474:	69ab      	ldr	r3, [r5, #24]
	HAL_GPIO_WritePin(GPIOA, CSN_Pin | CE_Pin, GPIO_PIN_RESET);
 8003476:	48a6      	ldr	r0, [pc, #664]	; (8003710 <main+0x2cc>)
	__HAL_RCC_GPIOC_CLK_ENABLE()
 8003478:	f043 0310 	orr.w	r3, r3, #16
 800347c:	61ab      	str	r3, [r5, #24]
 800347e:	69ab      	ldr	r3, [r5, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003480:	2400      	movs	r4, #0
	__HAL_RCC_GPIOC_CLK_ENABLE()
 8003482:	f003 0310 	and.w	r3, r3, #16
 8003486:	9306      	str	r3, [sp, #24]
 8003488:	9b06      	ldr	r3, [sp, #24]
	__HAL_RCC_GPIOA_CLK_ENABLE()
 800348a:	69ab      	ldr	r3, [r5, #24]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800348c:	2601      	movs	r6, #1
	__HAL_RCC_GPIOA_CLK_ENABLE()
 800348e:	f043 0304 	orr.w	r3, r3, #4
 8003492:	61ab      	str	r3, [r5, #24]
 8003494:	69ab      	ldr	r3, [r5, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003496:	2702      	movs	r7, #2
	__HAL_RCC_GPIOA_CLK_ENABLE()
 8003498:	f003 0304 	and.w	r3, r3, #4
 800349c:	9307      	str	r3, [sp, #28]
 800349e:	9b07      	ldr	r3, [sp, #28]
	__HAL_RCC_GPIOB_CLK_ENABLE()
 80034a0:	69ab      	ldr	r3, [r5, #24]
	GPIO_InitStruct.Pin = JOY1_PB_Pin | JOY2_PB_Pin;
 80034a2:	f04f 0906 	mov.w	r9, #6
	__HAL_RCC_GPIOB_CLK_ENABLE()
 80034a6:	f043 0308 	orr.w	r3, r3, #8
 80034aa:	61ab      	str	r3, [r5, #24]
 80034ac:	69ab      	ldr	r3, [r5, #24]
	hadc1.Init.NbrOfConversion = 11;
 80034ae:	f04f 080b 	mov.w	r8, #11
	__HAL_RCC_GPIOB_CLK_ENABLE()
 80034b2:	f003 0308 	and.w	r3, r3, #8
 80034b6:	9308      	str	r3, [sp, #32]
 80034b8:	9b08      	ldr	r3, [sp, #32]
	HAL_GPIO_WritePin(GPIOA, CSN_Pin | CE_Pin, GPIO_PIN_RESET);
 80034ba:	f7fd fe7b 	bl	80011b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, MPU_PWR_Pin | RC_PWR_Pin | OLED_PWR_Pin | BUZZ_Pin,
 80034be:	2200      	movs	r2, #0
 80034c0:	f44f 4143 	mov.w	r1, #49920	; 0xc300
 80034c4:	4893      	ldr	r0, [pc, #588]	; (8003714 <main+0x2d0>)
 80034c6:	f7fd fe75 	bl	80011b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, LED_BAT_Pin | LED_EXT_Pin | LED_MODE_Pin,
 80034ca:	2200      	movs	r2, #0
 80034cc:	f44f 7160 	mov.w	r1, #896	; 0x380
 80034d0:	4891      	ldr	r0, [pc, #580]	; (8003718 <main+0x2d4>)
 80034d2:	f7fd fe6f 	bl	80011b4 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = CSN_Pin | CE_Pin;
 80034d6:	2312      	movs	r3, #18
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034d8:	a90b      	add	r1, sp, #44	; 0x2c
 80034da:	488d      	ldr	r0, [pc, #564]	; (8003710 <main+0x2cc>)
	GPIO_InitStruct.Pin = CSN_Pin | CE_Pin;
 80034dc:	930b      	str	r3, [sp, #44]	; 0x2c
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034de:	940d      	str	r4, [sp, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034e0:	970e      	str	r7, [sp, #56]	; 0x38
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034e2:	960c      	str	r6, [sp, #48]	; 0x30
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034e4:	f7fd fd74 	bl	8000fd0 <HAL_GPIO_Init>
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034e8:	a90b      	add	r1, sp, #44	; 0x2c
 80034ea:	488a      	ldr	r0, [pc, #552]	; (8003714 <main+0x2d0>)
	GPIO_InitStruct.Pin = JOY1_PB_Pin | JOY2_PB_Pin;
 80034ec:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80034f0:	940c      	str	r4, [sp, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034f2:	940d      	str	r4, [sp, #52]	; 0x34
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034f4:	f7fd fd6c 	bl	8000fd0 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = MPU_PWR_Pin | RC_PWR_Pin | OLED_PWR_Pin | BUZZ_Pin;
 80034f8:	f44f 4343 	mov.w	r3, #49920	; 0xc300
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034fc:	a90b      	add	r1, sp, #44	; 0x2c
 80034fe:	4885      	ldr	r0, [pc, #532]	; (8003714 <main+0x2d0>)
	GPIO_InitStruct.Pin = MPU_PWR_Pin | RC_PWR_Pin | OLED_PWR_Pin | BUZZ_Pin;
 8003500:	930b      	str	r3, [sp, #44]	; 0x2c
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003502:	940d      	str	r4, [sp, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003504:	970e      	str	r7, [sp, #56]	; 0x38
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003506:	960c      	str	r6, [sp, #48]	; 0x30
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003508:	f7fd fd62 	bl	8000fd0 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = MPU_INT_Pin;
 800350c:	2340      	movs	r3, #64	; 0x40
	HAL_GPIO_Init(MPU_INT_GPIO_Port, &GPIO_InitStruct);
 800350e:	a90b      	add	r1, sp, #44	; 0x2c
 8003510:	4881      	ldr	r0, [pc, #516]	; (8003718 <main+0x2d4>)
	GPIO_InitStruct.Pin = MPU_INT_Pin;
 8003512:	930b      	str	r3, [sp, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003514:	940c      	str	r4, [sp, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003516:	940d      	str	r4, [sp, #52]	; 0x34
	HAL_GPIO_Init(MPU_INT_GPIO_Port, &GPIO_InitStruct);
 8003518:	f7fd fd5a 	bl	8000fd0 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = LED_BAT_Pin | LED_EXT_Pin | LED_MODE_Pin;
 800351c:	f44f 7360 	mov.w	r3, #896	; 0x380
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003520:	a90b      	add	r1, sp, #44	; 0x2c
 8003522:	487d      	ldr	r0, [pc, #500]	; (8003718 <main+0x2d4>)
	GPIO_InitStruct.Pin = LED_BAT_Pin | LED_EXT_Pin | LED_MODE_Pin;
 8003524:	930b      	str	r3, [sp, #44]	; 0x2c
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003526:	940d      	str	r4, [sp, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003528:	970e      	str	r7, [sp, #56]	; 0x38
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800352a:	960c      	str	r6, [sp, #48]	; 0x30
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800352c:	f7fd fd50 	bl	8000fd0 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = ENC_PB_Pin;
 8003530:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003534:	930b      	str	r3, [sp, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003536:	4b79      	ldr	r3, [pc, #484]	; (800371c <main+0x2d8>)
	HAL_GPIO_Init(ENC_PB_GPIO_Port, &GPIO_InitStruct);
 8003538:	a90b      	add	r1, sp, #44	; 0x2c
 800353a:	4875      	ldr	r0, [pc, #468]	; (8003710 <main+0x2cc>)
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800353c:	930c      	str	r3, [sp, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800353e:	940d      	str	r4, [sp, #52]	; 0x34
	HAL_GPIO_Init(ENC_PB_GPIO_Port, &GPIO_InitStruct);
 8003540:	f7fd fd46 	bl	8000fd0 <HAL_GPIO_Init>
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003544:	4622      	mov	r2, r4
 8003546:	4621      	mov	r1, r4
 8003548:	2028      	movs	r0, #40	; 0x28
 800354a:	f7fd fb8f 	bl	8000c6c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800354e:	2028      	movs	r0, #40	; 0x28
 8003550:	f7fd fbc0 	bl	8000cd4 <HAL_NVIC_EnableIRQ>
	__HAL_RCC_DMA1_CLK_ENABLE()
 8003554:	696b      	ldr	r3, [r5, #20]
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8003556:	4622      	mov	r2, r4
	__HAL_RCC_DMA1_CLK_ENABLE()
 8003558:	4333      	orrs	r3, r6
 800355a:	616b      	str	r3, [r5, #20]
 800355c:	696b      	ldr	r3, [r5, #20]
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800355e:	4621      	mov	r1, r4
	__HAL_RCC_DMA1_CLK_ENABLE()
 8003560:	4033      	ands	r3, r6
 8003562:	9304      	str	r3, [sp, #16]
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8003564:	200b      	movs	r0, #11
	__HAL_RCC_DMA1_CLK_ENABLE()
 8003566:	9b04      	ldr	r3, [sp, #16]
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8003568:	f7fd fb80 	bl	8000c6c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800356c:	200b      	movs	r0, #11
	hadc1.Instance = ADC1;
 800356e:	4d6c      	ldr	r5, [pc, #432]	; (8003720 <main+0x2dc>)
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003570:	f7fd fbb0 	bl	8000cd4 <HAL_NVIC_EnableIRQ>
	hadc1.Instance = ADC1;
 8003574:	4b6b      	ldr	r3, [pc, #428]	; (8003724 <main+0x2e0>)
	sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8003576:	f04f 0b07 	mov.w	fp, #7
	hadc1.Instance = ADC1;
 800357a:	602b      	str	r3, [r5, #0]
	hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800357c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003580:	60ab      	str	r3, [r5, #8]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003582:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8003586:	4628      	mov	r0, r5
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003588:	61eb      	str	r3, [r5, #28]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 800358a:	752c      	strb	r4, [r5, #20]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800358c:	606c      	str	r4, [r5, #4]
	hadc1.Init.NbrOfConversion = 11;
 800358e:	f8c5 8010 	str.w	r8, [r5, #16]
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8003592:	940b      	str	r4, [sp, #44]	; 0x2c
 8003594:	940c      	str	r4, [sp, #48]	; 0x30
 8003596:	940d      	str	r4, [sp, #52]	; 0x34
	hadc1.Init.ContinuousConvMode = ENABLE;
 8003598:	732e      	strb	r6, [r5, #12]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 800359a:	f7fd facb 	bl	8000b34 <HAL_ADC_Init>
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 800359e:	a90b      	add	r1, sp, #44	; 0x2c
 80035a0:	4628      	mov	r0, r5
	sConfig.Channel = ADC_CHANNEL_0;
 80035a2:	940b      	str	r4, [sp, #44]	; 0x2c
	sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80035a4:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80035a8:	960c      	str	r6, [sp, #48]	; 0x30
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80035aa:	f7fd f957 	bl	800085c <HAL_ADC_ConfigChannel>
	sConfig.Channel = ADC_CHANNEL_5;
 80035ae:	2205      	movs	r2, #5
	sConfig.Rank = ADC_REGULAR_RANK_3;
 80035b0:	f04f 0a03 	mov.w	sl, #3
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80035b4:	a90b      	add	r1, sp, #44	; 0x2c
 80035b6:	4628      	mov	r0, r5
	sConfig.Channel = ADC_CHANNEL_5;
 80035b8:	920b      	str	r2, [sp, #44]	; 0x2c
 80035ba:	9203      	str	r2, [sp, #12]
	sConfig.Rank = ADC_REGULAR_RANK_2;
 80035bc:	970c      	str	r7, [sp, #48]	; 0x30
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80035be:	f7fd f94d 	bl	800085c <HAL_ADC_ConfigChannel>
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80035c2:	a90b      	add	r1, sp, #44	; 0x2c
 80035c4:	4628      	mov	r0, r5
	sConfig.Channel = ADC_CHANNEL_6;
 80035c6:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
	sConfig.Rank = ADC_REGULAR_RANK_3;
 80035ca:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80035ce:	f7fd f945 	bl	800085c <HAL_ADC_ConfigChannel>
	sConfig.Rank = ADC_REGULAR_RANK_4;
 80035d2:	2304      	movs	r3, #4
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80035d4:	a90b      	add	r1, sp, #44	; 0x2c
 80035d6:	4628      	mov	r0, r5
	sConfig.Channel = ADC_CHANNEL_7;
 80035d8:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
	sConfig.Rank = ADC_REGULAR_RANK_4;
 80035dc:	930c      	str	r3, [sp, #48]	; 0x30
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80035de:	f7fd f93d 	bl	800085c <HAL_ADC_ConfigChannel>
	sConfig.Channel = ADC_CHANNEL_8;
 80035e2:	2308      	movs	r3, #8
	sConfig.Channel = ADC_CHANNEL_10;
 80035e4:	270a      	movs	r7, #10
	sConfig.Rank = ADC_REGULAR_RANK_5;
 80035e6:	9a03      	ldr	r2, [sp, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80035e8:	a90b      	add	r1, sp, #44	; 0x2c
 80035ea:	4628      	mov	r0, r5
	sConfig.Rank = ADC_REGULAR_RANK_5;
 80035ec:	920c      	str	r2, [sp, #48]	; 0x30
	sConfig.Channel = ADC_CHANNEL_8;
 80035ee:	930b      	str	r3, [sp, #44]	; 0x2c
 80035f0:	9302      	str	r3, [sp, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80035f2:	f7fd f933 	bl	800085c <HAL_ADC_ConfigChannel>
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80035f6:	a90b      	add	r1, sp, #44	; 0x2c
 80035f8:	4628      	mov	r0, r5
	sConfig.Rank = ADC_REGULAR_RANK_6;
 80035fa:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
	sConfig.Channel = ADC_CHANNEL_10;
 80035fe:	970b      	str	r7, [sp, #44]	; 0x2c
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8003600:	f7fd f92c 	bl	800085c <HAL_ADC_ConfigChannel>
	sConfig.Rank = ADC_REGULAR_RANK_7;
 8003604:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
	sConfig.Channel = ADC_CHANNEL_12;
 8003608:	f04f 0b0c 	mov.w	fp, #12
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 800360c:	a90b      	add	r1, sp, #44	; 0x2c
 800360e:	4628      	mov	r0, r5
	sConfig.Channel = ADC_CHANNEL_11;
 8003610:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8003614:	f7fd f922 	bl	800085c <HAL_ADC_ConfigChannel>
	sConfig.Rank = ADC_REGULAR_RANK_8;
 8003618:	9b02      	ldr	r3, [sp, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 800361a:	a90b      	add	r1, sp, #44	; 0x2c
 800361c:	4628      	mov	r0, r5
	sConfig.Channel = ADC_CHANNEL_12;
 800361e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
	sConfig.Rank = ADC_REGULAR_RANK_8;
 8003622:	930c      	str	r3, [sp, #48]	; 0x30
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8003624:	f7fd f91a 	bl	800085c <HAL_ADC_ConfigChannel>
	sConfig.Channel = ADC_CHANNEL_13;
 8003628:	230d      	movs	r3, #13
 800362a:	930b      	str	r3, [sp, #44]	; 0x2c
	sConfig.Rank = ADC_REGULAR_RANK_9;
 800362c:	2309      	movs	r3, #9
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 800362e:	a90b      	add	r1, sp, #44	; 0x2c
 8003630:	4628      	mov	r0, r5
	sConfig.Rank = ADC_REGULAR_RANK_9;
 8003632:	930c      	str	r3, [sp, #48]	; 0x30
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8003634:	f7fd f912 	bl	800085c <HAL_ADC_ConfigChannel>
	sConfig.Channel = ADC_CHANNEL_14;
 8003638:	230e      	movs	r3, #14
	sConfig.Channel = ADC_CHANNEL_15;
 800363a:	f04f 090f 	mov.w	r9, #15
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 800363e:	a90b      	add	r1, sp, #44	; 0x2c
 8003640:	4628      	mov	r0, r5
	sConfig.Channel = ADC_CHANNEL_14;
 8003642:	930b      	str	r3, [sp, #44]	; 0x2c
	sConfig.Rank = ADC_REGULAR_RANK_10;
 8003644:	970c      	str	r7, [sp, #48]	; 0x30
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8003646:	f7fd f909 	bl	800085c <HAL_ADC_ConfigChannel>
	sConfig.Rank = ADC_REGULAR_RANK_11;
 800364a:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800364e:	f44f 4880 	mov.w	r8, #16384	; 0x4000
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8003652:	a90b      	add	r1, sp, #44	; 0x2c
 8003654:	4628      	mov	r0, r5
	sConfig.Channel = ADC_CHANNEL_15;
 8003656:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 800365a:	f7fd f8ff 	bl	800085c <HAL_ADC_ConfigChannel>
	hi2c1.Instance = I2C1;
 800365e:	4832      	ldr	r0, [pc, #200]	; (8003728 <main+0x2e4>)
 8003660:	4b32      	ldr	r3, [pc, #200]	; (800372c <main+0x2e8>)
	hi2c2.Instance = I2C2;
 8003662:	4d33      	ldr	r5, [pc, #204]	; (8003730 <main+0x2ec>)
	hi2c1.Instance = I2C1;
 8003664:	6003      	str	r3, [r0, #0]
	hi2c1.Init.ClockSpeed = 400000;
 8003666:	4b33      	ldr	r3, [pc, #204]	; (8003734 <main+0x2f0>)
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003668:	6084      	str	r4, [r0, #8]
	hi2c1.Init.ClockSpeed = 400000;
 800366a:	6043      	str	r3, [r0, #4]
 800366c:	9302      	str	r3, [sp, #8]
	hi2c1.Init.OwnAddress1 = 0;
 800366e:	60c4      	str	r4, [r0, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003670:	6144      	str	r4, [r0, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8003672:	6184      	str	r4, [r0, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003674:	61c4      	str	r4, [r0, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003676:	6204      	str	r4, [r0, #32]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003678:	f8c0 8010 	str.w	r8, [r0, #16]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 800367c:	f7fd ff34 	bl	80014e8 <HAL_I2C_Init>
	hi2c2.Instance = I2C2;
 8003680:	4a2d      	ldr	r2, [pc, #180]	; (8003738 <main+0x2f4>)
	hi2c2.Init.ClockSpeed = 400000;
 8003682:	9b02      	ldr	r3, [sp, #8]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK) {
 8003684:	4628      	mov	r0, r5
	hi2c2.Instance = I2C2;
 8003686:	602a      	str	r2, [r5, #0]
	hi2c2.Init.ClockSpeed = 400000;
 8003688:	606b      	str	r3, [r5, #4]
	hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800368a:	60ac      	str	r4, [r5, #8]
	hi2c2.Init.OwnAddress1 = 0;
 800368c:	60ec      	str	r4, [r5, #12]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800368e:	616c      	str	r4, [r5, #20]
	hi2c2.Init.OwnAddress2 = 0;
 8003690:	61ac      	str	r4, [r5, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003692:	61ec      	str	r4, [r5, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003694:	622c      	str	r4, [r5, #32]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003696:	f8c5 8010 	str.w	r8, [r5, #16]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK) {
 800369a:	f7fd ff25 	bl	80014e8 <HAL_I2C_Init>
	hspi1.Init.Mode = SPI_MODE_MASTER;
 800369e:	f44f 7382 	mov.w	r3, #260	; 0x104
	hspi1.Instance = SPI1;
 80036a2:	4826      	ldr	r0, [pc, #152]	; (800373c <main+0x2f8>)
	hspi1.Init.Mode = SPI_MODE_MASTER;
 80036a4:	4926      	ldr	r1, [pc, #152]	; (8003740 <main+0x2fc>)
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80036a6:	6084      	str	r4, [r0, #8]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 80036a8:	e880 000a 	stmia.w	r0, {r1, r3}
	hspi1.Init.NSS = SPI_NSS_SOFT;
 80036ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80036b0:	6183      	str	r3, [r0, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80036b2:	2320      	movs	r3, #32
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80036b4:	60c4      	str	r4, [r0, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80036b6:	6104      	str	r4, [r0, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80036b8:	6144      	str	r4, [r0, #20]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80036ba:	61c3      	str	r3, [r0, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80036bc:	6204      	str	r4, [r0, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80036be:	6244      	str	r4, [r0, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80036c0:	6284      	str	r4, [r0, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 80036c2:	62c7      	str	r7, [r0, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 80036c4:	f7fe ff3e 	bl	8002544 <HAL_SPI_Init>
	htim6.Init.Prescaler = 73;
 80036c8:	2249      	movs	r2, #73	; 0x49
	htim6.Instance = TIM6;
 80036ca:	4b1e      	ldr	r3, [pc, #120]	; (8003744 <main+0x300>)
	htim6.Init.Prescaler = 73;
 80036cc:	481e      	ldr	r0, [pc, #120]	; (8003748 <main+0x304>)
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80036ce:	609c      	str	r4, [r3, #8]
	htim6.Init.Prescaler = 73;
 80036d0:	e883 0005 	stmia.w	r3, {r0, r2}
	htim6.Init.Period = 999;
 80036d4:	f240 32e7 	movw	r2, #999	; 0x3e7
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK) {
 80036d8:	4618      	mov	r0, r3
	htim6.Init.Period = 999;
 80036da:	60da      	str	r2, [r3, #12]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80036dc:	619c      	str	r4, [r3, #24]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80036de:	940b      	str	r4, [sp, #44]	; 0x2c
 80036e0:	940c      	str	r4, [sp, #48]	; 0x30
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK) {
 80036e2:	9302      	str	r3, [sp, #8]
 80036e4:	f7ff fabe 	bl	8002c64 <HAL_TIM_Base_Init>
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig)
 80036e8:	9b02      	ldr	r3, [sp, #8]
 80036ea:	a90b      	add	r1, sp, #44	; 0x2c
 80036ec:	4618      	mov	r0, r3
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80036ee:	940b      	str	r4, [sp, #44]	; 0x2c
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80036f0:	940c      	str	r4, [sp, #48]	; 0x30
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig)
 80036f2:	f7ff fb1c 	bl	8002d2e <HAL_TIMEx_MasterConfigSynchronization>
	huart2.Instance = USART2;
 80036f6:	4815      	ldr	r0, [pc, #84]	; (800374c <main+0x308>)
 80036f8:	4b15      	ldr	r3, [pc, #84]	; (8003750 <main+0x30c>)
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80036fa:	6084      	str	r4, [r0, #8]
	huart2.Instance = USART2;
 80036fc:	6003      	str	r3, [r0, #0]
	huart2.Init.BaudRate = 115200;
 80036fe:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
	huart2.Init.StopBits = UART_STOPBITS_1;
 8003702:	60c4      	str	r4, [r0, #12]
	huart2.Init.BaudRate = 115200;
 8003704:	6043      	str	r3, [r0, #4]
 8003706:	9302      	str	r3, [sp, #8]
 8003708:	e024      	b.n	8003754 <main+0x310>
 800370a:	bf00      	nop
 800370c:	40021000 	.word	0x40021000
 8003710:	40010800 	.word	0x40010800
 8003714:	40010c00 	.word	0x40010c00
 8003718:	40011000 	.word	0x40011000
 800371c:	10110000 	.word	0x10110000
 8003720:	200006d0 	.word	0x200006d0
 8003724:	40012400 	.word	0x40012400
 8003728:	20000618 	.word	0x20000618
 800372c:	40005400 	.word	0x40005400
 8003730:	2000066c 	.word	0x2000066c
 8003734:	00061a80 	.word	0x00061a80
 8003738:	40005800 	.word	0x40005800
 800373c:	200007e4 	.word	0x200007e4
 8003740:	40013000 	.word	0x40013000
 8003744:	20000764 	.word	0x20000764
 8003748:	40001000 	.word	0x40001000
 800374c:	20000840 	.word	0x20000840
 8003750:	40004400 	.word	0x40004400
	huart2.Init.Parity = UART_PARITY_NONE;
 8003754:	6104      	str	r4, [r0, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8003756:	f8c0 b014 	str.w	fp, [r0, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800375a:	6184      	str	r4, [r0, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800375c:	61c4      	str	r4, [r0, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 800375e:	f7ff fb69 	bl	8002e34 <HAL_UART_Init>
	huart3.Instance = USART3;
 8003762:	484b      	ldr	r0, [pc, #300]	; (8003890 <main+0x44c>)
	huart3.Init.BaudRate = 115200;
 8003764:	9b02      	ldr	r3, [sp, #8]
	huart3.Instance = USART3;
 8003766:	4a4b      	ldr	r2, [pc, #300]	; (8003894 <main+0x450>)
	huart3.Init.BaudRate = 115200;
 8003768:	6043      	str	r3, [r0, #4]
	huart3.Instance = USART3;
 800376a:	6002      	str	r2, [r0, #0]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800376c:	6084      	str	r4, [r0, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 800376e:	60c4      	str	r4, [r0, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8003770:	6104      	str	r4, [r0, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8003772:	f8c0 b014 	str.w	fp, [r0, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003776:	6184      	str	r4, [r0, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003778:	61c4      	str	r4, [r0, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 800377a:	f7ff fb5b 	bl	8002e34 <HAL_UART_Init>
	TIM_Encoder_InitTypeDef sConfig = { 0 };
 800377e:	2224      	movs	r2, #36	; 0x24
 8003780:	4621      	mov	r1, r4
 8003782:	a80b      	add	r0, sp, #44	; 0x2c
 8003784:	f001 feb9 	bl	80054fa <memset>
	htim1.Instance = TIM1;
 8003788:	f8df b130 	ldr.w	fp, [pc, #304]	; 80038bc <main+0x478>
 800378c:	4b42      	ldr	r3, [pc, #264]	; (8003898 <main+0x454>)
	if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK) {
 800378e:	a90b      	add	r1, sp, #44	; 0x2c
	htim1.Init.Prescaler = 0;
 8003790:	e88b 0018 	stmia.w	fp, {r3, r4}
	htim1.Init.Period = 23;
 8003794:	2317      	movs	r3, #23
	if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK) {
 8003796:	4658      	mov	r0, fp
	htim1.Init.Period = 23;
 8003798:	f8cb 300c 	str.w	r3, [fp, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800379c:	9409      	str	r4, [sp, #36]	; 0x24
 800379e:	940a      	str	r4, [sp, #40]	; 0x28
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80037a0:	f8cb 4008 	str.w	r4, [fp, #8]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80037a4:	f8cb 4010 	str.w	r4, [fp, #16]
	htim1.Init.RepetitionCounter = 0;
 80037a8:	f8cb 4014 	str.w	r4, [fp, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80037ac:	f8cb 4018 	str.w	r4, [fp, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80037b0:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80037b4:	960d      	str	r6, [sp, #52]	; 0x34
	sConfig.IC1Filter = 15;
 80037b6:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80037ba:	9611      	str	r6, [sp, #68]	; 0x44
	sConfig.IC2Filter = 15;
 80037bc:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
	if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK) {
 80037c0:	f7ff fa6a 	bl	8002c98 <HAL_TIM_Encoder_Init>
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 80037c4:	a909      	add	r1, sp, #36	; 0x24
 80037c6:	4658      	mov	r0, fp
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80037c8:	9409      	str	r4, [sp, #36]	; 0x24
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80037ca:	940a      	str	r4, [sp, #40]	; 0x28
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 80037cc:	f7ff faaf 	bl	8002d2e <HAL_TIMEx_MasterConfigSynchronization>
	oledInit();
 80037d0:	f000 fe64 	bl	800449c <oledInit>
	oledPrintInitScreen();
 80037d4:	f000 fe72 	bl	80044bc <oledPrintInitScreen>
	initNRF24andPrintStatus();
 80037d8:	f000 fe20 	bl	800441c <initNRF24andPrintStatus>
	HAL_GPIO_WritePin(MPU_PWR_GPIO_Port, MPU_PWR_Pin, SET); //wlacz zasilanie do MPU
 80037dc:	4632      	mov	r2, r6
 80037de:	4641      	mov	r1, r8
 80037e0:	482e      	ldr	r0, [pc, #184]	; (800389c <main+0x458>)
 80037e2:	f7fd fce7 	bl	80011b4 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80037e6:	4638      	mov	r0, r7
 80037e8:	f7fc ffea 	bl	80007c0 <HAL_Delay>
	mpu_result = MPU6050_Init(&hi2c2, &imu, MPU6050_Device_0,
 80037ec:	4623      	mov	r3, r4
 80037ee:	4622      	mov	r2, r4
 80037f0:	9400      	str	r4, [sp, #0]
 80037f2:	492b      	ldr	r1, [pc, #172]	; (80038a0 <main+0x45c>)
 80037f4:	4628      	mov	r0, r5
 80037f6:	f7ff fd1f 	bl	8003238 <MPU6050_Init>
 80037fa:	4c2a      	ldr	r4, [pc, #168]	; (80038a4 <main+0x460>)
 80037fc:	7020      	strb	r0, [r4, #0]
	HAL_Delay(10);
 80037fe:	4638      	mov	r0, r7
 8003800:	f7fc ffde 	bl	80007c0 <HAL_Delay>
	rc_status.mpu_init_succes = mpu_result;
 8003804:	7823      	ldrb	r3, [r4, #0]
 8003806:	4a28      	ldr	r2, [pc, #160]	; (80038a8 <main+0x464>)
 8003808:	7313      	strb	r3, [r2, #12]
	if (mpu_result == MPU6050_Result_Ok) {
 800380a:	2b00      	cmp	r3, #0
 800380c:	d132      	bne.n	8003874 <main+0x430>
		printf("MPU6050  initialization SUCCESS!\n");
 800380e:	4827      	ldr	r0, [pc, #156]	; (80038ac <main+0x468>)
		printf("MPU6050 initialization FAIL!\n");
 8003810:	f001 fef0 	bl	80055f4 <puts>
	update_rc_mode(RC_SIMPLE_JOYSTICK);
 8003814:	2001      	movs	r0, #1
 8003816:	f001 f843 	bl	80048a0 <update_rc_mode>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adc_values, 11);
 800381a:	220b      	movs	r2, #11
 800381c:	4924      	ldr	r1, [pc, #144]	; (80038b0 <main+0x46c>)
 800381e:	4825      	ldr	r0, [pc, #148]	; (80038b4 <main+0x470>)
 8003820:	f7fd f8d8 	bl	80009d4 <HAL_ADC_Start_DMA>
	HAL_TIM_Base_Start_IT(&htim6);
 8003824:	4824      	ldr	r0, [pc, #144]	; (80038b8 <main+0x474>)
 8003826:	f7ff f8f8 	bl	8002a1a <HAL_TIM_Base_Start_IT>
	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 800382a:	213c      	movs	r1, #60	; 0x3c
 800382c:	4823      	ldr	r0, [pc, #140]	; (80038bc <main+0x478>)
 800382e:	f7ff f904 	bl	8002a3a <HAL_TIM_Encoder_Start>
	read_initial_store();
 8003832:	f7ff fc25 	bl	8003080 <read_initial_store>
	volatile uint16_t main_tick = 0;
 8003836:	2300      	movs	r3, #0
				main_tick = 1;
 8003838:	2601      	movs	r6, #1
		if (tick_ms) {
 800383a:	4d21      	ldr	r5, [pc, #132]	; (80038c0 <main+0x47c>)
	volatile uint16_t main_tick = 0;
 800383c:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
		if (tick_ms) {
 8003840:	782b      	ldrb	r3, [r5, #0]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d0fc      	beq.n	8003840 <main+0x3fc>
			tick_ms--;
 8003846:	782b      	ldrb	r3, [r5, #0]
 8003848:	4c1e      	ldr	r4, [pc, #120]	; (80038c4 <main+0x480>)
 800384a:	3b01      	subs	r3, #1
 800384c:	b2db      	uxtb	r3, r3
 800384e:	702b      	strb	r3, [r5, #0]
			main_tick++;
 8003850:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 8003854:	3301      	adds	r3, #1
 8003856:	b29b      	uxth	r3, r3
 8003858:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
			for (pointer_to_task = timed_task; pointer_to_task->interval != 0;
 800385c:	f834 1c08 	ldrh.w	r1, [r4, #-8]
				if (!(main_tick % pointer_to_task->interval)) {
 8003860:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
			for (pointer_to_task = timed_task; pointer_to_task->interval != 0;
 8003864:	b941      	cbnz	r1, 8003878 <main+0x434>
			if (main_tick > 1000) {
 8003866:	b29b      	uxth	r3, r3
 8003868:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800386c:	d9e8      	bls.n	8003840 <main+0x3fc>
				main_tick = 1;
 800386e:	f8ad 602c 	strh.w	r6, [sp, #44]	; 0x2c
 8003872:	e7e5      	b.n	8003840 <main+0x3fc>
		printf("MPU6050 initialization FAIL!\n");
 8003874:	4814      	ldr	r0, [pc, #80]	; (80038c8 <main+0x484>)
 8003876:	e7cb      	b.n	8003810 <main+0x3cc>
				if (!(main_tick % pointer_to_task->interval)) {
 8003878:	b29a      	uxth	r2, r3
 800387a:	fbb2 f3f1 	udiv	r3, r2, r1
 800387e:	fb01 2313 	mls	r3, r1, r3, r2
 8003882:	b29b      	uxth	r3, r3
 8003884:	b913      	cbnz	r3, 800388c <main+0x448>
					(pointer_to_task->proc)();
 8003886:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800388a:	4798      	blx	r3
 800388c:	3408      	adds	r4, #8
 800388e:	e7e5      	b.n	800385c <main+0x418>
 8003890:	200005d8 	.word	0x200005d8
 8003894:	40004800 	.word	0x40004800
 8003898:	40012c00 	.word	0x40012c00
 800389c:	40010c00 	.word	0x40010c00
 80038a0:	200005bc 	.word	0x200005bc
 80038a4:	2000083c 	.word	0x2000083c
 80038a8:	200008f4 	.word	0x200008f4
 80038ac:	08006f38 	.word	0x08006f38
 80038b0:	20000880 	.word	0x20000880
 80038b4:	200006d0 	.word	0x200006d0
 80038b8:	20000764 	.word	0x20000764
 80038bc:	200007a4 	.word	0x200007a4
 80038c0:	200000a6 	.word	0x200000a6
 80038c4:	08006f8c 	.word	0x08006f8c
 80038c8:	08006f59 	.word	0x08006f59

080038cc <_write>:
int _write(int fd, char *str, int len) {
 80038cc:	b510      	push	{r4, lr}
 80038ce:	4614      	mov	r4, r2
	HAL_UART_Transmit(&DEBUG_UART, (uint8_t *) str, len, 10); // usart2 - debug
 80038d0:	230a      	movs	r3, #10
 80038d2:	b292      	uxth	r2, r2
 80038d4:	4802      	ldr	r0, [pc, #8]	; (80038e0 <_write+0x14>)
 80038d6:	f7ff fadb 	bl	8002e90 <HAL_UART_Transmit>
}
 80038da:	4620      	mov	r0, r4
 80038dc:	bd10      	pop	{r4, pc}
 80038de:	bf00      	nop
 80038e0:	200005d8 	.word	0x200005d8

080038e4 <HAL_TIM_PeriodElapsedCallback>:

/// HAL CALLBACK OVERRIDE
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
	static uint8_t mig = 10;
	tick_ms = 1;
 80038e4:	2201      	movs	r2, #1
 80038e6:	4b08      	ldr	r3, [pc, #32]	; (8003908 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80038e8:	701a      	strb	r2, [r3, #0]

	mig--;
 80038ea:	4a08      	ldr	r2, [pc, #32]	; (800390c <HAL_TIM_PeriodElapsedCallback+0x28>)
 80038ec:	7813      	ldrb	r3, [r2, #0]
 80038ee:	3b01      	subs	r3, #1
	if (!mig) {
 80038f0:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
		mig = 10;
 80038f4:	bf01      	itttt	eq
 80038f6:	230a      	moveq	r3, #10
 80038f8:	7013      	strbeq	r3, [r2, #0]
		enc_rotation = TIM1->CNT / 4;
 80038fa:	4b05      	ldreq	r3, [pc, #20]	; (8003910 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80038fc:	4a05      	ldreq	r2, [pc, #20]	; (8003914 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80038fe:	bf04      	itt	eq
 8003900:	6a5b      	ldreq	r3, [r3, #36]	; 0x24
 8003902:	089b      	lsreq	r3, r3, #2
 8003904:	7013      	strb	r3, [r2, #0]
 8003906:	4770      	bx	lr
 8003908:	200000a6 	.word	0x200000a6
 800390c:	20000010 	.word	0x20000010
 8003910:	40012c00 	.word	0x40012c00
 8003914:	200000a5 	.word	0x200000a5

08003918 <HAL_GPIO_EXTI_Callback>:

}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {

	if (GPIO_Pin == ENC_PB_Pin) {
 8003918:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800391c:	b508      	push	{r3, lr}
	if (GPIO_Pin == ENC_PB_Pin) {
 800391e:	d10f      	bne.n	8003940 <HAL_GPIO_EXTI_Callback+0x28>
		HAL_GPIO_TogglePin(LED_MODE_GPIO_Port, LED_MODE_Pin);
 8003920:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8003924:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003928:	f500 3086 	add.w	r0, r0, #68608	; 0x10c00
 800392c:	f7fd fc47 	bl	80011be <HAL_GPIO_TogglePin>

		enc_clicks++;
 8003930:	4a04      	ldr	r2, [pc, #16]	; (8003944 <HAL_GPIO_EXTI_Callback+0x2c>)
 8003932:	7813      	ldrb	r3, [r2, #0]
 8003934:	3301      	adds	r3, #1
 8003936:	b2db      	uxtb	r3, r3
		if (enc_clicks > 3) {
 8003938:	2b03      	cmp	r3, #3

			enc_clicks = 0;
 800393a:	bf88      	it	hi
 800393c:	2300      	movhi	r3, #0
 800393e:	7013      	strb	r3, [r2, #0]
 8003940:	bd08      	pop	{r3, pc}
 8003942:	bf00      	nop
 8003944:	200000a4 	.word	0x200000a4

08003948 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8003948:	4770      	bx	lr
	...

0800394c <NRF24_csn.part.0>:
}

//1. Chip Select function
void NRF24_csn(int state) {
	if (state)
		HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 800394c:	4b03      	ldr	r3, [pc, #12]	; (800395c <NRF24_csn.part.0+0x10>)
 800394e:	2201      	movs	r2, #1
 8003950:	8819      	ldrh	r1, [r3, #0]
 8003952:	4b03      	ldr	r3, [pc, #12]	; (8003960 <NRF24_csn.part.0+0x14>)
 8003954:	6818      	ldr	r0, [r3, #0]
 8003956:	f7fd bc2d 	b.w	80011b4 <HAL_GPIO_WritePin>
 800395a:	bf00      	nop
 800395c:	200000ac 	.word	0x200000ac
 8003960:	200000b0 	.word	0x200000b0

08003964 <NRF24_ce.part.1>:
		HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
}
//2. Chip Enable
void NRF24_ce(int state) {
	if (state)
		HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 8003964:	4b03      	ldr	r3, [pc, #12]	; (8003974 <NRF24_ce.part.1+0x10>)
 8003966:	2201      	movs	r2, #1
 8003968:	8819      	ldrh	r1, [r3, #0]
 800396a:	4b03      	ldr	r3, [pc, #12]	; (8003978 <NRF24_ce.part.1+0x14>)
 800396c:	6818      	ldr	r0, [r3, #0]
 800396e:	f7fd bc21 	b.w	80011b4 <HAL_GPIO_WritePin>
 8003972:	bf00      	nop
 8003974:	200000aa 	.word	0x200000aa
 8003978:	200000b0 	.word	0x200000b0

0800397c <NRF24_csn>:
	if (state)
 800397c:	4602      	mov	r2, r0
 800397e:	b108      	cbz	r0, 8003984 <NRF24_csn+0x8>
 8003980:	f7ff bfe4 	b.w	800394c <NRF24_csn.part.0>
		HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 8003984:	4b02      	ldr	r3, [pc, #8]	; (8003990 <NRF24_csn+0x14>)
 8003986:	8819      	ldrh	r1, [r3, #0]
 8003988:	4b02      	ldr	r3, [pc, #8]	; (8003994 <NRF24_csn+0x18>)
 800398a:	6818      	ldr	r0, [r3, #0]
 800398c:	f7fd bc12 	b.w	80011b4 <HAL_GPIO_WritePin>
 8003990:	200000ac 	.word	0x200000ac
 8003994:	200000b0 	.word	0x200000b0

08003998 <NRF24_ce>:
	if (state)
 8003998:	4602      	mov	r2, r0
 800399a:	b108      	cbz	r0, 80039a0 <NRF24_ce+0x8>
 800399c:	f7ff bfe2 	b.w	8003964 <NRF24_ce.part.1>
	else
		HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
 80039a0:	4b02      	ldr	r3, [pc, #8]	; (80039ac <NRF24_ce+0x14>)
 80039a2:	8819      	ldrh	r1, [r3, #0]
 80039a4:	4b02      	ldr	r3, [pc, #8]	; (80039b0 <NRF24_ce+0x18>)
 80039a6:	6818      	ldr	r0, [r3, #0]
 80039a8:	f7fd bc04 	b.w	80011b4 <HAL_GPIO_WritePin>
 80039ac:	200000aa 	.word	0x200000aa
 80039b0:	200000b0 	.word	0x200000b0

080039b4 <NRF24_read_register>:
}
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg) {
 80039b4:	b513      	push	{r0, r1, r4, lr}
 80039b6:	4604      	mov	r4, r0
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(0);
 80039b8:	2000      	movs	r0, #0
 80039ba:	f7ff ffdf 	bl	800397c <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg & 0x1F;
 80039be:	f004 041f 	and.w	r4, r4, #31
 80039c2:	a902      	add	r1, sp, #8
 80039c4:	f801 4d04 	strb.w	r4, [r1, #-4]!
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 80039c8:	4c09      	ldr	r4, [pc, #36]	; (80039f0 <NRF24_read_register+0x3c>)
 80039ca:	2364      	movs	r3, #100	; 0x64
 80039cc:	2201      	movs	r2, #1
 80039ce:	4620      	mov	r0, r4
 80039d0:	f7fe fdf3 	bl	80025ba <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, &spiBuf[1], 1, 100);
 80039d4:	2364      	movs	r3, #100	; 0x64
 80039d6:	2201      	movs	r2, #1
 80039d8:	f10d 0105 	add.w	r1, sp, #5
 80039dc:	4620      	mov	r0, r4
 80039de:	f7fe ff85 	bl	80028ec <HAL_SPI_Receive>
	retData = spiBuf[1];
 80039e2:	f89d 4005 	ldrb.w	r4, [sp, #5]
 80039e6:	f7ff ffb1 	bl	800394c <NRF24_csn.part.0>
	//Bring CSN high
	NRF24_csn(1);
	return retData;
}
 80039ea:	4620      	mov	r0, r4
 80039ec:	b002      	add	sp, #8
 80039ee:	bd10      	pop	{r4, pc}
 80039f0:	200000b4 	.word	0x200000b4

080039f4 <NRF24_read_registerN>:
//4. Read multiple bytes register
void NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len) {
 80039f4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80039f6:	4604      	mov	r4, r0
 80039f8:	460d      	mov	r5, r1
 80039fa:	4616      	mov	r6, r2
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 80039fc:	2000      	movs	r0, #0
 80039fe:	f7ff ffbd 	bl	800397c <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg & 0x1F;
 8003a02:	f004 041f 	and.w	r4, r4, #31
 8003a06:	a902      	add	r1, sp, #8
 8003a08:	f801 4d04 	strb.w	r4, [r1, #-4]!
	//spiStatus = NRF24_SPI_Write(spiBuf, 1);
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8003a0c:	4c07      	ldr	r4, [pc, #28]	; (8003a2c <NRF24_read_registerN+0x38>)
 8003a0e:	2364      	movs	r3, #100	; 0x64
 8003a10:	2201      	movs	r2, #1
 8003a12:	4620      	mov	r0, r4
 8003a14:	f7fe fdd1 	bl	80025ba <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, buf, len, 100);
 8003a18:	2364      	movs	r3, #100	; 0x64
 8003a1a:	4632      	mov	r2, r6
 8003a1c:	4629      	mov	r1, r5
 8003a1e:	4620      	mov	r0, r4
 8003a20:	f7fe ff64 	bl	80028ec <HAL_SPI_Receive>
 8003a24:	f7ff ff92 	bl	800394c <NRF24_csn.part.0>
	//Bring CSN high
	NRF24_csn(1);
}
 8003a28:	b002      	add	sp, #8
 8003a2a:	bd70      	pop	{r4, r5, r6, pc}
 8003a2c:	200000b4 	.word	0x200000b4

08003a30 <NRF24_write_register>:
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value) {
 8003a30:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003a32:	4604      	mov	r4, r0
 8003a34:	460d      	mov	r5, r1
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8003a36:	2000      	movs	r0, #0
 8003a38:	f7ff ffa0 	bl	800397c <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg | 0x20;
 8003a3c:	f044 0420 	orr.w	r4, r4, #32
	spiBuf[1] = value;
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2, 100);
 8003a40:	2364      	movs	r3, #100	; 0x64
 8003a42:	2202      	movs	r2, #2
 8003a44:	a901      	add	r1, sp, #4
 8003a46:	4805      	ldr	r0, [pc, #20]	; (8003a5c <NRF24_write_register+0x2c>)
	spiBuf[0] = reg | 0x20;
 8003a48:	f88d 4004 	strb.w	r4, [sp, #4]
	spiBuf[1] = value;
 8003a4c:	f88d 5005 	strb.w	r5, [sp, #5]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2, 100);
 8003a50:	f7fe fdb3 	bl	80025ba <HAL_SPI_Transmit>
 8003a54:	f7ff ff7a 	bl	800394c <NRF24_csn.part.0>
	//Bring CSN high
	NRF24_csn(1);
}
 8003a58:	b003      	add	sp, #12
 8003a5a:	bd30      	pop	{r4, r5, pc}
 8003a5c:	200000b4 	.word	0x200000b4

08003a60 <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len) {
 8003a60:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003a62:	4604      	mov	r4, r0
 8003a64:	460d      	mov	r5, r1
 8003a66:	4616      	mov	r6, r2
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8003a68:	2000      	movs	r0, #0
 8003a6a:	f7ff ff87 	bl	800397c <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg | 0x20;
 8003a6e:	f044 0420 	orr.w	r4, r4, #32
 8003a72:	a902      	add	r1, sp, #8
 8003a74:	f801 4d04 	strb.w	r4, [r1, #-4]!
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8003a78:	4c07      	ldr	r4, [pc, #28]	; (8003a98 <NRF24_write_registerN+0x38>)
 8003a7a:	2364      	movs	r3, #100	; 0x64
 8003a7c:	2201      	movs	r2, #1
 8003a7e:	4620      	mov	r0, r4
 8003a80:	f7fe fd9b 	bl	80025ba <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*) buf, len, 100);
 8003a84:	2364      	movs	r3, #100	; 0x64
 8003a86:	4632      	mov	r2, r6
 8003a88:	4629      	mov	r1, r5
 8003a8a:	4620      	mov	r0, r4
 8003a8c:	f7fe fd95 	bl	80025ba <HAL_SPI_Transmit>
 8003a90:	f7ff ff5c 	bl	800394c <NRF24_csn.part.0>
	//Bring CSN high
	NRF24_csn(1);
}
 8003a94:	b002      	add	sp, #8
 8003a96:	bd70      	pop	{r4, r5, r6, pc}
 8003a98:	200000b4 	.word	0x200000b4

08003a9c <NRF24_write_payload>:
//7. Write transmit payload
void NRF24_write_payload(const void* buf, uint8_t len) {
 8003a9c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003a9e:	4605      	mov	r5, r0
	uint8_t wrPayloadCmd;
	//Bring CSN low
	NRF24_csn(0);
 8003aa0:	2000      	movs	r0, #0
void NRF24_write_payload(const void* buf, uint8_t len) {
 8003aa2:	460e      	mov	r6, r1
	NRF24_csn(0);
 8003aa4:	f7ff ff6a 	bl	800397c <NRF24_csn>
	//Send Write Tx payload command followed by pbuf data
	wrPayloadCmd = CMD_W_TX_PAYLOAD;
 8003aa8:	23a0      	movs	r3, #160	; 0xa0
	HAL_SPI_Transmit(&nrf24_hspi, &wrPayloadCmd, 1, 100);
 8003aaa:	4c09      	ldr	r4, [pc, #36]	; (8003ad0 <NRF24_write_payload+0x34>)
	wrPayloadCmd = CMD_W_TX_PAYLOAD;
 8003aac:	a902      	add	r1, sp, #8
 8003aae:	f801 3d01 	strb.w	r3, [r1, #-1]!
	HAL_SPI_Transmit(&nrf24_hspi, &wrPayloadCmd, 1, 100);
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	2364      	movs	r3, #100	; 0x64
 8003ab6:	4620      	mov	r0, r4
 8003ab8:	f7fe fd7f 	bl	80025ba <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t *) buf, len, 100);
 8003abc:	2364      	movs	r3, #100	; 0x64
 8003abe:	4632      	mov	r2, r6
 8003ac0:	4629      	mov	r1, r5
 8003ac2:	4620      	mov	r0, r4
 8003ac4:	f7fe fd79 	bl	80025ba <HAL_SPI_Transmit>
 8003ac8:	f7ff ff40 	bl	800394c <NRF24_csn.part.0>
	//Bring CSN high
	NRF24_csn(1);
}
 8003acc:	b002      	add	sp, #8
 8003ace:	bd70      	pop	{r4, r5, r6, pc}
 8003ad0:	200000b4 	.word	0x200000b4

08003ad4 <NRF24_flush_tx>:
	NRF24_csn(1);
}

//9. Flush Tx buffer
void NRF24_flush_tx(void) {
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 8003ad4:	21ff      	movs	r1, #255	; 0xff
 8003ad6:	20e1      	movs	r0, #225	; 0xe1
 8003ad8:	f7ff bfaa 	b.w	8003a30 <NRF24_write_register>

08003adc <NRF24_flush_rx>:
}
//10. Flush Rx buffer
void NRF24_flush_rx(void) {
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 8003adc:	21ff      	movs	r1, #255	; 0xff
 8003ade:	20e2      	movs	r0, #226	; 0xe2
 8003ae0:	f7ff bfa6 	b.w	8003a30 <NRF24_write_register>

08003ae4 <NRF24_get_status>:
}
//11. Get status register value
uint8_t NRF24_get_status(void) {
	uint8_t statReg;
	statReg = NRF24_read_register(REG_STATUS);
 8003ae4:	2007      	movs	r0, #7
 8003ae6:	f7ff bf65 	b.w	80039b4 <NRF24_read_register>

08003aea <NRF24_stopListening>:
	NRF24_ce(1);
	//Wait for 130 uSec for the radio to come on
	NRF24_DelayMicroSeconds(150);
}
//14. Stop listening (essential before any write operation)
void NRF24_stopListening(void) {
 8003aea:	b508      	push	{r3, lr}
	NRF24_ce(0);
 8003aec:	2000      	movs	r0, #0
 8003aee:	f7ff ff53 	bl	8003998 <NRF24_ce>
	NRF24_flush_tx();
 8003af2:	f7ff ffef 	bl	8003ad4 <NRF24_flush_tx>
	NRF24_flush_rx();
}
 8003af6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	NRF24_flush_rx();
 8003afa:	f7ff bfef 	b.w	8003adc <NRF24_flush_rx>
	...

08003b00 <NRF24_openWritingPipe>:
	NRF24_flush_rx();
	NRF24_getDynamicPayloadSize();
	return rxStatus;
}
//18. Open Tx pipe for writing (Cannot perform this while Listenning, has to call NRF24_stopListening)
void NRF24_openWritingPipe(uint64_t address) {
 8003b00:	b513      	push	{r0, r1, r4, lr}
 8003b02:	ac02      	add	r4, sp, #8
 8003b04:	e964 0102 	strd	r0, r1, [r4, #-8]!
	NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *) (&address), 5);
 8003b08:	2205      	movs	r2, #5
 8003b0a:	4621      	mov	r1, r4
 8003b0c:	200a      	movs	r0, #10
 8003b0e:	f7ff ffa7 	bl	8003a60 <NRF24_write_registerN>
	NRF24_write_registerN(REG_TX_ADDR, (uint8_t *) (&address), 5);
 8003b12:	2205      	movs	r2, #5
 8003b14:	4621      	mov	r1, r4
 8003b16:	2010      	movs	r0, #16
 8003b18:	f7ff ffa2 	bl	8003a60 <NRF24_write_registerN>

	const uint8_t max_payload_size = 32;
	NRF24_write_register(REG_RX_PW_P0, MIN(payload_size, max_payload_size));
 8003b1c:	4b04      	ldr	r3, [pc, #16]	; (8003b30 <NRF24_openWritingPipe+0x30>)
 8003b1e:	2011      	movs	r0, #17
 8003b20:	7819      	ldrb	r1, [r3, #0]
 8003b22:	2920      	cmp	r1, #32
 8003b24:	bf28      	it	cs
 8003b26:	2120      	movcs	r1, #32
 8003b28:	f7ff ff82 	bl	8003a30 <NRF24_write_register>
}
 8003b2c:	b002      	add	sp, #8
 8003b2e:	bd10      	pop	{r4, pc}
 8003b30:	2000014c 	.word	0x2000014c

08003b34 <NRF24_setChannel>:
}

//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel) {
	const uint8_t max_channel = 127;
	NRF24_write_register(REG_RF_CH, MIN(channel, max_channel));
 8003b34:	287f      	cmp	r0, #127	; 0x7f
 8003b36:	4601      	mov	r1, r0
 8003b38:	bf28      	it	cs
 8003b3a:	217f      	movcs	r1, #127	; 0x7f
 8003b3c:	2005      	movs	r0, #5
 8003b3e:	f7ff bf77 	b.w	8003a30 <NRF24_write_register>

08003b42 <NRF24_getDynamicPayloadSize>:
uint8_t NRF24_getPayloadSize(void) {
	return payload_size;
}
//24. Get dynamic payload size, of latest packet received
uint8_t NRF24_getDynamicPayloadSize(void) {
	return NRF24_read_register(CMD_R_RX_PL_WID);
 8003b42:	2060      	movs	r0, #96	; 0x60
 8003b44:	f7ff bf36 	b.w	80039b4 <NRF24_read_register>

08003b48 <NRF24_disableDynamicPayloads>:
			NRF24_read_register(
					REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
	dynamic_payloads_enabled = true;

}
void NRF24_disableDynamicPayloads(void) {
 8003b48:	b508      	push	{r3, lr}
	NRF24_write_register(REG_FEATURE,
			NRF24_read_register(REG_FEATURE) & ~(_BV(BIT_EN_DPL)));
 8003b4a:	201d      	movs	r0, #29
 8003b4c:	f7ff ff32 	bl	80039b4 <NRF24_read_register>
	NRF24_write_register(REG_FEATURE,
 8003b50:	f000 01fb 	and.w	r1, r0, #251	; 0xfb
 8003b54:	201d      	movs	r0, #29
 8003b56:	f7ff ff6b 	bl	8003a30 <NRF24_write_register>
	//Disable for all pipes
	NRF24_write_register(REG_DYNPD, 0);
	dynamic_payloads_enabled = false;
}
 8003b5a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	NRF24_write_register(REG_DYNPD, 0);
 8003b5e:	2100      	movs	r1, #0
 8003b60:	201c      	movs	r0, #28
 8003b62:	f7ff bf65 	b.w	8003a30 <NRF24_write_register>

08003b66 <NRF24_setAutoAck>:
bool NRF24_isNRF_Plus(void) {
	return p_variant;
}
//28. Set Auto Ack for all
void NRF24_setAutoAck(bool enable) {
	if (enable)
 8003b66:	4601      	mov	r1, r0
 8003b68:	b100      	cbz	r0, 8003b6c <NRF24_setAutoAck+0x6>
		NRF24_write_register(REG_EN_AA, 0x3F);
 8003b6a:	213f      	movs	r1, #63	; 0x3f
	else
		NRF24_write_register(REG_EN_AA, 0x00);
 8003b6c:	2001      	movs	r0, #1
 8003b6e:	f7ff bf5f 	b.w	8003a30 <NRF24_write_register>

08003b72 <NRF24_setPALevel>:
		}
		NRF24_write_register( REG_EN_AA, en_aa);
	}
}
//30. Set transmit power level
void NRF24_setPALevel(rf24_pa_dbm_e level) {
 8003b72:	b510      	push	{r4, lr}
 8003b74:	4604      	mov	r4, r0
	uint8_t setup = NRF24_read_register(REG_RF_SETUP);
 8003b76:	2006      	movs	r0, #6
 8003b78:	f7ff ff1c 	bl	80039b4 <NRF24_read_register>
	setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH));

	// switch uses RAM (evil!)
	if (level == RF24_PA_0dB) {
 8003b7c:	2c03      	cmp	r4, #3
	setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH));
 8003b7e:	f000 01f9 	and.w	r1, r0, #249	; 0xf9
	if (level == RF24_PA_0dB) {
 8003b82:	d102      	bne.n	8003b8a <NRF24_setPALevel+0x18>
		setup |= _BV(RF_PWR_LOW);
	} else if (level == RF24_PA_m18dB) {
		// nothing
	} else if (level == RF24_PA_ERROR) {
		// On error, go to maximum PA
		setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH));
 8003b84:	f041 0106 	orr.w	r1, r1, #6
 8003b88:	e003      	b.n	8003b92 <NRF24_setPALevel+0x20>
	} else if (level == RF24_PA_m6dB) {
 8003b8a:	2c02      	cmp	r4, #2
 8003b8c:	d106      	bne.n	8003b9c <NRF24_setPALevel+0x2a>
		setup |= _BV(RF_PWR_HIGH);
 8003b8e:	f041 0104 	orr.w	r1, r1, #4
	}

	NRF24_write_register( REG_RF_SETUP, setup);
 8003b92:	2006      	movs	r0, #6
}
 8003b94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	NRF24_write_register( REG_RF_SETUP, setup);
 8003b98:	f7ff bf4a 	b.w	8003a30 <NRF24_write_register>
	} else if (level == RF24_PA_m12dB) {
 8003b9c:	2c01      	cmp	r4, #1
 8003b9e:	d102      	bne.n	8003ba6 <NRF24_setPALevel+0x34>
		setup |= _BV(RF_PWR_LOW);
 8003ba0:	f041 0102 	orr.w	r1, r1, #2
 8003ba4:	e7f5      	b.n	8003b92 <NRF24_setPALevel+0x20>
	} else if (level == RF24_PA_ERROR) {
 8003ba6:	2c04      	cmp	r4, #4
 8003ba8:	d1f3      	bne.n	8003b92 <NRF24_setPALevel+0x20>
 8003baa:	e7eb      	b.n	8003b84 <NRF24_setPALevel+0x12>

08003bac <NRF24_setDataRate>:
	}

	return result;
}
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed) {
 8003bac:	b538      	push	{r3, r4, r5, lr}
 8003bae:	4605      	mov	r5, r0
	bool result = false;
	uint8_t setup = NRF24_read_register(REG_RF_SETUP);
 8003bb0:	2006      	movs	r0, #6
 8003bb2:	f7ff feff 	bl	80039b4 <NRF24_read_register>

	// HIGH and LOW '00' is 1Mbs - our default
	wide_band = false;
	setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH));
	if (speed == RF24_250KBPS) {
 8003bb6:	2d02      	cmp	r5, #2
	setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH));
 8003bb8:	f000 04d7 	and.w	r4, r0, #215	; 0xd7
	if (speed == RF24_250KBPS) {
 8003bbc:	d10c      	bne.n	8003bd8 <NRF24_setDataRate+0x2c>
		// Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
		// Making it '10'.
		wide_band = false;
		setup |= _BV(RF_DR_LOW);
 8003bbe:	f044 0420 	orr.w	r4, r4, #32
		} else {
			// 1Mbs
			wide_band = false;
		}
	}
	NRF24_write_register(REG_RF_SETUP, setup);
 8003bc2:	4621      	mov	r1, r4
 8003bc4:	2006      	movs	r0, #6
 8003bc6:	f7ff ff33 	bl	8003a30 <NRF24_write_register>

	// Verify our result
	if (NRF24_read_register(REG_RF_SETUP) == setup) {
 8003bca:	2006      	movs	r0, #6
 8003bcc:	f7ff fef2 	bl	80039b4 <NRF24_read_register>
	} else {
		wide_band = false;
	}

	return result;
}
 8003bd0:	1a23      	subs	r3, r4, r0
 8003bd2:	4258      	negs	r0, r3
 8003bd4:	4158      	adcs	r0, r3
 8003bd6:	bd38      	pop	{r3, r4, r5, pc}
		if (speed == RF24_2MBPS) {
 8003bd8:	2d01      	cmp	r5, #1
			setup |= _BV(RF_DR_HIGH);
 8003bda:	bf08      	it	eq
 8003bdc:	f044 0408 	orreq.w	r4, r4, #8
 8003be0:	e7ef      	b.n	8003bc2 <NRF24_setDataRate+0x16>

08003be2 <NRF24_setCRCLength>:
		result = RF24_1MBPS;
	}
	return result;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length) {
 8003be2:	b510      	push	{r4, lr}
 8003be4:	4604      	mov	r4, r0
	uint8_t config = NRF24_read_register(REG_CONFIG)
 8003be6:	2000      	movs	r0, #0
 8003be8:	f7ff fee4 	bl	80039b4 <NRF24_read_register>
 8003bec:	f000 01f3 	and.w	r1, r0, #243	; 0xf3
			& ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC));

	// switch uses RAM
	if (length == RF24_CRC_DISABLED) {
 8003bf0:	b12c      	cbz	r4, 8003bfe <NRF24_setCRCLength+0x1c>
		// Do nothing, we turned it off above.
	} else if (length == RF24_CRC_8) {
 8003bf2:	2c01      	cmp	r4, #1
		config |= _BV(BIT_EN_CRC);
 8003bf4:	bf0c      	ite	eq
 8003bf6:	f041 0108 	orreq.w	r1, r1, #8
	} else {
		config |= _BV(BIT_EN_CRC);
		config |= _BV(BIT_CRCO);
 8003bfa:	f041 010c 	orrne.w	r1, r1, #12
	}
	NRF24_write_register( REG_CONFIG, config);
 8003bfe:	2000      	movs	r0, #0
}
 8003c00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	NRF24_write_register( REG_CONFIG, config);
 8003c04:	f7ff bf14 	b.w	8003a30 <NRF24_write_register>

08003c08 <NRF24_powerDown>:
void NRF24_powerUp(void) {
	NRF24_write_register(REG_CONFIG,
			NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void) {
 8003c08:	b508      	push	{r3, lr}
	NRF24_write_register(REG_CONFIG,
			NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 8003c0a:	2000      	movs	r0, #0
 8003c0c:	f7ff fed2 	bl	80039b4 <NRF24_read_register>
}
 8003c10:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	NRF24_write_register(REG_CONFIG,
 8003c14:	f000 01fd 	and.w	r1, r0, #253	; 0xfd
 8003c18:	2000      	movs	r0, #0
 8003c1a:	f7ff bf09 	b.w	8003a30 <NRF24_write_register>

08003c1e <NRF24_availablePipe>:
//39. Check if data are available and on which pipe (Use this for multiple rx pipes)
bool NRF24_availablePipe(uint8_t* pipe_num) {
 8003c1e:	b570      	push	{r4, r5, r6, lr}
 8003c20:	4605      	mov	r5, r0
	uint8_t status = NRF24_get_status();
 8003c22:	f7ff ff5f 	bl	8003ae4 <NRF24_get_status>
 8003c26:	f000 0340 	and.w	r3, r0, #64	; 0x40

	bool result = (status & _BV(BIT_RX_DR));
 8003c2a:	2b00      	cmp	r3, #0
	uint8_t status = NRF24_get_status();
 8003c2c:	4604      	mov	r4, r0
	bool result = (status & _BV(BIT_RX_DR));
 8003c2e:	bf14      	ite	ne
 8003c30:	2601      	movne	r6, #1
 8003c32:	2600      	moveq	r6, #0

	if (result) {
 8003c34:	d00d      	beq.n	8003c52 <NRF24_availablePipe+0x34>
		// If the caller wants the pipe number, include that
		if (pipe_num)
 8003c36:	b115      	cbz	r5, 8003c3e <NRF24_availablePipe+0x20>
			*pipe_num = (status >> BIT_RX_P_NO) & 0x7;
 8003c38:	f3c0 0342 	ubfx	r3, r0, #1, #3
 8003c3c:	702b      	strb	r3, [r5, #0]

		// Clear the status bit
		NRF24_write_register(REG_STATUS, _BV(BIT_RX_DR));
 8003c3e:	2140      	movs	r1, #64	; 0x40
 8003c40:	2007      	movs	r0, #7
 8003c42:	f7ff fef5 	bl	8003a30 <NRF24_write_register>

		// Handle ack payload receipt
		if (status & _BV(BIT_TX_DS)) {
 8003c46:	06a3      	lsls	r3, r4, #26
 8003c48:	d503      	bpl.n	8003c52 <NRF24_availablePipe+0x34>
			NRF24_write_register(REG_STATUS, _BV(BIT_TX_DS));
 8003c4a:	2120      	movs	r1, #32
 8003c4c:	2007      	movs	r0, #7
 8003c4e:	f7ff feef 	bl	8003a30 <NRF24_write_register>
		}
	}
	return result;
}
 8003c52:	4630      	mov	r0, r6
 8003c54:	bd70      	pop	{r4, r5, r6, pc}

08003c56 <NRF24_available>:
	return NRF24_availablePipe(NULL);
 8003c56:	2000      	movs	r0, #0
 8003c58:	f7ff bfe1 	b.w	8003c1e <NRF24_availablePipe>

08003c5c <NRF24_startWrite>:
//40. Start write (for IRQ mode)
void NRF24_startWrite(const void* buf, uint8_t len) {
 8003c5c:	b538      	push	{r3, r4, r5, lr}
 8003c5e:	4604      	mov	r4, r0
	// Transmitter power-up
	NRF24_ce(0);
 8003c60:	2000      	movs	r0, #0
void NRF24_startWrite(const void* buf, uint8_t len) {
 8003c62:	460d      	mov	r5, r1
	NRF24_ce(0);
 8003c64:	f7ff fe98 	bl	8003998 <NRF24_ce>
	NRF24_write_register(REG_CONFIG,
			(NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP))
 8003c68:	2000      	movs	r0, #0
 8003c6a:	f7ff fea3 	bl	80039b4 <NRF24_read_register>
	NRF24_write_register(REG_CONFIG,
 8003c6e:	f000 01fc 	and.w	r1, r0, #252	; 0xfc
 8003c72:	f041 0102 	orr.w	r1, r1, #2
 8003c76:	2000      	movs	r0, #0
 8003c78:	f7ff feda 	bl	8003a30 <NRF24_write_register>
 8003c7c:	f7ff fe72 	bl	8003964 <NRF24_ce.part.1>
					& ~_BV(BIT_PRIM_RX));
	NRF24_ce(1);
	NRF24_DelayMicroSeconds(150);

	// Send the payload
	NRF24_write_payload(buf, len);
 8003c80:	4620      	mov	r0, r4
 8003c82:	4629      	mov	r1, r5
 8003c84:	f7ff ff0a 	bl	8003a9c <NRF24_write_payload>
 8003c88:	f7ff fe6c 	bl	8003964 <NRF24_ce.part.1>

	// Enable Tx for 15usec
	NRF24_ce(1);
	NRF24_DelayMicroSeconds(15);
	NRF24_ce(0);
}
 8003c8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	NRF24_ce(0);
 8003c90:	2000      	movs	r0, #0
 8003c92:	f7ff be81 	b.w	8003998 <NRF24_ce>

08003c96 <NRF24_whatHappened>:
	bool result = ack_payload_available;
	ack_payload_available = false;
	return result;
}
//43. Check interrupt flags
void NRF24_whatHappened(bool *tx_ok, bool *tx_fail, bool *rx_ready) {
 8003c96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c98:	4605      	mov	r5, r0
 8003c9a:	460f      	mov	r7, r1
 8003c9c:	4616      	mov	r6, r2
	uint8_t status = NRF24_get_status();
 8003c9e:	f7ff ff21 	bl	8003ae4 <NRF24_get_status>
	*tx_ok = 0;
 8003ca2:	2300      	movs	r3, #0
	uint8_t status = NRF24_get_status();
 8003ca4:	4604      	mov	r4, r0
	*tx_ok = 0;
 8003ca6:	702b      	strb	r3, [r5, #0]
	NRF24_write_register(REG_STATUS,
 8003ca8:	2170      	movs	r1, #112	; 0x70
 8003caa:	2007      	movs	r0, #7
 8003cac:	f7ff fec0 	bl	8003a30 <NRF24_write_register>
	_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT));
	// Report to the user what happened
	*tx_ok = status & _BV(BIT_TX_DS);
 8003cb0:	f3c4 1340 	ubfx	r3, r4, #5, #1
 8003cb4:	702b      	strb	r3, [r5, #0]
	*tx_fail = status & _BV(BIT_MAX_RT);
 8003cb6:	f3c4 1300 	ubfx	r3, r4, #4, #1
	*rx_ready = status & _BV(BIT_RX_DR);
 8003cba:	f3c4 1480 	ubfx	r4, r4, #6, #1
	*tx_fail = status & _BV(BIT_MAX_RT);
 8003cbe:	703b      	strb	r3, [r7, #0]
	*rx_ready = status & _BV(BIT_RX_DR);
 8003cc0:	7034      	strb	r4, [r6, #0]
 8003cc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003cc4 <NRF24_resetStatus>:
	return NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void NRF24_resetStatus(void) {
	NRF24_write_register(REG_STATUS,
 8003cc4:	2170      	movs	r1, #112	; 0x70
 8003cc6:	2007      	movs	r0, #7
 8003cc8:	f7ff beb2 	b.w	8003a30 <NRF24_write_register>

08003ccc <NRF24_write>:
bool NRF24_write(const void* buf, uint8_t len) {
 8003ccc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003cce:	4604      	mov	r4, r0
 8003cd0:	460d      	mov	r5, r1
	NRF24_resetStatus();
 8003cd2:	f7ff fff7 	bl	8003cc4 <NRF24_resetStatus>
	NRF24_startWrite(buf, len);
 8003cd6:	4620      	mov	r0, r4
 8003cd8:	4629      	mov	r1, r5
 8003cda:	f7ff ffbf 	bl	8003c5c <NRF24_startWrite>
	uint32_t sent_at = HAL_GetTick();
 8003cde:	f7fc fd69 	bl	80007b4 <HAL_GetTick>
 8003ce2:	4604      	mov	r4, r0
		NRF24_read_registerN(REG_OBSERVE_TX, &observe_tx, 1);
 8003ce4:	2201      	movs	r2, #1
 8003ce6:	f10d 0105 	add.w	r1, sp, #5
 8003cea:	2008      	movs	r0, #8
 8003cec:	f7ff fe82 	bl	80039f4 <NRF24_read_registerN>
		status = NRF24_get_status();
 8003cf0:	f7ff fef8 	bl	8003ae4 <NRF24_get_status>
			&& (HAL_GetTick() - sent_at < timeout));
 8003cf4:	f010 0f30 	tst.w	r0, #48	; 0x30
 8003cf8:	d016      	beq.n	8003d28 <NRF24_write+0x5c>
	NRF24_whatHappened(&tx_ok, &tx_fail, &ack_payload_available);
 8003cfa:	4c0e      	ldr	r4, [pc, #56]	; (8003d34 <NRF24_write+0x68>)
 8003cfc:	f10d 0107 	add.w	r1, sp, #7
 8003d00:	4622      	mov	r2, r4
 8003d02:	f10d 0006 	add.w	r0, sp, #6
 8003d06:	f7ff ffc6 	bl	8003c96 <NRF24_whatHappened>
	if (ack_payload_available) {
 8003d0a:	7823      	ldrb	r3, [r4, #0]
	retStatus = tx_ok;
 8003d0c:	f89d 5006 	ldrb.w	r5, [sp, #6]
	if (ack_payload_available) {
 8003d10:	b11b      	cbz	r3, 8003d1a <NRF24_write+0x4e>
		ack_payload_length = NRF24_getDynamicPayloadSize();
 8003d12:	f7ff ff16 	bl	8003b42 <NRF24_getDynamicPayloadSize>
 8003d16:	4b08      	ldr	r3, [pc, #32]	; (8003d38 <NRF24_write+0x6c>)
 8003d18:	7018      	strb	r0, [r3, #0]
	NRF24_available();
 8003d1a:	f7ff ff9c 	bl	8003c56 <NRF24_available>
	NRF24_flush_tx();
 8003d1e:	f7ff fed9 	bl	8003ad4 <NRF24_flush_tx>
}
 8003d22:	4628      	mov	r0, r5
 8003d24:	b003      	add	sp, #12
 8003d26:	bd30      	pop	{r4, r5, pc}
			&& (HAL_GetTick() - sent_at < timeout));
 8003d28:	f7fc fd44 	bl	80007b4 <HAL_GetTick>
 8003d2c:	1b00      	subs	r0, r0, r4
 8003d2e:	2809      	cmp	r0, #9
 8003d30:	d9d8      	bls.n	8003ce4 <NRF24_write+0x18>
 8003d32:	e7e2      	b.n	8003cfa <NRF24_write+0x2e>
 8003d34:	200000a7 	.word	0x200000a7
 8003d38:	200000a8 	.word	0x200000a8

08003d3c <NRF24_ACTIVATE_cmd>:
	_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT));
}

//47. ACTIVATE cmd
void NRF24_ACTIVATE_cmd(void) {
 8003d3c:	b507      	push	{r0, r1, r2, lr}
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(0);
 8003d3e:	2000      	movs	r0, #0
 8003d40:	f7ff fe1c 	bl	800397c <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 8003d44:	2350      	movs	r3, #80	; 0x50
 8003d46:	f88d 3004 	strb.w	r3, [sp, #4]
	cmdRxBuf[1] = 0x73;
 8003d4a:	2373      	movs	r3, #115	; 0x73
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2, 100);
 8003d4c:	2202      	movs	r2, #2
	cmdRxBuf[1] = 0x73;
 8003d4e:	f88d 3005 	strb.w	r3, [sp, #5]
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2, 100);
 8003d52:	a901      	add	r1, sp, #4
 8003d54:	2364      	movs	r3, #100	; 0x64
 8003d56:	4804      	ldr	r0, [pc, #16]	; (8003d68 <NRF24_ACTIVATE_cmd+0x2c>)
 8003d58:	f7fe fc2f 	bl	80025ba <HAL_SPI_Transmit>
 8003d5c:	f7ff fdf6 	bl	800394c <NRF24_csn.part.0>
	NRF24_csn(1);
}
 8003d60:	b003      	add	sp, #12
 8003d62:	f85d fb04 	ldr.w	pc, [sp], #4
 8003d66:	bf00      	nop
 8003d68:	200000b4 	.word	0x200000b4

08003d6c <printRadioSettings>:
//48. Get AckPayload Size
uint8_t NRF24_GetAckPayloadSize(void) {
	return ack_payload_length;
}

void printRadioSettings(void) {
 8003d6c:	b510      	push	{r4, lr}
 8003d6e:	b0a0      	sub	sp, #128	; 0x80
	uint8_t reg8Val;
	char uartTxBuf[100];
	sprintf(uartTxBuf,
 8003d70:	49bc      	ldr	r1, [pc, #752]	; (8004064 <printRadioSettings+0x2f8>)
 8003d72:	a807      	add	r0, sp, #28
 8003d74:	f001 fc6a 	bl	800564c <strcpy>
			"\r\n**********************************************\r\n");
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *) uartTxBuf, strlen(uartTxBuf),
 8003d78:	a807      	add	r0, sp, #28
 8003d7a:	f7fc fa53 	bl	8000224 <strlen>
 8003d7e:	230a      	movs	r3, #10
 8003d80:	b282      	uxth	r2, r0
 8003d82:	a907      	add	r1, sp, #28
 8003d84:	48b8      	ldr	r0, [pc, #736]	; (8004068 <printRadioSettings+0x2fc>)
 8003d86:	f7ff f883 	bl	8002e90 <HAL_UART_Transmit>
			10);
	//a) Get CRC settings - Config Register
	reg8Val = NRF24_read_register(0x00);
 8003d8a:	2000      	movs	r0, #0
 8003d8c:	f7ff fe12 	bl	80039b4 <NRF24_read_register>
	if (reg8Val & (1 << 3)) {
 8003d90:	0704      	lsls	r4, r0, #28
 8003d92:	f140 8230 	bpl.w	80041f6 <printRadioSettings+0x48a>
		if (reg8Val & (1 << 2))
 8003d96:	0740      	lsls	r0, r0, #29
			sprintf(uartTxBuf, "CRC:\r\n		Enabled, 2 Bytes \r\n");
 8003d98:	bf4c      	ite	mi
 8003d9a:	49b4      	ldrmi	r1, [pc, #720]	; (800406c <printRadioSettings+0x300>)
		else
			sprintf(uartTxBuf, "CRC:\r\n		Enabled, 1 Byte \r\n");
 8003d9c:	49b4      	ldrpl	r1, [pc, #720]	; (8004070 <printRadioSettings+0x304>)
	} else {
		sprintf(uartTxBuf, "CRC:\r\n		Disabled \r\n");
 8003d9e:	a807      	add	r0, sp, #28
 8003da0:	f001 fc54 	bl	800564c <strcpy>
	}
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *) uartTxBuf, strlen(uartTxBuf),
 8003da4:	a807      	add	r0, sp, #28
 8003da6:	f7fc fa3d 	bl	8000224 <strlen>
 8003daa:	230a      	movs	r3, #10
 8003dac:	b282      	uxth	r2, r0
 8003dae:	a907      	add	r1, sp, #28
 8003db0:	48ad      	ldr	r0, [pc, #692]	; (8004068 <printRadioSettings+0x2fc>)
 8003db2:	f7ff f86d 	bl	8002e90 <HAL_UART_Transmit>
			10);
	//b) AutoAck on pipes
	reg8Val = NRF24_read_register(0x01);
 8003db6:	2001      	movs	r0, #1
 8003db8:	f7ff fdfc 	bl	80039b4 <NRF24_read_register>
	sprintf(uartTxBuf,
 8003dbc:	f3c0 1340 	ubfx	r3, r0, #5, #1
 8003dc0:	9303      	str	r3, [sp, #12]
 8003dc2:	f3c0 1300 	ubfx	r3, r0, #4, #1
 8003dc6:	9302      	str	r3, [sp, #8]
 8003dc8:	f3c0 03c0 	ubfx	r3, r0, #3, #1
 8003dcc:	9301      	str	r3, [sp, #4]
 8003dce:	f3c0 0380 	ubfx	r3, r0, #2, #1
 8003dd2:	f000 0201 	and.w	r2, r0, #1
 8003dd6:	49a7      	ldr	r1, [pc, #668]	; (8004074 <printRadioSettings+0x308>)
 8003dd8:	9300      	str	r3, [sp, #0]
 8003dda:	f3c0 0340 	ubfx	r3, r0, #1, #1
 8003dde:	a807      	add	r0, sp, #28
 8003de0:	f001 fc10 	bl	8005604 <siprintf>
			"ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
			_BOOL(reg8Val & (1 << 0)), _BOOL(reg8Val & (1 << 1)),
			_BOOL(reg8Val & (1 << 2)), _BOOL(reg8Val & (1 << 3)),
			_BOOL(reg8Val & (1 << 4)), _BOOL(reg8Val & (1 << 5)));
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *) uartTxBuf, strlen(uartTxBuf),
 8003de4:	a807      	add	r0, sp, #28
 8003de6:	f7fc fa1d 	bl	8000224 <strlen>
 8003dea:	230a      	movs	r3, #10
 8003dec:	b282      	uxth	r2, r0
 8003dee:	a907      	add	r1, sp, #28
 8003df0:	489d      	ldr	r0, [pc, #628]	; (8004068 <printRadioSettings+0x2fc>)
 8003df2:	f7ff f84d 	bl	8002e90 <HAL_UART_Transmit>
			10);
	//c) Enabled Rx addresses
	reg8Val = NRF24_read_register(0x02);
 8003df6:	2002      	movs	r0, #2
 8003df8:	f7ff fddc 	bl	80039b4 <NRF24_read_register>
	sprintf(uartTxBuf,
 8003dfc:	f3c0 1340 	ubfx	r3, r0, #5, #1
 8003e00:	9303      	str	r3, [sp, #12]
 8003e02:	f3c0 1300 	ubfx	r3, r0, #4, #1
 8003e06:	9302      	str	r3, [sp, #8]
 8003e08:	f3c0 03c0 	ubfx	r3, r0, #3, #1
 8003e0c:	9301      	str	r3, [sp, #4]
 8003e0e:	f3c0 0380 	ubfx	r3, r0, #2, #1
 8003e12:	f000 0201 	and.w	r2, r0, #1
 8003e16:	4998      	ldr	r1, [pc, #608]	; (8004078 <printRadioSettings+0x30c>)
 8003e18:	9300      	str	r3, [sp, #0]
 8003e1a:	f3c0 0340 	ubfx	r3, r0, #1, #1
 8003e1e:	a807      	add	r0, sp, #28
 8003e20:	f001 fbf0 	bl	8005604 <siprintf>
			"EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
			_BOOL(reg8Val & (1 << 0)), _BOOL(reg8Val & (1 << 1)),
			_BOOL(reg8Val & (1 << 2)), _BOOL(reg8Val & (1 << 3)),
			_BOOL(reg8Val & (1 << 4)), _BOOL(reg8Val & (1 << 5)));
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *) uartTxBuf, strlen(uartTxBuf),
 8003e24:	a807      	add	r0, sp, #28
 8003e26:	f7fc f9fd 	bl	8000224 <strlen>
 8003e2a:	230a      	movs	r3, #10
 8003e2c:	b282      	uxth	r2, r0
 8003e2e:	a907      	add	r1, sp, #28
 8003e30:	488d      	ldr	r0, [pc, #564]	; (8004068 <printRadioSettings+0x2fc>)
 8003e32:	f7ff f82d 	bl	8002e90 <HAL_UART_Transmit>
			10);
	//d) Address width
	reg8Val = NRF24_read_register(0x03) & 0x03;
 8003e36:	2003      	movs	r0, #3
 8003e38:	f7ff fdbc 	bl	80039b4 <NRF24_read_register>
 8003e3c:	f000 0203 	and.w	r2, r0, #3
	reg8Val += 2;
	sprintf(uartTxBuf, "SETUP_AW:\r\n		%d bytes \r\n", reg8Val);
 8003e40:	3202      	adds	r2, #2
 8003e42:	498e      	ldr	r1, [pc, #568]	; (800407c <printRadioSettings+0x310>)
 8003e44:	a807      	add	r0, sp, #28
 8003e46:	f001 fbdd 	bl	8005604 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *) uartTxBuf, strlen(uartTxBuf),
 8003e4a:	a807      	add	r0, sp, #28
 8003e4c:	f7fc f9ea 	bl	8000224 <strlen>
 8003e50:	230a      	movs	r3, #10
 8003e52:	b282      	uxth	r2, r0
 8003e54:	a907      	add	r1, sp, #28
 8003e56:	4884      	ldr	r0, [pc, #528]	; (8004068 <printRadioSettings+0x2fc>)
 8003e58:	f7ff f81a 	bl	8002e90 <HAL_UART_Transmit>
			10);
	//e) RF channel
	reg8Val = NRF24_read_register(0x05);
 8003e5c:	2005      	movs	r0, #5
 8003e5e:	f7ff fda9 	bl	80039b4 <NRF24_read_register>
	sprintf(uartTxBuf, "RF_CH:\r\n		%d CH \r\n", reg8Val & 0x7F);
 8003e62:	4987      	ldr	r1, [pc, #540]	; (8004080 <printRadioSettings+0x314>)
 8003e64:	f000 027f 	and.w	r2, r0, #127	; 0x7f
 8003e68:	a807      	add	r0, sp, #28
 8003e6a:	f001 fbcb 	bl	8005604 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *) uartTxBuf, strlen(uartTxBuf),
 8003e6e:	a807      	add	r0, sp, #28
 8003e70:	f7fc f9d8 	bl	8000224 <strlen>
 8003e74:	a907      	add	r1, sp, #28
 8003e76:	b282      	uxth	r2, r0
 8003e78:	230a      	movs	r3, #10
 8003e7a:	487b      	ldr	r0, [pc, #492]	; (8004068 <printRadioSettings+0x2fc>)
 8003e7c:	f7ff f808 	bl	8002e90 <HAL_UART_Transmit>
			10);
	//f) Data rate & RF_PWR
	reg8Val = NRF24_read_register(0x06);
 8003e80:	2006      	movs	r0, #6
 8003e82:	f7ff fd97 	bl	80039b4 <NRF24_read_register>
	if (reg8Val & (1 << 3))
 8003e86:	0701      	lsls	r1, r0, #28
		sprintf(uartTxBuf, "Data Rate:\r\n		2Mbps \r\n");
 8003e88:	bf4c      	ite	mi
 8003e8a:	497e      	ldrmi	r1, [pc, #504]	; (8004084 <printRadioSettings+0x318>)
	else
		sprintf(uartTxBuf, "Data Rate:\r\n		1Mbps \r\n");
 8003e8c:	497e      	ldrpl	r1, [pc, #504]	; (8004088 <printRadioSettings+0x31c>)
	reg8Val = NRF24_read_register(0x06);
 8003e8e:	4604      	mov	r4, r0
		sprintf(uartTxBuf, "Data Rate:\r\n		1Mbps \r\n");
 8003e90:	a807      	add	r0, sp, #28
 8003e92:	f001 fbdb 	bl	800564c <strcpy>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *) uartTxBuf, strlen(uartTxBuf),
 8003e96:	a807      	add	r0, sp, #28
 8003e98:	f7fc f9c4 	bl	8000224 <strlen>
			10);
	reg8Val &= (3 << 1);
	reg8Val = (reg8Val >> 1);
 8003e9c:	f3c4 0441 	ubfx	r4, r4, #1, #2
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *) uartTxBuf, strlen(uartTxBuf),
 8003ea0:	b282      	uxth	r2, r0
 8003ea2:	230a      	movs	r3, #10
 8003ea4:	a907      	add	r1, sp, #28
 8003ea6:	4870      	ldr	r0, [pc, #448]	; (8004068 <printRadioSettings+0x2fc>)
 8003ea8:	f7fe fff2 	bl	8002e90 <HAL_UART_Transmit>
	if (reg8Val == 0)
 8003eac:	2c00      	cmp	r4, #0
 8003eae:	f040 81a4 	bne.w	80041fa <printRadioSettings+0x48e>
		sprintf(uartTxBuf, "RF_PWR:\r\n		-18dB \r\n");
 8003eb2:	4976      	ldr	r1, [pc, #472]	; (800408c <printRadioSettings+0x320>)
	else if (reg8Val == 1)
		sprintf(uartTxBuf, "RF_PWR:\r\n		-12dB \r\n");
	else if (reg8Val == 2)
		sprintf(uartTxBuf, "RF_PWR:\r\n		-6dB \r\n");
	else if (reg8Val == 3)
		sprintf(uartTxBuf, "RF_PWR:\r\n		0dB \r\n");
 8003eb4:	a807      	add	r0, sp, #28
 8003eb6:	f001 fbc9 	bl	800564c <strcpy>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *) uartTxBuf, strlen(uartTxBuf),
 8003eba:	a807      	add	r0, sp, #28
 8003ebc:	f7fc f9b2 	bl	8000224 <strlen>
 8003ec0:	230a      	movs	r3, #10
 8003ec2:	b282      	uxth	r2, r0
 8003ec4:	a907      	add	r1, sp, #28
 8003ec6:	4868      	ldr	r0, [pc, #416]	; (8004068 <printRadioSettings+0x2fc>)
 8003ec8:	f7fe ffe2 	bl	8002e90 <HAL_UART_Transmit>
			10);
	//g) RX pipes addresses
	uint8_t pipeAddrs[6];
	NRF24_read_registerN(0x0A, pipeAddrs, 5);
 8003ecc:	a905      	add	r1, sp, #20
 8003ece:	2205      	movs	r2, #5
 8003ed0:	200a      	movs	r0, #10
 8003ed2:	f7ff fd8f 	bl	80039f4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe0 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n",
 8003ed6:	f89d 1014 	ldrb.w	r1, [sp, #20]
 8003eda:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8003ede:	9102      	str	r1, [sp, #8]
 8003ee0:	f89d 1015 	ldrb.w	r1, [sp, #21]
 8003ee4:	f89d 2018 	ldrb.w	r2, [sp, #24]
 8003ee8:	9101      	str	r1, [sp, #4]
 8003eea:	f89d 1016 	ldrb.w	r1, [sp, #22]
 8003eee:	a807      	add	r0, sp, #28
 8003ef0:	9100      	str	r1, [sp, #0]
 8003ef2:	4967      	ldr	r1, [pc, #412]	; (8004090 <printRadioSettings+0x324>)
 8003ef4:	f001 fb86 	bl	8005604 <siprintf>
			pipeAddrs[4], pipeAddrs[3], pipeAddrs[2], pipeAddrs[1],
			pipeAddrs[0]);
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *) uartTxBuf, strlen(uartTxBuf),
 8003ef8:	a807      	add	r0, sp, #28
 8003efa:	f7fc f993 	bl	8000224 <strlen>
 8003efe:	230a      	movs	r3, #10
 8003f00:	b282      	uxth	r2, r0
 8003f02:	a907      	add	r1, sp, #28
 8003f04:	4858      	ldr	r0, [pc, #352]	; (8004068 <printRadioSettings+0x2fc>)
 8003f06:	f7fe ffc3 	bl	8002e90 <HAL_UART_Transmit>
			10);

	NRF24_read_registerN(0x0A + 1, pipeAddrs, 5);
 8003f0a:	a905      	add	r1, sp, #20
 8003f0c:	2205      	movs	r2, #5
 8003f0e:	200b      	movs	r0, #11
 8003f10:	f7ff fd70 	bl	80039f4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe1 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n",
 8003f14:	f89d 1014 	ldrb.w	r1, [sp, #20]
 8003f18:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8003f1c:	9102      	str	r1, [sp, #8]
 8003f1e:	f89d 1015 	ldrb.w	r1, [sp, #21]
 8003f22:	f89d 2018 	ldrb.w	r2, [sp, #24]
 8003f26:	9101      	str	r1, [sp, #4]
 8003f28:	f89d 1016 	ldrb.w	r1, [sp, #22]
 8003f2c:	a807      	add	r0, sp, #28
 8003f2e:	9100      	str	r1, [sp, #0]
 8003f30:	4958      	ldr	r1, [pc, #352]	; (8004094 <printRadioSettings+0x328>)
 8003f32:	f001 fb67 	bl	8005604 <siprintf>
			pipeAddrs[4], pipeAddrs[3], pipeAddrs[2], pipeAddrs[1],
			pipeAddrs[0]);
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *) uartTxBuf, strlen(uartTxBuf),
 8003f36:	a807      	add	r0, sp, #28
 8003f38:	f7fc f974 	bl	8000224 <strlen>
 8003f3c:	230a      	movs	r3, #10
 8003f3e:	b282      	uxth	r2, r0
 8003f40:	a907      	add	r1, sp, #28
 8003f42:	4849      	ldr	r0, [pc, #292]	; (8004068 <printRadioSettings+0x2fc>)
 8003f44:	f7fe ffa4 	bl	8002e90 <HAL_UART_Transmit>
			10);

	NRF24_read_registerN(0x0A + 2, pipeAddrs, 1);
 8003f48:	a905      	add	r1, sp, #20
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	200c      	movs	r0, #12
 8003f4e:	f7ff fd51 	bl	80039f4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe2 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n",
 8003f52:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8003f56:	4950      	ldr	r1, [pc, #320]	; (8004098 <printRadioSettings+0x32c>)
 8003f58:	a807      	add	r0, sp, #28
 8003f5a:	f001 fb53 	bl	8005604 <siprintf>
			pipeAddrs[0]);
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *) uartTxBuf, strlen(uartTxBuf),
 8003f5e:	a807      	add	r0, sp, #28
 8003f60:	f7fc f960 	bl	8000224 <strlen>
 8003f64:	230a      	movs	r3, #10
 8003f66:	b282      	uxth	r2, r0
 8003f68:	a907      	add	r1, sp, #28
 8003f6a:	483f      	ldr	r0, [pc, #252]	; (8004068 <printRadioSettings+0x2fc>)
 8003f6c:	f7fe ff90 	bl	8002e90 <HAL_UART_Transmit>
			10);

	NRF24_read_registerN(0x0A + 3, pipeAddrs, 1);
 8003f70:	a905      	add	r1, sp, #20
 8003f72:	2201      	movs	r2, #1
 8003f74:	200d      	movs	r0, #13
 8003f76:	f7ff fd3d 	bl	80039f4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe3 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n",
 8003f7a:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8003f7e:	4947      	ldr	r1, [pc, #284]	; (800409c <printRadioSettings+0x330>)
 8003f80:	a807      	add	r0, sp, #28
 8003f82:	f001 fb3f 	bl	8005604 <siprintf>
			pipeAddrs[0]);
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *) uartTxBuf, strlen(uartTxBuf),
 8003f86:	a807      	add	r0, sp, #28
 8003f88:	f7fc f94c 	bl	8000224 <strlen>
 8003f8c:	230a      	movs	r3, #10
 8003f8e:	b282      	uxth	r2, r0
 8003f90:	a907      	add	r1, sp, #28
 8003f92:	4835      	ldr	r0, [pc, #212]	; (8004068 <printRadioSettings+0x2fc>)
 8003f94:	f7fe ff7c 	bl	8002e90 <HAL_UART_Transmit>
			10);

	NRF24_read_registerN(0x0A + 4, pipeAddrs, 1);
 8003f98:	a905      	add	r1, sp, #20
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	200e      	movs	r0, #14
 8003f9e:	f7ff fd29 	bl	80039f4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe4 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n",
 8003fa2:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8003fa6:	493e      	ldr	r1, [pc, #248]	; (80040a0 <printRadioSettings+0x334>)
 8003fa8:	a807      	add	r0, sp, #28
 8003faa:	f001 fb2b 	bl	8005604 <siprintf>
			pipeAddrs[0]);
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *) uartTxBuf, strlen(uartTxBuf),
 8003fae:	a807      	add	r0, sp, #28
 8003fb0:	f7fc f938 	bl	8000224 <strlen>
 8003fb4:	230a      	movs	r3, #10
 8003fb6:	b282      	uxth	r2, r0
 8003fb8:	a907      	add	r1, sp, #28
 8003fba:	482b      	ldr	r0, [pc, #172]	; (8004068 <printRadioSettings+0x2fc>)
 8003fbc:	f7fe ff68 	bl	8002e90 <HAL_UART_Transmit>
			10);

	NRF24_read_registerN(0x0A + 5, pipeAddrs, 1);
 8003fc0:	a905      	add	r1, sp, #20
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	200f      	movs	r0, #15
 8003fc6:	f7ff fd15 	bl	80039f4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe5 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n",
 8003fca:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8003fce:	4935      	ldr	r1, [pc, #212]	; (80040a4 <printRadioSettings+0x338>)
 8003fd0:	a807      	add	r0, sp, #28
 8003fd2:	f001 fb17 	bl	8005604 <siprintf>
			pipeAddrs[0]);
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *) uartTxBuf, strlen(uartTxBuf),
 8003fd6:	a807      	add	r0, sp, #28
 8003fd8:	f7fc f924 	bl	8000224 <strlen>
 8003fdc:	230a      	movs	r3, #10
 8003fde:	b282      	uxth	r2, r0
 8003fe0:	a907      	add	r1, sp, #28
 8003fe2:	4821      	ldr	r0, [pc, #132]	; (8004068 <printRadioSettings+0x2fc>)
 8003fe4:	f7fe ff54 	bl	8002e90 <HAL_UART_Transmit>
			10);

	NRF24_read_registerN(0x0A + 6, pipeAddrs, 5);
 8003fe8:	a905      	add	r1, sp, #20
 8003fea:	2205      	movs	r2, #5
 8003fec:	2010      	movs	r0, #16
 8003fee:	f7ff fd01 	bl	80039f4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "TX Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n",
 8003ff2:	f89d 1014 	ldrb.w	r1, [sp, #20]
 8003ff6:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8003ffa:	9102      	str	r1, [sp, #8]
 8003ffc:	f89d 1015 	ldrb.w	r1, [sp, #21]
 8004000:	f89d 2018 	ldrb.w	r2, [sp, #24]
 8004004:	9101      	str	r1, [sp, #4]
 8004006:	f89d 1016 	ldrb.w	r1, [sp, #22]
 800400a:	a807      	add	r0, sp, #28
 800400c:	9100      	str	r1, [sp, #0]
 800400e:	4926      	ldr	r1, [pc, #152]	; (80040a8 <printRadioSettings+0x33c>)
 8004010:	f001 faf8 	bl	8005604 <siprintf>
			pipeAddrs[4], pipeAddrs[3], pipeAddrs[2], pipeAddrs[1],
			pipeAddrs[0]);
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *) uartTxBuf, strlen(uartTxBuf),
 8004014:	a807      	add	r0, sp, #28
 8004016:	f7fc f905 	bl	8000224 <strlen>
 800401a:	230a      	movs	r3, #10
 800401c:	b282      	uxth	r2, r0
 800401e:	a907      	add	r1, sp, #28
 8004020:	4811      	ldr	r0, [pc, #68]	; (8004068 <printRadioSettings+0x2fc>)
 8004022:	f7fe ff35 	bl	8002e90 <HAL_UART_Transmit>
			10);

	//h) RX PW (Payload Width 0 - 32)
	reg8Val = NRF24_read_register(0x11);
 8004026:	2011      	movs	r0, #17
 8004028:	f7ff fcc4 	bl	80039b4 <NRF24_read_register>
	sprintf(uartTxBuf, "RX_PW_P0:\r\n		%d bytes \r\n", reg8Val & 0x3F);
 800402c:	491f      	ldr	r1, [pc, #124]	; (80040ac <printRadioSettings+0x340>)
 800402e:	f000 023f 	and.w	r2, r0, #63	; 0x3f
 8004032:	a807      	add	r0, sp, #28
 8004034:	f001 fae6 	bl	8005604 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *) uartTxBuf, strlen(uartTxBuf),
 8004038:	a807      	add	r0, sp, #28
 800403a:	f7fc f8f3 	bl	8000224 <strlen>
 800403e:	230a      	movs	r3, #10
 8004040:	b282      	uxth	r2, r0
 8004042:	a907      	add	r1, sp, #28
 8004044:	4808      	ldr	r0, [pc, #32]	; (8004068 <printRadioSettings+0x2fc>)
 8004046:	f7fe ff23 	bl	8002e90 <HAL_UART_Transmit>
			10);

	reg8Val = NRF24_read_register(0x11 + 1);
 800404a:	2012      	movs	r0, #18
 800404c:	f7ff fcb2 	bl	80039b4 <NRF24_read_register>
	sprintf(uartTxBuf, "RX_PW_P1:\r\n		%d bytes \r\n", reg8Val & 0x3F);
 8004050:	4917      	ldr	r1, [pc, #92]	; (80040b0 <printRadioSettings+0x344>)
 8004052:	f000 023f 	and.w	r2, r0, #63	; 0x3f
 8004056:	a807      	add	r0, sp, #28
 8004058:	f001 fad4 	bl	8005604 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *) uartTxBuf, strlen(uartTxBuf),
 800405c:	a807      	add	r0, sp, #28
 800405e:	f7fc f8e1 	bl	8000224 <strlen>
 8004062:	e027      	b.n	80040b4 <printRadioSettings+0x348>
 8004064:	08006fac 	.word	0x08006fac
 8004068:	2000010c 	.word	0x2000010c
 800406c:	08006fdf 	.word	0x08006fdf
 8004070:	08006ffb 	.word	0x08006ffb
 8004074:	0800702a 	.word	0x0800702a
 8004078:	0800706e 	.word	0x0800706e
 800407c:	080070b7 	.word	0x080070b7
 8004080:	080070d0 	.word	0x080070d0
 8004084:	080070e3 	.word	0x080070e3
 8004088:	080070fa 	.word	0x080070fa
 800408c:	08007111 	.word	0x08007111
 8004090:	0800715e 	.word	0x0800715e
 8004094:	0800718e 	.word	0x0800718e
 8004098:	080071be 	.word	0x080071be
 800409c:	080071e6 	.word	0x080071e6
 80040a0:	0800720e 	.word	0x0800720e
 80040a4:	08007236 	.word	0x08007236
 80040a8:	0800725e 	.word	0x0800725e
 80040ac:	08007288 	.word	0x08007288
 80040b0:	080072a1 	.word	0x080072a1
 80040b4:	230a      	movs	r3, #10
 80040b6:	b282      	uxth	r2, r0
 80040b8:	a907      	add	r1, sp, #28
 80040ba:	4854      	ldr	r0, [pc, #336]	; (800420c <printRadioSettings+0x4a0>)
 80040bc:	f7fe fee8 	bl	8002e90 <HAL_UART_Transmit>
			10);

	reg8Val = NRF24_read_register(0x11 + 2);
 80040c0:	2013      	movs	r0, #19
 80040c2:	f7ff fc77 	bl	80039b4 <NRF24_read_register>
	sprintf(uartTxBuf, "RX_PW_P2:\r\n		%d bytes \r\n", reg8Val & 0x3F);
 80040c6:	4952      	ldr	r1, [pc, #328]	; (8004210 <printRadioSettings+0x4a4>)
 80040c8:	f000 023f 	and.w	r2, r0, #63	; 0x3f
 80040cc:	a807      	add	r0, sp, #28
 80040ce:	f001 fa99 	bl	8005604 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *) uartTxBuf, strlen(uartTxBuf),
 80040d2:	a807      	add	r0, sp, #28
 80040d4:	f7fc f8a6 	bl	8000224 <strlen>
 80040d8:	230a      	movs	r3, #10
 80040da:	b282      	uxth	r2, r0
 80040dc:	a907      	add	r1, sp, #28
 80040de:	484b      	ldr	r0, [pc, #300]	; (800420c <printRadioSettings+0x4a0>)
 80040e0:	f7fe fed6 	bl	8002e90 <HAL_UART_Transmit>
			10);

	reg8Val = NRF24_read_register(0x11 + 3);
 80040e4:	2014      	movs	r0, #20
 80040e6:	f7ff fc65 	bl	80039b4 <NRF24_read_register>
	sprintf(uartTxBuf, "RX_PW_P3:\r\n		%d bytes \r\n", reg8Val & 0x3F);
 80040ea:	494a      	ldr	r1, [pc, #296]	; (8004214 <printRadioSettings+0x4a8>)
 80040ec:	f000 023f 	and.w	r2, r0, #63	; 0x3f
 80040f0:	a807      	add	r0, sp, #28
 80040f2:	f001 fa87 	bl	8005604 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *) uartTxBuf, strlen(uartTxBuf),
 80040f6:	a807      	add	r0, sp, #28
 80040f8:	f7fc f894 	bl	8000224 <strlen>
 80040fc:	230a      	movs	r3, #10
 80040fe:	b282      	uxth	r2, r0
 8004100:	a907      	add	r1, sp, #28
 8004102:	4842      	ldr	r0, [pc, #264]	; (800420c <printRadioSettings+0x4a0>)
 8004104:	f7fe fec4 	bl	8002e90 <HAL_UART_Transmit>
			10);

	reg8Val = NRF24_read_register(0x11 + 4);
 8004108:	2015      	movs	r0, #21
 800410a:	f7ff fc53 	bl	80039b4 <NRF24_read_register>
	sprintf(uartTxBuf, "RX_PW_P4:\r\n		%d bytes \r\n", reg8Val & 0x3F);
 800410e:	4942      	ldr	r1, [pc, #264]	; (8004218 <printRadioSettings+0x4ac>)
 8004110:	f000 023f 	and.w	r2, r0, #63	; 0x3f
 8004114:	a807      	add	r0, sp, #28
 8004116:	f001 fa75 	bl	8005604 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *) uartTxBuf, strlen(uartTxBuf),
 800411a:	a807      	add	r0, sp, #28
 800411c:	f7fc f882 	bl	8000224 <strlen>
 8004120:	230a      	movs	r3, #10
 8004122:	b282      	uxth	r2, r0
 8004124:	a907      	add	r1, sp, #28
 8004126:	4839      	ldr	r0, [pc, #228]	; (800420c <printRadioSettings+0x4a0>)
 8004128:	f7fe feb2 	bl	8002e90 <HAL_UART_Transmit>
			10);

	reg8Val = NRF24_read_register(0x11 + 5);
 800412c:	2016      	movs	r0, #22
 800412e:	f7ff fc41 	bl	80039b4 <NRF24_read_register>
	sprintf(uartTxBuf, "RX_PW_P5:\r\n		%d bytes \r\n", reg8Val & 0x3F);
 8004132:	493a      	ldr	r1, [pc, #232]	; (800421c <printRadioSettings+0x4b0>)
 8004134:	f000 023f 	and.w	r2, r0, #63	; 0x3f
 8004138:	a807      	add	r0, sp, #28
 800413a:	f001 fa63 	bl	8005604 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *) uartTxBuf, strlen(uartTxBuf),
 800413e:	a807      	add	r0, sp, #28
 8004140:	f7fc f870 	bl	8000224 <strlen>
 8004144:	a907      	add	r1, sp, #28
 8004146:	b282      	uxth	r2, r0
 8004148:	230a      	movs	r3, #10
 800414a:	4830      	ldr	r0, [pc, #192]	; (800420c <printRadioSettings+0x4a0>)
 800414c:	f7fe fea0 	bl	8002e90 <HAL_UART_Transmit>
			10);

	//i) Dynamic payload enable for each pipe
	reg8Val = NRF24_read_register(0x1c);
 8004150:	201c      	movs	r0, #28
 8004152:	f7ff fc2f 	bl	80039b4 <NRF24_read_register>
	sprintf(uartTxBuf,
 8004156:	f3c0 1340 	ubfx	r3, r0, #5, #1
 800415a:	9303      	str	r3, [sp, #12]
 800415c:	f3c0 1300 	ubfx	r3, r0, #4, #1
 8004160:	9302      	str	r3, [sp, #8]
 8004162:	f3c0 03c0 	ubfx	r3, r0, #3, #1
 8004166:	9301      	str	r3, [sp, #4]
 8004168:	f3c0 0380 	ubfx	r3, r0, #2, #1
 800416c:	f000 0201 	and.w	r2, r0, #1
 8004170:	9300      	str	r3, [sp, #0]
 8004172:	492b      	ldr	r1, [pc, #172]	; (8004220 <printRadioSettings+0x4b4>)
 8004174:	f3c0 0340 	ubfx	r3, r0, #1, #1
 8004178:	a807      	add	r0, sp, #28
 800417a:	f001 fa43 	bl	8005604 <siprintf>
			"DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
			_BOOL(reg8Val & (1 << 0)), _BOOL(reg8Val & (1 << 1)),
			_BOOL(reg8Val & (1 << 2)), _BOOL(reg8Val & (1 << 3)),
			_BOOL(reg8Val & (1 << 4)), _BOOL(reg8Val & (1 << 5)));
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *) uartTxBuf, strlen(uartTxBuf),
 800417e:	a807      	add	r0, sp, #28
 8004180:	f7fc f850 	bl	8000224 <strlen>
 8004184:	a907      	add	r1, sp, #28
 8004186:	b282      	uxth	r2, r0
 8004188:	230a      	movs	r3, #10
 800418a:	4820      	ldr	r0, [pc, #128]	; (800420c <printRadioSettings+0x4a0>)
 800418c:	f7fe fe80 	bl	8002e90 <HAL_UART_Transmit>
			10);

	//j) EN_DPL (is Dynamic payload feature enabled ?)
	reg8Val = NRF24_read_register(0x1d);
 8004190:	201d      	movs	r0, #29
 8004192:	f7ff fc0f 	bl	80039b4 <NRF24_read_register>
	if (reg8Val & (1 << 2))
 8004196:	0742      	lsls	r2, r0, #29
		sprintf(uartTxBuf, "EN_DPL:\r\n		Enabled \r\n");
 8004198:	bf4c      	ite	mi
 800419a:	4922      	ldrmi	r1, [pc, #136]	; (8004224 <printRadioSettings+0x4b8>)
	else
		sprintf(uartTxBuf, "EN_DPL:\r\n		Disabled \r\n");
 800419c:	4922      	ldrpl	r1, [pc, #136]	; (8004228 <printRadioSettings+0x4bc>)
	reg8Val = NRF24_read_register(0x1d);
 800419e:	4604      	mov	r4, r0
		sprintf(uartTxBuf, "EN_DPL:\r\n		Disabled \r\n");
 80041a0:	a807      	add	r0, sp, #28
 80041a2:	f001 fa53 	bl	800564c <strcpy>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *) uartTxBuf, strlen(uartTxBuf),
 80041a6:	a807      	add	r0, sp, #28
 80041a8:	f7fc f83c 	bl	8000224 <strlen>
 80041ac:	a907      	add	r1, sp, #28
 80041ae:	230a      	movs	r3, #10
 80041b0:	b282      	uxth	r2, r0
 80041b2:	4816      	ldr	r0, [pc, #88]	; (800420c <printRadioSettings+0x4a0>)
 80041b4:	f7fe fe6c 	bl	8002e90 <HAL_UART_Transmit>
			10);

	//k) EN_ACK_PAY
	if (reg8Val & (1 << 1))
 80041b8:	07a3      	lsls	r3, r4, #30
		sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Enabled \r\n");
 80041ba:	bf4c      	ite	mi
 80041bc:	491b      	ldrmi	r1, [pc, #108]	; (800422c <printRadioSettings+0x4c0>)
	else
		sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Disabled \r\n");
 80041be:	491c      	ldrpl	r1, [pc, #112]	; (8004230 <printRadioSettings+0x4c4>)
 80041c0:	a807      	add	r0, sp, #28
 80041c2:	f001 fa43 	bl	800564c <strcpy>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *) uartTxBuf, strlen(uartTxBuf),
 80041c6:	a807      	add	r0, sp, #28
 80041c8:	f7fc f82c 	bl	8000224 <strlen>
 80041cc:	230a      	movs	r3, #10
 80041ce:	b282      	uxth	r2, r0
 80041d0:	a907      	add	r1, sp, #28
 80041d2:	480e      	ldr	r0, [pc, #56]	; (800420c <printRadioSettings+0x4a0>)
 80041d4:	f7fe fe5c 	bl	8002e90 <HAL_UART_Transmit>
			10);

	sprintf(uartTxBuf,
 80041d8:	4916      	ldr	r1, [pc, #88]	; (8004234 <printRadioSettings+0x4c8>)
 80041da:	a807      	add	r0, sp, #28
 80041dc:	f001 fa36 	bl	800564c <strcpy>
			"\r\n**********************************************\r\n");
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *) uartTxBuf, strlen(uartTxBuf),
 80041e0:	a807      	add	r0, sp, #28
 80041e2:	f7fc f81f 	bl	8000224 <strlen>
 80041e6:	230a      	movs	r3, #10
 80041e8:	b282      	uxth	r2, r0
 80041ea:	a907      	add	r1, sp, #28
 80041ec:	4807      	ldr	r0, [pc, #28]	; (800420c <printRadioSettings+0x4a0>)
 80041ee:	f7fe fe4f 	bl	8002e90 <HAL_UART_Transmit>
			10);
}
 80041f2:	b020      	add	sp, #128	; 0x80
 80041f4:	bd10      	pop	{r4, pc}
		sprintf(uartTxBuf, "CRC:\r\n		Disabled \r\n");
 80041f6:	4910      	ldr	r1, [pc, #64]	; (8004238 <printRadioSettings+0x4cc>)
 80041f8:	e5d1      	b.n	8003d9e <printRadioSettings+0x32>
	else if (reg8Val == 1)
 80041fa:	2c01      	cmp	r4, #1
 80041fc:	d101      	bne.n	8004202 <printRadioSettings+0x496>
		sprintf(uartTxBuf, "RF_PWR:\r\n		-12dB \r\n");
 80041fe:	490f      	ldr	r1, [pc, #60]	; (800423c <printRadioSettings+0x4d0>)
 8004200:	e658      	b.n	8003eb4 <printRadioSettings+0x148>
	else if (reg8Val == 2)
 8004202:	2c02      	cmp	r4, #2
		sprintf(uartTxBuf, "RF_PWR:\r\n		-6dB \r\n");
 8004204:	bf0c      	ite	eq
 8004206:	490e      	ldreq	r1, [pc, #56]	; (8004240 <printRadioSettings+0x4d4>)
		sprintf(uartTxBuf, "RF_PWR:\r\n		0dB \r\n");
 8004208:	490e      	ldrne	r1, [pc, #56]	; (8004244 <printRadioSettings+0x4d8>)
 800420a:	e653      	b.n	8003eb4 <printRadioSettings+0x148>
 800420c:	2000010c 	.word	0x2000010c
 8004210:	080072ba 	.word	0x080072ba
 8004214:	080072d3 	.word	0x080072d3
 8004218:	080072ec 	.word	0x080072ec
 800421c:	08007305 	.word	0x08007305
 8004220:	0800731e 	.word	0x0800731e
 8004224:	08007368 	.word	0x08007368
 8004228:	0800737e 	.word	0x0800737e
 800422c:	08007395 	.word	0x08007395
 8004230:	080073af 	.word	0x080073af
 8004234:	08006fac 	.word	0x08006fac
 8004238:	08007016 	.word	0x08007016
 800423c:	08007125 	.word	0x08007125
 8004240:	08007139 	.word	0x08007139
 8004244:	0800714c 	.word	0x0800714c

08004248 <NRF24_begin>:
		uint16_t nrfCE_Pin, SPI_HandleTypeDef nrfSPI) {
 8004248:	b082      	sub	sp, #8
 800424a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800424c:	4606      	mov	r6, r0
 800424e:	460d      	mov	r5, r1
 8004250:	4614      	mov	r4, r2
 8004252:	a906      	add	r1, sp, #24
	memcpy(&nrf24_hspi, &nrfSPI, sizeof(nrfSPI));
 8004254:	2258      	movs	r2, #88	; 0x58
		uint16_t nrfCE_Pin, SPI_HandleTypeDef nrfSPI) {
 8004256:	f841 3f04 	str.w	r3, [r1, #4]!
	memcpy(&nrf24_hspi, &nrfSPI, sizeof(nrfSPI));
 800425a:	485f      	ldr	r0, [pc, #380]	; (80043d8 <NRF24_begin+0x190>)
 800425c:	f001 f942 	bl	80054e4 <memcpy>
	nrf24_PORT = nrf24PORT;
 8004260:	4b5e      	ldr	r3, [pc, #376]	; (80043dc <NRF24_begin+0x194>)
 8004262:	601e      	str	r6, [r3, #0]
	nrf24_CSN_PIN = nrfCSN_Pin;
 8004264:	4b5e      	ldr	r3, [pc, #376]	; (80043e0 <NRF24_begin+0x198>)
 8004266:	801d      	strh	r5, [r3, #0]
	nrf24_CE_PIN = nrfCE_Pin;
 8004268:	4b5e      	ldr	r3, [pc, #376]	; (80043e4 <NRF24_begin+0x19c>)
	pipeAddrVar[0] = 0xE7;
 800426a:	ad02      	add	r5, sp, #8
	nrf24_CE_PIN = nrfCE_Pin;
 800426c:	801c      	strh	r4, [r3, #0]
 800426e:	f7ff fb6d 	bl	800394c <NRF24_csn.part.0>
	NRF24_ce(0);
 8004272:	2000      	movs	r0, #0
 8004274:	f7ff fb90 	bl	8003998 <NRF24_ce>
	HAL_Delay(5);
 8004278:	2005      	movs	r0, #5
 800427a:	f7fc faa1 	bl	80007c0 <HAL_Delay>
	NRF24_write_register(0x00, 0x08);
 800427e:	2108      	movs	r1, #8
 8004280:	2000      	movs	r0, #0
 8004282:	f7ff fbd5 	bl	8003a30 <NRF24_write_register>
	NRF24_write_register(0x01, 0x3f);
 8004286:	213f      	movs	r1, #63	; 0x3f
 8004288:	2001      	movs	r0, #1
 800428a:	f7ff fbd1 	bl	8003a30 <NRF24_write_register>
	NRF24_write_register(0x02, 0x03);
 800428e:	2103      	movs	r1, #3
 8004290:	2002      	movs	r0, #2
 8004292:	f7ff fbcd 	bl	8003a30 <NRF24_write_register>
	NRF24_write_register(0x03, 0x03);
 8004296:	2103      	movs	r1, #3
	pipeAddrVar[4] = 0xE7;
 8004298:	24e7      	movs	r4, #231	; 0xe7
	NRF24_write_register(0x03, 0x03);
 800429a:	4608      	mov	r0, r1
 800429c:	f7ff fbc8 	bl	8003a30 <NRF24_write_register>
	NRF24_write_register(0x04, 0x03);
 80042a0:	2103      	movs	r1, #3
 80042a2:	2004      	movs	r0, #4
 80042a4:	f7ff fbc4 	bl	8003a30 <NRF24_write_register>
	NRF24_write_register(0x05, 0x02);
 80042a8:	2102      	movs	r1, #2
 80042aa:	2005      	movs	r0, #5
 80042ac:	f7ff fbc0 	bl	8003a30 <NRF24_write_register>
	NRF24_write_register(0x06, 0x0f);
 80042b0:	210f      	movs	r1, #15
 80042b2:	2006      	movs	r0, #6
 80042b4:	f7ff fbbc 	bl	8003a30 <NRF24_write_register>
	NRF24_write_register(0x07, 0x0e);
 80042b8:	210e      	movs	r1, #14
 80042ba:	2007      	movs	r0, #7
 80042bc:	f7ff fbb8 	bl	8003a30 <NRF24_write_register>
	NRF24_write_register(0x08, 0x00);
 80042c0:	2100      	movs	r1, #0
 80042c2:	2008      	movs	r0, #8
 80042c4:	f7ff fbb4 	bl	8003a30 <NRF24_write_register>
	NRF24_write_register(0x09, 0x00);
 80042c8:	2100      	movs	r1, #0
 80042ca:	2009      	movs	r0, #9
 80042cc:	f7ff fbb0 	bl	8003a30 <NRF24_write_register>
	pipeAddrVar[0] = 0xE7;
 80042d0:	f805 4d08 	strb.w	r4, [r5, #-8]!
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 80042d4:	4629      	mov	r1, r5
 80042d6:	2205      	movs	r2, #5
 80042d8:	200a      	movs	r0, #10
	pipeAddrVar[4] = 0xE7;
 80042da:	f88d 4004 	strb.w	r4, [sp, #4]
	pipeAddrVar[3] = 0xE7;
 80042de:	f88d 4003 	strb.w	r4, [sp, #3]
	pipeAddrVar[2] = 0xE7;
 80042e2:	f88d 4002 	strb.w	r4, [sp, #2]
	pipeAddrVar[1] = 0xE7;
 80042e6:	f88d 4001 	strb.w	r4, [sp, #1]
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 80042ea:	f7ff fbb9 	bl	8003a60 <NRF24_write_registerN>
	pipeAddrVar[4] = 0xC2;
 80042ee:	23c2      	movs	r3, #194	; 0xc2
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 80042f0:	2205      	movs	r2, #5
 80042f2:	4629      	mov	r1, r5
 80042f4:	200b      	movs	r0, #11
	pipeAddrVar[4] = 0xC2;
 80042f6:	f88d 3004 	strb.w	r3, [sp, #4]
	pipeAddrVar[3] = 0xC2;
 80042fa:	f88d 3003 	strb.w	r3, [sp, #3]
	pipeAddrVar[2] = 0xC2;
 80042fe:	f88d 3002 	strb.w	r3, [sp, #2]
	pipeAddrVar[1] = 0xC2;
 8004302:	f88d 3001 	strb.w	r3, [sp, #1]
	pipeAddrVar[0] = 0xC2;
 8004306:	f88d 3000 	strb.w	r3, [sp]
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 800430a:	f7ff fba9 	bl	8003a60 <NRF24_write_registerN>
	NRF24_write_register(0x0C, 0xC3);
 800430e:	21c3      	movs	r1, #195	; 0xc3
 8004310:	200c      	movs	r0, #12
 8004312:	f7ff fb8d 	bl	8003a30 <NRF24_write_register>
	NRF24_write_register(0x0D, 0xC4);
 8004316:	21c4      	movs	r1, #196	; 0xc4
 8004318:	200d      	movs	r0, #13
 800431a:	f7ff fb89 	bl	8003a30 <NRF24_write_register>
	NRF24_write_register(0x0E, 0xC5);
 800431e:	21c5      	movs	r1, #197	; 0xc5
 8004320:	200e      	movs	r0, #14
 8004322:	f7ff fb85 	bl	8003a30 <NRF24_write_register>
	NRF24_write_register(0x0F, 0xC6);
 8004326:	21c6      	movs	r1, #198	; 0xc6
 8004328:	200f      	movs	r0, #15
 800432a:	f7ff fb81 	bl	8003a30 <NRF24_write_register>
	NRF24_write_registerN(0x10, pipeAddrVar, 5);
 800432e:	2205      	movs	r2, #5
 8004330:	4629      	mov	r1, r5
 8004332:	2010      	movs	r0, #16
	pipeAddrVar[4] = 0xE7;
 8004334:	f88d 4004 	strb.w	r4, [sp, #4]
	pipeAddrVar[3] = 0xE7;
 8004338:	f88d 4003 	strb.w	r4, [sp, #3]
	pipeAddrVar[2] = 0xE7;
 800433c:	f88d 4002 	strb.w	r4, [sp, #2]
	pipeAddrVar[1] = 0xE7;
 8004340:	f88d 4001 	strb.w	r4, [sp, #1]
	pipeAddrVar[0] = 0xE7;
 8004344:	f88d 4000 	strb.w	r4, [sp]
	NRF24_write_registerN(0x10, pipeAddrVar, 5);
 8004348:	f7ff fb8a 	bl	8003a60 <NRF24_write_registerN>
	NRF24_write_register(0x11, 0);
 800434c:	2100      	movs	r1, #0
 800434e:	2011      	movs	r0, #17
 8004350:	f7ff fb6e 	bl	8003a30 <NRF24_write_register>
	NRF24_write_register(0x12, 0);
 8004354:	2100      	movs	r1, #0
 8004356:	2012      	movs	r0, #18
 8004358:	f7ff fb6a 	bl	8003a30 <NRF24_write_register>
	NRF24_write_register(0x13, 0);
 800435c:	2100      	movs	r1, #0
 800435e:	2013      	movs	r0, #19
 8004360:	f7ff fb66 	bl	8003a30 <NRF24_write_register>
	NRF24_write_register(0x14, 0);
 8004364:	2100      	movs	r1, #0
 8004366:	2014      	movs	r0, #20
 8004368:	f7ff fb62 	bl	8003a30 <NRF24_write_register>
	NRF24_write_register(0x15, 0);
 800436c:	2100      	movs	r1, #0
 800436e:	2015      	movs	r0, #21
 8004370:	f7ff fb5e 	bl	8003a30 <NRF24_write_register>
	NRF24_write_register(0x16, 0);
 8004374:	2100      	movs	r1, #0
 8004376:	2016      	movs	r0, #22
 8004378:	f7ff fb5a 	bl	8003a30 <NRF24_write_register>
	NRF24_ACTIVATE_cmd();
 800437c:	f7ff fcde 	bl	8003d3c <NRF24_ACTIVATE_cmd>
	NRF24_write_register(0x1c, 0);
 8004380:	2100      	movs	r1, #0
 8004382:	201c      	movs	r0, #28
 8004384:	f7ff fb54 	bl	8003a30 <NRF24_write_register>
	NRF24_write_register(0x1d, 0);
 8004388:	2100      	movs	r1, #0
 800438a:	201d      	movs	r0, #29
 800438c:	f7ff fb50 	bl	8003a30 <NRF24_write_register>
	printRadioSettings();
 8004390:	f7ff fcec 	bl	8003d6c <printRadioSettings>
	NRF24_write_register(REG_SETUP_RETR,
 8004394:	21ff      	movs	r1, #255	; 0xff
 8004396:	2004      	movs	r0, #4
 8004398:	f7ff fb4a 	bl	8003a30 <NRF24_write_register>
	NRF24_setPALevel(RF24_PA_0dB);
 800439c:	2003      	movs	r0, #3
 800439e:	f7ff fbe8 	bl	8003b72 <NRF24_setPALevel>
	NRF24_setDataRate(RF24_2MBPS);
 80043a2:	2001      	movs	r0, #1
 80043a4:	f7ff fc02 	bl	8003bac <NRF24_setDataRate>
	NRF24_setCRCLength(RF24_CRC_16);
 80043a8:	2002      	movs	r0, #2
 80043aa:	f7ff fc1a 	bl	8003be2 <NRF24_setCRCLength>
	NRF24_disableDynamicPayloads();
 80043ae:	f7ff fbcb 	bl	8003b48 <NRF24_disableDynamicPayloads>
	payload_size = MIN(size, max_payload_size);
 80043b2:	2220      	movs	r2, #32
 80043b4:	4b0c      	ldr	r3, [pc, #48]	; (80043e8 <NRF24_begin+0x1a0>)
 80043b6:	701a      	strb	r2, [r3, #0]
	NRF24_resetStatus();
 80043b8:	f7ff fc84 	bl	8003cc4 <NRF24_resetStatus>
	NRF24_setChannel(76);
 80043bc:	204c      	movs	r0, #76	; 0x4c
 80043be:	f7ff fbb9 	bl	8003b34 <NRF24_setChannel>
	NRF24_flush_tx();
 80043c2:	f7ff fb87 	bl	8003ad4 <NRF24_flush_tx>
	NRF24_flush_rx();
 80043c6:	f7ff fb89 	bl	8003adc <NRF24_flush_rx>
	NRF24_powerDown();
 80043ca:	f7ff fc1d 	bl	8003c08 <NRF24_powerDown>
}
 80043ce:	b002      	add	sp, #8
 80043d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80043d4:	b002      	add	sp, #8
 80043d6:	4770      	bx	lr
 80043d8:	200000b4 	.word	0x200000b4
 80043dc:	200000b0 	.word	0x200000b0
 80043e0:	200000ac 	.word	0x200000ac
 80043e4:	200000aa 	.word	0x200000aa
 80043e8:	2000014c 	.word	0x2000014c

080043ec <nrf24_DebugUART_Init>:
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *) uartTxBuf, strlen(uartTxBuf),
			10);
}

//4. Init Variables
void nrf24_DebugUART_Init(UART_HandleTypeDef nrf24Uart) {
 80043ec:	b084      	sub	sp, #16
 80043ee:	b530      	push	{r4, r5, lr}
 80043f0:	ac03      	add	r4, sp, #12
 80043f2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	memcpy(&nrf24_huart, &nrf24Uart, sizeof(nrf24Uart));
 80043f6:	4c08      	ldr	r4, [pc, #32]	; (8004418 <nrf24_DebugUART_Init+0x2c>)
 80043f8:	ad03      	add	r5, sp, #12
 80043fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80043fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80043fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004400:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004402:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004404:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004406:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800440a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800440e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004412:	b004      	add	sp, #16
 8004414:	4770      	bx	lr
 8004416:	bf00      	nop
 8004418:	2000010c 	.word	0x2000010c

0800441c <initNRF24andPrintStatus>:
void initNRF24andPrintStatus(void) {
 800441c:	b570      	push	{r4, r5, r6, lr}
	NRF24_begin(CSN_GPIO_Port, CSN_Pin, CE_Pin, hspi1);
 800441e:	4c1a      	ldr	r4, [pc, #104]	; (8004488 <initNRF24andPrintStatus+0x6c>)
void initNRF24andPrintStatus(void) {
 8004420:	b096      	sub	sp, #88	; 0x58
	NRF24_begin(CSN_GPIO_Port, CSN_Pin, CE_Pin, hspi1);
 8004422:	1d21      	adds	r1, r4, #4
 8004424:	2254      	movs	r2, #84	; 0x54
 8004426:	4668      	mov	r0, sp
 8004428:	f001 f85c 	bl	80054e4 <memcpy>
 800442c:	6823      	ldr	r3, [r4, #0]
	nrf24_DebugUART_Init(DEBUG_UART);
 800442e:	466c      	mov	r4, sp
 8004430:	4e16      	ldr	r6, [pc, #88]	; (800448c <initNRF24andPrintStatus+0x70>)
	NRF24_begin(CSN_GPIO_Port, CSN_Pin, CE_Pin, hspi1);
 8004432:	2210      	movs	r2, #16
 8004434:	2102      	movs	r1, #2
 8004436:	4816      	ldr	r0, [pc, #88]	; (8004490 <initNRF24andPrintStatus+0x74>)
	nrf24_DebugUART_Init(DEBUG_UART);
 8004438:	f106 0510 	add.w	r5, r6, #16
	NRF24_begin(CSN_GPIO_Port, CSN_Pin, CE_Pin, hspi1);
 800443c:	f7ff ff04 	bl	8004248 <NRF24_begin>
	nrf24_DebugUART_Init(DEBUG_UART);
 8004440:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004442:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004444:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004446:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004448:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800444c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8004450:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8004454:	f7ff ffca 	bl	80043ec <nrf24_DebugUART_Init>
	NRF24_setAutoAck(false);
 8004458:	2000      	movs	r0, #0
 800445a:	f7ff fb84 	bl	8003b66 <NRF24_setAutoAck>
	NRF24_setChannel(52);
 800445e:	2034      	movs	r0, #52	; 0x34
 8004460:	f7ff fb68 	bl	8003b34 <NRF24_setChannel>
	payload_size = MIN(size, max_payload_size);
 8004464:	2220      	movs	r2, #32
 8004466:	4b0b      	ldr	r3, [pc, #44]	; (8004494 <initNRF24andPrintStatus+0x78>)
 8004468:	701a      	strb	r2, [r3, #0]
	NRF24_stopListening();
 800446a:	f7ff fb3e 	bl	8003aea <NRF24_stopListening>
	NRF24_openWritingPipe(txPipeAdress);
 800446e:	4b0a      	ldr	r3, [pc, #40]	; (8004498 <initNRF24andPrintStatus+0x7c>)
 8004470:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004474:	f7ff fb44 	bl	8003b00 <NRF24_openWritingPipe>
	HAL_Delay(100);
 8004478:	2064      	movs	r0, #100	; 0x64
 800447a:	f7fc f9a1 	bl	80007c0 <HAL_Delay>
}
 800447e:	b016      	add	sp, #88	; 0x58
 8004480:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	printRadioSettings();
 8004484:	f7ff bc72 	b.w	8003d6c <printRadioSettings>
 8004488:	200007e4 	.word	0x200007e4
 800448c:	200005d8 	.word	0x200005d8
 8004490:	40010800 	.word	0x40010800
 8004494:	2000014c 	.word	0x2000014c
 8004498:	20000018 	.word	0x20000018

0800449c <oledInit>:
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00 };

void oledInit(void) {
 800449c:	b508      	push	{r3, lr}

	HAL_GPIO_WritePin(OLED_PWR_GPIO_Port, OLED_PWR_Pin, SET);
 800449e:	2201      	movs	r2, #1
 80044a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80044a4:	4804      	ldr	r0, [pc, #16]	; (80044b8 <oledInit+0x1c>)
 80044a6:	f7fc fe85 	bl	80011b4 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 80044aa:	2005      	movs	r0, #5
 80044ac:	f7fc f988 	bl	80007c0 <HAL_Delay>
	SSD1306_Init(); // initialize the diaply

}
 80044b0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	SSD1306_Init(); // initialize the diaply
 80044b4:	f000 bcae 	b.w	8004e14 <SSD1306_Init>
 80044b8:	40010c00 	.word	0x40010c00

080044bc <oledPrintInitScreen>:

void oledPrintInitScreen(void) {
 80044bc:	b570      	push	{r4, r5, r6, lr}
 80044be:	b08a      	sub	sp, #40	; 0x28

	const char *firmawre_version = "1.1";

	char buffor_string[25];

	sprintf(buffor_string, "v%s %s", firmawre_version, __DATE__);
 80044c0:	4b27      	ldr	r3, [pc, #156]	; (8004560 <oledPrintInitScreen+0xa4>)
 80044c2:	4a28      	ldr	r2, [pc, #160]	; (8004564 <oledPrintInitScreen+0xa8>)
 80044c4:	4928      	ldr	r1, [pc, #160]	; (8004568 <oledPrintInitScreen+0xac>)
 80044c6:	a803      	add	r0, sp, #12

	SSD1306_Clear();

	SSD1306_DrawBitmap(0, 0, init_screen, 128, 64, 1);
 80044c8:	2401      	movs	r4, #1
	sprintf(buffor_string, "v%s %s", firmawre_version, __DATE__);
 80044ca:	f001 f89b 	bl	8005604 <siprintf>
	SSD1306_DrawBitmap(0, 0, init_screen, 128, 64, 1);
 80044ce:	2540      	movs	r5, #64	; 0x40
	SSD1306_Clear();
 80044d0:	f000 fc98 	bl	8004e04 <SSD1306_Clear>
	SSD1306_DrawBitmap(0, 0, init_screen, 128, 64, 1);
 80044d4:	2100      	movs	r1, #0
 80044d6:	9401      	str	r4, [sp, #4]
 80044d8:	4608      	mov	r0, r1
 80044da:	9500      	str	r5, [sp, #0]
 80044dc:	2380      	movs	r3, #128	; 0x80
 80044de:	4a23      	ldr	r2, [pc, #140]	; (800456c <oledPrintInitScreen+0xb0>)
 80044e0:	f000 fa96 	bl	8004a10 <SSD1306_DrawBitmap>
	SSD1306_DrawRectangle(0, 0, 128, 64, 1);
 80044e4:	2100      	movs	r1, #0
 80044e6:	462b      	mov	r3, r5
 80044e8:	2280      	movs	r2, #128	; 0x80
 80044ea:	4608      	mov	r0, r1
 80044ec:	9400      	str	r4, [sp, #0]
 80044ee:	f000 fbc7 	bl	8004c80 <SSD1306_DrawRectangle>

	SSD1306_UpdateScreen(); // update screen
 80044f2:	f000 fc65 	bl	8004dc0 <SSD1306_UpdateScreen>
	HAL_Delay(2e3);
 80044f6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80044fa:	f7fc f961 	bl	80007c0 <HAL_Delay>

	SSD1306_Clear();
 80044fe:	f000 fc81 	bl	8004e04 <SSD1306_Clear>
	SSD1306_GotoXY(10, 10); // goto 10, 10
 8004502:	210a      	movs	r1, #10
	SSD1306_Puts("RC_controler ", &Font_7x10, 1); // print Hello
 8004504:	4e1a      	ldr	r6, [pc, #104]	; (8004570 <oledPrintInitScreen+0xb4>)
	SSD1306_GotoXY(10, 10); // goto 10, 10
 8004506:	4608      	mov	r0, r1
 8004508:	f000 fac2 	bl	8004a90 <SSD1306_GotoXY>
	SSD1306_Puts("RC_controler ", &Font_7x10, 1); // print Hello
 800450c:	4622      	mov	r2, r4
 800450e:	4631      	mov	r1, r6
 8004510:	4818      	ldr	r0, [pc, #96]	; (8004574 <oledPrintInitScreen+0xb8>)
 8004512:	f000 fb0f 	bl	8004b34 <SSD1306_Puts>
	SSD1306_GotoXY(10, 22);
 8004516:	2116      	movs	r1, #22
 8004518:	200a      	movs	r0, #10
 800451a:	f000 fab9 	bl	8004a90 <SSD1306_GotoXY>
	SSD1306_Puts("by D.Wawerek", &Font_7x10, 1);
 800451e:	4622      	mov	r2, r4
 8004520:	4631      	mov	r1, r6
 8004522:	4815      	ldr	r0, [pc, #84]	; (8004578 <oledPrintInitScreen+0xbc>)
 8004524:	f000 fb06 	bl	8004b34 <SSD1306_Puts>
	SSD1306_GotoXY(10, 34);
 8004528:	2122      	movs	r1, #34	; 0x22
 800452a:	200a      	movs	r0, #10
 800452c:	f000 fab0 	bl	8004a90 <SSD1306_GotoXY>
	SSD1306_Puts(buffor_string, &Font_7x10, 1);
 8004530:	4622      	mov	r2, r4
 8004532:	4631      	mov	r1, r6
 8004534:	a803      	add	r0, sp, #12
 8004536:	f000 fafd 	bl	8004b34 <SSD1306_Puts>

	SSD1306_DrawRectangle(0, 0, 128, 64, 1); // nice border of a OLED
 800453a:	2100      	movs	r1, #0
 800453c:	462b      	mov	r3, r5
 800453e:	4608      	mov	r0, r1
 8004540:	2280      	movs	r2, #128	; 0x80
 8004542:	9400      	str	r4, [sp, #0]
 8004544:	f000 fb9c 	bl	8004c80 <SSD1306_DrawRectangle>
	SSD1306_UpdateScreen(); // update screen
 8004548:	f000 fc3a 	bl	8004dc0 <SSD1306_UpdateScreen>
	HAL_Delay(1e3);
 800454c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004550:	f7fc f936 	bl	80007c0 <HAL_Delay>
	SSD1306_Clear();
 8004554:	f000 fc56 	bl	8004e04 <SSD1306_Clear>
	SSD1306_UpdateScreen();
 8004558:	f000 fc32 	bl	8004dc0 <SSD1306_UpdateScreen>

}
 800455c:	b00a      	add	sp, #40	; 0x28
 800455e:	bd70      	pop	{r4, r5, r6, pc}
 8004560:	08007829 	.word	0x08007829
 8004564:	08007835 	.word	0x08007835
 8004568:	08007839 	.word	0x08007839
 800456c:	080073ca 	.word	0x080073ca
 8004570:	20000008 	.word	0x20000008
 8004574:	08007840 	.word	0x08007840
 8004578:	0800784e 	.word	0x0800784e

0800457c <oledDrawValueBars>:

void oledDrawValueBars(uint16_t value1, uint16_t value2, uint16_t value3,
		uint16_t value4, uint8_t start_number) {
 800457c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004580:	4604      	mov	r4, r0
	// konwersja na wartosci z zakresu od 0 do 100;
	uint8_t divider = 10;

	uint8_t value1_u8 = (value1 - 1000) / divider;
 8004582:	f04f 080a 	mov.w	r8, #10
		uint16_t value4, uint8_t start_number) {
 8004586:	b087      	sub	sp, #28
 8004588:	f89d 5040 	ldrb.w	r5, [sp, #64]	; 0x40
//	sprintf(buffor_string, "%1d", start_number);
	//Draws 4 bars representing given values on screen. There is no clear function to avoid screen flushing(???)
	// As for now position of bars is chosed exprerimetnaly
	//1. BAR
	SSD1306_GotoXY(3, 5); // goto 10, 10
	sprintf(buffor_string, "%1d: ", start_number++);
 800458c:	f8df a0f8 	ldr.w	sl, [pc, #248]	; 8004688 <oledDrawValueBars+0x10c>
	SSD1306_Fill(0);
 8004590:	2000      	movs	r0, #0
		uint16_t value4, uint8_t start_number) {
 8004592:	461e      	mov	r6, r3
 8004594:	4617      	mov	r7, r2
	SSD1306_Puts(buffor_string, &Font_7x10, 1);
 8004596:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 800468c <oledDrawValueBars+0x110>
		uint16_t value4, uint8_t start_number) {
 800459a:	468b      	mov	fp, r1
	SSD1306_Fill(0);
 800459c:	f000 fa08 	bl	80049b0 <SSD1306_Fill>
	SSD1306_GotoXY(3, 5); // goto 10, 10
 80045a0:	2105      	movs	r1, #5
 80045a2:	2003      	movs	r0, #3
 80045a4:	f000 fa74 	bl	8004a90 <SSD1306_GotoXY>
	sprintf(buffor_string, "%1d: ", start_number++);
 80045a8:	462a      	mov	r2, r5
 80045aa:	4651      	mov	r1, sl
 80045ac:	a802      	add	r0, sp, #8
 80045ae:	f001 f829 	bl	8005604 <siprintf>
	SSD1306_Puts(buffor_string, &Font_7x10, 1);
 80045b2:	4649      	mov	r1, r9
 80045b4:	2201      	movs	r2, #1
 80045b6:	a802      	add	r0, sp, #8
 80045b8:	f000 fabc 	bl	8004b34 <SSD1306_Puts>
	uint8_t value1_u8 = (value1 - 1000) / divider;
 80045bc:	f5a4 727a 	sub.w	r2, r4, #1000	; 0x3e8
 80045c0:	fb92 f2f8 	sdiv	r2, r2, r8
	SSD1306_DrawFilledRectangle(20, 5, value1_u8, 8, 1); // draw rectangle and complemnetray one
 80045c4:	2401      	movs	r4, #1
 80045c6:	2308      	movs	r3, #8
 80045c8:	b2d2      	uxtb	r2, r2
 80045ca:	9400      	str	r4, [sp, #0]
 80045cc:	2105      	movs	r1, #5
 80045ce:	2014      	movs	r0, #20
 80045d0:	f000 fb97 	bl	8004d02 <SSD1306_DrawFilledRectangle>

	//2. BAR
	SSD1306_GotoXY(3, 20); // goto 10, 10
 80045d4:	2114      	movs	r1, #20
 80045d6:	2003      	movs	r0, #3
 80045d8:	f000 fa5a 	bl	8004a90 <SSD1306_GotoXY>
	sprintf(buffor_string, "%1d: ", start_number++);
 80045dc:	192a      	adds	r2, r5, r4
	sprintf(buffor_string, "%1d: ", start_number++);
 80045de:	4651      	mov	r1, sl
 80045e0:	b2d2      	uxtb	r2, r2
 80045e2:	a802      	add	r0, sp, #8
 80045e4:	f001 f80e 	bl	8005604 <siprintf>
	SSD1306_Puts(buffor_string, &Font_7x10, 1);
 80045e8:	4622      	mov	r2, r4
 80045ea:	4649      	mov	r1, r9
 80045ec:	a802      	add	r0, sp, #8
 80045ee:	f000 faa1 	bl	8004b34 <SSD1306_Puts>
	uint8_t value2_u8 = (value2 - 1000) / divider;
 80045f2:	f5ab 727a 	sub.w	r2, fp, #1000	; 0x3e8
	SSD1306_DrawFilledRectangle(20, 20, value2_u8, 8, 1);
 80045f6:	2114      	movs	r1, #20
	uint8_t value2_u8 = (value2 - 1000) / divider;
 80045f8:	fb92 f2f8 	sdiv	r2, r2, r8
	SSD1306_DrawFilledRectangle(20, 20, value2_u8, 8, 1);
 80045fc:	2308      	movs	r3, #8
 80045fe:	b2d2      	uxtb	r2, r2
 8004600:	4608      	mov	r0, r1
 8004602:	9400      	str	r4, [sp, #0]
 8004604:	f000 fb7d 	bl	8004d02 <SSD1306_DrawFilledRectangle>

	//3. BAR
	SSD1306_GotoXY(3, 34); // goto 10, 10
 8004608:	2122      	movs	r1, #34	; 0x22
 800460a:	2003      	movs	r0, #3
 800460c:	f000 fa40 	bl	8004a90 <SSD1306_GotoXY>
	sprintf(buffor_string, "%1d: ", start_number++);
 8004610:	1caa      	adds	r2, r5, #2
	sprintf(buffor_string, "%1d: ", start_number++);
 8004612:	4651      	mov	r1, sl
 8004614:	b2d2      	uxtb	r2, r2
 8004616:	a802      	add	r0, sp, #8
 8004618:	f000 fff4 	bl	8005604 <siprintf>
	SSD1306_Puts(buffor_string, &Font_7x10, 1);
 800461c:	4622      	mov	r2, r4
 800461e:	4649      	mov	r1, r9
 8004620:	a802      	add	r0, sp, #8
 8004622:	f000 fa87 	bl	8004b34 <SSD1306_Puts>
	uint8_t value3_u8 = (value3 - 1000) / divider;
 8004626:	f5a7 727a 	sub.w	r2, r7, #1000	; 0x3e8
 800462a:	fb92 f2f8 	sdiv	r2, r2, r8
	SSD1306_DrawFilledRectangle(20, 34, value3_u8, 8, 1);
 800462e:	2308      	movs	r3, #8
 8004630:	b2d2      	uxtb	r2, r2
 8004632:	9400      	str	r4, [sp, #0]
 8004634:	2122      	movs	r1, #34	; 0x22
 8004636:	2014      	movs	r0, #20
 8004638:	f000 fb63 	bl	8004d02 <SSD1306_DrawFilledRectangle>

	//4. BAR
	SSD1306_GotoXY(3, 48); // goto 10, 10
 800463c:	2130      	movs	r1, #48	; 0x30
 800463e:	2003      	movs	r0, #3
 8004640:	f000 fa26 	bl	8004a90 <SSD1306_GotoXY>
	sprintf(buffor_string, "%1d: ", start_number++);
 8004644:	1cea      	adds	r2, r5, #3
	sprintf(buffor_string, "%1d: ", start_number++);
 8004646:	4651      	mov	r1, sl
 8004648:	b2d2      	uxtb	r2, r2
 800464a:	a802      	add	r0, sp, #8
 800464c:	f000 ffda 	bl	8005604 <siprintf>
	SSD1306_Puts(buffor_string, &Font_7x10, 1);
 8004650:	4622      	mov	r2, r4
 8004652:	4649      	mov	r1, r9
 8004654:	a802      	add	r0, sp, #8
 8004656:	f000 fa6d 	bl	8004b34 <SSD1306_Puts>
	uint8_t value4_u8 = (value4 - 1000) / divider;
 800465a:	f5a6 727a 	sub.w	r2, r6, #1000	; 0x3e8
 800465e:	fb92 f2f8 	sdiv	r2, r2, r8
	SSD1306_DrawFilledRectangle(20, 48, value4_u8, 8, 1);
 8004662:	9400      	str	r4, [sp, #0]
 8004664:	2308      	movs	r3, #8
 8004666:	b2d2      	uxtb	r2, r2
 8004668:	2130      	movs	r1, #48	; 0x30
 800466a:	2014      	movs	r0, #20
 800466c:	f000 fb49 	bl	8004d02 <SSD1306_DrawFilledRectangle>

	SSD1306_DrawRectangle(0, 0, 128, 64, 1); // nice border of a OLED
 8004670:	2100      	movs	r1, #0
 8004672:	2340      	movs	r3, #64	; 0x40
 8004674:	2280      	movs	r2, #128	; 0x80
 8004676:	4608      	mov	r0, r1
 8004678:	9400      	str	r4, [sp, #0]
 800467a:	f000 fb01 	bl	8004c80 <SSD1306_DrawRectangle>
	SSD1306_UpdateScreen(); // update screen
 800467e:	f000 fb9f 	bl	8004dc0 <SSD1306_UpdateScreen>

}
 8004682:	b007      	add	sp, #28
 8004684:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004688:	080077ca 	.word	0x080077ca
 800468c:	20000008 	.word	0x20000008

08004690 <oledPrintEncValues>:

void oledPrintEncValues(uint8_t rotation_value, uint8_t push_value) {
 8004690:	b530      	push	{r4, r5, lr}
 8004692:	4604      	mov	r4, r0
 8004694:	b08b      	sub	sp, #44	; 0x2c
	//Clear function
//	SSD1306_Clear();
	SSD1306_Fill(0);
 8004696:	2000      	movs	r0, #0
void oledPrintEncValues(uint8_t rotation_value, uint8_t push_value) {
 8004698:	460d      	mov	r5, r1
	SSD1306_Fill(0);
 800469a:	f000 f989 	bl	80049b0 <SSD1306_Fill>
	char buffor_string[25];

	sprintf(buffor_string, "ROTATION: %2d", rotation_value);
 800469e:	4622      	mov	r2, r4
 80046a0:	4913      	ldr	r1, [pc, #76]	; (80046f0 <oledPrintEncValues+0x60>)
 80046a2:	a803      	add	r0, sp, #12
 80046a4:	f000 ffae 	bl	8005604 <siprintf>
	SSD1306_GotoXY(10, 10); // goto 10, 10
 80046a8:	210a      	movs	r1, #10
	SSD1306_Puts(buffor_string, &Font_7x10, 1);
 80046aa:	4c12      	ldr	r4, [pc, #72]	; (80046f4 <oledPrintEncValues+0x64>)
	SSD1306_GotoXY(10, 10); // goto 10, 10
 80046ac:	4608      	mov	r0, r1
 80046ae:	f000 f9ef 	bl	8004a90 <SSD1306_GotoXY>
	SSD1306_Puts(buffor_string, &Font_7x10, 1);
 80046b2:	4621      	mov	r1, r4
 80046b4:	2201      	movs	r2, #1
 80046b6:	a803      	add	r0, sp, #12
 80046b8:	f000 fa3c 	bl	8004b34 <SSD1306_Puts>

	sprintf(buffor_string, "PUSHES : %2d", push_value);
 80046bc:	462a      	mov	r2, r5
 80046be:	490e      	ldr	r1, [pc, #56]	; (80046f8 <oledPrintEncValues+0x68>)
 80046c0:	a803      	add	r0, sp, #12
 80046c2:	f000 ff9f 	bl	8005604 <siprintf>
	SSD1306_GotoXY(10, 22);
 80046c6:	2116      	movs	r1, #22
 80046c8:	200a      	movs	r0, #10
 80046ca:	f000 f9e1 	bl	8004a90 <SSD1306_GotoXY>
	SSD1306_Puts(buffor_string, &Font_7x10, 1);
 80046ce:	4621      	mov	r1, r4
 80046d0:	2201      	movs	r2, #1
 80046d2:	a803      	add	r0, sp, #12
 80046d4:	f000 fa2e 	bl	8004b34 <SSD1306_Puts>

	SSD1306_DrawRectangle(0, 0, 128, 64, 1); // nice border of a OLED
 80046d8:	2100      	movs	r1, #0
 80046da:	2301      	movs	r3, #1
 80046dc:	2280      	movs	r2, #128	; 0x80
 80046de:	9300      	str	r3, [sp, #0]
 80046e0:	4608      	mov	r0, r1
 80046e2:	2340      	movs	r3, #64	; 0x40
 80046e4:	f000 facc 	bl	8004c80 <SSD1306_DrawRectangle>
	SSD1306_UpdateScreen(); // update screen
 80046e8:	f000 fb6a 	bl	8004dc0 <SSD1306_UpdateScreen>
}
 80046ec:	b00b      	add	sp, #44	; 0x2c
 80046ee:	bd30      	pop	{r4, r5, pc}
 80046f0:	0800780e 	.word	0x0800780e
 80046f4:	20000008 	.word	0x20000008
 80046f8:	0800781c 	.word	0x0800781c

080046fc <oledPrintMainScreen>:

void oledPrintMainScreen(RC_Controler_Status *rc_status) {
 80046fc:	b530      	push	{r4, r5, lr}
 80046fe:	4605      	mov	r5, r0
 8004700:	b08b      	sub	sp, #44	; 0x2c
	//Clear function

	SSD1306_Fill(0);
 8004702:	2000      	movs	r0, #0
 8004704:	f000 f954 	bl	80049b0 <SSD1306_Fill>
	char buffor_string[25];
	//1. Line of text
	sprintf(buffor_string, "FRM_SENT: %5ld", rc_status->frames_sent);
 8004708:	682a      	ldr	r2, [r5, #0]
 800470a:	4922      	ldr	r1, [pc, #136]	; (8004794 <oledPrintMainScreen+0x98>)
 800470c:	a803      	add	r0, sp, #12
 800470e:	f000 ff79 	bl	8005604 <siprintf>
	SSD1306_GotoXY(10, 10); // goto 10, 10
 8004712:	210a      	movs	r1, #10
	SSD1306_Puts(buffor_string, &Font_7x10, 1);
 8004714:	4c20      	ldr	r4, [pc, #128]	; (8004798 <oledPrintMainScreen+0x9c>)
	SSD1306_GotoXY(10, 10); // goto 10, 10
 8004716:	4608      	mov	r0, r1
 8004718:	f000 f9ba 	bl	8004a90 <SSD1306_GotoXY>
	SSD1306_Puts(buffor_string, &Font_7x10, 1);
 800471c:	4621      	mov	r1, r4
 800471e:	2201      	movs	r2, #1
 8004720:	a803      	add	r0, sp, #12
 8004722:	f000 fa07 	bl	8004b34 <SSD1306_Puts>
	//2. Line of text
	sprintf(buffor_string, "IMU_STAT: %2d", rc_status->mpu_init_succes);
 8004726:	7b2a      	ldrb	r2, [r5, #12]
 8004728:	491c      	ldr	r1, [pc, #112]	; (800479c <oledPrintMainScreen+0xa0>)
 800472a:	a803      	add	r0, sp, #12
 800472c:	f000 ff6a 	bl	8005604 <siprintf>
	SSD1306_GotoXY(10, 22);
 8004730:	2116      	movs	r1, #22
 8004732:	200a      	movs	r0, #10
 8004734:	f000 f9ac 	bl	8004a90 <SSD1306_GotoXY>
	SSD1306_Puts(buffor_string, &Font_7x10, 1);
 8004738:	4621      	mov	r1, r4
 800473a:	2201      	movs	r2, #1
 800473c:	a803      	add	r0, sp, #12
 800473e:	f000 f9f9 	bl	8004b34 <SSD1306_Puts>
	//3. Line of text
	sprintf(buffor_string, "RCV_STAT: %2d", rc_status->rc_recvier_found);
 8004742:	7b6a      	ldrb	r2, [r5, #13]
 8004744:	4916      	ldr	r1, [pc, #88]	; (80047a0 <oledPrintMainScreen+0xa4>)
 8004746:	a803      	add	r0, sp, #12
 8004748:	f000 ff5c 	bl	8005604 <siprintf>
	SSD1306_GotoXY(10, 34);
 800474c:	2122      	movs	r1, #34	; 0x22
 800474e:	200a      	movs	r0, #10
 8004750:	f000 f99e 	bl	8004a90 <SSD1306_GotoXY>
	SSD1306_Puts(buffor_string, &Font_7x10, 1);
 8004754:	4621      	mov	r1, r4
 8004756:	2201      	movs	r2, #1
 8004758:	a803      	add	r0, sp, #12
 800475a:	f000 f9eb 	bl	8004b34 <SSD1306_Puts>

	//4. Line of text

	sprintf(buffor_string, "ACK_RECV: %2d", rc_status->acks_recived);
 800475e:	68aa      	ldr	r2, [r5, #8]
 8004760:	4910      	ldr	r1, [pc, #64]	; (80047a4 <oledPrintMainScreen+0xa8>)
 8004762:	a803      	add	r0, sp, #12
 8004764:	f000 ff4e 	bl	8005604 <siprintf>
	SSD1306_GotoXY(10, 46);
 8004768:	212e      	movs	r1, #46	; 0x2e
 800476a:	200a      	movs	r0, #10
 800476c:	f000 f990 	bl	8004a90 <SSD1306_GotoXY>
	SSD1306_Puts(buffor_string, &Font_7x10, 1);
 8004770:	4621      	mov	r1, r4
 8004772:	2201      	movs	r2, #1
 8004774:	a803      	add	r0, sp, #12
 8004776:	f000 f9dd 	bl	8004b34 <SSD1306_Puts>

	SSD1306_DrawRectangle(0, 0, 128, 64, 1); // nice border of a OLED
 800477a:	2100      	movs	r1, #0
 800477c:	2301      	movs	r3, #1
 800477e:	2280      	movs	r2, #128	; 0x80
 8004780:	9300      	str	r3, [sp, #0]
 8004782:	4608      	mov	r0, r1
 8004784:	2340      	movs	r3, #64	; 0x40
 8004786:	f000 fa7b 	bl	8004c80 <SSD1306_DrawRectangle>
	SSD1306_UpdateScreen(); // update screen
 800478a:	f000 fb19 	bl	8004dc0 <SSD1306_UpdateScreen>
}
 800478e:	b00b      	add	sp, #44	; 0x2c
 8004790:	bd30      	pop	{r4, r5, pc}
 8004792:	bf00      	nop
 8004794:	0800785b 	.word	0x0800785b
 8004798:	20000008 	.word	0x20000008
 800479c:	0800786a 	.word	0x0800786a
 80047a0:	08007878 	.word	0x08007878
 80047a4:	08007886 	.word	0x08007886

080047a8 <oledPrintCalibMenu>:

	SSD1306_DrawRectangle(0, 0, 128, 64, 1); // nice border of a OLED
	SSD1306_UpdateScreen(); // update screen
}

void oledPrintCalibMenu(uint8_t active_channel_number, uint8_t row) {
 80047a8:	b570      	push	{r4, r5, r6, lr}
 80047aa:	4606      	mov	r6, r0
 80047ac:	b08a      	sub	sp, #40	; 0x28

	SSD1306_Fill(0);
 80047ae:	2000      	movs	r0, #0
void oledPrintCalibMenu(uint8_t active_channel_number, uint8_t row) {
 80047b0:	460d      	mov	r5, r1
	SSD1306_Fill(0);
 80047b2:	f000 f8fd 	bl	80049b0 <SSD1306_Fill>
	char buffor_string[25];

	sprintf(buffor_string, "CALIBRATION MENU");
 80047b6:	492b      	ldr	r1, [pc, #172]	; (8004864 <oledPrintCalibMenu+0xbc>)
 80047b8:	a803      	add	r0, sp, #12
 80047ba:	f000 ff47 	bl	800564c <strcpy>
	SSD1306_GotoXY(10, 10); // goto 10, 10
 80047be:	210a      	movs	r1, #10
	SSD1306_Puts(buffor_string, &Font_7x10, 1);
 80047c0:	4c29      	ldr	r4, [pc, #164]	; (8004868 <oledPrintCalibMenu+0xc0>)
	SSD1306_GotoXY(10, 10); // goto 10, 10
 80047c2:	4608      	mov	r0, r1
 80047c4:	f000 f964 	bl	8004a90 <SSD1306_GotoXY>
	SSD1306_Puts(buffor_string, &Font_7x10, 1);
 80047c8:	4621      	mov	r1, r4
 80047ca:	2201      	movs	r2, #1
 80047cc:	a803      	add	r0, sp, #12
 80047ce:	f000 f9b1 	bl	8004b34 <SSD1306_Puts>
	//2. Line of text
	sprintf(buffor_string, "SET CHHN:  %2d", active_channel_number);
 80047d2:	4632      	mov	r2, r6
 80047d4:	4925      	ldr	r1, [pc, #148]	; (800486c <oledPrintCalibMenu+0xc4>)
 80047d6:	a803      	add	r0, sp, #12
 80047d8:	f000 ff14 	bl	8005604 <siprintf>
	SSD1306_GotoXY(10, 22);
 80047dc:	2116      	movs	r1, #22
 80047de:	200a      	movs	r0, #10
 80047e0:	f000 f956 	bl	8004a90 <SSD1306_GotoXY>
	SSD1306_Puts(buffor_string, &Font_7x10, 1);
 80047e4:	4621      	mov	r1, r4
 80047e6:	2201      	movs	r2, #1
 80047e8:	a803      	add	r0, sp, #12
 80047ea:	f000 f9a3 	bl	8004b34 <SSD1306_Puts>
	//3. Line of text
	sprintf(buffor_string, "GET CHHN:  %2d ", active_channel_number);
 80047ee:	4632      	mov	r2, r6
 80047f0:	491f      	ldr	r1, [pc, #124]	; (8004870 <oledPrintCalibMenu+0xc8>)
 80047f2:	a803      	add	r0, sp, #12
 80047f4:	f000 ff06 	bl	8005604 <siprintf>
	SSD1306_GotoXY(10, 34);
	SSD1306_Puts(buffor_string, &Font_7x10, 1);

	sprintf(buffor_string, "IMU CALIB: ");
 80047f8:	4e1e      	ldr	r6, [pc, #120]	; (8004874 <oledPrintCalibMenu+0xcc>)
	SSD1306_GotoXY(10, 34);
 80047fa:	2122      	movs	r1, #34	; 0x22
 80047fc:	200a      	movs	r0, #10
 80047fe:	f000 f947 	bl	8004a90 <SSD1306_GotoXY>
	SSD1306_Puts(buffor_string, &Font_7x10, 1);
 8004802:	2201      	movs	r2, #1
 8004804:	4621      	mov	r1, r4
 8004806:	a803      	add	r0, sp, #12
 8004808:	f000 f994 	bl	8004b34 <SSD1306_Puts>
	sprintf(buffor_string, "IMU CALIB: ");
 800480c:	4631      	mov	r1, r6
 800480e:	a803      	add	r0, sp, #12
 8004810:	f000 ff1c 	bl	800564c <strcpy>
	SSD1306_GotoXY(10, 46);
 8004814:	212e      	movs	r1, #46	; 0x2e
 8004816:	200a      	movs	r0, #10
 8004818:	f000 f93a 	bl	8004a90 <SSD1306_GotoXY>
	SSD1306_Puts(buffor_string, &Font_7x10, 1);
 800481c:	2201      	movs	r2, #1
 800481e:	4621      	mov	r1, r4
 8004820:	a803      	add	r0, sp, #12
 8004822:	f000 f987 	bl	8004b34 <SSD1306_Puts>

	sprintf(buffor_string, "IMU CALIB: ");
 8004826:	4631      	mov	r1, r6
 8004828:	a803      	add	r0, sp, #12
 800482a:	f000 ff0f 	bl	800564c <strcpy>

	sprintf(buffor_string, "*");
	SSD1306_GotoXY(85, row * 12);
 800482e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
	sprintf(buffor_string, "*");
 8004832:	4911      	ldr	r1, [pc, #68]	; (8004878 <oledPrintCalibMenu+0xd0>)
 8004834:	a803      	add	r0, sp, #12
 8004836:	f000 ff09 	bl	800564c <strcpy>
	SSD1306_GotoXY(85, row * 12);
 800483a:	00a9      	lsls	r1, r5, #2
 800483c:	2055      	movs	r0, #85	; 0x55
 800483e:	f000 f927 	bl	8004a90 <SSD1306_GotoXY>
	SSD1306_Puts(buffor_string, &Font_7x10, 1);
 8004842:	4621      	mov	r1, r4
 8004844:	2201      	movs	r2, #1
 8004846:	a803      	add	r0, sp, #12
 8004848:	f000 f974 	bl	8004b34 <SSD1306_Puts>

	SSD1306_DrawRectangle(0, 0, 128, 64, 1); // nice border of a OLED
 800484c:	2100      	movs	r1, #0
 800484e:	2301      	movs	r3, #1
 8004850:	2280      	movs	r2, #128	; 0x80
 8004852:	9300      	str	r3, [sp, #0]
 8004854:	4608      	mov	r0, r1
 8004856:	2340      	movs	r3, #64	; 0x40
 8004858:	f000 fa12 	bl	8004c80 <SSD1306_DrawRectangle>
	SSD1306_UpdateScreen(); // update screen
 800485c:	f000 fab0 	bl	8004dc0 <SSD1306_UpdateScreen>

}
 8004860:	b00a      	add	sp, #40	; 0x28
 8004862:	bd70      	pop	{r4, r5, r6, pc}
 8004864:	080077d0 	.word	0x080077d0
 8004868:	20000008 	.word	0x20000008
 800486c:	080077e1 	.word	0x080077e1
 8004870:	080077f0 	.word	0x080077f0
 8004874:	08007800 	.word	0x08007800
 8004878:	0800780c 	.word	0x0800780c

0800487c <map_values_sbus>:

	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;

}
uint16_t map_values_sbus(uint16_t x, uint16_t in_min, uint16_t in_max) {
	uint16_t temp_value = (x - in_min) * (2000 - 1000) / (in_max - in_min)
 800487c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004880:	1a40      	subs	r0, r0, r1
 8004882:	4358      	muls	r0, r3
 8004884:	1a52      	subs	r2, r2, r1
 8004886:	fb90 f0f2 	sdiv	r0, r0, r2
 800488a:	4418      	add	r0, r3
 800488c:	b280      	uxth	r0, r0
 800488e:	4298      	cmp	r0, r3
 8004890:	bf38      	it	cc
 8004892:	4618      	movcc	r0, r3
	if (temp_value < 1000)
		temp_value = 1000;

	return temp_value;

}
 8004894:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 8004898:	bf28      	it	cs
 800489a:	f44f 60fa 	movcs.w	r0, #2000	; 0x7d0
 800489e:	4770      	bx	lr

080048a0 <update_rc_mode>:
	return 3000 - value;
}

void update_rc_mode(RC_Mode mode) {

	if (mode) { // checking if mode >0
 80048a0:	b110      	cbz	r0, 80048a8 <update_rc_mode+0x8>
		rc_channels.rc_mode = mode;
 80048a2:	4b02      	ldr	r3, [pc, #8]	; (80048ac <update_rc_mode+0xc>)
 80048a4:	f883 0058 	strb.w	r0, [r3, #88]	; 0x58
 80048a8:	4770      	bx	lr
 80048aa:	bf00      	nop
 80048ac:	20000898 	.word	0x20000898

080048b0 <update_rc_channels>:
	}
}

void update_rc_channels(uint16_t* adc_values) {
 80048b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

	if (rc_channels.rc_mode == RC_SIMPLE_JOYSTICK) {
 80048b4:	4c3a      	ldr	r4, [pc, #232]	; (80049a0 <update_rc_channels+0xf0>)
void update_rc_channels(uint16_t* adc_values) {
 80048b6:	4605      	mov	r5, r0
	if (rc_channels.rc_mode == RC_SIMPLE_JOYSTICK) {
 80048b8:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 80048bc:	2b01      	cmp	r3, #1
 80048be:	d123      	bne.n	8004908 <update_rc_channels+0x58>
		rc_channels.scaled_values[0] = reverse_channel(
 80048c0:	8980      	ldrh	r0, [r0, #12]
 80048c2:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 80048c6:	f8b4 1044 	ldrh.w	r1, [r4, #68]	; 0x44
 80048ca:	f7ff ffd7 	bl	800487c <map_values_sbus>
	return 3000 - value;
 80048ce:	f640 36b8 	movw	r6, #3000	; 0xbb8
 80048d2:	1a30      	subs	r0, r6, r0
		rc_channels.scaled_values[0] = reverse_channel(
 80048d4:	8020      	strh	r0, [r4, #0]
				map_values_sbus(adc_values[6], rc_channels.calibration_values[6].min, rc_channels.calibration_values[6].max)); // ROLL
		rc_channels.scaled_values[1] =
				(map_values_sbus(adc_values[5], rc_channels.calibration_values[5].min, rc_channels.calibration_values[5].max)); // PITCH
 80048d6:	8968      	ldrh	r0, [r5, #10]
 80048d8:	f8b4 2042 	ldrh.w	r2, [r4, #66]	; 0x42
 80048dc:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 80048e0:	f7ff ffcc 	bl	800487c <map_values_sbus>
		rc_channels.scaled_values[1] =
 80048e4:	8060      	strh	r0, [r4, #2]
		rc_channels.scaled_values[2] = reverse_channel(
 80048e6:	89e8      	ldrh	r0, [r5, #14]
 80048e8:	f8b4 204a 	ldrh.w	r2, [r4, #74]	; 0x4a
 80048ec:	f8b4 1048 	ldrh.w	r1, [r4, #72]	; 0x48
 80048f0:	f7ff ffc4 	bl	800487c <map_values_sbus>
	return 3000 - value;
 80048f4:	1a30      	subs	r0, r6, r0
		rc_channels.scaled_values[2] = reverse_channel(
 80048f6:	80a0      	strh	r0, [r4, #4]
				map_values_sbus(adc_values[7], rc_channels.calibration_values[7].min, rc_channels.calibration_values[7].max)); // THROTLE
		rc_channels.scaled_values[3] = map_values_sbus(adc_values[8], rc_channels.calibration_values[8].min, rc_channels.calibration_values[8].max); // YAW
 80048f8:	8a28      	ldrh	r0, [r5, #16]
 80048fa:	f8b4 204e 	ldrh.w	r2, [r4, #78]	; 0x4e
 80048fe:	f8b4 104c 	ldrh.w	r1, [r4, #76]	; 0x4c
 8004902:	f7ff ffbb 	bl	800487c <map_values_sbus>
 8004906:	80e0      	strh	r0, [r4, #6]
		rc_channels.scaled_values[2] = map_values_sbus(adc_values[5], 0, 3200); // THROTLE
		rc_channels.scaled_values[3] = map_values_sbus(adc_values[8], 0, 3200); // YAW

	}

	rc_channels.scaled_values[4] = map_values_sbus(adc_values[0], 0, 3646); // POT1 //VALUES READ FROM MANUAL CALIB
 8004908:	8828      	ldrh	r0, [r5, #0]
 800490a:	f640 623e 	movw	r2, #3646	; 0xe3e
 800490e:	2100      	movs	r1, #0
 8004910:	f7ff ffb4 	bl	800487c <map_values_sbus>
 8004914:	8120      	strh	r0, [r4, #8]
	rc_channels.scaled_values[5] = map_values_sbus(adc_values[1], 0, 3660); // POT2 //VALUES READ FROM MANUAL CALIB
 8004916:	8868      	ldrh	r0, [r5, #2]
 8004918:	f640 624c 	movw	r2, #3660	; 0xe4c
 800491c:	2100      	movs	r1, #0
 800491e:	f7ff ffad 	bl	800487c <map_values_sbus>
 8004922:	8160      	strh	r0, [r4, #10]

	rc_channels.scaled_values[6] = map_values_sbus(adc_values[2], 0, 4000); // SW1
 8004924:	88a8      	ldrh	r0, [r5, #4]
 8004926:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800492a:	2100      	movs	r1, #0
 800492c:	f7ff ffa6 	bl	800487c <map_values_sbus>
 8004930:	81a0      	strh	r0, [r4, #12]
	rc_channels.scaled_values[7] = map_values_sbus(adc_values[3], 0, 4000); // SW2
 8004932:	88e8      	ldrh	r0, [r5, #6]
 8004934:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8004938:	2100      	movs	r1, #0
 800493a:	f7ff ff9f 	bl	800487c <map_values_sbus>
 800493e:	81e0      	strh	r0, [r4, #14]

	rc_channels.scaled_values[8] = map_values_sbus(adc_values[9], 0, 4000); // 	 SW3
 8004940:	8a68      	ldrh	r0, [r5, #18]
 8004942:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8004946:	2100      	movs	r1, #0
 8004948:	f7ff ff98 	bl	800487c <map_values_sbus>
 800494c:	8220      	strh	r0, [r4, #16]
	rc_channels.scaled_values[10] = map_values_sbus(adc_values[10], 0, 4000); // SW4
 800494e:	8aa8      	ldrh	r0, [r5, #20]
 8004950:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8004954:	2100      	movs	r1, #0
 8004956:	f7ff ff91 	bl	800487c <map_values_sbus>
 800495a:	82a0      	strh	r0, [r4, #20]
 800495c:	4c11      	ldr	r4, [pc, #68]	; (80049a4 <update_rc_channels+0xf4>)
// BAT_LEVEL - DO NOT USE AS INPUT

//	rc_channels.scaled_values[8] = map_values_sbus(adc_values[4], 0, 3200);

	for (int i = 0; i < 4; i++) {
		rc_channels.low_pass_values[i] = rc_channels.low_pass_values[i] * 0.95f
 800495e:	f8df 9048 	ldr.w	r9, [pc, #72]	; 80049a8 <update_rc_channels+0xf8>
				+ 0.05f * rc_channels.scaled_values[i];
 8004962:	f8df 8048 	ldr.w	r8, [pc, #72]	; 80049ac <update_rc_channels+0xfc>
 8004966:	f104 0608 	add.w	r6, r4, #8
		rc_channels.low_pass_values[i] = rc_channels.low_pass_values[i] * 0.95f
 800496a:	8860      	ldrh	r0, [r4, #2]
 800496c:	f7fb fd1c 	bl	80003a8 <__aeabi_i2f>
 8004970:	4649      	mov	r1, r9
 8004972:	f7fb fd6d 	bl	8000450 <__aeabi_fmul>
 8004976:	4607      	mov	r7, r0
				+ 0.05f * rc_channels.scaled_values[i];
 8004978:	f834 0c14 	ldrh.w	r0, [r4, #-20]
 800497c:	f7fb fd14 	bl	80003a8 <__aeabi_i2f>
 8004980:	4641      	mov	r1, r8
 8004982:	f7fb fd65 	bl	8000450 <__aeabi_fmul>
 8004986:	4601      	mov	r1, r0
 8004988:	4638      	mov	r0, r7
 800498a:	f7fb fc59 	bl	8000240 <__addsf3>
		rc_channels.low_pass_values[i] = rc_channels.low_pass_values[i] * 0.95f
 800498e:	f7fb feaf 	bl	80006f0 <__aeabi_f2uiz>
 8004992:	f824 0f02 	strh.w	r0, [r4, #2]!
	for (int i = 0; i < 4; i++) {
 8004996:	42a6      	cmp	r6, r4
 8004998:	d1e7      	bne.n	800496a <update_rc_channels+0xba>
	}

}
 800499a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800499e:	bf00      	nop
 80049a0:	20000898 	.word	0x20000898
 80049a4:	200008ac 	.word	0x200008ac
 80049a8:	3f733333 	.word	0x3f733333
 80049ac:	3d4ccccd 	.word	0x3d4ccccd

080049b0 <SSD1306_Fill>:
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80049b0:	2800      	cmp	r0, #0
 80049b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80049b6:	bf14      	ite	ne
 80049b8:	21ff      	movne	r1, #255	; 0xff
 80049ba:	2100      	moveq	r1, #0
 80049bc:	4801      	ldr	r0, [pc, #4]	; (80049c4 <SSD1306_Fill+0x14>)
 80049be:	f000 bd9c 	b.w	80054fa <memset>
 80049c2:	bf00      	nop
 80049c4:	20000154 	.word	0x20000154

080049c8 <SSD1306_DrawPixel>:
}

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
	if (
 80049c8:	287f      	cmp	r0, #127	; 0x7f
void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80049ca:	b510      	push	{r4, lr}
	if (
 80049cc:	d81a      	bhi.n	8004a04 <SSD1306_DrawPixel+0x3c>
		x >= SSD1306_WIDTH ||
 80049ce:	293f      	cmp	r1, #63	; 0x3f
 80049d0:	d818      	bhi.n	8004a04 <SSD1306_DrawPixel+0x3c>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80049d2:	4b0d      	ldr	r3, [pc, #52]	; (8004a08 <SSD1306_DrawPixel+0x40>)
 80049d4:	791b      	ldrb	r3, [r3, #4]
 80049d6:	b113      	cbz	r3, 80049de <SSD1306_DrawPixel+0x16>
		color = (SSD1306_COLOR_t)!color;
 80049d8:	fab2 f282 	clz	r2, r2
 80049dc:	0952      	lsrs	r2, r2, #5
 80049de:	08cc      	lsrs	r4, r1, #3
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80049e0:	2a01      	cmp	r2, #1
 80049e2:	4b0a      	ldr	r3, [pc, #40]	; (8004a0c <SSD1306_DrawPixel+0x44>)
 80049e4:	f001 0107 	and.w	r1, r1, #7
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80049e8:	eb00 10c4 	add.w	r0, r0, r4, lsl #7
	if (color == SSD1306_COLOR_WHITE) {
 80049ec:	d104      	bne.n	80049f8 <SSD1306_DrawPixel+0x30>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80049ee:	408a      	lsls	r2, r1
 80049f0:	5c19      	ldrb	r1, [r3, r0]
 80049f2:	430a      	orrs	r2, r1
 80049f4:	541a      	strb	r2, [r3, r0]
 80049f6:	bd10      	pop	{r4, pc}
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80049f8:	2201      	movs	r2, #1
 80049fa:	408a      	lsls	r2, r1
 80049fc:	5c19      	ldrb	r1, [r3, r0]
 80049fe:	ea21 0102 	bic.w	r1, r1, r2
 8004a02:	5419      	strb	r1, [r3, r0]
 8004a04:	bd10      	pop	{r4, pc}
 8004a06:	bf00      	nop
 8004a08:	2000014e 	.word	0x2000014e
 8004a0c:	20000154 	.word	0x20000154

08004a10 <SSD1306_DrawBitmap>:
{
 8004a10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a14:	b087      	sub	sp, #28
 8004a16:	4698      	mov	r8, r3
 8004a18:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
    for(int16_t j=0; j<h; j++, y++)
 8004a1c:	2500      	movs	r5, #0
{
 8004a1e:	9302      	str	r3, [sp, #8]
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8004a20:	2308      	movs	r3, #8
{
 8004a22:	4693      	mov	fp, r2
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8004a24:	f108 0207 	add.w	r2, r8, #7
 8004a28:	fb92 f2f3 	sdiv	r2, r2, r3
{
 8004a2c:	4682      	mov	sl, r0
 8004a2e:	4689      	mov	r9, r1
    for(int16_t j=0; j<h; j++, y++)
 8004a30:	462e      	mov	r6, r5
    uint8_t byte = 0;
 8004a32:	462c      	mov	r4, r5
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8004a34:	9201      	str	r2, [sp, #4]
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
 8004a36:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 8004a3a:	9204      	str	r2, [sp, #16]
    for(int16_t j=0; j<h; j++, y++)
 8004a3c:	9902      	ldr	r1, [sp, #8]
 8004a3e:	b232      	sxth	r2, r6
 8004a40:	4291      	cmp	r1, r2
 8004a42:	dd22      	ble.n	8004a8a <SSD1306_DrawBitmap+0x7a>
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
 8004a44:	eb06 0209 	add.w	r2, r6, r9
 8004a48:	b292      	uxth	r2, r2
    for(int16_t j=0; j<h; j++, y++)
 8004a4a:	2700      	movs	r7, #0
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
 8004a4c:	9203      	str	r2, [sp, #12]
 8004a4e:	e015      	b.n	8004a7c <SSD1306_DrawBitmap+0x6c>
            if(i & 7)
 8004a50:	b2b8      	uxth	r0, r7
 8004a52:	0741      	lsls	r1, r0, #29
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8004a54:	bf05      	ittet	eq
 8004a56:	fb92 f2f3 	sdiveq	r2, r2, r3
 8004a5a:	eb0b 0105 	addeq.w	r1, fp, r5
               byte <<= 1;
 8004a5e:	0064      	lslne	r4, r4, #1
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8004a60:	5c8c      	ldrbeq	r4, [r1, r2]
               byte <<= 1;
 8004a62:	bf18      	it	ne
 8004a64:	b2e4      	uxtbne	r4, r4
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
 8004a66:	0622      	lsls	r2, r4, #24
 8004a68:	d507      	bpl.n	8004a7a <SSD1306_DrawBitmap+0x6a>
 8004a6a:	4450      	add	r0, sl
 8004a6c:	9a04      	ldr	r2, [sp, #16]
 8004a6e:	9903      	ldr	r1, [sp, #12]
 8004a70:	b280      	uxth	r0, r0
 8004a72:	9305      	str	r3, [sp, #20]
 8004a74:	f7ff ffa8 	bl	80049c8 <SSD1306_DrawPixel>
 8004a78:	9b05      	ldr	r3, [sp, #20]
 8004a7a:	3701      	adds	r7, #1
 8004a7c:	b23a      	sxth	r2, r7
        for(int16_t i=0; i<w; i++)
 8004a7e:	4542      	cmp	r2, r8
 8004a80:	dbe6      	blt.n	8004a50 <SSD1306_DrawBitmap+0x40>
 8004a82:	9a01      	ldr	r2, [sp, #4]
 8004a84:	3601      	adds	r6, #1
 8004a86:	4415      	add	r5, r2
 8004a88:	e7d8      	b.n	8004a3c <SSD1306_DrawBitmap+0x2c>
}
 8004a8a:	b007      	add	sp, #28
 8004a8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004a90 <SSD1306_GotoXY>:
	}
}

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8004a90:	4b01      	ldr	r3, [pc, #4]	; (8004a98 <SSD1306_GotoXY+0x8>)
 8004a92:	8018      	strh	r0, [r3, #0]
	SSD1306.CurrentY = y;
 8004a94:	8059      	strh	r1, [r3, #2]
 8004a96:	4770      	bx	lr
 8004a98:	2000014e 	.word	0x2000014e

08004a9c <SSD1306_Putc>:
}

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8004a9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8004aa0:	4d23      	ldr	r5, [pc, #140]	; (8004b30 <SSD1306_Putc+0x94>)
char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8004aa2:	4693      	mov	fp, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8004aa4:	882e      	ldrh	r6, [r5, #0]
 8004aa6:	780a      	ldrb	r2, [r1, #0]
char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8004aa8:	b085      	sub	sp, #20
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8004aaa:	4432      	add	r2, r6
	if (
 8004aac:	2a7f      	cmp	r2, #127	; 0x7f
char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8004aae:	4682      	mov	sl, r0
 8004ab0:	460c      	mov	r4, r1
	if (
 8004ab2:	dc39      	bgt.n	8004b28 <SSD1306_Putc+0x8c>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8004ab4:	886b      	ldrh	r3, [r5, #2]
 8004ab6:	784a      	ldrb	r2, [r1, #1]
 8004ab8:	9301      	str	r3, [sp, #4]
 8004aba:	441a      	add	r2, r3
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8004abc:	2a3f      	cmp	r2, #63	; 0x3f
 8004abe:	dc33      	bgt.n	8004b28 <SSD1306_Putc+0x8c>
 8004ac0:	2700      	movs	r7, #0
		return 0;
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8004ac2:	f1a0 0320 	sub.w	r3, r0, #32
 8004ac6:	9303      	str	r3, [sp, #12]
	for (i = 0; i < Font->FontHeight; i++) {
 8004ac8:	7862      	ldrb	r2, [r4, #1]
 8004aca:	4297      	cmp	r7, r2
 8004acc:	d306      	bcc.n	8004adc <SSD1306_Putc+0x40>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8004ace:	7822      	ldrb	r2, [r4, #0]
 8004ad0:	4416      	add	r6, r2
 8004ad2:	802e      	strh	r6, [r5, #0]
	
	/* Return character written */
	return ch;
}
 8004ad4:	4650      	mov	r0, sl
 8004ad6:	b005      	add	sp, #20
 8004ad8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		for (j = 0; j < Font->FontWidth; j++) {
 8004adc:	f04f 0800 	mov.w	r8, #0
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8004ae0:	9b03      	ldr	r3, [sp, #12]
 8004ae2:	6861      	ldr	r1, [r4, #4]
 8004ae4:	fb02 7203 	mla	r2, r2, r3, r7
 8004ae8:	f831 3012 	ldrh.w	r3, [r1, r2, lsl #1]
 8004aec:	9302      	str	r3, [sp, #8]
 8004aee:	9b01      	ldr	r3, [sp, #4]
 8004af0:	eb03 0907 	add.w	r9, r3, r7
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8004af4:	fa1f f989 	uxth.w	r9, r9
		for (j = 0; j < Font->FontWidth; j++) {
 8004af8:	7822      	ldrb	r2, [r4, #0]
 8004afa:	4590      	cmp	r8, r2
 8004afc:	d301      	bcc.n	8004b02 <SSD1306_Putc+0x66>
	for (i = 0; i < Font->FontHeight; i++) {
 8004afe:	3701      	adds	r7, #1
 8004b00:	e7e2      	b.n	8004ac8 <SSD1306_Putc+0x2c>
			if ((b << j) & 0x8000) {
 8004b02:	9b02      	ldr	r3, [sp, #8]
 8004b04:	eb06 0008 	add.w	r0, r6, r8
 8004b08:	fa03 f208 	lsl.w	r2, r3, r8
 8004b0c:	f412 4f00 	tst.w	r2, #32768	; 0x8000
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8004b10:	bf0a      	itet	eq
 8004b12:	fabb f28b 	clzeq	r2, fp
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8004b16:	465a      	movne	r2, fp
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8004b18:	0952      	lsreq	r2, r2, #5
 8004b1a:	4649      	mov	r1, r9
 8004b1c:	b280      	uxth	r0, r0
 8004b1e:	f7ff ff53 	bl	80049c8 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8004b22:	f108 0801 	add.w	r8, r8, #1
 8004b26:	e7e7      	b.n	8004af8 <SSD1306_Putc+0x5c>
		return 0;
 8004b28:	f04f 0a00 	mov.w	sl, #0
 8004b2c:	e7d2      	b.n	8004ad4 <SSD1306_Putc+0x38>
 8004b2e:	bf00      	nop
 8004b30:	2000014e 	.word	0x2000014e

08004b34 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8004b34:	b570      	push	{r4, r5, r6, lr}
 8004b36:	460d      	mov	r5, r1
 8004b38:	4616      	mov	r6, r2
 8004b3a:	1e44      	subs	r4, r0, #1
	/* Write characters */
	while (*str) {
 8004b3c:	7863      	ldrb	r3, [r4, #1]
 8004b3e:	b143      	cbz	r3, 8004b52 <SSD1306_Puts+0x1e>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8004b40:	4618      	mov	r0, r3
 8004b42:	4632      	mov	r2, r6
 8004b44:	4629      	mov	r1, r5
 8004b46:	f7ff ffa9 	bl	8004a9c <SSD1306_Putc>
 8004b4a:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8004b4e:	4298      	cmp	r0, r3
 8004b50:	d0f4      	beq.n	8004b3c <SSD1306_Puts+0x8>
		str++;
	}
	
	/* Everything OK, zero should be returned */
	return *str;
}
 8004b52:	4618      	mov	r0, r3
 8004b54:	bd70      	pop	{r4, r5, r6, pc}

08004b56 <SSD1306_DrawLine>:
 

void SSD1306_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, SSD1306_COLOR_t c) {
 8004b56:	287f      	cmp	r0, #127	; 0x7f
 8004b58:	bf28      	it	cs
 8004b5a:	207f      	movcs	r0, #127	; 0x7f
 8004b5c:	2a7f      	cmp	r2, #127	; 0x7f
 8004b5e:	bf28      	it	cs
 8004b60:	227f      	movcs	r2, #127	; 0x7f
 8004b62:	293f      	cmp	r1, #63	; 0x3f
 8004b64:	bf28      	it	cs
 8004b66:	213f      	movcs	r1, #63	; 0x3f
 8004b68:	2b3f      	cmp	r3, #63	; 0x3f
 8004b6a:	bf28      	it	cs
 8004b6c:	233f      	movcs	r3, #63	; 0x3f
 8004b6e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b72:	b085      	sub	sp, #20
 8004b74:	f89d 4038 	ldrb.w	r4, [sp, #56]	; 0x38
	}
	if (y1 >= SSD1306_HEIGHT) {
		y1 = SSD1306_HEIGHT - 1;
	}
	
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 8004b78:	4290      	cmp	r0, r2
void SSD1306_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, SSD1306_COLOR_t c) {
 8004b7a:	9401      	str	r4, [sp, #4]
 8004b7c:	4691      	mov	r9, r2
 8004b7e:	4604      	mov	r4, r0
 8004b80:	460d      	mov	r5, r1
 8004b82:	461e      	mov	r6, r3
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 8004b84:	d211      	bcs.n	8004baa <SSD1306_DrawLine+0x54>
 8004b86:	eba2 0a00 	sub.w	sl, r2, r0
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 8004b8a:	428b      	cmp	r3, r1
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 8004b8c:	fa0f fa8a 	sxth.w	sl, sl
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 8004b90:	d871      	bhi.n	8004c76 <SSD1306_DrawLine+0x120>
	sx = (x0 < x1) ? 1 : -1; 
 8004b92:	454c      	cmp	r4, r9
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 8004b94:	eba5 0706 	sub.w	r7, r5, r6
 8004b98:	b23f      	sxth	r7, r7
	sx = (x0 < x1) ? 1 : -1; 
 8004b9a:	bf2c      	ite	cs
 8004b9c:	f04f 3bff 	movcs.w	fp, #4294967295
 8004ba0:	f04f 0b01 	movcc.w	fp, #1
	sy = (y0 < y1) ? 1 : -1; 
 8004ba4:	f04f 33ff 	mov.w	r3, #4294967295
 8004ba8:	e00a      	b.n	8004bc0 <SSD1306_DrawLine+0x6a>
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 8004baa:	eba0 0a02 	sub.w	sl, r0, r2
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 8004bae:	428b      	cmp	r3, r1
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 8004bb0:	fa0f fa8a 	sxth.w	sl, sl
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 8004bb4:	d9ed      	bls.n	8004b92 <SSD1306_DrawLine+0x3c>
	sx = (x0 < x1) ? 1 : -1; 
 8004bb6:	f04f 3bff 	mov.w	fp, #4294967295
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 8004bba:	1a5f      	subs	r7, r3, r1
 8004bbc:	b23f      	sxth	r7, r7
	sy = (y0 < y1) ? 1 : -1; 
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	f04f 0802 	mov.w	r8, #2
	err = ((dx > dy) ? dx : -dy) / 2; 
 8004bc4:	4557      	cmp	r7, sl
 8004bc6:	bfa5      	ittet	ge
 8004bc8:	fb97 f8f8 	sdivge	r8, r7, r8
 8004bcc:	f1c8 0800 	rsbge	r8, r8, #0
 8004bd0:	fb9a f8f8 	sdivlt	r8, sl, r8
 8004bd4:	fa0f f888 	sxthge.w	r8, r8

	if (dx == 0) {
 8004bd8:	f1ba 0f00 	cmp.w	sl, #0
 8004bdc:	d116      	bne.n	8004c0c <SSD1306_DrawLine+0xb6>
		if (y1 < y0) {
 8004bde:	42ae      	cmp	r6, r5
 8004be0:	bf3e      	ittt	cc
 8004be2:	462b      	movcc	r3, r5
 8004be4:	4635      	movcc	r5, r6
 8004be6:	461e      	movcc	r6, r3
 8004be8:	454c      	cmp	r4, r9
 8004bea:	bf28      	it	cs
 8004bec:	464c      	movcs	r4, r9
 8004bee:	b2a4      	uxth	r4, r4
			x1 = x0;
			x0 = tmp;
		}
		
		/* Vertical line */
		for (i = y0; i <= y1; i++) {
 8004bf0:	b22d      	sxth	r5, r5
 8004bf2:	42b5      	cmp	r5, r6
 8004bf4:	dd02      	ble.n	8004bfc <SSD1306_DrawLine+0xa6>
		if (e2 < dy) {
			err += dx;
			y0 += sy;
		} 
	}
}
 8004bf6:	b005      	add	sp, #20
 8004bf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			SSD1306_DrawPixel(x0, i, c);
 8004bfc:	b2ad      	uxth	r5, r5
 8004bfe:	4629      	mov	r1, r5
 8004c00:	9a01      	ldr	r2, [sp, #4]
 8004c02:	4620      	mov	r0, r4
 8004c04:	f7ff fee0 	bl	80049c8 <SSD1306_DrawPixel>
		for (i = y0; i <= y1; i++) {
 8004c08:	3501      	adds	r5, #1
 8004c0a:	e7f1      	b.n	8004bf0 <SSD1306_DrawLine+0x9a>
	if (dy == 0) {
 8004c0c:	b1ff      	cbz	r7, 8004c4e <SSD1306_DrawLine+0xf8>
		if (e2 > -dx) {
 8004c0e:	f1ca 0200 	rsb	r2, sl, #0
 8004c12:	9202      	str	r2, [sp, #8]
		SSD1306_DrawPixel(x0, y0, c);
 8004c14:	9a01      	ldr	r2, [sp, #4]
 8004c16:	4629      	mov	r1, r5
 8004c18:	4620      	mov	r0, r4
 8004c1a:	9303      	str	r3, [sp, #12]
 8004c1c:	f7ff fed4 	bl	80049c8 <SSD1306_DrawPixel>
		if (x0 == x1 && y0 == y1) {
 8004c20:	454c      	cmp	r4, r9
 8004c22:	9b03      	ldr	r3, [sp, #12]
 8004c24:	d101      	bne.n	8004c2a <SSD1306_DrawLine+0xd4>
 8004c26:	42b5      	cmp	r5, r6
 8004c28:	d0e5      	beq.n	8004bf6 <SSD1306_DrawLine+0xa0>
		if (e2 > -dx) {
 8004c2a:	9a02      	ldr	r2, [sp, #8]
 8004c2c:	4590      	cmp	r8, r2
			err -= dy;
 8004c2e:	bfc1      	itttt	gt
 8004c30:	eba8 0207 	subgt.w	r2, r8, r7
			x0 += sx;
 8004c34:	445c      	addgt	r4, fp
			err -= dy;
 8004c36:	b212      	sxthgt	r2, r2
			x0 += sx;
 8004c38:	b2a4      	uxthgt	r4, r4
 8004c3a:	bfd8      	it	le
 8004c3c:	4642      	movle	r2, r8
		if (e2 < dy) {
 8004c3e:	45b8      	cmp	r8, r7
 8004c40:	da03      	bge.n	8004c4a <SSD1306_DrawLine+0xf4>
			err += dx;
 8004c42:	4452      	add	r2, sl
			y0 += sy;
 8004c44:	441d      	add	r5, r3
			err += dx;
 8004c46:	b212      	sxth	r2, r2
			y0 += sy;
 8004c48:	b2ad      	uxth	r5, r5
		if (x1 < x0) {
 8004c4a:	4690      	mov	r8, r2
 8004c4c:	e7e2      	b.n	8004c14 <SSD1306_DrawLine+0xbe>
 8004c4e:	42b5      	cmp	r5, r6
 8004c50:	bf28      	it	cs
 8004c52:	4635      	movcs	r5, r6
 8004c54:	454c      	cmp	r4, r9
 8004c56:	b2ad      	uxth	r5, r5
 8004c58:	d902      	bls.n	8004c60 <SSD1306_DrawLine+0x10a>
 8004c5a:	4623      	mov	r3, r4
 8004c5c:	464c      	mov	r4, r9
 8004c5e:	4699      	mov	r9, r3
		for (i = x0; i <= x1; i++) {
 8004c60:	b224      	sxth	r4, r4
 8004c62:	454c      	cmp	r4, r9
 8004c64:	dcc7      	bgt.n	8004bf6 <SSD1306_DrawLine+0xa0>
			SSD1306_DrawPixel(i, y0, c);
 8004c66:	b2a4      	uxth	r4, r4
 8004c68:	4620      	mov	r0, r4
 8004c6a:	9a01      	ldr	r2, [sp, #4]
 8004c6c:	4629      	mov	r1, r5
 8004c6e:	f7ff feab 	bl	80049c8 <SSD1306_DrawPixel>
		for (i = x0; i <= x1; i++) {
 8004c72:	3401      	adds	r4, #1
 8004c74:	e7f4      	b.n	8004c60 <SSD1306_DrawLine+0x10a>
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 8004c76:	1a5f      	subs	r7, r3, r1
 8004c78:	b23f      	sxth	r7, r7
	sx = (x0 < x1) ? 1 : -1; 
 8004c7a:	f04f 0b01 	mov.w	fp, #1
 8004c7e:	e79e      	b.n	8004bbe <SSD1306_DrawLine+0x68>

08004c80 <SSD1306_DrawRectangle>:

void SSD1306_DrawRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, SSD1306_COLOR_t c) {
 8004c80:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	/* Check input parameters */
	if (
 8004c84:	287f      	cmp	r0, #127	; 0x7f
void SSD1306_DrawRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, SSD1306_COLOR_t c) {
 8004c86:	4607      	mov	r7, r0
 8004c88:	460e      	mov	r6, r1
 8004c8a:	461d      	mov	r5, r3
 8004c8c:	f89d 8020 	ldrb.w	r8, [sp, #32]
	if (
 8004c90:	d834      	bhi.n	8004cfc <SSD1306_DrawRectangle+0x7c>
		x >= SSD1306_WIDTH ||
 8004c92:	293f      	cmp	r1, #63	; 0x3f
 8004c94:	d832      	bhi.n	8004cfc <SSD1306_DrawRectangle+0x7c>
		/* Return error */
		return;
	}
	
	/* Check width and height */
	if ((x + w) >= SSD1306_WIDTH) {
 8004c96:	1883      	adds	r3, r0, r2
 8004c98:	2b7f      	cmp	r3, #127	; 0x7f
		w = SSD1306_WIDTH - x;
 8004c9a:	bfc8      	it	gt
 8004c9c:	f1c0 0280 	rsbgt	r2, r0, #128	; 0x80
	}
	if ((y + h) >= SSD1306_HEIGHT) {
 8004ca0:	eb01 0305 	add.w	r3, r1, r5
		w = SSD1306_WIDTH - x;
 8004ca4:	bfc8      	it	gt
 8004ca6:	b292      	uxthgt	r2, r2
	if ((y + h) >= SSD1306_HEIGHT) {
 8004ca8:	2b3f      	cmp	r3, #63	; 0x3f
		h = SSD1306_HEIGHT - y;
 8004caa:	bfc4      	itt	gt
 8004cac:	f1c1 0540 	rsbgt	r5, r1, #64	; 0x40
 8004cb0:	b2ad      	uxthgt	r5, r5
	}
	
	/* Draw 4 lines */
	SSD1306_DrawLine(x, y, x + w, y, c);         /* Top line */
 8004cb2:	4402      	add	r2, r0
 8004cb4:	b294      	uxth	r4, r2
	SSD1306_DrawLine(x, y + h, x + w, y + h, c); /* Bottom line */
 8004cb6:	4435      	add	r5, r6
 8004cb8:	b2ad      	uxth	r5, r5
	SSD1306_DrawLine(x, y, x + w, y, c);         /* Top line */
 8004cba:	460b      	mov	r3, r1
 8004cbc:	4622      	mov	r2, r4
 8004cbe:	f8cd 8000 	str.w	r8, [sp]
 8004cc2:	f7ff ff48 	bl	8004b56 <SSD1306_DrawLine>
	SSD1306_DrawLine(x, y + h, x + w, y + h, c); /* Bottom line */
 8004cc6:	462b      	mov	r3, r5
 8004cc8:	4622      	mov	r2, r4
 8004cca:	4629      	mov	r1, r5
 8004ccc:	4638      	mov	r0, r7
 8004cce:	f8cd 8000 	str.w	r8, [sp]
 8004cd2:	f7ff ff40 	bl	8004b56 <SSD1306_DrawLine>
	SSD1306_DrawLine(x, y, x, y + h, c);         /* Left line */
 8004cd6:	462b      	mov	r3, r5
 8004cd8:	463a      	mov	r2, r7
 8004cda:	4631      	mov	r1, r6
 8004cdc:	4638      	mov	r0, r7
 8004cde:	f8cd 8000 	str.w	r8, [sp]
 8004ce2:	f7ff ff38 	bl	8004b56 <SSD1306_DrawLine>
	SSD1306_DrawLine(x + w, y, x + w, y + h, c); /* Right line */
 8004ce6:	462b      	mov	r3, r5
 8004ce8:	4622      	mov	r2, r4
 8004cea:	4631      	mov	r1, r6
 8004cec:	4620      	mov	r0, r4
 8004cee:	f8cd 8020 	str.w	r8, [sp, #32]
}
 8004cf2:	b002      	add	sp, #8
 8004cf4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	SSD1306_DrawLine(x + w, y, x + w, y + h, c); /* Right line */
 8004cf8:	f7ff bf2d 	b.w	8004b56 <SSD1306_DrawLine>
}
 8004cfc:	b002      	add	sp, #8
 8004cfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004d02 <SSD1306_DrawFilledRectangle>:

void SSD1306_DrawFilledRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, SSD1306_COLOR_t c) {
 8004d02:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	uint8_t i;
	
	/* Check input parameters */
	if (
 8004d06:	287f      	cmp	r0, #127	; 0x7f
void SSD1306_DrawFilledRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, SSD1306_COLOR_t c) {
 8004d08:	4606      	mov	r6, r0
 8004d0a:	460f      	mov	r7, r1
 8004d0c:	461d      	mov	r5, r3
 8004d0e:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
	if (
 8004d12:	d81a      	bhi.n	8004d4a <SSD1306_DrawFilledRectangle+0x48>
		x >= SSD1306_WIDTH ||
 8004d14:	293f      	cmp	r1, #63	; 0x3f
 8004d16:	d818      	bhi.n	8004d4a <SSD1306_DrawFilledRectangle+0x48>
	if ((y + h) >= SSD1306_HEIGHT) {
		h = SSD1306_HEIGHT - y;
	}
	
	/* Draw lines */
	for (i = 0; i <= h; i++) {
 8004d18:	f04f 0900 	mov.w	r9, #0
	if ((x + w) >= SSD1306_WIDTH) {
 8004d1c:	1883      	adds	r3, r0, r2
 8004d1e:	2b7f      	cmp	r3, #127	; 0x7f
		w = SSD1306_WIDTH - x;
 8004d20:	bfc8      	it	gt
 8004d22:	f1c0 0280 	rsbgt	r2, r0, #128	; 0x80
	if ((y + h) >= SSD1306_HEIGHT) {
 8004d26:	eb01 0305 	add.w	r3, r1, r5
		w = SSD1306_WIDTH - x;
 8004d2a:	bfc8      	it	gt
 8004d2c:	b292      	uxthgt	r2, r2
	if ((y + h) >= SSD1306_HEIGHT) {
 8004d2e:	2b3f      	cmp	r3, #63	; 0x3f
		h = SSD1306_HEIGHT - y;
 8004d30:	bfc8      	it	gt
 8004d32:	f1c1 0540 	rsbgt	r5, r1, #64	; 0x40
		/* Draw lines */
		SSD1306_DrawLine(x, y + i, x + w, y + i, c);
 8004d36:	4402      	add	r2, r0
		h = SSD1306_HEIGHT - y;
 8004d38:	bfc8      	it	gt
 8004d3a:	b2ad      	uxthgt	r5, r5
		SSD1306_DrawLine(x, y + i, x + w, y + i, c);
 8004d3c:	b294      	uxth	r4, r2
	for (i = 0; i <= h; i++) {
 8004d3e:	fa5f f389 	uxtb.w	r3, r9
 8004d42:	429d      	cmp	r5, r3
 8004d44:	f109 0901 	add.w	r9, r9, #1
 8004d48:	d202      	bcs.n	8004d50 <SSD1306_DrawFilledRectangle+0x4e>
	}
}
 8004d4a:	b003      	add	sp, #12
 8004d4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		SSD1306_DrawLine(x, y + i, x + w, y + i, c);
 8004d50:	443b      	add	r3, r7
 8004d52:	b29b      	uxth	r3, r3
 8004d54:	f8cd 8000 	str.w	r8, [sp]
 8004d58:	4622      	mov	r2, r4
 8004d5a:	4619      	mov	r1, r3
 8004d5c:	4630      	mov	r0, r6
 8004d5e:	f7ff fefa 	bl	8004b56 <SSD1306_DrawLine>
 8004d62:	e7ec      	b.n	8004d3e <SSD1306_DrawFilledRectangle+0x3c>

08004d64 <ssd1306_I2C_WriteMulti>:
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8004d64:	b530      	push	{r4, r5, lr}
 8004d66:	b0c3      	sub	sp, #268	; 0x10c
uint8_t dt[256];
dt[0] = reg;
 8004d68:	f88d 1008 	strb.w	r1, [sp, #8]
uint8_t i;
for(i = 0; i < count; i++)
 8004d6c:	2100      	movs	r1, #0
 8004d6e:	1c4c      	adds	r4, r1, #1
 8004d70:	b2c9      	uxtb	r1, r1
 8004d72:	4299      	cmp	r1, r3
 8004d74:	d30a      	bcc.n	8004d8c <ssd1306_I2C_WriteMulti+0x28>
dt[i+1] = data[i];
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8004d76:	220a      	movs	r2, #10
 8004d78:	3301      	adds	r3, #1
 8004d7a:	9200      	str	r2, [sp, #0]
 8004d7c:	4601      	mov	r1, r0
 8004d7e:	b29b      	uxth	r3, r3
 8004d80:	aa02      	add	r2, sp, #8
 8004d82:	4805      	ldr	r0, [pc, #20]	; (8004d98 <ssd1306_I2C_WriteMulti+0x34>)
 8004d84:	f7fc fc54 	bl	8001630 <HAL_I2C_Master_Transmit>
}
 8004d88:	b043      	add	sp, #268	; 0x10c
 8004d8a:	bd30      	pop	{r4, r5, pc}
dt[i+1] = data[i];
 8004d8c:	ad02      	add	r5, sp, #8
 8004d8e:	440d      	add	r5, r1
 8004d90:	5c51      	ldrb	r1, [r2, r1]
 8004d92:	7069      	strb	r1, [r5, #1]
 8004d94:	4621      	mov	r1, r4
 8004d96:	e7ea      	b.n	8004d6e <ssd1306_I2C_WriteMulti+0xa>
 8004d98:	20000618 	.word	0x20000618

08004d9c <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8004d9c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t dt[2];
	dt[0] = reg;
	dt[1] = data;
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8004d9e:	230a      	movs	r3, #10
	dt[0] = reg;
 8004da0:	f88d 100c 	strb.w	r1, [sp, #12]
	dt[1] = data;
 8004da4:	f88d 200d 	strb.w	r2, [sp, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8004da8:	9300      	str	r3, [sp, #0]
 8004daa:	4601      	mov	r1, r0
 8004dac:	2302      	movs	r3, #2
 8004dae:	aa03      	add	r2, sp, #12
 8004db0:	4802      	ldr	r0, [pc, #8]	; (8004dbc <ssd1306_I2C_Write+0x20>)
 8004db2:	f7fc fc3d 	bl	8001630 <HAL_I2C_Master_Transmit>
}
 8004db6:	b005      	add	sp, #20
 8004db8:	f85d fb04 	ldr.w	pc, [sp], #4
 8004dbc:	20000618 	.word	0x20000618

08004dc0 <SSD1306_UpdateScreen>:
void SSD1306_UpdateScreen(void) {
 8004dc0:	b538      	push	{r3, r4, r5, lr}
 8004dc2:	2400      	movs	r4, #0
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8004dc4:	4d0e      	ldr	r5, [pc, #56]	; (8004e00 <SSD1306_UpdateScreen+0x40>)
		SSD1306_WRITECOMMAND(0xB0 + m);
 8004dc6:	f1a4 0250 	sub.w	r2, r4, #80	; 0x50
 8004dca:	b2d2      	uxtb	r2, r2
 8004dcc:	2100      	movs	r1, #0
 8004dce:	2078      	movs	r0, #120	; 0x78
 8004dd0:	f7ff ffe4 	bl	8004d9c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	2078      	movs	r0, #120	; 0x78
 8004dd8:	4611      	mov	r1, r2
 8004dda:	f7ff ffdf 	bl	8004d9c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8004dde:	2210      	movs	r2, #16
 8004de0:	2100      	movs	r1, #0
 8004de2:	2078      	movs	r0, #120	; 0x78
 8004de4:	f7ff ffda 	bl	8004d9c <ssd1306_I2C_Write>
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8004de8:	eb05 12c4 	add.w	r2, r5, r4, lsl #7
 8004dec:	2380      	movs	r3, #128	; 0x80
 8004dee:	2140      	movs	r1, #64	; 0x40
 8004df0:	2078      	movs	r0, #120	; 0x78
 8004df2:	3401      	adds	r4, #1
 8004df4:	f7ff ffb6 	bl	8004d64 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8004df8:	2c08      	cmp	r4, #8
 8004dfa:	d1e4      	bne.n	8004dc6 <SSD1306_UpdateScreen+0x6>
}
 8004dfc:	bd38      	pop	{r3, r4, r5, pc}
 8004dfe:	bf00      	nop
 8004e00:	20000154 	.word	0x20000154

08004e04 <SSD1306_Clear>:
{
 8004e04:	b508      	push	{r3, lr}
	SSD1306_Fill (0);
 8004e06:	2000      	movs	r0, #0
 8004e08:	f7ff fdd2 	bl	80049b0 <SSD1306_Fill>
}
 8004e0c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    SSD1306_UpdateScreen();
 8004e10:	f7ff bfd6 	b.w	8004dc0 <SSD1306_UpdateScreen>

08004e14 <SSD1306_Init>:
uint8_t SSD1306_Init(void) {
 8004e14:	b510      	push	{r4, lr}
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8004e16:	f644 6320 	movw	r3, #20000	; 0x4e20
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	2178      	movs	r1, #120	; 0x78
 8004e1e:	4852      	ldr	r0, [pc, #328]	; (8004f68 <SSD1306_Init+0x154>)
 8004e20:	f7fc ff66 	bl	8001cf0 <HAL_I2C_IsDeviceReady>
 8004e24:	4604      	mov	r4, r0
 8004e26:	2800      	cmp	r0, #0
 8004e28:	f040 809c 	bne.w	8004f64 <SSD1306_Init+0x150>
	SSD1306_WRITECOMMAND(0xAE); //display off
 8004e2c:	4601      	mov	r1, r0
 8004e2e:	22ae      	movs	r2, #174	; 0xae
 8004e30:	2078      	movs	r0, #120	; 0x78
 8004e32:	f7ff ffb3 	bl	8004d9c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8004e36:	4621      	mov	r1, r4
 8004e38:	2220      	movs	r2, #32
 8004e3a:	2078      	movs	r0, #120	; 0x78
 8004e3c:	f7ff ffae 	bl	8004d9c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8004e40:	4621      	mov	r1, r4
 8004e42:	2210      	movs	r2, #16
 8004e44:	2078      	movs	r0, #120	; 0x78
 8004e46:	f7ff ffa9 	bl	8004d9c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8004e4a:	4621      	mov	r1, r4
 8004e4c:	22b0      	movs	r2, #176	; 0xb0
 8004e4e:	2078      	movs	r0, #120	; 0x78
 8004e50:	f7ff ffa4 	bl	8004d9c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8004e54:	4621      	mov	r1, r4
 8004e56:	22c8      	movs	r2, #200	; 0xc8
 8004e58:	2078      	movs	r0, #120	; 0x78
 8004e5a:	f7ff ff9f 	bl	8004d9c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8004e5e:	4622      	mov	r2, r4
 8004e60:	4621      	mov	r1, r4
 8004e62:	2078      	movs	r0, #120	; 0x78
 8004e64:	f7ff ff9a 	bl	8004d9c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8004e68:	4621      	mov	r1, r4
 8004e6a:	2210      	movs	r2, #16
 8004e6c:	2078      	movs	r0, #120	; 0x78
 8004e6e:	f7ff ff95 	bl	8004d9c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8004e72:	4621      	mov	r1, r4
 8004e74:	2240      	movs	r2, #64	; 0x40
 8004e76:	2078      	movs	r0, #120	; 0x78
 8004e78:	f7ff ff90 	bl	8004d9c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8004e7c:	4621      	mov	r1, r4
 8004e7e:	2281      	movs	r2, #129	; 0x81
 8004e80:	2078      	movs	r0, #120	; 0x78
 8004e82:	f7ff ff8b 	bl	8004d9c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8004e86:	4621      	mov	r1, r4
 8004e88:	22ff      	movs	r2, #255	; 0xff
 8004e8a:	2078      	movs	r0, #120	; 0x78
 8004e8c:	f7ff ff86 	bl	8004d9c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8004e90:	4621      	mov	r1, r4
 8004e92:	22a1      	movs	r2, #161	; 0xa1
 8004e94:	2078      	movs	r0, #120	; 0x78
 8004e96:	f7ff ff81 	bl	8004d9c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8004e9a:	4621      	mov	r1, r4
 8004e9c:	22a6      	movs	r2, #166	; 0xa6
 8004e9e:	2078      	movs	r0, #120	; 0x78
 8004ea0:	f7ff ff7c 	bl	8004d9c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8004ea4:	4621      	mov	r1, r4
 8004ea6:	22a8      	movs	r2, #168	; 0xa8
 8004ea8:	2078      	movs	r0, #120	; 0x78
 8004eaa:	f7ff ff77 	bl	8004d9c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8004eae:	4621      	mov	r1, r4
 8004eb0:	223f      	movs	r2, #63	; 0x3f
 8004eb2:	2078      	movs	r0, #120	; 0x78
 8004eb4:	f7ff ff72 	bl	8004d9c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8004eb8:	4621      	mov	r1, r4
 8004eba:	22a4      	movs	r2, #164	; 0xa4
 8004ebc:	2078      	movs	r0, #120	; 0x78
 8004ebe:	f7ff ff6d 	bl	8004d9c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8004ec2:	4621      	mov	r1, r4
 8004ec4:	22d3      	movs	r2, #211	; 0xd3
 8004ec6:	2078      	movs	r0, #120	; 0x78
 8004ec8:	f7ff ff68 	bl	8004d9c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8004ecc:	4622      	mov	r2, r4
 8004ece:	4621      	mov	r1, r4
 8004ed0:	2078      	movs	r0, #120	; 0x78
 8004ed2:	f7ff ff63 	bl	8004d9c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8004ed6:	4621      	mov	r1, r4
 8004ed8:	22d5      	movs	r2, #213	; 0xd5
 8004eda:	2078      	movs	r0, #120	; 0x78
 8004edc:	f7ff ff5e 	bl	8004d9c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8004ee0:	4621      	mov	r1, r4
 8004ee2:	22f0      	movs	r2, #240	; 0xf0
 8004ee4:	2078      	movs	r0, #120	; 0x78
 8004ee6:	f7ff ff59 	bl	8004d9c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8004eea:	4621      	mov	r1, r4
 8004eec:	22d9      	movs	r2, #217	; 0xd9
 8004eee:	2078      	movs	r0, #120	; 0x78
 8004ef0:	f7ff ff54 	bl	8004d9c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8004ef4:	4621      	mov	r1, r4
 8004ef6:	2222      	movs	r2, #34	; 0x22
 8004ef8:	2078      	movs	r0, #120	; 0x78
 8004efa:	f7ff ff4f 	bl	8004d9c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8004efe:	4621      	mov	r1, r4
 8004f00:	22da      	movs	r2, #218	; 0xda
 8004f02:	2078      	movs	r0, #120	; 0x78
 8004f04:	f7ff ff4a 	bl	8004d9c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8004f08:	4621      	mov	r1, r4
 8004f0a:	2212      	movs	r2, #18
 8004f0c:	2078      	movs	r0, #120	; 0x78
 8004f0e:	f7ff ff45 	bl	8004d9c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8004f12:	4621      	mov	r1, r4
 8004f14:	22db      	movs	r2, #219	; 0xdb
 8004f16:	2078      	movs	r0, #120	; 0x78
 8004f18:	f7ff ff40 	bl	8004d9c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8004f1c:	4621      	mov	r1, r4
 8004f1e:	2220      	movs	r2, #32
 8004f20:	2078      	movs	r0, #120	; 0x78
 8004f22:	f7ff ff3b 	bl	8004d9c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8004f26:	4621      	mov	r1, r4
 8004f28:	228d      	movs	r2, #141	; 0x8d
 8004f2a:	2078      	movs	r0, #120	; 0x78
 8004f2c:	f7ff ff36 	bl	8004d9c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8004f30:	4621      	mov	r1, r4
 8004f32:	2214      	movs	r2, #20
 8004f34:	2078      	movs	r0, #120	; 0x78
 8004f36:	f7ff ff31 	bl	8004d9c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8004f3a:	4621      	mov	r1, r4
 8004f3c:	22af      	movs	r2, #175	; 0xaf
 8004f3e:	2078      	movs	r0, #120	; 0x78
 8004f40:	f7ff ff2c 	bl	8004d9c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8004f44:	222e      	movs	r2, #46	; 0x2e
 8004f46:	4621      	mov	r1, r4
 8004f48:	2078      	movs	r0, #120	; 0x78
 8004f4a:	f7ff ff27 	bl	8004d9c <ssd1306_I2C_Write>
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8004f4e:	4620      	mov	r0, r4
 8004f50:	f7ff fd2e 	bl	80049b0 <SSD1306_Fill>
	SSD1306_UpdateScreen();
 8004f54:	f7ff ff34 	bl	8004dc0 <SSD1306_UpdateScreen>
	SSD1306.Initialized = 1;
 8004f58:	2001      	movs	r0, #1
	SSD1306.CurrentX = 0;
 8004f5a:	4b04      	ldr	r3, [pc, #16]	; (8004f6c <SSD1306_Init+0x158>)
	SSD1306.Initialized = 1;
 8004f5c:	7158      	strb	r0, [r3, #5]
	SSD1306.CurrentX = 0;
 8004f5e:	801c      	strh	r4, [r3, #0]
	SSD1306.CurrentY = 0;
 8004f60:	805c      	strh	r4, [r3, #2]
	return 1;
 8004f62:	bd10      	pop	{r4, pc}
		return 0;
 8004f64:	2000      	movs	r0, #0
}
 8004f66:	bd10      	pop	{r4, pc}
 8004f68:	20000618 	.word	0x20000618
 8004f6c:	2000014e 	.word	0x2000014e

08004f70 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8004f70:	4b0e      	ldr	r3, [pc, #56]	; (8004fac <HAL_MspInit+0x3c>)
{
 8004f72:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8004f74:	699a      	ldr	r2, [r3, #24]
 8004f76:	f042 0201 	orr.w	r2, r2, #1
 8004f7a:	619a      	str	r2, [r3, #24]
 8004f7c:	699a      	ldr	r2, [r3, #24]
 8004f7e:	f002 0201 	and.w	r2, r2, #1
 8004f82:	9200      	str	r2, [sp, #0]
 8004f84:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004f86:	69da      	ldr	r2, [r3, #28]
 8004f88:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004f8c:	61da      	str	r2, [r3, #28]
 8004f8e:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8004f90:	4a07      	ldr	r2, [pc, #28]	; (8004fb0 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8004f92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f96:	9301      	str	r3, [sp, #4]
 8004f98:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8004f9a:	6853      	ldr	r3, [r2, #4]
 8004f9c:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8004fa0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004fa4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004fa6:	b002      	add	sp, #8
 8004fa8:	4770      	bx	lr
 8004faa:	bf00      	nop
 8004fac:	40021000 	.word	0x40021000
 8004fb0:	40010000 	.word	0x40010000

08004fb4 <HAL_ADC_MspInit>:
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004fb4:	2210      	movs	r2, #16
{
 8004fb6:	b530      	push	{r4, r5, lr}
 8004fb8:	4605      	mov	r5, r0
 8004fba:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004fbc:	eb0d 0002 	add.w	r0, sp, r2
 8004fc0:	2100      	movs	r1, #0
 8004fc2:	f000 fa9a 	bl	80054fa <memset>
  if(hadc->Instance==ADC1)
 8004fc6:	682a      	ldr	r2, [r5, #0]
 8004fc8:	4b2c      	ldr	r3, [pc, #176]	; (800507c <HAL_ADC_MspInit+0xc8>)
 8004fca:	429a      	cmp	r2, r3
 8004fcc:	d154      	bne.n	8005078 <HAL_ADC_MspInit+0xc4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004fce:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 8004fd2:	699a      	ldr	r2, [r3, #24]
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8 
    */
    GPIO_InitStruct.Pin = JOY1_X_Pin|JO1_Y_Pin|JOY2_X_Pin|JOY2_Y_Pin 
                          |SW3_Pin|SW4_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004fd4:	2403      	movs	r4, #3
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004fd6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fda:	619a      	str	r2, [r3, #24]
 8004fdc:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004fde:	a904      	add	r1, sp, #16
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004fe0:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8004fe4:	9200      	str	r2, [sp, #0]
 8004fe6:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004fe8:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004fea:	4825      	ldr	r0, [pc, #148]	; (8005080 <HAL_ADC_MspInit+0xcc>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004fec:	f042 0210 	orr.w	r2, r2, #16
 8004ff0:	619a      	str	r2, [r3, #24]
 8004ff2:	699a      	ldr	r2, [r3, #24]
 8004ff4:	f002 0210 	and.w	r2, r2, #16
 8004ff8:	9201      	str	r2, [sp, #4]
 8004ffa:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ffc:	699a      	ldr	r2, [r3, #24]
 8004ffe:	f042 0204 	orr.w	r2, r2, #4
 8005002:	619a      	str	r2, [r3, #24]
 8005004:	699a      	ldr	r2, [r3, #24]
 8005006:	f002 0204 	and.w	r2, r2, #4
 800500a:	9202      	str	r2, [sp, #8]
 800500c:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800500e:	699a      	ldr	r2, [r3, #24]
 8005010:	f042 0208 	orr.w	r2, r2, #8
 8005014:	619a      	str	r2, [r3, #24]
 8005016:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005018:	9405      	str	r4, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800501a:	f003 0308 	and.w	r3, r3, #8
 800501e:	9303      	str	r3, [sp, #12]
 8005020:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = JOY1_X_Pin|JO1_Y_Pin|JOY2_X_Pin|JOY2_Y_Pin 
 8005022:	233f      	movs	r3, #63	; 0x3f
 8005024:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005026:	f7fb ffd3 	bl	8000fd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = POT1_Pin|POT2_Pin|SW1_Pin|SW2_Pin;
 800502a:	23e1      	movs	r3, #225	; 0xe1
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800502c:	a904      	add	r1, sp, #16
 800502e:	4815      	ldr	r0, [pc, #84]	; (8005084 <HAL_ADC_MspInit+0xd0>)
    GPIO_InitStruct.Pin = POT1_Pin|POT2_Pin|SW1_Pin|SW2_Pin;
 8005030:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005032:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005034:	f7fb ffcc 	bl	8000fd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BAT_LEVEL_Pin;
 8005038:	2301      	movs	r3, #1
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(BAT_LEVEL_GPIO_Port, &GPIO_InitStruct);
 800503a:	4813      	ldr	r0, [pc, #76]	; (8005088 <HAL_ADC_MspInit+0xd4>)
 800503c:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = BAT_LEVEL_Pin;
 800503e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005040:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(BAT_LEVEL_GPIO_Port, &GPIO_InitStruct);
 8005042:	f7fb ffc5 	bl	8000fd0 <HAL_GPIO_Init>
    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8005046:	2280      	movs	r2, #128	; 0x80
    hdma_adc1.Instance = DMA1_Channel1;
 8005048:	4c10      	ldr	r4, [pc, #64]	; (800508c <HAL_ADC_MspInit+0xd8>)
 800504a:	4b11      	ldr	r3, [pc, #68]	; (8005090 <HAL_ADC_MspInit+0xdc>)
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800504c:	60e2      	str	r2, [r4, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800504e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005052:	6122      	str	r2, [r4, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005054:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_adc1.Instance = DMA1_Channel1;
 8005058:	6023      	str	r3, [r4, #0]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800505a:	6162      	str	r2, [r4, #20]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800505c:	2300      	movs	r3, #0
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800505e:	2220      	movs	r2, #32
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8005060:	4620      	mov	r0, r4
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005062:	6063      	str	r3, [r4, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8005064:	60a3      	str	r3, [r4, #8]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8005066:	61a2      	str	r2, [r4, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8005068:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800506a:	f7fb fe57 	bl	8000d1c <HAL_DMA_Init>
 800506e:	b108      	cbz	r0, 8005074 <HAL_ADC_MspInit+0xc0>
    {
      Error_Handler();
 8005070:	f7fe fc6a 	bl	8003948 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8005074:	622c      	str	r4, [r5, #32]
 8005076:	6265      	str	r5, [r4, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8005078:	b009      	add	sp, #36	; 0x24
 800507a:	bd30      	pop	{r4, r5, pc}
 800507c:	40012400 	.word	0x40012400
 8005080:	40011000 	.word	0x40011000
 8005084:	40010800 	.word	0x40010800
 8005088:	40010c00 	.word	0x40010c00
 800508c:	20000720 	.word	0x20000720
 8005090:	40020008 	.word	0x40020008

08005094 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005094:	b510      	push	{r4, lr}
 8005096:	4604      	mov	r4, r0
 8005098:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800509a:	2210      	movs	r2, #16
 800509c:	2100      	movs	r1, #0
 800509e:	a806      	add	r0, sp, #24
 80050a0:	f000 fa2b 	bl	80054fa <memset>
  if(hi2c->Instance==I2C1)
 80050a4:	6823      	ldr	r3, [r4, #0]
 80050a6:	4a26      	ldr	r2, [pc, #152]	; (8005140 <HAL_I2C_MspInit+0xac>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d127      	bne.n	80050fc <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */
	  __HAL_RCC_I2C2_CLK_ENABLE();  // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  add manualy
 80050ac:	4c25      	ldr	r4, [pc, #148]	; (8005144 <HAL_I2C_MspInit+0xb0>)
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80050ae:	a906      	add	r1, sp, #24
	  __HAL_RCC_I2C2_CLK_ENABLE();  // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  add manualy
 80050b0:	69e3      	ldr	r3, [r4, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80050b2:	4825      	ldr	r0, [pc, #148]	; (8005148 <HAL_I2C_MspInit+0xb4>)
	  __HAL_RCC_I2C2_CLK_ENABLE();  // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  add manualy
 80050b4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80050b8:	61e3      	str	r3, [r4, #28]
 80050ba:	69e3      	ldr	r3, [r4, #28]
 80050bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050c0:	9301      	str	r3, [sp, #4]
 80050c2:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80050c4:	69a3      	ldr	r3, [r4, #24]
 80050c6:	f043 0308 	orr.w	r3, r3, #8
 80050ca:	61a3      	str	r3, [r4, #24]
 80050cc:	69a3      	ldr	r3, [r4, #24]
 80050ce:	f003 0308 	and.w	r3, r3, #8
 80050d2:	9302      	str	r3, [sp, #8]
 80050d4:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80050d6:	23c0      	movs	r3, #192	; 0xc0
 80050d8:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80050da:	2312      	movs	r3, #18
 80050dc:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80050de:	2303      	movs	r3, #3
 80050e0:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80050e2:	f7fb ff75 	bl	8000fd0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80050e6:	69e3      	ldr	r3, [r4, #28]
 80050e8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80050ec:	61e3      	str	r3, [r4, #28]
 80050ee:	69e3      	ldr	r3, [r4, #28]
 80050f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80050f4:	9303      	str	r3, [sp, #12]
 80050f6:	9b03      	ldr	r3, [sp, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80050f8:	b00a      	add	sp, #40	; 0x28
 80050fa:	bd10      	pop	{r4, pc}
  else if(hi2c->Instance==I2C2)
 80050fc:	4a13      	ldr	r2, [pc, #76]	; (800514c <HAL_I2C_MspInit+0xb8>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d1fa      	bne.n	80050f8 <HAL_I2C_MspInit+0x64>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005102:	4c10      	ldr	r4, [pc, #64]	; (8005144 <HAL_I2C_MspInit+0xb0>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005104:	a906      	add	r1, sp, #24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005106:	69a3      	ldr	r3, [r4, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005108:	480f      	ldr	r0, [pc, #60]	; (8005148 <HAL_I2C_MspInit+0xb4>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800510a:	f043 0308 	orr.w	r3, r3, #8
 800510e:	61a3      	str	r3, [r4, #24]
 8005110:	69a3      	ldr	r3, [r4, #24]
 8005112:	f003 0308 	and.w	r3, r3, #8
 8005116:	9304      	str	r3, [sp, #16]
 8005118:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800511a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800511e:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005120:	2312      	movs	r3, #18
 8005122:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005124:	2303      	movs	r3, #3
 8005126:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005128:	f7fb ff52 	bl	8000fd0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800512c:	69e3      	ldr	r3, [r4, #28]
 800512e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005132:	61e3      	str	r3, [r4, #28]
 8005134:	69e3      	ldr	r3, [r4, #28]
 8005136:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800513a:	9305      	str	r3, [sp, #20]
 800513c:	9b05      	ldr	r3, [sp, #20]
}
 800513e:	e7db      	b.n	80050f8 <HAL_I2C_MspInit+0x64>
 8005140:	40005400 	.word	0x40005400
 8005144:	40021000 	.word	0x40021000
 8005148:	40010c00 	.word	0x40010c00
 800514c:	40005800 	.word	0x40005800

08005150 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005150:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005152:	2410      	movs	r4, #16
{
 8005154:	4605      	mov	r5, r0
 8005156:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005158:	4622      	mov	r2, r4
 800515a:	2100      	movs	r1, #0
 800515c:	a802      	add	r0, sp, #8
 800515e:	f000 f9cc 	bl	80054fa <memset>
  if(hspi->Instance==SPI1)
 8005162:	682a      	ldr	r2, [r5, #0]
 8005164:	4b18      	ldr	r3, [pc, #96]	; (80051c8 <HAL_SPI_MspInit+0x78>)
 8005166:	429a      	cmp	r2, r3
 8005168:	d12c      	bne.n	80051c4 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800516a:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
 800516e:	699a      	ldr	r2, [r3, #24]
    PB5     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005170:	a902      	add	r1, sp, #8
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005172:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005176:	619a      	str	r2, [r3, #24]
 8005178:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800517a:	4814      	ldr	r0, [pc, #80]	; (80051cc <HAL_SPI_MspInit+0x7c>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 800517c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8005180:	9200      	str	r2, [sp, #0]
 8005182:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005184:	699a      	ldr	r2, [r3, #24]
 8005186:	f042 0208 	orr.w	r2, r2, #8
 800518a:	619a      	str	r2, [r3, #24]
 800518c:	699b      	ldr	r3, [r3, #24]
 800518e:	f003 0308 	and.w	r3, r3, #8
 8005192:	9301      	str	r3, [sp, #4]
 8005194:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8005196:	2328      	movs	r3, #40	; 0x28
 8005198:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800519a:	2302      	movs	r3, #2
 800519c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800519e:	2303      	movs	r3, #3
 80051a0:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80051a2:	f7fb ff15 	bl	8000fd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80051a6:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80051a8:	a902      	add	r1, sp, #8
 80051aa:	4808      	ldr	r0, [pc, #32]	; (80051cc <HAL_SPI_MspInit+0x7c>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80051ac:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051ae:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80051b0:	9402      	str	r4, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80051b2:	f7fb ff0d 	bl	8000fd0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 80051b6:	4a06      	ldr	r2, [pc, #24]	; (80051d0 <HAL_SPI_MspInit+0x80>)
 80051b8:	6853      	ldr	r3, [r2, #4]
 80051ba:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80051be:	f043 0301 	orr.w	r3, r3, #1
 80051c2:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80051c4:	b007      	add	sp, #28
 80051c6:	bd30      	pop	{r4, r5, pc}
 80051c8:	40013000 	.word	0x40013000
 80051cc:	40010c00 	.word	0x40010c00
 80051d0:	40010000 	.word	0x40010000

080051d4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80051d4:	b510      	push	{r4, lr}
 80051d6:	4604      	mov	r4, r0
 80051d8:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80051da:	2210      	movs	r2, #16
 80051dc:	2100      	movs	r1, #0
 80051de:	a802      	add	r0, sp, #8
 80051e0:	f000 f98b 	bl	80054fa <memset>
  if(htim_encoder->Instance==TIM1)
 80051e4:	6822      	ldr	r2, [r4, #0]
 80051e6:	4b11      	ldr	r3, [pc, #68]	; (800522c <HAL_TIM_Encoder_MspInit+0x58>)
 80051e8:	429a      	cmp	r2, r3
 80051ea:	d11c      	bne.n	8005226 <HAL_TIM_Encoder_MspInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80051ec:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 80051f0:	699a      	ldr	r2, [r3, #24]
    PA9     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80051f2:	a902      	add	r1, sp, #8
    __HAL_RCC_TIM1_CLK_ENABLE();
 80051f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80051f8:	619a      	str	r2, [r3, #24]
 80051fa:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80051fc:	480c      	ldr	r0, [pc, #48]	; (8005230 <HAL_TIM_Encoder_MspInit+0x5c>)
    __HAL_RCC_TIM1_CLK_ENABLE();
 80051fe:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8005202:	9200      	str	r2, [sp, #0]
 8005204:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005206:	699a      	ldr	r2, [r3, #24]
 8005208:	f042 0204 	orr.w	r2, r2, #4
 800520c:	619a      	str	r2, [r3, #24]
 800520e:	699b      	ldr	r3, [r3, #24]
 8005210:	f003 0304 	and.w	r3, r3, #4
 8005214:	9301      	str	r3, [sp, #4]
 8005216:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8005218:	f44f 7340 	mov.w	r3, #768	; 0x300
 800521c:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800521e:	2301      	movs	r3, #1
 8005220:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005222:	f7fb fed5 	bl	8000fd0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8005226:	b006      	add	sp, #24
 8005228:	bd10      	pop	{r4, pc}
 800522a:	bf00      	nop
 800522c:	40012c00 	.word	0x40012c00
 8005230:	40010800 	.word	0x40010800

08005234 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005234:	b507      	push	{r0, r1, r2, lr}
  if(htim_base->Instance==TIM6)
 8005236:	4b0d      	ldr	r3, [pc, #52]	; (800526c <HAL_TIM_Base_MspInit+0x38>)
 8005238:	6802      	ldr	r2, [r0, #0]
 800523a:	429a      	cmp	r2, r3
 800523c:	d112      	bne.n	8005264 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800523e:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8005242:	69da      	ldr	r2, [r3, #28]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 8005244:	2036      	movs	r0, #54	; 0x36
    __HAL_RCC_TIM6_CLK_ENABLE();
 8005246:	f042 0210 	orr.w	r2, r2, #16
 800524a:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 800524c:	2200      	movs	r2, #0
    __HAL_RCC_TIM6_CLK_ENABLE();
 800524e:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 8005250:	4611      	mov	r1, r2
    __HAL_RCC_TIM6_CLK_ENABLE();
 8005252:	f003 0310 	and.w	r3, r3, #16
 8005256:	9301      	str	r3, [sp, #4]
 8005258:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 800525a:	f7fb fd07 	bl	8000c6c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 800525e:	2036      	movs	r0, #54	; 0x36
 8005260:	f7fb fd38 	bl	8000cd4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8005264:	b003      	add	sp, #12
 8005266:	f85d fb04 	ldr.w	pc, [sp], #4
 800526a:	bf00      	nop
 800526c:	40001000 	.word	0x40001000

08005270 <HAL_UART_MspInit>:
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005270:	2210      	movs	r2, #16
{
 8005272:	b510      	push	{r4, lr}
 8005274:	4604      	mov	r4, r0
 8005276:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005278:	eb0d 0002 	add.w	r0, sp, r2
 800527c:	2100      	movs	r1, #0
 800527e:	f000 f93c 	bl	80054fa <memset>
  if(huart->Instance==USART2)
 8005282:	6823      	ldr	r3, [r4, #0]
 8005284:	4a2f      	ldr	r2, [pc, #188]	; (8005344 <HAL_UART_MspInit+0xd4>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d127      	bne.n	80052da <HAL_UART_MspInit+0x6a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800528a:	4b2f      	ldr	r3, [pc, #188]	; (8005348 <HAL_UART_MspInit+0xd8>)
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800528c:	a904      	add	r1, sp, #16
    __HAL_RCC_USART2_CLK_ENABLE();
 800528e:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005290:	482e      	ldr	r0, [pc, #184]	; (800534c <HAL_UART_MspInit+0xdc>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8005292:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8005296:	61da      	str	r2, [r3, #28]
 8005298:	69da      	ldr	r2, [r3, #28]
 800529a:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800529e:	9200      	str	r2, [sp, #0]
 80052a0:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80052a2:	699a      	ldr	r2, [r3, #24]
 80052a4:	f042 0204 	orr.w	r2, r2, #4
 80052a8:	619a      	str	r2, [r3, #24]
 80052aa:	699b      	ldr	r3, [r3, #24]
 80052ac:	f003 0304 	and.w	r3, r3, #4
 80052b0:	9301      	str	r3, [sp, #4]
 80052b2:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80052b4:	2304      	movs	r3, #4
 80052b6:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052b8:	2302      	movs	r3, #2
 80052ba:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80052bc:	2303      	movs	r3, #3
 80052be:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80052c0:	f7fb fe86 	bl	8000fd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80052c4:	2308      	movs	r3, #8
 80052c6:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80052c8:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80052ca:	a904      	add	r1, sp, #16
 80052cc:	481f      	ldr	r0, [pc, #124]	; (800534c <HAL_UART_MspInit+0xdc>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80052ce:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052d0:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80052d2:	f7fb fe7d 	bl	8000fd0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80052d6:	b008      	add	sp, #32
 80052d8:	bd10      	pop	{r4, pc}
  else if(huart->Instance==USART3)
 80052da:	4a1d      	ldr	r2, [pc, #116]	; (8005350 <HAL_UART_MspInit+0xe0>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d1fa      	bne.n	80052d6 <HAL_UART_MspInit+0x66>
    __HAL_RCC_USART3_CLK_ENABLE();
 80052e0:	4b19      	ldr	r3, [pc, #100]	; (8005348 <HAL_UART_MspInit+0xd8>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80052e2:	a904      	add	r1, sp, #16
    __HAL_RCC_USART3_CLK_ENABLE();
 80052e4:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80052e6:	481b      	ldr	r0, [pc, #108]	; (8005354 <HAL_UART_MspInit+0xe4>)
    __HAL_RCC_USART3_CLK_ENABLE();
 80052e8:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80052ec:	61da      	str	r2, [r3, #28]
 80052ee:	69da      	ldr	r2, [r3, #28]
 80052f0:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 80052f4:	9202      	str	r2, [sp, #8]
 80052f6:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80052f8:	699a      	ldr	r2, [r3, #24]
 80052fa:	f042 0210 	orr.w	r2, r2, #16
 80052fe:	619a      	str	r2, [r3, #24]
 8005300:	699b      	ldr	r3, [r3, #24]
 8005302:	f003 0310 	and.w	r3, r3, #16
 8005306:	9303      	str	r3, [sp, #12]
 8005308:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800530a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800530e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005310:	2302      	movs	r3, #2
 8005312:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005314:	2303      	movs	r3, #3
 8005316:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005318:	f7fb fe5a 	bl	8000fd0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800531c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005320:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005322:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005324:	a904      	add	r1, sp, #16
 8005326:	480b      	ldr	r0, [pc, #44]	; (8005354 <HAL_UART_MspInit+0xe4>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005328:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800532a:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800532c:	f7fb fe50 	bl	8000fd0 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_USART3_PARTIAL();
 8005330:	4a09      	ldr	r2, [pc, #36]	; (8005358 <HAL_UART_MspInit+0xe8>)
 8005332:	6853      	ldr	r3, [r2, #4]
 8005334:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8005338:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800533c:	f043 0310 	orr.w	r3, r3, #16
 8005340:	6053      	str	r3, [r2, #4]
}
 8005342:	e7c8      	b.n	80052d6 <HAL_UART_MspInit+0x66>
 8005344:	40004400 	.word	0x40004400
 8005348:	40021000 	.word	0x40021000
 800534c:	40010800 	.word	0x40010800
 8005350:	40004800 	.word	0x40004800
 8005354:	40011000 	.word	0x40011000
 8005358:	40010000 	.word	0x40010000

0800535c <NMI_Handler>:
 800535c:	4770      	bx	lr

0800535e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800535e:	e7fe      	b.n	800535e <HardFault_Handler>

08005360 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005360:	e7fe      	b.n	8005360 <MemManage_Handler>

08005362 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005362:	e7fe      	b.n	8005362 <BusFault_Handler>

08005364 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005364:	e7fe      	b.n	8005364 <UsageFault_Handler>

08005366 <SVC_Handler>:
 8005366:	4770      	bx	lr

08005368 <DebugMon_Handler>:
 8005368:	4770      	bx	lr

0800536a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800536a:	4770      	bx	lr

0800536c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800536c:	f7fb ba16 	b.w	800079c <HAL_IncTick>

08005370 <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8005370:	4801      	ldr	r0, [pc, #4]	; (8005378 <DMA1_Channel1_IRQHandler+0x8>)
 8005372:	f7fb bd51 	b.w	8000e18 <HAL_DMA_IRQHandler>
 8005376:	bf00      	nop
 8005378:	20000720 	.word	0x20000720

0800537c <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 800537c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8005380:	f7fb bf24 	b.w	80011cc <HAL_GPIO_EXTI_IRQHandler>

08005384 <TIM6_IRQHandler>:
void TIM6_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8005384:	4801      	ldr	r0, [pc, #4]	; (800538c <TIM6_IRQHandler+0x8>)
 8005386:	f7fd bb7e 	b.w	8002a86 <HAL_TIM_IRQHandler>
 800538a:	bf00      	nop
 800538c:	20000764 	.word	0x20000764

08005390 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005390:	b570      	push	{r4, r5, r6, lr}
 8005392:	460e      	mov	r6, r1
 8005394:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005396:	460c      	mov	r4, r1
 8005398:	1ba3      	subs	r3, r4, r6
 800539a:	429d      	cmp	r5, r3
 800539c:	dc01      	bgt.n	80053a2 <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 800539e:	4628      	mov	r0, r5
 80053a0:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 80053a2:	f3af 8000 	nop.w
 80053a6:	f804 0b01 	strb.w	r0, [r4], #1
 80053aa:	e7f5      	b.n	8005398 <_read+0x8>

080053ac <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 80053ac:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80053ae:	4b0a      	ldr	r3, [pc, #40]	; (80053d8 <_sbrk+0x2c>)
{
 80053b0:	4602      	mov	r2, r0
	if (heap_end == 0)
 80053b2:	6819      	ldr	r1, [r3, #0]
 80053b4:	b909      	cbnz	r1, 80053ba <_sbrk+0xe>
		heap_end = &end;
 80053b6:	4909      	ldr	r1, [pc, #36]	; (80053dc <_sbrk+0x30>)
 80053b8:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 80053ba:	4669      	mov	r1, sp
	prev_heap_end = heap_end;
 80053bc:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 80053be:	4402      	add	r2, r0
 80053c0:	428a      	cmp	r2, r1
 80053c2:	d906      	bls.n	80053d2 <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 80053c4:	f000 f864 	bl	8005490 <__errno>
 80053c8:	230c      	movs	r3, #12
 80053ca:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 80053cc:	f04f 30ff 	mov.w	r0, #4294967295
 80053d0:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 80053d2:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 80053d4:	bd08      	pop	{r3, pc}
 80053d6:	bf00      	nop
 80053d8:	20000554 	.word	0x20000554
 80053dc:	20000908 	.word	0x20000908

080053e0 <_close>:

int _close(int file)
{
	return -1;
}
 80053e0:	f04f 30ff 	mov.w	r0, #4294967295
 80053e4:	4770      	bx	lr

080053e6 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80053e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 80053ea:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 80053ec:	604b      	str	r3, [r1, #4]
}
 80053ee:	4770      	bx	lr

080053f0 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80053f0:	2001      	movs	r0, #1
 80053f2:	4770      	bx	lr

080053f4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80053f4:	2000      	movs	r0, #0
 80053f6:	4770      	bx	lr

080053f8 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80053f8:	4b0f      	ldr	r3, [pc, #60]	; (8005438 <SystemInit+0x40>)
 80053fa:	681a      	ldr	r2, [r3, #0]
 80053fc:	f042 0201 	orr.w	r2, r2, #1
 8005400:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8005402:	6859      	ldr	r1, [r3, #4]
 8005404:	4a0d      	ldr	r2, [pc, #52]	; (800543c <SystemInit+0x44>)
 8005406:	400a      	ands	r2, r1
 8005408:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800540a:	681a      	ldr	r2, [r3, #0]
 800540c:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8005410:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005414:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8005416:	681a      	ldr	r2, [r3, #0]
 8005418:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800541c:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800541e:	685a      	ldr	r2, [r3, #4]
 8005420:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8005424:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8005426:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800542a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800542c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005430:	4b03      	ldr	r3, [pc, #12]	; (8005440 <SystemInit+0x48>)
 8005432:	609a      	str	r2, [r3, #8]
 8005434:	4770      	bx	lr
 8005436:	bf00      	nop
 8005438:	40021000 	.word	0x40021000
 800543c:	f8ff0000 	.word	0xf8ff0000
 8005440:	e000ed00 	.word	0xe000ed00

08005444 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8005444:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8005446:	e003      	b.n	8005450 <LoopCopyDataInit>

08005448 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8005448:	4b0b      	ldr	r3, [pc, #44]	; (8005478 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800544a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800544c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800544e:	3104      	adds	r1, #4

08005450 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8005450:	480a      	ldr	r0, [pc, #40]	; (800547c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8005452:	4b0b      	ldr	r3, [pc, #44]	; (8005480 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8005454:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8005456:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8005458:	d3f6      	bcc.n	8005448 <CopyDataInit>
  ldr r2, =_sbss
 800545a:	4a0a      	ldr	r2, [pc, #40]	; (8005484 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800545c:	e002      	b.n	8005464 <LoopFillZerobss>

0800545e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800545e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8005460:	f842 3b04 	str.w	r3, [r2], #4

08005464 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8005464:	4b08      	ldr	r3, [pc, #32]	; (8005488 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8005466:	429a      	cmp	r2, r3
  bcc FillZerobss
 8005468:	d3f9      	bcc.n	800545e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800546a:	f7ff ffc5 	bl	80053f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800546e:	f000 f815 	bl	800549c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8005472:	f7fd ffe7 	bl	8003444 <main>
  bx lr
 8005476:	4770      	bx	lr
  ldr r3, =_sidata
 8005478:	0800794c 	.word	0x0800794c
  ldr r0, =_sdata
 800547c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8005480:	20000088 	.word	0x20000088
  ldr r2, =_sbss
 8005484:	20000088 	.word	0x20000088
  ldr r3, = _ebss
 8005488:	20000908 	.word	0x20000908

0800548c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800548c:	e7fe      	b.n	800548c <ADC1_2_IRQHandler>
	...

08005490 <__errno>:
 8005490:	4b01      	ldr	r3, [pc, #4]	; (8005498 <__errno+0x8>)
 8005492:	6818      	ldr	r0, [r3, #0]
 8005494:	4770      	bx	lr
 8005496:	bf00      	nop
 8005498:	20000024 	.word	0x20000024

0800549c <__libc_init_array>:
 800549c:	b570      	push	{r4, r5, r6, lr}
 800549e:	2500      	movs	r5, #0
 80054a0:	4e0c      	ldr	r6, [pc, #48]	; (80054d4 <__libc_init_array+0x38>)
 80054a2:	4c0d      	ldr	r4, [pc, #52]	; (80054d8 <__libc_init_array+0x3c>)
 80054a4:	1ba4      	subs	r4, r4, r6
 80054a6:	10a4      	asrs	r4, r4, #2
 80054a8:	42a5      	cmp	r5, r4
 80054aa:	d109      	bne.n	80054c0 <__libc_init_array+0x24>
 80054ac:	f001 f95c 	bl	8006768 <_init>
 80054b0:	2500      	movs	r5, #0
 80054b2:	4e0a      	ldr	r6, [pc, #40]	; (80054dc <__libc_init_array+0x40>)
 80054b4:	4c0a      	ldr	r4, [pc, #40]	; (80054e0 <__libc_init_array+0x44>)
 80054b6:	1ba4      	subs	r4, r4, r6
 80054b8:	10a4      	asrs	r4, r4, #2
 80054ba:	42a5      	cmp	r5, r4
 80054bc:	d105      	bne.n	80054ca <__libc_init_array+0x2e>
 80054be:	bd70      	pop	{r4, r5, r6, pc}
 80054c0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80054c4:	4798      	blx	r3
 80054c6:	3501      	adds	r5, #1
 80054c8:	e7ee      	b.n	80054a8 <__libc_init_array+0xc>
 80054ca:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80054ce:	4798      	blx	r3
 80054d0:	3501      	adds	r5, #1
 80054d2:	e7f2      	b.n	80054ba <__libc_init_array+0x1e>
 80054d4:	08007944 	.word	0x08007944
 80054d8:	08007944 	.word	0x08007944
 80054dc:	08007944 	.word	0x08007944
 80054e0:	08007948 	.word	0x08007948

080054e4 <memcpy>:
 80054e4:	b510      	push	{r4, lr}
 80054e6:	1e43      	subs	r3, r0, #1
 80054e8:	440a      	add	r2, r1
 80054ea:	4291      	cmp	r1, r2
 80054ec:	d100      	bne.n	80054f0 <memcpy+0xc>
 80054ee:	bd10      	pop	{r4, pc}
 80054f0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80054f4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80054f8:	e7f7      	b.n	80054ea <memcpy+0x6>

080054fa <memset>:
 80054fa:	4603      	mov	r3, r0
 80054fc:	4402      	add	r2, r0
 80054fe:	4293      	cmp	r3, r2
 8005500:	d100      	bne.n	8005504 <memset+0xa>
 8005502:	4770      	bx	lr
 8005504:	f803 1b01 	strb.w	r1, [r3], #1
 8005508:	e7f9      	b.n	80054fe <memset+0x4>
	...

0800550c <iprintf>:
 800550c:	b40f      	push	{r0, r1, r2, r3}
 800550e:	4b0a      	ldr	r3, [pc, #40]	; (8005538 <iprintf+0x2c>)
 8005510:	b513      	push	{r0, r1, r4, lr}
 8005512:	681c      	ldr	r4, [r3, #0]
 8005514:	b124      	cbz	r4, 8005520 <iprintf+0x14>
 8005516:	69a3      	ldr	r3, [r4, #24]
 8005518:	b913      	cbnz	r3, 8005520 <iprintf+0x14>
 800551a:	4620      	mov	r0, r4
 800551c:	f000 fa50 	bl	80059c0 <__sinit>
 8005520:	ab05      	add	r3, sp, #20
 8005522:	9a04      	ldr	r2, [sp, #16]
 8005524:	68a1      	ldr	r1, [r4, #8]
 8005526:	4620      	mov	r0, r4
 8005528:	9301      	str	r3, [sp, #4]
 800552a:	f000 fd59 	bl	8005fe0 <_vfiprintf_r>
 800552e:	b002      	add	sp, #8
 8005530:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005534:	b004      	add	sp, #16
 8005536:	4770      	bx	lr
 8005538:	20000024 	.word	0x20000024

0800553c <_puts_r>:
 800553c:	b570      	push	{r4, r5, r6, lr}
 800553e:	460e      	mov	r6, r1
 8005540:	4605      	mov	r5, r0
 8005542:	b118      	cbz	r0, 800554c <_puts_r+0x10>
 8005544:	6983      	ldr	r3, [r0, #24]
 8005546:	b90b      	cbnz	r3, 800554c <_puts_r+0x10>
 8005548:	f000 fa3a 	bl	80059c0 <__sinit>
 800554c:	69ab      	ldr	r3, [r5, #24]
 800554e:	68ac      	ldr	r4, [r5, #8]
 8005550:	b913      	cbnz	r3, 8005558 <_puts_r+0x1c>
 8005552:	4628      	mov	r0, r5
 8005554:	f000 fa34 	bl	80059c0 <__sinit>
 8005558:	4b23      	ldr	r3, [pc, #140]	; (80055e8 <_puts_r+0xac>)
 800555a:	429c      	cmp	r4, r3
 800555c:	d117      	bne.n	800558e <_puts_r+0x52>
 800555e:	686c      	ldr	r4, [r5, #4]
 8005560:	89a3      	ldrh	r3, [r4, #12]
 8005562:	071b      	lsls	r3, r3, #28
 8005564:	d51d      	bpl.n	80055a2 <_puts_r+0x66>
 8005566:	6923      	ldr	r3, [r4, #16]
 8005568:	b1db      	cbz	r3, 80055a2 <_puts_r+0x66>
 800556a:	3e01      	subs	r6, #1
 800556c:	68a3      	ldr	r3, [r4, #8]
 800556e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005572:	3b01      	subs	r3, #1
 8005574:	60a3      	str	r3, [r4, #8]
 8005576:	b9e9      	cbnz	r1, 80055b4 <_puts_r+0x78>
 8005578:	2b00      	cmp	r3, #0
 800557a:	da2e      	bge.n	80055da <_puts_r+0x9e>
 800557c:	4622      	mov	r2, r4
 800557e:	210a      	movs	r1, #10
 8005580:	4628      	mov	r0, r5
 8005582:	f000 f86b 	bl	800565c <__swbuf_r>
 8005586:	3001      	adds	r0, #1
 8005588:	d011      	beq.n	80055ae <_puts_r+0x72>
 800558a:	200a      	movs	r0, #10
 800558c:	bd70      	pop	{r4, r5, r6, pc}
 800558e:	4b17      	ldr	r3, [pc, #92]	; (80055ec <_puts_r+0xb0>)
 8005590:	429c      	cmp	r4, r3
 8005592:	d101      	bne.n	8005598 <_puts_r+0x5c>
 8005594:	68ac      	ldr	r4, [r5, #8]
 8005596:	e7e3      	b.n	8005560 <_puts_r+0x24>
 8005598:	4b15      	ldr	r3, [pc, #84]	; (80055f0 <_puts_r+0xb4>)
 800559a:	429c      	cmp	r4, r3
 800559c:	bf08      	it	eq
 800559e:	68ec      	ldreq	r4, [r5, #12]
 80055a0:	e7de      	b.n	8005560 <_puts_r+0x24>
 80055a2:	4621      	mov	r1, r4
 80055a4:	4628      	mov	r0, r5
 80055a6:	f000 f8ab 	bl	8005700 <__swsetup_r>
 80055aa:	2800      	cmp	r0, #0
 80055ac:	d0dd      	beq.n	800556a <_puts_r+0x2e>
 80055ae:	f04f 30ff 	mov.w	r0, #4294967295
 80055b2:	bd70      	pop	{r4, r5, r6, pc}
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	da04      	bge.n	80055c2 <_puts_r+0x86>
 80055b8:	69a2      	ldr	r2, [r4, #24]
 80055ba:	4293      	cmp	r3, r2
 80055bc:	db06      	blt.n	80055cc <_puts_r+0x90>
 80055be:	290a      	cmp	r1, #10
 80055c0:	d004      	beq.n	80055cc <_puts_r+0x90>
 80055c2:	6823      	ldr	r3, [r4, #0]
 80055c4:	1c5a      	adds	r2, r3, #1
 80055c6:	6022      	str	r2, [r4, #0]
 80055c8:	7019      	strb	r1, [r3, #0]
 80055ca:	e7cf      	b.n	800556c <_puts_r+0x30>
 80055cc:	4622      	mov	r2, r4
 80055ce:	4628      	mov	r0, r5
 80055d0:	f000 f844 	bl	800565c <__swbuf_r>
 80055d4:	3001      	adds	r0, #1
 80055d6:	d1c9      	bne.n	800556c <_puts_r+0x30>
 80055d8:	e7e9      	b.n	80055ae <_puts_r+0x72>
 80055da:	200a      	movs	r0, #10
 80055dc:	6823      	ldr	r3, [r4, #0]
 80055de:	1c5a      	adds	r2, r3, #1
 80055e0:	6022      	str	r2, [r4, #0]
 80055e2:	7018      	strb	r0, [r3, #0]
 80055e4:	bd70      	pop	{r4, r5, r6, pc}
 80055e6:	bf00      	nop
 80055e8:	080078d0 	.word	0x080078d0
 80055ec:	080078f0 	.word	0x080078f0
 80055f0:	080078b0 	.word	0x080078b0

080055f4 <puts>:
 80055f4:	4b02      	ldr	r3, [pc, #8]	; (8005600 <puts+0xc>)
 80055f6:	4601      	mov	r1, r0
 80055f8:	6818      	ldr	r0, [r3, #0]
 80055fa:	f7ff bf9f 	b.w	800553c <_puts_r>
 80055fe:	bf00      	nop
 8005600:	20000024 	.word	0x20000024

08005604 <siprintf>:
 8005604:	b40e      	push	{r1, r2, r3}
 8005606:	f44f 7102 	mov.w	r1, #520	; 0x208
 800560a:	b500      	push	{lr}
 800560c:	b09c      	sub	sp, #112	; 0x70
 800560e:	f8ad 1014 	strh.w	r1, [sp, #20]
 8005612:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005616:	9104      	str	r1, [sp, #16]
 8005618:	9107      	str	r1, [sp, #28]
 800561a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800561e:	ab1d      	add	r3, sp, #116	; 0x74
 8005620:	9002      	str	r0, [sp, #8]
 8005622:	9006      	str	r0, [sp, #24]
 8005624:	4808      	ldr	r0, [pc, #32]	; (8005648 <siprintf+0x44>)
 8005626:	f853 2b04 	ldr.w	r2, [r3], #4
 800562a:	f8ad 1016 	strh.w	r1, [sp, #22]
 800562e:	6800      	ldr	r0, [r0, #0]
 8005630:	a902      	add	r1, sp, #8
 8005632:	9301      	str	r3, [sp, #4]
 8005634:	f000 fbb8 	bl	8005da8 <_svfiprintf_r>
 8005638:	2200      	movs	r2, #0
 800563a:	9b02      	ldr	r3, [sp, #8]
 800563c:	701a      	strb	r2, [r3, #0]
 800563e:	b01c      	add	sp, #112	; 0x70
 8005640:	f85d eb04 	ldr.w	lr, [sp], #4
 8005644:	b003      	add	sp, #12
 8005646:	4770      	bx	lr
 8005648:	20000024 	.word	0x20000024

0800564c <strcpy>:
 800564c:	4603      	mov	r3, r0
 800564e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005652:	f803 2b01 	strb.w	r2, [r3], #1
 8005656:	2a00      	cmp	r2, #0
 8005658:	d1f9      	bne.n	800564e <strcpy+0x2>
 800565a:	4770      	bx	lr

0800565c <__swbuf_r>:
 800565c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800565e:	460e      	mov	r6, r1
 8005660:	4614      	mov	r4, r2
 8005662:	4605      	mov	r5, r0
 8005664:	b118      	cbz	r0, 800566e <__swbuf_r+0x12>
 8005666:	6983      	ldr	r3, [r0, #24]
 8005668:	b90b      	cbnz	r3, 800566e <__swbuf_r+0x12>
 800566a:	f000 f9a9 	bl	80059c0 <__sinit>
 800566e:	4b21      	ldr	r3, [pc, #132]	; (80056f4 <__swbuf_r+0x98>)
 8005670:	429c      	cmp	r4, r3
 8005672:	d12a      	bne.n	80056ca <__swbuf_r+0x6e>
 8005674:	686c      	ldr	r4, [r5, #4]
 8005676:	69a3      	ldr	r3, [r4, #24]
 8005678:	60a3      	str	r3, [r4, #8]
 800567a:	89a3      	ldrh	r3, [r4, #12]
 800567c:	071a      	lsls	r2, r3, #28
 800567e:	d52e      	bpl.n	80056de <__swbuf_r+0x82>
 8005680:	6923      	ldr	r3, [r4, #16]
 8005682:	b363      	cbz	r3, 80056de <__swbuf_r+0x82>
 8005684:	6923      	ldr	r3, [r4, #16]
 8005686:	6820      	ldr	r0, [r4, #0]
 8005688:	b2f6      	uxtb	r6, r6
 800568a:	1ac0      	subs	r0, r0, r3
 800568c:	6963      	ldr	r3, [r4, #20]
 800568e:	4637      	mov	r7, r6
 8005690:	4298      	cmp	r0, r3
 8005692:	db04      	blt.n	800569e <__swbuf_r+0x42>
 8005694:	4621      	mov	r1, r4
 8005696:	4628      	mov	r0, r5
 8005698:	f000 f928 	bl	80058ec <_fflush_r>
 800569c:	bb28      	cbnz	r0, 80056ea <__swbuf_r+0x8e>
 800569e:	68a3      	ldr	r3, [r4, #8]
 80056a0:	3001      	adds	r0, #1
 80056a2:	3b01      	subs	r3, #1
 80056a4:	60a3      	str	r3, [r4, #8]
 80056a6:	6823      	ldr	r3, [r4, #0]
 80056a8:	1c5a      	adds	r2, r3, #1
 80056aa:	6022      	str	r2, [r4, #0]
 80056ac:	701e      	strb	r6, [r3, #0]
 80056ae:	6963      	ldr	r3, [r4, #20]
 80056b0:	4298      	cmp	r0, r3
 80056b2:	d004      	beq.n	80056be <__swbuf_r+0x62>
 80056b4:	89a3      	ldrh	r3, [r4, #12]
 80056b6:	07db      	lsls	r3, r3, #31
 80056b8:	d519      	bpl.n	80056ee <__swbuf_r+0x92>
 80056ba:	2e0a      	cmp	r6, #10
 80056bc:	d117      	bne.n	80056ee <__swbuf_r+0x92>
 80056be:	4621      	mov	r1, r4
 80056c0:	4628      	mov	r0, r5
 80056c2:	f000 f913 	bl	80058ec <_fflush_r>
 80056c6:	b190      	cbz	r0, 80056ee <__swbuf_r+0x92>
 80056c8:	e00f      	b.n	80056ea <__swbuf_r+0x8e>
 80056ca:	4b0b      	ldr	r3, [pc, #44]	; (80056f8 <__swbuf_r+0x9c>)
 80056cc:	429c      	cmp	r4, r3
 80056ce:	d101      	bne.n	80056d4 <__swbuf_r+0x78>
 80056d0:	68ac      	ldr	r4, [r5, #8]
 80056d2:	e7d0      	b.n	8005676 <__swbuf_r+0x1a>
 80056d4:	4b09      	ldr	r3, [pc, #36]	; (80056fc <__swbuf_r+0xa0>)
 80056d6:	429c      	cmp	r4, r3
 80056d8:	bf08      	it	eq
 80056da:	68ec      	ldreq	r4, [r5, #12]
 80056dc:	e7cb      	b.n	8005676 <__swbuf_r+0x1a>
 80056de:	4621      	mov	r1, r4
 80056e0:	4628      	mov	r0, r5
 80056e2:	f000 f80d 	bl	8005700 <__swsetup_r>
 80056e6:	2800      	cmp	r0, #0
 80056e8:	d0cc      	beq.n	8005684 <__swbuf_r+0x28>
 80056ea:	f04f 37ff 	mov.w	r7, #4294967295
 80056ee:	4638      	mov	r0, r7
 80056f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80056f2:	bf00      	nop
 80056f4:	080078d0 	.word	0x080078d0
 80056f8:	080078f0 	.word	0x080078f0
 80056fc:	080078b0 	.word	0x080078b0

08005700 <__swsetup_r>:
 8005700:	4b32      	ldr	r3, [pc, #200]	; (80057cc <__swsetup_r+0xcc>)
 8005702:	b570      	push	{r4, r5, r6, lr}
 8005704:	681d      	ldr	r5, [r3, #0]
 8005706:	4606      	mov	r6, r0
 8005708:	460c      	mov	r4, r1
 800570a:	b125      	cbz	r5, 8005716 <__swsetup_r+0x16>
 800570c:	69ab      	ldr	r3, [r5, #24]
 800570e:	b913      	cbnz	r3, 8005716 <__swsetup_r+0x16>
 8005710:	4628      	mov	r0, r5
 8005712:	f000 f955 	bl	80059c0 <__sinit>
 8005716:	4b2e      	ldr	r3, [pc, #184]	; (80057d0 <__swsetup_r+0xd0>)
 8005718:	429c      	cmp	r4, r3
 800571a:	d10f      	bne.n	800573c <__swsetup_r+0x3c>
 800571c:	686c      	ldr	r4, [r5, #4]
 800571e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005722:	b29a      	uxth	r2, r3
 8005724:	0715      	lsls	r5, r2, #28
 8005726:	d42c      	bmi.n	8005782 <__swsetup_r+0x82>
 8005728:	06d0      	lsls	r0, r2, #27
 800572a:	d411      	bmi.n	8005750 <__swsetup_r+0x50>
 800572c:	2209      	movs	r2, #9
 800572e:	6032      	str	r2, [r6, #0]
 8005730:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005734:	81a3      	strh	r3, [r4, #12]
 8005736:	f04f 30ff 	mov.w	r0, #4294967295
 800573a:	bd70      	pop	{r4, r5, r6, pc}
 800573c:	4b25      	ldr	r3, [pc, #148]	; (80057d4 <__swsetup_r+0xd4>)
 800573e:	429c      	cmp	r4, r3
 8005740:	d101      	bne.n	8005746 <__swsetup_r+0x46>
 8005742:	68ac      	ldr	r4, [r5, #8]
 8005744:	e7eb      	b.n	800571e <__swsetup_r+0x1e>
 8005746:	4b24      	ldr	r3, [pc, #144]	; (80057d8 <__swsetup_r+0xd8>)
 8005748:	429c      	cmp	r4, r3
 800574a:	bf08      	it	eq
 800574c:	68ec      	ldreq	r4, [r5, #12]
 800574e:	e7e6      	b.n	800571e <__swsetup_r+0x1e>
 8005750:	0751      	lsls	r1, r2, #29
 8005752:	d512      	bpl.n	800577a <__swsetup_r+0x7a>
 8005754:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005756:	b141      	cbz	r1, 800576a <__swsetup_r+0x6a>
 8005758:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800575c:	4299      	cmp	r1, r3
 800575e:	d002      	beq.n	8005766 <__swsetup_r+0x66>
 8005760:	4630      	mov	r0, r6
 8005762:	f000 fa1b 	bl	8005b9c <_free_r>
 8005766:	2300      	movs	r3, #0
 8005768:	6363      	str	r3, [r4, #52]	; 0x34
 800576a:	89a3      	ldrh	r3, [r4, #12]
 800576c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005770:	81a3      	strh	r3, [r4, #12]
 8005772:	2300      	movs	r3, #0
 8005774:	6063      	str	r3, [r4, #4]
 8005776:	6923      	ldr	r3, [r4, #16]
 8005778:	6023      	str	r3, [r4, #0]
 800577a:	89a3      	ldrh	r3, [r4, #12]
 800577c:	f043 0308 	orr.w	r3, r3, #8
 8005780:	81a3      	strh	r3, [r4, #12]
 8005782:	6923      	ldr	r3, [r4, #16]
 8005784:	b94b      	cbnz	r3, 800579a <__swsetup_r+0x9a>
 8005786:	89a3      	ldrh	r3, [r4, #12]
 8005788:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800578c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005790:	d003      	beq.n	800579a <__swsetup_r+0x9a>
 8005792:	4621      	mov	r1, r4
 8005794:	4630      	mov	r0, r6
 8005796:	f000 f9c1 	bl	8005b1c <__smakebuf_r>
 800579a:	89a2      	ldrh	r2, [r4, #12]
 800579c:	f012 0301 	ands.w	r3, r2, #1
 80057a0:	d00c      	beq.n	80057bc <__swsetup_r+0xbc>
 80057a2:	2300      	movs	r3, #0
 80057a4:	60a3      	str	r3, [r4, #8]
 80057a6:	6963      	ldr	r3, [r4, #20]
 80057a8:	425b      	negs	r3, r3
 80057aa:	61a3      	str	r3, [r4, #24]
 80057ac:	6923      	ldr	r3, [r4, #16]
 80057ae:	b953      	cbnz	r3, 80057c6 <__swsetup_r+0xc6>
 80057b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80057b4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80057b8:	d1ba      	bne.n	8005730 <__swsetup_r+0x30>
 80057ba:	bd70      	pop	{r4, r5, r6, pc}
 80057bc:	0792      	lsls	r2, r2, #30
 80057be:	bf58      	it	pl
 80057c0:	6963      	ldrpl	r3, [r4, #20]
 80057c2:	60a3      	str	r3, [r4, #8]
 80057c4:	e7f2      	b.n	80057ac <__swsetup_r+0xac>
 80057c6:	2000      	movs	r0, #0
 80057c8:	e7f7      	b.n	80057ba <__swsetup_r+0xba>
 80057ca:	bf00      	nop
 80057cc:	20000024 	.word	0x20000024
 80057d0:	080078d0 	.word	0x080078d0
 80057d4:	080078f0 	.word	0x080078f0
 80057d8:	080078b0 	.word	0x080078b0

080057dc <__sflush_r>:
 80057dc:	898a      	ldrh	r2, [r1, #12]
 80057de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057e2:	4605      	mov	r5, r0
 80057e4:	0710      	lsls	r0, r2, #28
 80057e6:	460c      	mov	r4, r1
 80057e8:	d45a      	bmi.n	80058a0 <__sflush_r+0xc4>
 80057ea:	684b      	ldr	r3, [r1, #4]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	dc05      	bgt.n	80057fc <__sflush_r+0x20>
 80057f0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	dc02      	bgt.n	80057fc <__sflush_r+0x20>
 80057f6:	2000      	movs	r0, #0
 80057f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80057fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80057fe:	2e00      	cmp	r6, #0
 8005800:	d0f9      	beq.n	80057f6 <__sflush_r+0x1a>
 8005802:	2300      	movs	r3, #0
 8005804:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005808:	682f      	ldr	r7, [r5, #0]
 800580a:	602b      	str	r3, [r5, #0]
 800580c:	d033      	beq.n	8005876 <__sflush_r+0x9a>
 800580e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005810:	89a3      	ldrh	r3, [r4, #12]
 8005812:	075a      	lsls	r2, r3, #29
 8005814:	d505      	bpl.n	8005822 <__sflush_r+0x46>
 8005816:	6863      	ldr	r3, [r4, #4]
 8005818:	1ac0      	subs	r0, r0, r3
 800581a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800581c:	b10b      	cbz	r3, 8005822 <__sflush_r+0x46>
 800581e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005820:	1ac0      	subs	r0, r0, r3
 8005822:	2300      	movs	r3, #0
 8005824:	4602      	mov	r2, r0
 8005826:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005828:	6a21      	ldr	r1, [r4, #32]
 800582a:	4628      	mov	r0, r5
 800582c:	47b0      	blx	r6
 800582e:	1c43      	adds	r3, r0, #1
 8005830:	89a3      	ldrh	r3, [r4, #12]
 8005832:	d106      	bne.n	8005842 <__sflush_r+0x66>
 8005834:	6829      	ldr	r1, [r5, #0]
 8005836:	291d      	cmp	r1, #29
 8005838:	d84b      	bhi.n	80058d2 <__sflush_r+0xf6>
 800583a:	4a2b      	ldr	r2, [pc, #172]	; (80058e8 <__sflush_r+0x10c>)
 800583c:	40ca      	lsrs	r2, r1
 800583e:	07d6      	lsls	r6, r2, #31
 8005840:	d547      	bpl.n	80058d2 <__sflush_r+0xf6>
 8005842:	2200      	movs	r2, #0
 8005844:	6062      	str	r2, [r4, #4]
 8005846:	6922      	ldr	r2, [r4, #16]
 8005848:	04d9      	lsls	r1, r3, #19
 800584a:	6022      	str	r2, [r4, #0]
 800584c:	d504      	bpl.n	8005858 <__sflush_r+0x7c>
 800584e:	1c42      	adds	r2, r0, #1
 8005850:	d101      	bne.n	8005856 <__sflush_r+0x7a>
 8005852:	682b      	ldr	r3, [r5, #0]
 8005854:	b903      	cbnz	r3, 8005858 <__sflush_r+0x7c>
 8005856:	6560      	str	r0, [r4, #84]	; 0x54
 8005858:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800585a:	602f      	str	r7, [r5, #0]
 800585c:	2900      	cmp	r1, #0
 800585e:	d0ca      	beq.n	80057f6 <__sflush_r+0x1a>
 8005860:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005864:	4299      	cmp	r1, r3
 8005866:	d002      	beq.n	800586e <__sflush_r+0x92>
 8005868:	4628      	mov	r0, r5
 800586a:	f000 f997 	bl	8005b9c <_free_r>
 800586e:	2000      	movs	r0, #0
 8005870:	6360      	str	r0, [r4, #52]	; 0x34
 8005872:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005876:	6a21      	ldr	r1, [r4, #32]
 8005878:	2301      	movs	r3, #1
 800587a:	4628      	mov	r0, r5
 800587c:	47b0      	blx	r6
 800587e:	1c41      	adds	r1, r0, #1
 8005880:	d1c6      	bne.n	8005810 <__sflush_r+0x34>
 8005882:	682b      	ldr	r3, [r5, #0]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d0c3      	beq.n	8005810 <__sflush_r+0x34>
 8005888:	2b1d      	cmp	r3, #29
 800588a:	d001      	beq.n	8005890 <__sflush_r+0xb4>
 800588c:	2b16      	cmp	r3, #22
 800588e:	d101      	bne.n	8005894 <__sflush_r+0xb8>
 8005890:	602f      	str	r7, [r5, #0]
 8005892:	e7b0      	b.n	80057f6 <__sflush_r+0x1a>
 8005894:	89a3      	ldrh	r3, [r4, #12]
 8005896:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800589a:	81a3      	strh	r3, [r4, #12]
 800589c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80058a0:	690f      	ldr	r7, [r1, #16]
 80058a2:	2f00      	cmp	r7, #0
 80058a4:	d0a7      	beq.n	80057f6 <__sflush_r+0x1a>
 80058a6:	0793      	lsls	r3, r2, #30
 80058a8:	bf18      	it	ne
 80058aa:	2300      	movne	r3, #0
 80058ac:	680e      	ldr	r6, [r1, #0]
 80058ae:	bf08      	it	eq
 80058b0:	694b      	ldreq	r3, [r1, #20]
 80058b2:	eba6 0807 	sub.w	r8, r6, r7
 80058b6:	600f      	str	r7, [r1, #0]
 80058b8:	608b      	str	r3, [r1, #8]
 80058ba:	f1b8 0f00 	cmp.w	r8, #0
 80058be:	dd9a      	ble.n	80057f6 <__sflush_r+0x1a>
 80058c0:	4643      	mov	r3, r8
 80058c2:	463a      	mov	r2, r7
 80058c4:	6a21      	ldr	r1, [r4, #32]
 80058c6:	4628      	mov	r0, r5
 80058c8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80058ca:	47b0      	blx	r6
 80058cc:	2800      	cmp	r0, #0
 80058ce:	dc07      	bgt.n	80058e0 <__sflush_r+0x104>
 80058d0:	89a3      	ldrh	r3, [r4, #12]
 80058d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80058d6:	81a3      	strh	r3, [r4, #12]
 80058d8:	f04f 30ff 	mov.w	r0, #4294967295
 80058dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80058e0:	4407      	add	r7, r0
 80058e2:	eba8 0800 	sub.w	r8, r8, r0
 80058e6:	e7e8      	b.n	80058ba <__sflush_r+0xde>
 80058e8:	20400001 	.word	0x20400001

080058ec <_fflush_r>:
 80058ec:	b538      	push	{r3, r4, r5, lr}
 80058ee:	690b      	ldr	r3, [r1, #16]
 80058f0:	4605      	mov	r5, r0
 80058f2:	460c      	mov	r4, r1
 80058f4:	b1db      	cbz	r3, 800592e <_fflush_r+0x42>
 80058f6:	b118      	cbz	r0, 8005900 <_fflush_r+0x14>
 80058f8:	6983      	ldr	r3, [r0, #24]
 80058fa:	b90b      	cbnz	r3, 8005900 <_fflush_r+0x14>
 80058fc:	f000 f860 	bl	80059c0 <__sinit>
 8005900:	4b0c      	ldr	r3, [pc, #48]	; (8005934 <_fflush_r+0x48>)
 8005902:	429c      	cmp	r4, r3
 8005904:	d109      	bne.n	800591a <_fflush_r+0x2e>
 8005906:	686c      	ldr	r4, [r5, #4]
 8005908:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800590c:	b17b      	cbz	r3, 800592e <_fflush_r+0x42>
 800590e:	4621      	mov	r1, r4
 8005910:	4628      	mov	r0, r5
 8005912:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005916:	f7ff bf61 	b.w	80057dc <__sflush_r>
 800591a:	4b07      	ldr	r3, [pc, #28]	; (8005938 <_fflush_r+0x4c>)
 800591c:	429c      	cmp	r4, r3
 800591e:	d101      	bne.n	8005924 <_fflush_r+0x38>
 8005920:	68ac      	ldr	r4, [r5, #8]
 8005922:	e7f1      	b.n	8005908 <_fflush_r+0x1c>
 8005924:	4b05      	ldr	r3, [pc, #20]	; (800593c <_fflush_r+0x50>)
 8005926:	429c      	cmp	r4, r3
 8005928:	bf08      	it	eq
 800592a:	68ec      	ldreq	r4, [r5, #12]
 800592c:	e7ec      	b.n	8005908 <_fflush_r+0x1c>
 800592e:	2000      	movs	r0, #0
 8005930:	bd38      	pop	{r3, r4, r5, pc}
 8005932:	bf00      	nop
 8005934:	080078d0 	.word	0x080078d0
 8005938:	080078f0 	.word	0x080078f0
 800593c:	080078b0 	.word	0x080078b0

08005940 <_cleanup_r>:
 8005940:	4901      	ldr	r1, [pc, #4]	; (8005948 <_cleanup_r+0x8>)
 8005942:	f000 b8a9 	b.w	8005a98 <_fwalk_reent>
 8005946:	bf00      	nop
 8005948:	080058ed 	.word	0x080058ed

0800594c <std.isra.0>:
 800594c:	2300      	movs	r3, #0
 800594e:	b510      	push	{r4, lr}
 8005950:	4604      	mov	r4, r0
 8005952:	6003      	str	r3, [r0, #0]
 8005954:	6043      	str	r3, [r0, #4]
 8005956:	6083      	str	r3, [r0, #8]
 8005958:	8181      	strh	r1, [r0, #12]
 800595a:	6643      	str	r3, [r0, #100]	; 0x64
 800595c:	81c2      	strh	r2, [r0, #14]
 800595e:	6103      	str	r3, [r0, #16]
 8005960:	6143      	str	r3, [r0, #20]
 8005962:	6183      	str	r3, [r0, #24]
 8005964:	4619      	mov	r1, r3
 8005966:	2208      	movs	r2, #8
 8005968:	305c      	adds	r0, #92	; 0x5c
 800596a:	f7ff fdc6 	bl	80054fa <memset>
 800596e:	4b05      	ldr	r3, [pc, #20]	; (8005984 <std.isra.0+0x38>)
 8005970:	6224      	str	r4, [r4, #32]
 8005972:	6263      	str	r3, [r4, #36]	; 0x24
 8005974:	4b04      	ldr	r3, [pc, #16]	; (8005988 <std.isra.0+0x3c>)
 8005976:	62a3      	str	r3, [r4, #40]	; 0x28
 8005978:	4b04      	ldr	r3, [pc, #16]	; (800598c <std.isra.0+0x40>)
 800597a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800597c:	4b04      	ldr	r3, [pc, #16]	; (8005990 <std.isra.0+0x44>)
 800597e:	6323      	str	r3, [r4, #48]	; 0x30
 8005980:	bd10      	pop	{r4, pc}
 8005982:	bf00      	nop
 8005984:	0800655d 	.word	0x0800655d
 8005988:	0800657f 	.word	0x0800657f
 800598c:	080065b7 	.word	0x080065b7
 8005990:	080065db 	.word	0x080065db

08005994 <__sfmoreglue>:
 8005994:	b570      	push	{r4, r5, r6, lr}
 8005996:	2568      	movs	r5, #104	; 0x68
 8005998:	1e4a      	subs	r2, r1, #1
 800599a:	4355      	muls	r5, r2
 800599c:	460e      	mov	r6, r1
 800599e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80059a2:	f000 f947 	bl	8005c34 <_malloc_r>
 80059a6:	4604      	mov	r4, r0
 80059a8:	b140      	cbz	r0, 80059bc <__sfmoreglue+0x28>
 80059aa:	2100      	movs	r1, #0
 80059ac:	e880 0042 	stmia.w	r0, {r1, r6}
 80059b0:	300c      	adds	r0, #12
 80059b2:	60a0      	str	r0, [r4, #8]
 80059b4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80059b8:	f7ff fd9f 	bl	80054fa <memset>
 80059bc:	4620      	mov	r0, r4
 80059be:	bd70      	pop	{r4, r5, r6, pc}

080059c0 <__sinit>:
 80059c0:	6983      	ldr	r3, [r0, #24]
 80059c2:	b510      	push	{r4, lr}
 80059c4:	4604      	mov	r4, r0
 80059c6:	bb33      	cbnz	r3, 8005a16 <__sinit+0x56>
 80059c8:	6483      	str	r3, [r0, #72]	; 0x48
 80059ca:	64c3      	str	r3, [r0, #76]	; 0x4c
 80059cc:	6503      	str	r3, [r0, #80]	; 0x50
 80059ce:	4b12      	ldr	r3, [pc, #72]	; (8005a18 <__sinit+0x58>)
 80059d0:	4a12      	ldr	r2, [pc, #72]	; (8005a1c <__sinit+0x5c>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	6282      	str	r2, [r0, #40]	; 0x28
 80059d6:	4298      	cmp	r0, r3
 80059d8:	bf04      	itt	eq
 80059da:	2301      	moveq	r3, #1
 80059dc:	6183      	streq	r3, [r0, #24]
 80059de:	f000 f81f 	bl	8005a20 <__sfp>
 80059e2:	6060      	str	r0, [r4, #4]
 80059e4:	4620      	mov	r0, r4
 80059e6:	f000 f81b 	bl	8005a20 <__sfp>
 80059ea:	60a0      	str	r0, [r4, #8]
 80059ec:	4620      	mov	r0, r4
 80059ee:	f000 f817 	bl	8005a20 <__sfp>
 80059f2:	2200      	movs	r2, #0
 80059f4:	60e0      	str	r0, [r4, #12]
 80059f6:	2104      	movs	r1, #4
 80059f8:	6860      	ldr	r0, [r4, #4]
 80059fa:	f7ff ffa7 	bl	800594c <std.isra.0>
 80059fe:	2201      	movs	r2, #1
 8005a00:	2109      	movs	r1, #9
 8005a02:	68a0      	ldr	r0, [r4, #8]
 8005a04:	f7ff ffa2 	bl	800594c <std.isra.0>
 8005a08:	2202      	movs	r2, #2
 8005a0a:	2112      	movs	r1, #18
 8005a0c:	68e0      	ldr	r0, [r4, #12]
 8005a0e:	f7ff ff9d 	bl	800594c <std.isra.0>
 8005a12:	2301      	movs	r3, #1
 8005a14:	61a3      	str	r3, [r4, #24]
 8005a16:	bd10      	pop	{r4, pc}
 8005a18:	080078ac 	.word	0x080078ac
 8005a1c:	08005941 	.word	0x08005941

08005a20 <__sfp>:
 8005a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a22:	4b1c      	ldr	r3, [pc, #112]	; (8005a94 <__sfp+0x74>)
 8005a24:	4607      	mov	r7, r0
 8005a26:	681e      	ldr	r6, [r3, #0]
 8005a28:	69b3      	ldr	r3, [r6, #24]
 8005a2a:	b913      	cbnz	r3, 8005a32 <__sfp+0x12>
 8005a2c:	4630      	mov	r0, r6
 8005a2e:	f7ff ffc7 	bl	80059c0 <__sinit>
 8005a32:	3648      	adds	r6, #72	; 0x48
 8005a34:	68b4      	ldr	r4, [r6, #8]
 8005a36:	6873      	ldr	r3, [r6, #4]
 8005a38:	3b01      	subs	r3, #1
 8005a3a:	d503      	bpl.n	8005a44 <__sfp+0x24>
 8005a3c:	6833      	ldr	r3, [r6, #0]
 8005a3e:	b133      	cbz	r3, 8005a4e <__sfp+0x2e>
 8005a40:	6836      	ldr	r6, [r6, #0]
 8005a42:	e7f7      	b.n	8005a34 <__sfp+0x14>
 8005a44:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005a48:	b16d      	cbz	r5, 8005a66 <__sfp+0x46>
 8005a4a:	3468      	adds	r4, #104	; 0x68
 8005a4c:	e7f4      	b.n	8005a38 <__sfp+0x18>
 8005a4e:	2104      	movs	r1, #4
 8005a50:	4638      	mov	r0, r7
 8005a52:	f7ff ff9f 	bl	8005994 <__sfmoreglue>
 8005a56:	6030      	str	r0, [r6, #0]
 8005a58:	2800      	cmp	r0, #0
 8005a5a:	d1f1      	bne.n	8005a40 <__sfp+0x20>
 8005a5c:	230c      	movs	r3, #12
 8005a5e:	4604      	mov	r4, r0
 8005a60:	603b      	str	r3, [r7, #0]
 8005a62:	4620      	mov	r0, r4
 8005a64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a66:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005a6a:	81e3      	strh	r3, [r4, #14]
 8005a6c:	2301      	movs	r3, #1
 8005a6e:	6665      	str	r5, [r4, #100]	; 0x64
 8005a70:	81a3      	strh	r3, [r4, #12]
 8005a72:	6025      	str	r5, [r4, #0]
 8005a74:	60a5      	str	r5, [r4, #8]
 8005a76:	6065      	str	r5, [r4, #4]
 8005a78:	6125      	str	r5, [r4, #16]
 8005a7a:	6165      	str	r5, [r4, #20]
 8005a7c:	61a5      	str	r5, [r4, #24]
 8005a7e:	2208      	movs	r2, #8
 8005a80:	4629      	mov	r1, r5
 8005a82:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005a86:	f7ff fd38 	bl	80054fa <memset>
 8005a8a:	6365      	str	r5, [r4, #52]	; 0x34
 8005a8c:	63a5      	str	r5, [r4, #56]	; 0x38
 8005a8e:	64a5      	str	r5, [r4, #72]	; 0x48
 8005a90:	64e5      	str	r5, [r4, #76]	; 0x4c
 8005a92:	e7e6      	b.n	8005a62 <__sfp+0x42>
 8005a94:	080078ac 	.word	0x080078ac

08005a98 <_fwalk_reent>:
 8005a98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a9c:	4680      	mov	r8, r0
 8005a9e:	4689      	mov	r9, r1
 8005aa0:	2600      	movs	r6, #0
 8005aa2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005aa6:	b914      	cbnz	r4, 8005aae <_fwalk_reent+0x16>
 8005aa8:	4630      	mov	r0, r6
 8005aaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005aae:	68a5      	ldr	r5, [r4, #8]
 8005ab0:	6867      	ldr	r7, [r4, #4]
 8005ab2:	3f01      	subs	r7, #1
 8005ab4:	d501      	bpl.n	8005aba <_fwalk_reent+0x22>
 8005ab6:	6824      	ldr	r4, [r4, #0]
 8005ab8:	e7f5      	b.n	8005aa6 <_fwalk_reent+0xe>
 8005aba:	89ab      	ldrh	r3, [r5, #12]
 8005abc:	2b01      	cmp	r3, #1
 8005abe:	d907      	bls.n	8005ad0 <_fwalk_reent+0x38>
 8005ac0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005ac4:	3301      	adds	r3, #1
 8005ac6:	d003      	beq.n	8005ad0 <_fwalk_reent+0x38>
 8005ac8:	4629      	mov	r1, r5
 8005aca:	4640      	mov	r0, r8
 8005acc:	47c8      	blx	r9
 8005ace:	4306      	orrs	r6, r0
 8005ad0:	3568      	adds	r5, #104	; 0x68
 8005ad2:	e7ee      	b.n	8005ab2 <_fwalk_reent+0x1a>

08005ad4 <__swhatbuf_r>:
 8005ad4:	b570      	push	{r4, r5, r6, lr}
 8005ad6:	460e      	mov	r6, r1
 8005ad8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005adc:	b090      	sub	sp, #64	; 0x40
 8005ade:	2900      	cmp	r1, #0
 8005ae0:	4614      	mov	r4, r2
 8005ae2:	461d      	mov	r5, r3
 8005ae4:	da07      	bge.n	8005af6 <__swhatbuf_r+0x22>
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	602b      	str	r3, [r5, #0]
 8005aea:	89b3      	ldrh	r3, [r6, #12]
 8005aec:	061a      	lsls	r2, r3, #24
 8005aee:	d410      	bmi.n	8005b12 <__swhatbuf_r+0x3e>
 8005af0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005af4:	e00e      	b.n	8005b14 <__swhatbuf_r+0x40>
 8005af6:	aa01      	add	r2, sp, #4
 8005af8:	f000 fd96 	bl	8006628 <_fstat_r>
 8005afc:	2800      	cmp	r0, #0
 8005afe:	dbf2      	blt.n	8005ae6 <__swhatbuf_r+0x12>
 8005b00:	9a02      	ldr	r2, [sp, #8]
 8005b02:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005b06:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005b0a:	425a      	negs	r2, r3
 8005b0c:	415a      	adcs	r2, r3
 8005b0e:	602a      	str	r2, [r5, #0]
 8005b10:	e7ee      	b.n	8005af0 <__swhatbuf_r+0x1c>
 8005b12:	2340      	movs	r3, #64	; 0x40
 8005b14:	2000      	movs	r0, #0
 8005b16:	6023      	str	r3, [r4, #0]
 8005b18:	b010      	add	sp, #64	; 0x40
 8005b1a:	bd70      	pop	{r4, r5, r6, pc}

08005b1c <__smakebuf_r>:
 8005b1c:	898b      	ldrh	r3, [r1, #12]
 8005b1e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005b20:	079d      	lsls	r5, r3, #30
 8005b22:	4606      	mov	r6, r0
 8005b24:	460c      	mov	r4, r1
 8005b26:	d507      	bpl.n	8005b38 <__smakebuf_r+0x1c>
 8005b28:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005b2c:	6023      	str	r3, [r4, #0]
 8005b2e:	6123      	str	r3, [r4, #16]
 8005b30:	2301      	movs	r3, #1
 8005b32:	6163      	str	r3, [r4, #20]
 8005b34:	b002      	add	sp, #8
 8005b36:	bd70      	pop	{r4, r5, r6, pc}
 8005b38:	ab01      	add	r3, sp, #4
 8005b3a:	466a      	mov	r2, sp
 8005b3c:	f7ff ffca 	bl	8005ad4 <__swhatbuf_r>
 8005b40:	9900      	ldr	r1, [sp, #0]
 8005b42:	4605      	mov	r5, r0
 8005b44:	4630      	mov	r0, r6
 8005b46:	f000 f875 	bl	8005c34 <_malloc_r>
 8005b4a:	b948      	cbnz	r0, 8005b60 <__smakebuf_r+0x44>
 8005b4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b50:	059a      	lsls	r2, r3, #22
 8005b52:	d4ef      	bmi.n	8005b34 <__smakebuf_r+0x18>
 8005b54:	f023 0303 	bic.w	r3, r3, #3
 8005b58:	f043 0302 	orr.w	r3, r3, #2
 8005b5c:	81a3      	strh	r3, [r4, #12]
 8005b5e:	e7e3      	b.n	8005b28 <__smakebuf_r+0xc>
 8005b60:	4b0d      	ldr	r3, [pc, #52]	; (8005b98 <__smakebuf_r+0x7c>)
 8005b62:	62b3      	str	r3, [r6, #40]	; 0x28
 8005b64:	89a3      	ldrh	r3, [r4, #12]
 8005b66:	6020      	str	r0, [r4, #0]
 8005b68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b6c:	81a3      	strh	r3, [r4, #12]
 8005b6e:	9b00      	ldr	r3, [sp, #0]
 8005b70:	6120      	str	r0, [r4, #16]
 8005b72:	6163      	str	r3, [r4, #20]
 8005b74:	9b01      	ldr	r3, [sp, #4]
 8005b76:	b15b      	cbz	r3, 8005b90 <__smakebuf_r+0x74>
 8005b78:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005b7c:	4630      	mov	r0, r6
 8005b7e:	f000 fd65 	bl	800664c <_isatty_r>
 8005b82:	b128      	cbz	r0, 8005b90 <__smakebuf_r+0x74>
 8005b84:	89a3      	ldrh	r3, [r4, #12]
 8005b86:	f023 0303 	bic.w	r3, r3, #3
 8005b8a:	f043 0301 	orr.w	r3, r3, #1
 8005b8e:	81a3      	strh	r3, [r4, #12]
 8005b90:	89a3      	ldrh	r3, [r4, #12]
 8005b92:	431d      	orrs	r5, r3
 8005b94:	81a5      	strh	r5, [r4, #12]
 8005b96:	e7cd      	b.n	8005b34 <__smakebuf_r+0x18>
 8005b98:	08005941 	.word	0x08005941

08005b9c <_free_r>:
 8005b9c:	b538      	push	{r3, r4, r5, lr}
 8005b9e:	4605      	mov	r5, r0
 8005ba0:	2900      	cmp	r1, #0
 8005ba2:	d043      	beq.n	8005c2c <_free_r+0x90>
 8005ba4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ba8:	1f0c      	subs	r4, r1, #4
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	bfb8      	it	lt
 8005bae:	18e4      	addlt	r4, r4, r3
 8005bb0:	f000 fd96 	bl	80066e0 <__malloc_lock>
 8005bb4:	4a1e      	ldr	r2, [pc, #120]	; (8005c30 <_free_r+0x94>)
 8005bb6:	6813      	ldr	r3, [r2, #0]
 8005bb8:	4610      	mov	r0, r2
 8005bba:	b933      	cbnz	r3, 8005bca <_free_r+0x2e>
 8005bbc:	6063      	str	r3, [r4, #4]
 8005bbe:	6014      	str	r4, [r2, #0]
 8005bc0:	4628      	mov	r0, r5
 8005bc2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005bc6:	f000 bd8c 	b.w	80066e2 <__malloc_unlock>
 8005bca:	42a3      	cmp	r3, r4
 8005bcc:	d90b      	bls.n	8005be6 <_free_r+0x4a>
 8005bce:	6821      	ldr	r1, [r4, #0]
 8005bd0:	1862      	adds	r2, r4, r1
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	bf01      	itttt	eq
 8005bd6:	681a      	ldreq	r2, [r3, #0]
 8005bd8:	685b      	ldreq	r3, [r3, #4]
 8005bda:	1852      	addeq	r2, r2, r1
 8005bdc:	6022      	streq	r2, [r4, #0]
 8005bde:	6063      	str	r3, [r4, #4]
 8005be0:	6004      	str	r4, [r0, #0]
 8005be2:	e7ed      	b.n	8005bc0 <_free_r+0x24>
 8005be4:	4613      	mov	r3, r2
 8005be6:	685a      	ldr	r2, [r3, #4]
 8005be8:	b10a      	cbz	r2, 8005bee <_free_r+0x52>
 8005bea:	42a2      	cmp	r2, r4
 8005bec:	d9fa      	bls.n	8005be4 <_free_r+0x48>
 8005bee:	6819      	ldr	r1, [r3, #0]
 8005bf0:	1858      	adds	r0, r3, r1
 8005bf2:	42a0      	cmp	r0, r4
 8005bf4:	d10b      	bne.n	8005c0e <_free_r+0x72>
 8005bf6:	6820      	ldr	r0, [r4, #0]
 8005bf8:	4401      	add	r1, r0
 8005bfa:	1858      	adds	r0, r3, r1
 8005bfc:	4282      	cmp	r2, r0
 8005bfe:	6019      	str	r1, [r3, #0]
 8005c00:	d1de      	bne.n	8005bc0 <_free_r+0x24>
 8005c02:	6810      	ldr	r0, [r2, #0]
 8005c04:	6852      	ldr	r2, [r2, #4]
 8005c06:	4401      	add	r1, r0
 8005c08:	6019      	str	r1, [r3, #0]
 8005c0a:	605a      	str	r2, [r3, #4]
 8005c0c:	e7d8      	b.n	8005bc0 <_free_r+0x24>
 8005c0e:	d902      	bls.n	8005c16 <_free_r+0x7a>
 8005c10:	230c      	movs	r3, #12
 8005c12:	602b      	str	r3, [r5, #0]
 8005c14:	e7d4      	b.n	8005bc0 <_free_r+0x24>
 8005c16:	6820      	ldr	r0, [r4, #0]
 8005c18:	1821      	adds	r1, r4, r0
 8005c1a:	428a      	cmp	r2, r1
 8005c1c:	bf01      	itttt	eq
 8005c1e:	6811      	ldreq	r1, [r2, #0]
 8005c20:	6852      	ldreq	r2, [r2, #4]
 8005c22:	1809      	addeq	r1, r1, r0
 8005c24:	6021      	streq	r1, [r4, #0]
 8005c26:	6062      	str	r2, [r4, #4]
 8005c28:	605c      	str	r4, [r3, #4]
 8005c2a:	e7c9      	b.n	8005bc0 <_free_r+0x24>
 8005c2c:	bd38      	pop	{r3, r4, r5, pc}
 8005c2e:	bf00      	nop
 8005c30:	20000558 	.word	0x20000558

08005c34 <_malloc_r>:
 8005c34:	b570      	push	{r4, r5, r6, lr}
 8005c36:	1ccd      	adds	r5, r1, #3
 8005c38:	f025 0503 	bic.w	r5, r5, #3
 8005c3c:	3508      	adds	r5, #8
 8005c3e:	2d0c      	cmp	r5, #12
 8005c40:	bf38      	it	cc
 8005c42:	250c      	movcc	r5, #12
 8005c44:	2d00      	cmp	r5, #0
 8005c46:	4606      	mov	r6, r0
 8005c48:	db01      	blt.n	8005c4e <_malloc_r+0x1a>
 8005c4a:	42a9      	cmp	r1, r5
 8005c4c:	d903      	bls.n	8005c56 <_malloc_r+0x22>
 8005c4e:	230c      	movs	r3, #12
 8005c50:	6033      	str	r3, [r6, #0]
 8005c52:	2000      	movs	r0, #0
 8005c54:	bd70      	pop	{r4, r5, r6, pc}
 8005c56:	f000 fd43 	bl	80066e0 <__malloc_lock>
 8005c5a:	4a23      	ldr	r2, [pc, #140]	; (8005ce8 <_malloc_r+0xb4>)
 8005c5c:	6814      	ldr	r4, [r2, #0]
 8005c5e:	4621      	mov	r1, r4
 8005c60:	b991      	cbnz	r1, 8005c88 <_malloc_r+0x54>
 8005c62:	4c22      	ldr	r4, [pc, #136]	; (8005cec <_malloc_r+0xb8>)
 8005c64:	6823      	ldr	r3, [r4, #0]
 8005c66:	b91b      	cbnz	r3, 8005c70 <_malloc_r+0x3c>
 8005c68:	4630      	mov	r0, r6
 8005c6a:	f000 fc67 	bl	800653c <_sbrk_r>
 8005c6e:	6020      	str	r0, [r4, #0]
 8005c70:	4629      	mov	r1, r5
 8005c72:	4630      	mov	r0, r6
 8005c74:	f000 fc62 	bl	800653c <_sbrk_r>
 8005c78:	1c43      	adds	r3, r0, #1
 8005c7a:	d126      	bne.n	8005cca <_malloc_r+0x96>
 8005c7c:	230c      	movs	r3, #12
 8005c7e:	4630      	mov	r0, r6
 8005c80:	6033      	str	r3, [r6, #0]
 8005c82:	f000 fd2e 	bl	80066e2 <__malloc_unlock>
 8005c86:	e7e4      	b.n	8005c52 <_malloc_r+0x1e>
 8005c88:	680b      	ldr	r3, [r1, #0]
 8005c8a:	1b5b      	subs	r3, r3, r5
 8005c8c:	d41a      	bmi.n	8005cc4 <_malloc_r+0x90>
 8005c8e:	2b0b      	cmp	r3, #11
 8005c90:	d90f      	bls.n	8005cb2 <_malloc_r+0x7e>
 8005c92:	600b      	str	r3, [r1, #0]
 8005c94:	18cc      	adds	r4, r1, r3
 8005c96:	50cd      	str	r5, [r1, r3]
 8005c98:	4630      	mov	r0, r6
 8005c9a:	f000 fd22 	bl	80066e2 <__malloc_unlock>
 8005c9e:	f104 000b 	add.w	r0, r4, #11
 8005ca2:	1d23      	adds	r3, r4, #4
 8005ca4:	f020 0007 	bic.w	r0, r0, #7
 8005ca8:	1ac3      	subs	r3, r0, r3
 8005caa:	d01b      	beq.n	8005ce4 <_malloc_r+0xb0>
 8005cac:	425a      	negs	r2, r3
 8005cae:	50e2      	str	r2, [r4, r3]
 8005cb0:	bd70      	pop	{r4, r5, r6, pc}
 8005cb2:	428c      	cmp	r4, r1
 8005cb4:	bf0b      	itete	eq
 8005cb6:	6863      	ldreq	r3, [r4, #4]
 8005cb8:	684b      	ldrne	r3, [r1, #4]
 8005cba:	6013      	streq	r3, [r2, #0]
 8005cbc:	6063      	strne	r3, [r4, #4]
 8005cbe:	bf18      	it	ne
 8005cc0:	460c      	movne	r4, r1
 8005cc2:	e7e9      	b.n	8005c98 <_malloc_r+0x64>
 8005cc4:	460c      	mov	r4, r1
 8005cc6:	6849      	ldr	r1, [r1, #4]
 8005cc8:	e7ca      	b.n	8005c60 <_malloc_r+0x2c>
 8005cca:	1cc4      	adds	r4, r0, #3
 8005ccc:	f024 0403 	bic.w	r4, r4, #3
 8005cd0:	42a0      	cmp	r0, r4
 8005cd2:	d005      	beq.n	8005ce0 <_malloc_r+0xac>
 8005cd4:	1a21      	subs	r1, r4, r0
 8005cd6:	4630      	mov	r0, r6
 8005cd8:	f000 fc30 	bl	800653c <_sbrk_r>
 8005cdc:	3001      	adds	r0, #1
 8005cde:	d0cd      	beq.n	8005c7c <_malloc_r+0x48>
 8005ce0:	6025      	str	r5, [r4, #0]
 8005ce2:	e7d9      	b.n	8005c98 <_malloc_r+0x64>
 8005ce4:	bd70      	pop	{r4, r5, r6, pc}
 8005ce6:	bf00      	nop
 8005ce8:	20000558 	.word	0x20000558
 8005cec:	2000055c 	.word	0x2000055c

08005cf0 <__ssputs_r>:
 8005cf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005cf4:	688e      	ldr	r6, [r1, #8]
 8005cf6:	4682      	mov	sl, r0
 8005cf8:	429e      	cmp	r6, r3
 8005cfa:	460c      	mov	r4, r1
 8005cfc:	4691      	mov	r9, r2
 8005cfe:	4698      	mov	r8, r3
 8005d00:	d835      	bhi.n	8005d6e <__ssputs_r+0x7e>
 8005d02:	898a      	ldrh	r2, [r1, #12]
 8005d04:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005d08:	d031      	beq.n	8005d6e <__ssputs_r+0x7e>
 8005d0a:	2302      	movs	r3, #2
 8005d0c:	6825      	ldr	r5, [r4, #0]
 8005d0e:	6909      	ldr	r1, [r1, #16]
 8005d10:	1a6f      	subs	r7, r5, r1
 8005d12:	6965      	ldr	r5, [r4, #20]
 8005d14:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005d18:	fb95 f5f3 	sdiv	r5, r5, r3
 8005d1c:	f108 0301 	add.w	r3, r8, #1
 8005d20:	443b      	add	r3, r7
 8005d22:	429d      	cmp	r5, r3
 8005d24:	bf38      	it	cc
 8005d26:	461d      	movcc	r5, r3
 8005d28:	0553      	lsls	r3, r2, #21
 8005d2a:	d531      	bpl.n	8005d90 <__ssputs_r+0xa0>
 8005d2c:	4629      	mov	r1, r5
 8005d2e:	f7ff ff81 	bl	8005c34 <_malloc_r>
 8005d32:	4606      	mov	r6, r0
 8005d34:	b950      	cbnz	r0, 8005d4c <__ssputs_r+0x5c>
 8005d36:	230c      	movs	r3, #12
 8005d38:	f8ca 3000 	str.w	r3, [sl]
 8005d3c:	89a3      	ldrh	r3, [r4, #12]
 8005d3e:	f04f 30ff 	mov.w	r0, #4294967295
 8005d42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d46:	81a3      	strh	r3, [r4, #12]
 8005d48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d4c:	463a      	mov	r2, r7
 8005d4e:	6921      	ldr	r1, [r4, #16]
 8005d50:	f7ff fbc8 	bl	80054e4 <memcpy>
 8005d54:	89a3      	ldrh	r3, [r4, #12]
 8005d56:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005d5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d5e:	81a3      	strh	r3, [r4, #12]
 8005d60:	6126      	str	r6, [r4, #16]
 8005d62:	443e      	add	r6, r7
 8005d64:	6026      	str	r6, [r4, #0]
 8005d66:	4646      	mov	r6, r8
 8005d68:	6165      	str	r5, [r4, #20]
 8005d6a:	1bed      	subs	r5, r5, r7
 8005d6c:	60a5      	str	r5, [r4, #8]
 8005d6e:	4546      	cmp	r6, r8
 8005d70:	bf28      	it	cs
 8005d72:	4646      	movcs	r6, r8
 8005d74:	4649      	mov	r1, r9
 8005d76:	4632      	mov	r2, r6
 8005d78:	6820      	ldr	r0, [r4, #0]
 8005d7a:	f000 fc97 	bl	80066ac <memmove>
 8005d7e:	68a3      	ldr	r3, [r4, #8]
 8005d80:	2000      	movs	r0, #0
 8005d82:	1b9b      	subs	r3, r3, r6
 8005d84:	60a3      	str	r3, [r4, #8]
 8005d86:	6823      	ldr	r3, [r4, #0]
 8005d88:	441e      	add	r6, r3
 8005d8a:	6026      	str	r6, [r4, #0]
 8005d8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d90:	462a      	mov	r2, r5
 8005d92:	f000 fca7 	bl	80066e4 <_realloc_r>
 8005d96:	4606      	mov	r6, r0
 8005d98:	2800      	cmp	r0, #0
 8005d9a:	d1e1      	bne.n	8005d60 <__ssputs_r+0x70>
 8005d9c:	6921      	ldr	r1, [r4, #16]
 8005d9e:	4650      	mov	r0, sl
 8005da0:	f7ff fefc 	bl	8005b9c <_free_r>
 8005da4:	e7c7      	b.n	8005d36 <__ssputs_r+0x46>
	...

08005da8 <_svfiprintf_r>:
 8005da8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dac:	b09d      	sub	sp, #116	; 0x74
 8005dae:	9303      	str	r3, [sp, #12]
 8005db0:	898b      	ldrh	r3, [r1, #12]
 8005db2:	4680      	mov	r8, r0
 8005db4:	061c      	lsls	r4, r3, #24
 8005db6:	460d      	mov	r5, r1
 8005db8:	4616      	mov	r6, r2
 8005dba:	d50f      	bpl.n	8005ddc <_svfiprintf_r+0x34>
 8005dbc:	690b      	ldr	r3, [r1, #16]
 8005dbe:	b96b      	cbnz	r3, 8005ddc <_svfiprintf_r+0x34>
 8005dc0:	2140      	movs	r1, #64	; 0x40
 8005dc2:	f7ff ff37 	bl	8005c34 <_malloc_r>
 8005dc6:	6028      	str	r0, [r5, #0]
 8005dc8:	6128      	str	r0, [r5, #16]
 8005dca:	b928      	cbnz	r0, 8005dd8 <_svfiprintf_r+0x30>
 8005dcc:	230c      	movs	r3, #12
 8005dce:	f8c8 3000 	str.w	r3, [r8]
 8005dd2:	f04f 30ff 	mov.w	r0, #4294967295
 8005dd6:	e0c4      	b.n	8005f62 <_svfiprintf_r+0x1ba>
 8005dd8:	2340      	movs	r3, #64	; 0x40
 8005dda:	616b      	str	r3, [r5, #20]
 8005ddc:	2300      	movs	r3, #0
 8005dde:	9309      	str	r3, [sp, #36]	; 0x24
 8005de0:	2320      	movs	r3, #32
 8005de2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005de6:	2330      	movs	r3, #48	; 0x30
 8005de8:	f04f 0b01 	mov.w	fp, #1
 8005dec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005df0:	4637      	mov	r7, r6
 8005df2:	463c      	mov	r4, r7
 8005df4:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d13c      	bne.n	8005e76 <_svfiprintf_r+0xce>
 8005dfc:	ebb7 0a06 	subs.w	sl, r7, r6
 8005e00:	d00b      	beq.n	8005e1a <_svfiprintf_r+0x72>
 8005e02:	4653      	mov	r3, sl
 8005e04:	4632      	mov	r2, r6
 8005e06:	4629      	mov	r1, r5
 8005e08:	4640      	mov	r0, r8
 8005e0a:	f7ff ff71 	bl	8005cf0 <__ssputs_r>
 8005e0e:	3001      	adds	r0, #1
 8005e10:	f000 80a2 	beq.w	8005f58 <_svfiprintf_r+0x1b0>
 8005e14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e16:	4453      	add	r3, sl
 8005e18:	9309      	str	r3, [sp, #36]	; 0x24
 8005e1a:	783b      	ldrb	r3, [r7, #0]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	f000 809b 	beq.w	8005f58 <_svfiprintf_r+0x1b0>
 8005e22:	2300      	movs	r3, #0
 8005e24:	f04f 32ff 	mov.w	r2, #4294967295
 8005e28:	9304      	str	r3, [sp, #16]
 8005e2a:	9307      	str	r3, [sp, #28]
 8005e2c:	9205      	str	r2, [sp, #20]
 8005e2e:	9306      	str	r3, [sp, #24]
 8005e30:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005e34:	931a      	str	r3, [sp, #104]	; 0x68
 8005e36:	2205      	movs	r2, #5
 8005e38:	7821      	ldrb	r1, [r4, #0]
 8005e3a:	4850      	ldr	r0, [pc, #320]	; (8005f7c <_svfiprintf_r+0x1d4>)
 8005e3c:	f000 fc28 	bl	8006690 <memchr>
 8005e40:	1c67      	adds	r7, r4, #1
 8005e42:	9b04      	ldr	r3, [sp, #16]
 8005e44:	b9d8      	cbnz	r0, 8005e7e <_svfiprintf_r+0xd6>
 8005e46:	06d9      	lsls	r1, r3, #27
 8005e48:	bf44      	itt	mi
 8005e4a:	2220      	movmi	r2, #32
 8005e4c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005e50:	071a      	lsls	r2, r3, #28
 8005e52:	bf44      	itt	mi
 8005e54:	222b      	movmi	r2, #43	; 0x2b
 8005e56:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005e5a:	7822      	ldrb	r2, [r4, #0]
 8005e5c:	2a2a      	cmp	r2, #42	; 0x2a
 8005e5e:	d016      	beq.n	8005e8e <_svfiprintf_r+0xe6>
 8005e60:	2100      	movs	r1, #0
 8005e62:	200a      	movs	r0, #10
 8005e64:	9a07      	ldr	r2, [sp, #28]
 8005e66:	4627      	mov	r7, r4
 8005e68:	783b      	ldrb	r3, [r7, #0]
 8005e6a:	3401      	adds	r4, #1
 8005e6c:	3b30      	subs	r3, #48	; 0x30
 8005e6e:	2b09      	cmp	r3, #9
 8005e70:	d950      	bls.n	8005f14 <_svfiprintf_r+0x16c>
 8005e72:	b1c9      	cbz	r1, 8005ea8 <_svfiprintf_r+0x100>
 8005e74:	e011      	b.n	8005e9a <_svfiprintf_r+0xf2>
 8005e76:	2b25      	cmp	r3, #37	; 0x25
 8005e78:	d0c0      	beq.n	8005dfc <_svfiprintf_r+0x54>
 8005e7a:	4627      	mov	r7, r4
 8005e7c:	e7b9      	b.n	8005df2 <_svfiprintf_r+0x4a>
 8005e7e:	4a3f      	ldr	r2, [pc, #252]	; (8005f7c <_svfiprintf_r+0x1d4>)
 8005e80:	463c      	mov	r4, r7
 8005e82:	1a80      	subs	r0, r0, r2
 8005e84:	fa0b f000 	lsl.w	r0, fp, r0
 8005e88:	4318      	orrs	r0, r3
 8005e8a:	9004      	str	r0, [sp, #16]
 8005e8c:	e7d3      	b.n	8005e36 <_svfiprintf_r+0x8e>
 8005e8e:	9a03      	ldr	r2, [sp, #12]
 8005e90:	1d11      	adds	r1, r2, #4
 8005e92:	6812      	ldr	r2, [r2, #0]
 8005e94:	9103      	str	r1, [sp, #12]
 8005e96:	2a00      	cmp	r2, #0
 8005e98:	db01      	blt.n	8005e9e <_svfiprintf_r+0xf6>
 8005e9a:	9207      	str	r2, [sp, #28]
 8005e9c:	e004      	b.n	8005ea8 <_svfiprintf_r+0x100>
 8005e9e:	4252      	negs	r2, r2
 8005ea0:	f043 0302 	orr.w	r3, r3, #2
 8005ea4:	9207      	str	r2, [sp, #28]
 8005ea6:	9304      	str	r3, [sp, #16]
 8005ea8:	783b      	ldrb	r3, [r7, #0]
 8005eaa:	2b2e      	cmp	r3, #46	; 0x2e
 8005eac:	d10d      	bne.n	8005eca <_svfiprintf_r+0x122>
 8005eae:	787b      	ldrb	r3, [r7, #1]
 8005eb0:	1c79      	adds	r1, r7, #1
 8005eb2:	2b2a      	cmp	r3, #42	; 0x2a
 8005eb4:	d132      	bne.n	8005f1c <_svfiprintf_r+0x174>
 8005eb6:	9b03      	ldr	r3, [sp, #12]
 8005eb8:	3702      	adds	r7, #2
 8005eba:	1d1a      	adds	r2, r3, #4
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	9203      	str	r2, [sp, #12]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	bfb8      	it	lt
 8005ec4:	f04f 33ff 	movlt.w	r3, #4294967295
 8005ec8:	9305      	str	r3, [sp, #20]
 8005eca:	4c2d      	ldr	r4, [pc, #180]	; (8005f80 <_svfiprintf_r+0x1d8>)
 8005ecc:	2203      	movs	r2, #3
 8005ece:	7839      	ldrb	r1, [r7, #0]
 8005ed0:	4620      	mov	r0, r4
 8005ed2:	f000 fbdd 	bl	8006690 <memchr>
 8005ed6:	b138      	cbz	r0, 8005ee8 <_svfiprintf_r+0x140>
 8005ed8:	2340      	movs	r3, #64	; 0x40
 8005eda:	1b00      	subs	r0, r0, r4
 8005edc:	fa03 f000 	lsl.w	r0, r3, r0
 8005ee0:	9b04      	ldr	r3, [sp, #16]
 8005ee2:	3701      	adds	r7, #1
 8005ee4:	4303      	orrs	r3, r0
 8005ee6:	9304      	str	r3, [sp, #16]
 8005ee8:	7839      	ldrb	r1, [r7, #0]
 8005eea:	2206      	movs	r2, #6
 8005eec:	4825      	ldr	r0, [pc, #148]	; (8005f84 <_svfiprintf_r+0x1dc>)
 8005eee:	1c7e      	adds	r6, r7, #1
 8005ef0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005ef4:	f000 fbcc 	bl	8006690 <memchr>
 8005ef8:	2800      	cmp	r0, #0
 8005efa:	d035      	beq.n	8005f68 <_svfiprintf_r+0x1c0>
 8005efc:	4b22      	ldr	r3, [pc, #136]	; (8005f88 <_svfiprintf_r+0x1e0>)
 8005efe:	b9fb      	cbnz	r3, 8005f40 <_svfiprintf_r+0x198>
 8005f00:	9b03      	ldr	r3, [sp, #12]
 8005f02:	3307      	adds	r3, #7
 8005f04:	f023 0307 	bic.w	r3, r3, #7
 8005f08:	3308      	adds	r3, #8
 8005f0a:	9303      	str	r3, [sp, #12]
 8005f0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f0e:	444b      	add	r3, r9
 8005f10:	9309      	str	r3, [sp, #36]	; 0x24
 8005f12:	e76d      	b.n	8005df0 <_svfiprintf_r+0x48>
 8005f14:	fb00 3202 	mla	r2, r0, r2, r3
 8005f18:	2101      	movs	r1, #1
 8005f1a:	e7a4      	b.n	8005e66 <_svfiprintf_r+0xbe>
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	240a      	movs	r4, #10
 8005f20:	4618      	mov	r0, r3
 8005f22:	9305      	str	r3, [sp, #20]
 8005f24:	460f      	mov	r7, r1
 8005f26:	783a      	ldrb	r2, [r7, #0]
 8005f28:	3101      	adds	r1, #1
 8005f2a:	3a30      	subs	r2, #48	; 0x30
 8005f2c:	2a09      	cmp	r2, #9
 8005f2e:	d903      	bls.n	8005f38 <_svfiprintf_r+0x190>
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d0ca      	beq.n	8005eca <_svfiprintf_r+0x122>
 8005f34:	9005      	str	r0, [sp, #20]
 8005f36:	e7c8      	b.n	8005eca <_svfiprintf_r+0x122>
 8005f38:	fb04 2000 	mla	r0, r4, r0, r2
 8005f3c:	2301      	movs	r3, #1
 8005f3e:	e7f1      	b.n	8005f24 <_svfiprintf_r+0x17c>
 8005f40:	ab03      	add	r3, sp, #12
 8005f42:	9300      	str	r3, [sp, #0]
 8005f44:	462a      	mov	r2, r5
 8005f46:	4b11      	ldr	r3, [pc, #68]	; (8005f8c <_svfiprintf_r+0x1e4>)
 8005f48:	a904      	add	r1, sp, #16
 8005f4a:	4640      	mov	r0, r8
 8005f4c:	f3af 8000 	nop.w
 8005f50:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005f54:	4681      	mov	r9, r0
 8005f56:	d1d9      	bne.n	8005f0c <_svfiprintf_r+0x164>
 8005f58:	89ab      	ldrh	r3, [r5, #12]
 8005f5a:	065b      	lsls	r3, r3, #25
 8005f5c:	f53f af39 	bmi.w	8005dd2 <_svfiprintf_r+0x2a>
 8005f60:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005f62:	b01d      	add	sp, #116	; 0x74
 8005f64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f68:	ab03      	add	r3, sp, #12
 8005f6a:	9300      	str	r3, [sp, #0]
 8005f6c:	462a      	mov	r2, r5
 8005f6e:	4b07      	ldr	r3, [pc, #28]	; (8005f8c <_svfiprintf_r+0x1e4>)
 8005f70:	a904      	add	r1, sp, #16
 8005f72:	4640      	mov	r0, r8
 8005f74:	f000 f9c2 	bl	80062fc <_printf_i>
 8005f78:	e7ea      	b.n	8005f50 <_svfiprintf_r+0x1a8>
 8005f7a:	bf00      	nop
 8005f7c:	08007910 	.word	0x08007910
 8005f80:	08007916 	.word	0x08007916
 8005f84:	0800791a 	.word	0x0800791a
 8005f88:	00000000 	.word	0x00000000
 8005f8c:	08005cf1 	.word	0x08005cf1

08005f90 <__sfputc_r>:
 8005f90:	6893      	ldr	r3, [r2, #8]
 8005f92:	b410      	push	{r4}
 8005f94:	3b01      	subs	r3, #1
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	6093      	str	r3, [r2, #8]
 8005f9a:	da08      	bge.n	8005fae <__sfputc_r+0x1e>
 8005f9c:	6994      	ldr	r4, [r2, #24]
 8005f9e:	42a3      	cmp	r3, r4
 8005fa0:	db02      	blt.n	8005fa8 <__sfputc_r+0x18>
 8005fa2:	b2cb      	uxtb	r3, r1
 8005fa4:	2b0a      	cmp	r3, #10
 8005fa6:	d102      	bne.n	8005fae <__sfputc_r+0x1e>
 8005fa8:	bc10      	pop	{r4}
 8005faa:	f7ff bb57 	b.w	800565c <__swbuf_r>
 8005fae:	6813      	ldr	r3, [r2, #0]
 8005fb0:	1c58      	adds	r0, r3, #1
 8005fb2:	6010      	str	r0, [r2, #0]
 8005fb4:	7019      	strb	r1, [r3, #0]
 8005fb6:	b2c8      	uxtb	r0, r1
 8005fb8:	bc10      	pop	{r4}
 8005fba:	4770      	bx	lr

08005fbc <__sfputs_r>:
 8005fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fbe:	4606      	mov	r6, r0
 8005fc0:	460f      	mov	r7, r1
 8005fc2:	4614      	mov	r4, r2
 8005fc4:	18d5      	adds	r5, r2, r3
 8005fc6:	42ac      	cmp	r4, r5
 8005fc8:	d101      	bne.n	8005fce <__sfputs_r+0x12>
 8005fca:	2000      	movs	r0, #0
 8005fcc:	e007      	b.n	8005fde <__sfputs_r+0x22>
 8005fce:	463a      	mov	r2, r7
 8005fd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005fd4:	4630      	mov	r0, r6
 8005fd6:	f7ff ffdb 	bl	8005f90 <__sfputc_r>
 8005fda:	1c43      	adds	r3, r0, #1
 8005fdc:	d1f3      	bne.n	8005fc6 <__sfputs_r+0xa>
 8005fde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005fe0 <_vfiprintf_r>:
 8005fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fe4:	b09d      	sub	sp, #116	; 0x74
 8005fe6:	460c      	mov	r4, r1
 8005fe8:	4617      	mov	r7, r2
 8005fea:	9303      	str	r3, [sp, #12]
 8005fec:	4606      	mov	r6, r0
 8005fee:	b118      	cbz	r0, 8005ff8 <_vfiprintf_r+0x18>
 8005ff0:	6983      	ldr	r3, [r0, #24]
 8005ff2:	b90b      	cbnz	r3, 8005ff8 <_vfiprintf_r+0x18>
 8005ff4:	f7ff fce4 	bl	80059c0 <__sinit>
 8005ff8:	4b7c      	ldr	r3, [pc, #496]	; (80061ec <_vfiprintf_r+0x20c>)
 8005ffa:	429c      	cmp	r4, r3
 8005ffc:	d157      	bne.n	80060ae <_vfiprintf_r+0xce>
 8005ffe:	6874      	ldr	r4, [r6, #4]
 8006000:	89a3      	ldrh	r3, [r4, #12]
 8006002:	0718      	lsls	r0, r3, #28
 8006004:	d55d      	bpl.n	80060c2 <_vfiprintf_r+0xe2>
 8006006:	6923      	ldr	r3, [r4, #16]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d05a      	beq.n	80060c2 <_vfiprintf_r+0xe2>
 800600c:	2300      	movs	r3, #0
 800600e:	9309      	str	r3, [sp, #36]	; 0x24
 8006010:	2320      	movs	r3, #32
 8006012:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006016:	2330      	movs	r3, #48	; 0x30
 8006018:	f04f 0b01 	mov.w	fp, #1
 800601c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006020:	46b8      	mov	r8, r7
 8006022:	4645      	mov	r5, r8
 8006024:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006028:	2b00      	cmp	r3, #0
 800602a:	d155      	bne.n	80060d8 <_vfiprintf_r+0xf8>
 800602c:	ebb8 0a07 	subs.w	sl, r8, r7
 8006030:	d00b      	beq.n	800604a <_vfiprintf_r+0x6a>
 8006032:	4653      	mov	r3, sl
 8006034:	463a      	mov	r2, r7
 8006036:	4621      	mov	r1, r4
 8006038:	4630      	mov	r0, r6
 800603a:	f7ff ffbf 	bl	8005fbc <__sfputs_r>
 800603e:	3001      	adds	r0, #1
 8006040:	f000 80c4 	beq.w	80061cc <_vfiprintf_r+0x1ec>
 8006044:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006046:	4453      	add	r3, sl
 8006048:	9309      	str	r3, [sp, #36]	; 0x24
 800604a:	f898 3000 	ldrb.w	r3, [r8]
 800604e:	2b00      	cmp	r3, #0
 8006050:	f000 80bc 	beq.w	80061cc <_vfiprintf_r+0x1ec>
 8006054:	2300      	movs	r3, #0
 8006056:	f04f 32ff 	mov.w	r2, #4294967295
 800605a:	9304      	str	r3, [sp, #16]
 800605c:	9307      	str	r3, [sp, #28]
 800605e:	9205      	str	r2, [sp, #20]
 8006060:	9306      	str	r3, [sp, #24]
 8006062:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006066:	931a      	str	r3, [sp, #104]	; 0x68
 8006068:	2205      	movs	r2, #5
 800606a:	7829      	ldrb	r1, [r5, #0]
 800606c:	4860      	ldr	r0, [pc, #384]	; (80061f0 <_vfiprintf_r+0x210>)
 800606e:	f000 fb0f 	bl	8006690 <memchr>
 8006072:	f105 0801 	add.w	r8, r5, #1
 8006076:	9b04      	ldr	r3, [sp, #16]
 8006078:	2800      	cmp	r0, #0
 800607a:	d131      	bne.n	80060e0 <_vfiprintf_r+0x100>
 800607c:	06d9      	lsls	r1, r3, #27
 800607e:	bf44      	itt	mi
 8006080:	2220      	movmi	r2, #32
 8006082:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006086:	071a      	lsls	r2, r3, #28
 8006088:	bf44      	itt	mi
 800608a:	222b      	movmi	r2, #43	; 0x2b
 800608c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006090:	782a      	ldrb	r2, [r5, #0]
 8006092:	2a2a      	cmp	r2, #42	; 0x2a
 8006094:	d02c      	beq.n	80060f0 <_vfiprintf_r+0x110>
 8006096:	2100      	movs	r1, #0
 8006098:	200a      	movs	r0, #10
 800609a:	9a07      	ldr	r2, [sp, #28]
 800609c:	46a8      	mov	r8, r5
 800609e:	f898 3000 	ldrb.w	r3, [r8]
 80060a2:	3501      	adds	r5, #1
 80060a4:	3b30      	subs	r3, #48	; 0x30
 80060a6:	2b09      	cmp	r3, #9
 80060a8:	d96d      	bls.n	8006186 <_vfiprintf_r+0x1a6>
 80060aa:	b371      	cbz	r1, 800610a <_vfiprintf_r+0x12a>
 80060ac:	e026      	b.n	80060fc <_vfiprintf_r+0x11c>
 80060ae:	4b51      	ldr	r3, [pc, #324]	; (80061f4 <_vfiprintf_r+0x214>)
 80060b0:	429c      	cmp	r4, r3
 80060b2:	d101      	bne.n	80060b8 <_vfiprintf_r+0xd8>
 80060b4:	68b4      	ldr	r4, [r6, #8]
 80060b6:	e7a3      	b.n	8006000 <_vfiprintf_r+0x20>
 80060b8:	4b4f      	ldr	r3, [pc, #316]	; (80061f8 <_vfiprintf_r+0x218>)
 80060ba:	429c      	cmp	r4, r3
 80060bc:	bf08      	it	eq
 80060be:	68f4      	ldreq	r4, [r6, #12]
 80060c0:	e79e      	b.n	8006000 <_vfiprintf_r+0x20>
 80060c2:	4621      	mov	r1, r4
 80060c4:	4630      	mov	r0, r6
 80060c6:	f7ff fb1b 	bl	8005700 <__swsetup_r>
 80060ca:	2800      	cmp	r0, #0
 80060cc:	d09e      	beq.n	800600c <_vfiprintf_r+0x2c>
 80060ce:	f04f 30ff 	mov.w	r0, #4294967295
 80060d2:	b01d      	add	sp, #116	; 0x74
 80060d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060d8:	2b25      	cmp	r3, #37	; 0x25
 80060da:	d0a7      	beq.n	800602c <_vfiprintf_r+0x4c>
 80060dc:	46a8      	mov	r8, r5
 80060de:	e7a0      	b.n	8006022 <_vfiprintf_r+0x42>
 80060e0:	4a43      	ldr	r2, [pc, #268]	; (80061f0 <_vfiprintf_r+0x210>)
 80060e2:	4645      	mov	r5, r8
 80060e4:	1a80      	subs	r0, r0, r2
 80060e6:	fa0b f000 	lsl.w	r0, fp, r0
 80060ea:	4318      	orrs	r0, r3
 80060ec:	9004      	str	r0, [sp, #16]
 80060ee:	e7bb      	b.n	8006068 <_vfiprintf_r+0x88>
 80060f0:	9a03      	ldr	r2, [sp, #12]
 80060f2:	1d11      	adds	r1, r2, #4
 80060f4:	6812      	ldr	r2, [r2, #0]
 80060f6:	9103      	str	r1, [sp, #12]
 80060f8:	2a00      	cmp	r2, #0
 80060fa:	db01      	blt.n	8006100 <_vfiprintf_r+0x120>
 80060fc:	9207      	str	r2, [sp, #28]
 80060fe:	e004      	b.n	800610a <_vfiprintf_r+0x12a>
 8006100:	4252      	negs	r2, r2
 8006102:	f043 0302 	orr.w	r3, r3, #2
 8006106:	9207      	str	r2, [sp, #28]
 8006108:	9304      	str	r3, [sp, #16]
 800610a:	f898 3000 	ldrb.w	r3, [r8]
 800610e:	2b2e      	cmp	r3, #46	; 0x2e
 8006110:	d110      	bne.n	8006134 <_vfiprintf_r+0x154>
 8006112:	f898 3001 	ldrb.w	r3, [r8, #1]
 8006116:	f108 0101 	add.w	r1, r8, #1
 800611a:	2b2a      	cmp	r3, #42	; 0x2a
 800611c:	d137      	bne.n	800618e <_vfiprintf_r+0x1ae>
 800611e:	9b03      	ldr	r3, [sp, #12]
 8006120:	f108 0802 	add.w	r8, r8, #2
 8006124:	1d1a      	adds	r2, r3, #4
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	9203      	str	r2, [sp, #12]
 800612a:	2b00      	cmp	r3, #0
 800612c:	bfb8      	it	lt
 800612e:	f04f 33ff 	movlt.w	r3, #4294967295
 8006132:	9305      	str	r3, [sp, #20]
 8006134:	4d31      	ldr	r5, [pc, #196]	; (80061fc <_vfiprintf_r+0x21c>)
 8006136:	2203      	movs	r2, #3
 8006138:	f898 1000 	ldrb.w	r1, [r8]
 800613c:	4628      	mov	r0, r5
 800613e:	f000 faa7 	bl	8006690 <memchr>
 8006142:	b140      	cbz	r0, 8006156 <_vfiprintf_r+0x176>
 8006144:	2340      	movs	r3, #64	; 0x40
 8006146:	1b40      	subs	r0, r0, r5
 8006148:	fa03 f000 	lsl.w	r0, r3, r0
 800614c:	9b04      	ldr	r3, [sp, #16]
 800614e:	f108 0801 	add.w	r8, r8, #1
 8006152:	4303      	orrs	r3, r0
 8006154:	9304      	str	r3, [sp, #16]
 8006156:	f898 1000 	ldrb.w	r1, [r8]
 800615a:	2206      	movs	r2, #6
 800615c:	4828      	ldr	r0, [pc, #160]	; (8006200 <_vfiprintf_r+0x220>)
 800615e:	f108 0701 	add.w	r7, r8, #1
 8006162:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006166:	f000 fa93 	bl	8006690 <memchr>
 800616a:	2800      	cmp	r0, #0
 800616c:	d034      	beq.n	80061d8 <_vfiprintf_r+0x1f8>
 800616e:	4b25      	ldr	r3, [pc, #148]	; (8006204 <_vfiprintf_r+0x224>)
 8006170:	bb03      	cbnz	r3, 80061b4 <_vfiprintf_r+0x1d4>
 8006172:	9b03      	ldr	r3, [sp, #12]
 8006174:	3307      	adds	r3, #7
 8006176:	f023 0307 	bic.w	r3, r3, #7
 800617a:	3308      	adds	r3, #8
 800617c:	9303      	str	r3, [sp, #12]
 800617e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006180:	444b      	add	r3, r9
 8006182:	9309      	str	r3, [sp, #36]	; 0x24
 8006184:	e74c      	b.n	8006020 <_vfiprintf_r+0x40>
 8006186:	fb00 3202 	mla	r2, r0, r2, r3
 800618a:	2101      	movs	r1, #1
 800618c:	e786      	b.n	800609c <_vfiprintf_r+0xbc>
 800618e:	2300      	movs	r3, #0
 8006190:	250a      	movs	r5, #10
 8006192:	4618      	mov	r0, r3
 8006194:	9305      	str	r3, [sp, #20]
 8006196:	4688      	mov	r8, r1
 8006198:	f898 2000 	ldrb.w	r2, [r8]
 800619c:	3101      	adds	r1, #1
 800619e:	3a30      	subs	r2, #48	; 0x30
 80061a0:	2a09      	cmp	r2, #9
 80061a2:	d903      	bls.n	80061ac <_vfiprintf_r+0x1cc>
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d0c5      	beq.n	8006134 <_vfiprintf_r+0x154>
 80061a8:	9005      	str	r0, [sp, #20]
 80061aa:	e7c3      	b.n	8006134 <_vfiprintf_r+0x154>
 80061ac:	fb05 2000 	mla	r0, r5, r0, r2
 80061b0:	2301      	movs	r3, #1
 80061b2:	e7f0      	b.n	8006196 <_vfiprintf_r+0x1b6>
 80061b4:	ab03      	add	r3, sp, #12
 80061b6:	9300      	str	r3, [sp, #0]
 80061b8:	4622      	mov	r2, r4
 80061ba:	4b13      	ldr	r3, [pc, #76]	; (8006208 <_vfiprintf_r+0x228>)
 80061bc:	a904      	add	r1, sp, #16
 80061be:	4630      	mov	r0, r6
 80061c0:	f3af 8000 	nop.w
 80061c4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80061c8:	4681      	mov	r9, r0
 80061ca:	d1d8      	bne.n	800617e <_vfiprintf_r+0x19e>
 80061cc:	89a3      	ldrh	r3, [r4, #12]
 80061ce:	065b      	lsls	r3, r3, #25
 80061d0:	f53f af7d 	bmi.w	80060ce <_vfiprintf_r+0xee>
 80061d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80061d6:	e77c      	b.n	80060d2 <_vfiprintf_r+0xf2>
 80061d8:	ab03      	add	r3, sp, #12
 80061da:	9300      	str	r3, [sp, #0]
 80061dc:	4622      	mov	r2, r4
 80061de:	4b0a      	ldr	r3, [pc, #40]	; (8006208 <_vfiprintf_r+0x228>)
 80061e0:	a904      	add	r1, sp, #16
 80061e2:	4630      	mov	r0, r6
 80061e4:	f000 f88a 	bl	80062fc <_printf_i>
 80061e8:	e7ec      	b.n	80061c4 <_vfiprintf_r+0x1e4>
 80061ea:	bf00      	nop
 80061ec:	080078d0 	.word	0x080078d0
 80061f0:	08007910 	.word	0x08007910
 80061f4:	080078f0 	.word	0x080078f0
 80061f8:	080078b0 	.word	0x080078b0
 80061fc:	08007916 	.word	0x08007916
 8006200:	0800791a 	.word	0x0800791a
 8006204:	00000000 	.word	0x00000000
 8006208:	08005fbd 	.word	0x08005fbd

0800620c <_printf_common>:
 800620c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006210:	4691      	mov	r9, r2
 8006212:	461f      	mov	r7, r3
 8006214:	688a      	ldr	r2, [r1, #8]
 8006216:	690b      	ldr	r3, [r1, #16]
 8006218:	4606      	mov	r6, r0
 800621a:	4293      	cmp	r3, r2
 800621c:	bfb8      	it	lt
 800621e:	4613      	movlt	r3, r2
 8006220:	f8c9 3000 	str.w	r3, [r9]
 8006224:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006228:	460c      	mov	r4, r1
 800622a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800622e:	b112      	cbz	r2, 8006236 <_printf_common+0x2a>
 8006230:	3301      	adds	r3, #1
 8006232:	f8c9 3000 	str.w	r3, [r9]
 8006236:	6823      	ldr	r3, [r4, #0]
 8006238:	0699      	lsls	r1, r3, #26
 800623a:	bf42      	ittt	mi
 800623c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006240:	3302      	addmi	r3, #2
 8006242:	f8c9 3000 	strmi.w	r3, [r9]
 8006246:	6825      	ldr	r5, [r4, #0]
 8006248:	f015 0506 	ands.w	r5, r5, #6
 800624c:	d107      	bne.n	800625e <_printf_common+0x52>
 800624e:	f104 0a19 	add.w	sl, r4, #25
 8006252:	68e3      	ldr	r3, [r4, #12]
 8006254:	f8d9 2000 	ldr.w	r2, [r9]
 8006258:	1a9b      	subs	r3, r3, r2
 800625a:	429d      	cmp	r5, r3
 800625c:	db2a      	blt.n	80062b4 <_printf_common+0xa8>
 800625e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006262:	6822      	ldr	r2, [r4, #0]
 8006264:	3300      	adds	r3, #0
 8006266:	bf18      	it	ne
 8006268:	2301      	movne	r3, #1
 800626a:	0692      	lsls	r2, r2, #26
 800626c:	d42f      	bmi.n	80062ce <_printf_common+0xc2>
 800626e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006272:	4639      	mov	r1, r7
 8006274:	4630      	mov	r0, r6
 8006276:	47c0      	blx	r8
 8006278:	3001      	adds	r0, #1
 800627a:	d022      	beq.n	80062c2 <_printf_common+0xb6>
 800627c:	6823      	ldr	r3, [r4, #0]
 800627e:	68e5      	ldr	r5, [r4, #12]
 8006280:	f003 0306 	and.w	r3, r3, #6
 8006284:	2b04      	cmp	r3, #4
 8006286:	bf18      	it	ne
 8006288:	2500      	movne	r5, #0
 800628a:	f8d9 2000 	ldr.w	r2, [r9]
 800628e:	f04f 0900 	mov.w	r9, #0
 8006292:	bf08      	it	eq
 8006294:	1aad      	subeq	r5, r5, r2
 8006296:	68a3      	ldr	r3, [r4, #8]
 8006298:	6922      	ldr	r2, [r4, #16]
 800629a:	bf08      	it	eq
 800629c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80062a0:	4293      	cmp	r3, r2
 80062a2:	bfc4      	itt	gt
 80062a4:	1a9b      	subgt	r3, r3, r2
 80062a6:	18ed      	addgt	r5, r5, r3
 80062a8:	341a      	adds	r4, #26
 80062aa:	454d      	cmp	r5, r9
 80062ac:	d11b      	bne.n	80062e6 <_printf_common+0xda>
 80062ae:	2000      	movs	r0, #0
 80062b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062b4:	2301      	movs	r3, #1
 80062b6:	4652      	mov	r2, sl
 80062b8:	4639      	mov	r1, r7
 80062ba:	4630      	mov	r0, r6
 80062bc:	47c0      	blx	r8
 80062be:	3001      	adds	r0, #1
 80062c0:	d103      	bne.n	80062ca <_printf_common+0xbe>
 80062c2:	f04f 30ff 	mov.w	r0, #4294967295
 80062c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062ca:	3501      	adds	r5, #1
 80062cc:	e7c1      	b.n	8006252 <_printf_common+0x46>
 80062ce:	2030      	movs	r0, #48	; 0x30
 80062d0:	18e1      	adds	r1, r4, r3
 80062d2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80062d6:	1c5a      	adds	r2, r3, #1
 80062d8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80062dc:	4422      	add	r2, r4
 80062de:	3302      	adds	r3, #2
 80062e0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80062e4:	e7c3      	b.n	800626e <_printf_common+0x62>
 80062e6:	2301      	movs	r3, #1
 80062e8:	4622      	mov	r2, r4
 80062ea:	4639      	mov	r1, r7
 80062ec:	4630      	mov	r0, r6
 80062ee:	47c0      	blx	r8
 80062f0:	3001      	adds	r0, #1
 80062f2:	d0e6      	beq.n	80062c2 <_printf_common+0xb6>
 80062f4:	f109 0901 	add.w	r9, r9, #1
 80062f8:	e7d7      	b.n	80062aa <_printf_common+0x9e>
	...

080062fc <_printf_i>:
 80062fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006300:	4617      	mov	r7, r2
 8006302:	7e0a      	ldrb	r2, [r1, #24]
 8006304:	b085      	sub	sp, #20
 8006306:	2a6e      	cmp	r2, #110	; 0x6e
 8006308:	4698      	mov	r8, r3
 800630a:	4606      	mov	r6, r0
 800630c:	460c      	mov	r4, r1
 800630e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006310:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8006314:	f000 80bc 	beq.w	8006490 <_printf_i+0x194>
 8006318:	d81a      	bhi.n	8006350 <_printf_i+0x54>
 800631a:	2a63      	cmp	r2, #99	; 0x63
 800631c:	d02e      	beq.n	800637c <_printf_i+0x80>
 800631e:	d80a      	bhi.n	8006336 <_printf_i+0x3a>
 8006320:	2a00      	cmp	r2, #0
 8006322:	f000 80c8 	beq.w	80064b6 <_printf_i+0x1ba>
 8006326:	2a58      	cmp	r2, #88	; 0x58
 8006328:	f000 808a 	beq.w	8006440 <_printf_i+0x144>
 800632c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006330:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8006334:	e02a      	b.n	800638c <_printf_i+0x90>
 8006336:	2a64      	cmp	r2, #100	; 0x64
 8006338:	d001      	beq.n	800633e <_printf_i+0x42>
 800633a:	2a69      	cmp	r2, #105	; 0x69
 800633c:	d1f6      	bne.n	800632c <_printf_i+0x30>
 800633e:	6821      	ldr	r1, [r4, #0]
 8006340:	681a      	ldr	r2, [r3, #0]
 8006342:	f011 0f80 	tst.w	r1, #128	; 0x80
 8006346:	d023      	beq.n	8006390 <_printf_i+0x94>
 8006348:	1d11      	adds	r1, r2, #4
 800634a:	6019      	str	r1, [r3, #0]
 800634c:	6813      	ldr	r3, [r2, #0]
 800634e:	e027      	b.n	80063a0 <_printf_i+0xa4>
 8006350:	2a73      	cmp	r2, #115	; 0x73
 8006352:	f000 80b4 	beq.w	80064be <_printf_i+0x1c2>
 8006356:	d808      	bhi.n	800636a <_printf_i+0x6e>
 8006358:	2a6f      	cmp	r2, #111	; 0x6f
 800635a:	d02a      	beq.n	80063b2 <_printf_i+0xb6>
 800635c:	2a70      	cmp	r2, #112	; 0x70
 800635e:	d1e5      	bne.n	800632c <_printf_i+0x30>
 8006360:	680a      	ldr	r2, [r1, #0]
 8006362:	f042 0220 	orr.w	r2, r2, #32
 8006366:	600a      	str	r2, [r1, #0]
 8006368:	e003      	b.n	8006372 <_printf_i+0x76>
 800636a:	2a75      	cmp	r2, #117	; 0x75
 800636c:	d021      	beq.n	80063b2 <_printf_i+0xb6>
 800636e:	2a78      	cmp	r2, #120	; 0x78
 8006370:	d1dc      	bne.n	800632c <_printf_i+0x30>
 8006372:	2278      	movs	r2, #120	; 0x78
 8006374:	496f      	ldr	r1, [pc, #444]	; (8006534 <_printf_i+0x238>)
 8006376:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 800637a:	e064      	b.n	8006446 <_printf_i+0x14a>
 800637c:	681a      	ldr	r2, [r3, #0]
 800637e:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8006382:	1d11      	adds	r1, r2, #4
 8006384:	6019      	str	r1, [r3, #0]
 8006386:	6813      	ldr	r3, [r2, #0]
 8006388:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800638c:	2301      	movs	r3, #1
 800638e:	e0a3      	b.n	80064d8 <_printf_i+0x1dc>
 8006390:	f011 0f40 	tst.w	r1, #64	; 0x40
 8006394:	f102 0104 	add.w	r1, r2, #4
 8006398:	6019      	str	r1, [r3, #0]
 800639a:	d0d7      	beq.n	800634c <_printf_i+0x50>
 800639c:	f9b2 3000 	ldrsh.w	r3, [r2]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	da03      	bge.n	80063ac <_printf_i+0xb0>
 80063a4:	222d      	movs	r2, #45	; 0x2d
 80063a6:	425b      	negs	r3, r3
 80063a8:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80063ac:	4962      	ldr	r1, [pc, #392]	; (8006538 <_printf_i+0x23c>)
 80063ae:	220a      	movs	r2, #10
 80063b0:	e017      	b.n	80063e2 <_printf_i+0xe6>
 80063b2:	6820      	ldr	r0, [r4, #0]
 80063b4:	6819      	ldr	r1, [r3, #0]
 80063b6:	f010 0f80 	tst.w	r0, #128	; 0x80
 80063ba:	d003      	beq.n	80063c4 <_printf_i+0xc8>
 80063bc:	1d08      	adds	r0, r1, #4
 80063be:	6018      	str	r0, [r3, #0]
 80063c0:	680b      	ldr	r3, [r1, #0]
 80063c2:	e006      	b.n	80063d2 <_printf_i+0xd6>
 80063c4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80063c8:	f101 0004 	add.w	r0, r1, #4
 80063cc:	6018      	str	r0, [r3, #0]
 80063ce:	d0f7      	beq.n	80063c0 <_printf_i+0xc4>
 80063d0:	880b      	ldrh	r3, [r1, #0]
 80063d2:	2a6f      	cmp	r2, #111	; 0x6f
 80063d4:	bf14      	ite	ne
 80063d6:	220a      	movne	r2, #10
 80063d8:	2208      	moveq	r2, #8
 80063da:	4957      	ldr	r1, [pc, #348]	; (8006538 <_printf_i+0x23c>)
 80063dc:	2000      	movs	r0, #0
 80063de:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 80063e2:	6865      	ldr	r5, [r4, #4]
 80063e4:	2d00      	cmp	r5, #0
 80063e6:	60a5      	str	r5, [r4, #8]
 80063e8:	f2c0 809c 	blt.w	8006524 <_printf_i+0x228>
 80063ec:	6820      	ldr	r0, [r4, #0]
 80063ee:	f020 0004 	bic.w	r0, r0, #4
 80063f2:	6020      	str	r0, [r4, #0]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d13f      	bne.n	8006478 <_printf_i+0x17c>
 80063f8:	2d00      	cmp	r5, #0
 80063fa:	f040 8095 	bne.w	8006528 <_printf_i+0x22c>
 80063fe:	4675      	mov	r5, lr
 8006400:	2a08      	cmp	r2, #8
 8006402:	d10b      	bne.n	800641c <_printf_i+0x120>
 8006404:	6823      	ldr	r3, [r4, #0]
 8006406:	07da      	lsls	r2, r3, #31
 8006408:	d508      	bpl.n	800641c <_printf_i+0x120>
 800640a:	6923      	ldr	r3, [r4, #16]
 800640c:	6862      	ldr	r2, [r4, #4]
 800640e:	429a      	cmp	r2, r3
 8006410:	bfde      	ittt	le
 8006412:	2330      	movle	r3, #48	; 0x30
 8006414:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006418:	f105 35ff 	addle.w	r5, r5, #4294967295
 800641c:	ebae 0305 	sub.w	r3, lr, r5
 8006420:	6123      	str	r3, [r4, #16]
 8006422:	f8cd 8000 	str.w	r8, [sp]
 8006426:	463b      	mov	r3, r7
 8006428:	aa03      	add	r2, sp, #12
 800642a:	4621      	mov	r1, r4
 800642c:	4630      	mov	r0, r6
 800642e:	f7ff feed 	bl	800620c <_printf_common>
 8006432:	3001      	adds	r0, #1
 8006434:	d155      	bne.n	80064e2 <_printf_i+0x1e6>
 8006436:	f04f 30ff 	mov.w	r0, #4294967295
 800643a:	b005      	add	sp, #20
 800643c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006440:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8006444:	493c      	ldr	r1, [pc, #240]	; (8006538 <_printf_i+0x23c>)
 8006446:	6822      	ldr	r2, [r4, #0]
 8006448:	6818      	ldr	r0, [r3, #0]
 800644a:	f012 0f80 	tst.w	r2, #128	; 0x80
 800644e:	f100 0504 	add.w	r5, r0, #4
 8006452:	601d      	str	r5, [r3, #0]
 8006454:	d001      	beq.n	800645a <_printf_i+0x15e>
 8006456:	6803      	ldr	r3, [r0, #0]
 8006458:	e002      	b.n	8006460 <_printf_i+0x164>
 800645a:	0655      	lsls	r5, r2, #25
 800645c:	d5fb      	bpl.n	8006456 <_printf_i+0x15a>
 800645e:	8803      	ldrh	r3, [r0, #0]
 8006460:	07d0      	lsls	r0, r2, #31
 8006462:	bf44      	itt	mi
 8006464:	f042 0220 	orrmi.w	r2, r2, #32
 8006468:	6022      	strmi	r2, [r4, #0]
 800646a:	b91b      	cbnz	r3, 8006474 <_printf_i+0x178>
 800646c:	6822      	ldr	r2, [r4, #0]
 800646e:	f022 0220 	bic.w	r2, r2, #32
 8006472:	6022      	str	r2, [r4, #0]
 8006474:	2210      	movs	r2, #16
 8006476:	e7b1      	b.n	80063dc <_printf_i+0xe0>
 8006478:	4675      	mov	r5, lr
 800647a:	fbb3 f0f2 	udiv	r0, r3, r2
 800647e:	fb02 3310 	mls	r3, r2, r0, r3
 8006482:	5ccb      	ldrb	r3, [r1, r3]
 8006484:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006488:	4603      	mov	r3, r0
 800648a:	2800      	cmp	r0, #0
 800648c:	d1f5      	bne.n	800647a <_printf_i+0x17e>
 800648e:	e7b7      	b.n	8006400 <_printf_i+0x104>
 8006490:	6808      	ldr	r0, [r1, #0]
 8006492:	681a      	ldr	r2, [r3, #0]
 8006494:	f010 0f80 	tst.w	r0, #128	; 0x80
 8006498:	6949      	ldr	r1, [r1, #20]
 800649a:	d004      	beq.n	80064a6 <_printf_i+0x1aa>
 800649c:	1d10      	adds	r0, r2, #4
 800649e:	6018      	str	r0, [r3, #0]
 80064a0:	6813      	ldr	r3, [r2, #0]
 80064a2:	6019      	str	r1, [r3, #0]
 80064a4:	e007      	b.n	80064b6 <_printf_i+0x1ba>
 80064a6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80064aa:	f102 0004 	add.w	r0, r2, #4
 80064ae:	6018      	str	r0, [r3, #0]
 80064b0:	6813      	ldr	r3, [r2, #0]
 80064b2:	d0f6      	beq.n	80064a2 <_printf_i+0x1a6>
 80064b4:	8019      	strh	r1, [r3, #0]
 80064b6:	2300      	movs	r3, #0
 80064b8:	4675      	mov	r5, lr
 80064ba:	6123      	str	r3, [r4, #16]
 80064bc:	e7b1      	b.n	8006422 <_printf_i+0x126>
 80064be:	681a      	ldr	r2, [r3, #0]
 80064c0:	1d11      	adds	r1, r2, #4
 80064c2:	6019      	str	r1, [r3, #0]
 80064c4:	6815      	ldr	r5, [r2, #0]
 80064c6:	2100      	movs	r1, #0
 80064c8:	6862      	ldr	r2, [r4, #4]
 80064ca:	4628      	mov	r0, r5
 80064cc:	f000 f8e0 	bl	8006690 <memchr>
 80064d0:	b108      	cbz	r0, 80064d6 <_printf_i+0x1da>
 80064d2:	1b40      	subs	r0, r0, r5
 80064d4:	6060      	str	r0, [r4, #4]
 80064d6:	6863      	ldr	r3, [r4, #4]
 80064d8:	6123      	str	r3, [r4, #16]
 80064da:	2300      	movs	r3, #0
 80064dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80064e0:	e79f      	b.n	8006422 <_printf_i+0x126>
 80064e2:	6923      	ldr	r3, [r4, #16]
 80064e4:	462a      	mov	r2, r5
 80064e6:	4639      	mov	r1, r7
 80064e8:	4630      	mov	r0, r6
 80064ea:	47c0      	blx	r8
 80064ec:	3001      	adds	r0, #1
 80064ee:	d0a2      	beq.n	8006436 <_printf_i+0x13a>
 80064f0:	6823      	ldr	r3, [r4, #0]
 80064f2:	079b      	lsls	r3, r3, #30
 80064f4:	d507      	bpl.n	8006506 <_printf_i+0x20a>
 80064f6:	2500      	movs	r5, #0
 80064f8:	f104 0919 	add.w	r9, r4, #25
 80064fc:	68e3      	ldr	r3, [r4, #12]
 80064fe:	9a03      	ldr	r2, [sp, #12]
 8006500:	1a9b      	subs	r3, r3, r2
 8006502:	429d      	cmp	r5, r3
 8006504:	db05      	blt.n	8006512 <_printf_i+0x216>
 8006506:	68e0      	ldr	r0, [r4, #12]
 8006508:	9b03      	ldr	r3, [sp, #12]
 800650a:	4298      	cmp	r0, r3
 800650c:	bfb8      	it	lt
 800650e:	4618      	movlt	r0, r3
 8006510:	e793      	b.n	800643a <_printf_i+0x13e>
 8006512:	2301      	movs	r3, #1
 8006514:	464a      	mov	r2, r9
 8006516:	4639      	mov	r1, r7
 8006518:	4630      	mov	r0, r6
 800651a:	47c0      	blx	r8
 800651c:	3001      	adds	r0, #1
 800651e:	d08a      	beq.n	8006436 <_printf_i+0x13a>
 8006520:	3501      	adds	r5, #1
 8006522:	e7eb      	b.n	80064fc <_printf_i+0x200>
 8006524:	2b00      	cmp	r3, #0
 8006526:	d1a7      	bne.n	8006478 <_printf_i+0x17c>
 8006528:	780b      	ldrb	r3, [r1, #0]
 800652a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800652e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006532:	e765      	b.n	8006400 <_printf_i+0x104>
 8006534:	08007932 	.word	0x08007932
 8006538:	08007921 	.word	0x08007921

0800653c <_sbrk_r>:
 800653c:	b538      	push	{r3, r4, r5, lr}
 800653e:	2300      	movs	r3, #0
 8006540:	4c05      	ldr	r4, [pc, #20]	; (8006558 <_sbrk_r+0x1c>)
 8006542:	4605      	mov	r5, r0
 8006544:	4608      	mov	r0, r1
 8006546:	6023      	str	r3, [r4, #0]
 8006548:	f7fe ff30 	bl	80053ac <_sbrk>
 800654c:	1c43      	adds	r3, r0, #1
 800654e:	d102      	bne.n	8006556 <_sbrk_r+0x1a>
 8006550:	6823      	ldr	r3, [r4, #0]
 8006552:	b103      	cbz	r3, 8006556 <_sbrk_r+0x1a>
 8006554:	602b      	str	r3, [r5, #0]
 8006556:	bd38      	pop	{r3, r4, r5, pc}
 8006558:	20000904 	.word	0x20000904

0800655c <__sread>:
 800655c:	b510      	push	{r4, lr}
 800655e:	460c      	mov	r4, r1
 8006560:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006564:	f000 f8e4 	bl	8006730 <_read_r>
 8006568:	2800      	cmp	r0, #0
 800656a:	bfab      	itete	ge
 800656c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800656e:	89a3      	ldrhlt	r3, [r4, #12]
 8006570:	181b      	addge	r3, r3, r0
 8006572:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006576:	bfac      	ite	ge
 8006578:	6563      	strge	r3, [r4, #84]	; 0x54
 800657a:	81a3      	strhlt	r3, [r4, #12]
 800657c:	bd10      	pop	{r4, pc}

0800657e <__swrite>:
 800657e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006582:	461f      	mov	r7, r3
 8006584:	898b      	ldrh	r3, [r1, #12]
 8006586:	4605      	mov	r5, r0
 8006588:	05db      	lsls	r3, r3, #23
 800658a:	460c      	mov	r4, r1
 800658c:	4616      	mov	r6, r2
 800658e:	d505      	bpl.n	800659c <__swrite+0x1e>
 8006590:	2302      	movs	r3, #2
 8006592:	2200      	movs	r2, #0
 8006594:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006598:	f000 f868 	bl	800666c <_lseek_r>
 800659c:	89a3      	ldrh	r3, [r4, #12]
 800659e:	4632      	mov	r2, r6
 80065a0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80065a4:	81a3      	strh	r3, [r4, #12]
 80065a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80065aa:	463b      	mov	r3, r7
 80065ac:	4628      	mov	r0, r5
 80065ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80065b2:	f000 b817 	b.w	80065e4 <_write_r>

080065b6 <__sseek>:
 80065b6:	b510      	push	{r4, lr}
 80065b8:	460c      	mov	r4, r1
 80065ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065be:	f000 f855 	bl	800666c <_lseek_r>
 80065c2:	1c43      	adds	r3, r0, #1
 80065c4:	89a3      	ldrh	r3, [r4, #12]
 80065c6:	bf15      	itete	ne
 80065c8:	6560      	strne	r0, [r4, #84]	; 0x54
 80065ca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80065ce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80065d2:	81a3      	strheq	r3, [r4, #12]
 80065d4:	bf18      	it	ne
 80065d6:	81a3      	strhne	r3, [r4, #12]
 80065d8:	bd10      	pop	{r4, pc}

080065da <__sclose>:
 80065da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065de:	f000 b813 	b.w	8006608 <_close_r>
	...

080065e4 <_write_r>:
 80065e4:	b538      	push	{r3, r4, r5, lr}
 80065e6:	4605      	mov	r5, r0
 80065e8:	4608      	mov	r0, r1
 80065ea:	4611      	mov	r1, r2
 80065ec:	2200      	movs	r2, #0
 80065ee:	4c05      	ldr	r4, [pc, #20]	; (8006604 <_write_r+0x20>)
 80065f0:	6022      	str	r2, [r4, #0]
 80065f2:	461a      	mov	r2, r3
 80065f4:	f7fd f96a 	bl	80038cc <_write>
 80065f8:	1c43      	adds	r3, r0, #1
 80065fa:	d102      	bne.n	8006602 <_write_r+0x1e>
 80065fc:	6823      	ldr	r3, [r4, #0]
 80065fe:	b103      	cbz	r3, 8006602 <_write_r+0x1e>
 8006600:	602b      	str	r3, [r5, #0]
 8006602:	bd38      	pop	{r3, r4, r5, pc}
 8006604:	20000904 	.word	0x20000904

08006608 <_close_r>:
 8006608:	b538      	push	{r3, r4, r5, lr}
 800660a:	2300      	movs	r3, #0
 800660c:	4c05      	ldr	r4, [pc, #20]	; (8006624 <_close_r+0x1c>)
 800660e:	4605      	mov	r5, r0
 8006610:	4608      	mov	r0, r1
 8006612:	6023      	str	r3, [r4, #0]
 8006614:	f7fe fee4 	bl	80053e0 <_close>
 8006618:	1c43      	adds	r3, r0, #1
 800661a:	d102      	bne.n	8006622 <_close_r+0x1a>
 800661c:	6823      	ldr	r3, [r4, #0]
 800661e:	b103      	cbz	r3, 8006622 <_close_r+0x1a>
 8006620:	602b      	str	r3, [r5, #0]
 8006622:	bd38      	pop	{r3, r4, r5, pc}
 8006624:	20000904 	.word	0x20000904

08006628 <_fstat_r>:
 8006628:	b538      	push	{r3, r4, r5, lr}
 800662a:	2300      	movs	r3, #0
 800662c:	4c06      	ldr	r4, [pc, #24]	; (8006648 <_fstat_r+0x20>)
 800662e:	4605      	mov	r5, r0
 8006630:	4608      	mov	r0, r1
 8006632:	4611      	mov	r1, r2
 8006634:	6023      	str	r3, [r4, #0]
 8006636:	f7fe fed6 	bl	80053e6 <_fstat>
 800663a:	1c43      	adds	r3, r0, #1
 800663c:	d102      	bne.n	8006644 <_fstat_r+0x1c>
 800663e:	6823      	ldr	r3, [r4, #0]
 8006640:	b103      	cbz	r3, 8006644 <_fstat_r+0x1c>
 8006642:	602b      	str	r3, [r5, #0]
 8006644:	bd38      	pop	{r3, r4, r5, pc}
 8006646:	bf00      	nop
 8006648:	20000904 	.word	0x20000904

0800664c <_isatty_r>:
 800664c:	b538      	push	{r3, r4, r5, lr}
 800664e:	2300      	movs	r3, #0
 8006650:	4c05      	ldr	r4, [pc, #20]	; (8006668 <_isatty_r+0x1c>)
 8006652:	4605      	mov	r5, r0
 8006654:	4608      	mov	r0, r1
 8006656:	6023      	str	r3, [r4, #0]
 8006658:	f7fe feca 	bl	80053f0 <_isatty>
 800665c:	1c43      	adds	r3, r0, #1
 800665e:	d102      	bne.n	8006666 <_isatty_r+0x1a>
 8006660:	6823      	ldr	r3, [r4, #0]
 8006662:	b103      	cbz	r3, 8006666 <_isatty_r+0x1a>
 8006664:	602b      	str	r3, [r5, #0]
 8006666:	bd38      	pop	{r3, r4, r5, pc}
 8006668:	20000904 	.word	0x20000904

0800666c <_lseek_r>:
 800666c:	b538      	push	{r3, r4, r5, lr}
 800666e:	4605      	mov	r5, r0
 8006670:	4608      	mov	r0, r1
 8006672:	4611      	mov	r1, r2
 8006674:	2200      	movs	r2, #0
 8006676:	4c05      	ldr	r4, [pc, #20]	; (800668c <_lseek_r+0x20>)
 8006678:	6022      	str	r2, [r4, #0]
 800667a:	461a      	mov	r2, r3
 800667c:	f7fe feba 	bl	80053f4 <_lseek>
 8006680:	1c43      	adds	r3, r0, #1
 8006682:	d102      	bne.n	800668a <_lseek_r+0x1e>
 8006684:	6823      	ldr	r3, [r4, #0]
 8006686:	b103      	cbz	r3, 800668a <_lseek_r+0x1e>
 8006688:	602b      	str	r3, [r5, #0]
 800668a:	bd38      	pop	{r3, r4, r5, pc}
 800668c:	20000904 	.word	0x20000904

08006690 <memchr>:
 8006690:	b510      	push	{r4, lr}
 8006692:	b2c9      	uxtb	r1, r1
 8006694:	4402      	add	r2, r0
 8006696:	4290      	cmp	r0, r2
 8006698:	4603      	mov	r3, r0
 800669a:	d101      	bne.n	80066a0 <memchr+0x10>
 800669c:	2000      	movs	r0, #0
 800669e:	bd10      	pop	{r4, pc}
 80066a0:	781c      	ldrb	r4, [r3, #0]
 80066a2:	3001      	adds	r0, #1
 80066a4:	428c      	cmp	r4, r1
 80066a6:	d1f6      	bne.n	8006696 <memchr+0x6>
 80066a8:	4618      	mov	r0, r3
 80066aa:	bd10      	pop	{r4, pc}

080066ac <memmove>:
 80066ac:	4288      	cmp	r0, r1
 80066ae:	b510      	push	{r4, lr}
 80066b0:	eb01 0302 	add.w	r3, r1, r2
 80066b4:	d803      	bhi.n	80066be <memmove+0x12>
 80066b6:	1e42      	subs	r2, r0, #1
 80066b8:	4299      	cmp	r1, r3
 80066ba:	d10c      	bne.n	80066d6 <memmove+0x2a>
 80066bc:	bd10      	pop	{r4, pc}
 80066be:	4298      	cmp	r0, r3
 80066c0:	d2f9      	bcs.n	80066b6 <memmove+0xa>
 80066c2:	1881      	adds	r1, r0, r2
 80066c4:	1ad2      	subs	r2, r2, r3
 80066c6:	42d3      	cmn	r3, r2
 80066c8:	d100      	bne.n	80066cc <memmove+0x20>
 80066ca:	bd10      	pop	{r4, pc}
 80066cc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80066d0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80066d4:	e7f7      	b.n	80066c6 <memmove+0x1a>
 80066d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80066da:	f802 4f01 	strb.w	r4, [r2, #1]!
 80066de:	e7eb      	b.n	80066b8 <memmove+0xc>

080066e0 <__malloc_lock>:
 80066e0:	4770      	bx	lr

080066e2 <__malloc_unlock>:
 80066e2:	4770      	bx	lr

080066e4 <_realloc_r>:
 80066e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066e6:	4607      	mov	r7, r0
 80066e8:	4614      	mov	r4, r2
 80066ea:	460e      	mov	r6, r1
 80066ec:	b921      	cbnz	r1, 80066f8 <_realloc_r+0x14>
 80066ee:	4611      	mov	r1, r2
 80066f0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80066f4:	f7ff ba9e 	b.w	8005c34 <_malloc_r>
 80066f8:	b922      	cbnz	r2, 8006704 <_realloc_r+0x20>
 80066fa:	f7ff fa4f 	bl	8005b9c <_free_r>
 80066fe:	4625      	mov	r5, r4
 8006700:	4628      	mov	r0, r5
 8006702:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006704:	f000 f826 	bl	8006754 <_malloc_usable_size_r>
 8006708:	4284      	cmp	r4, r0
 800670a:	d90f      	bls.n	800672c <_realloc_r+0x48>
 800670c:	4621      	mov	r1, r4
 800670e:	4638      	mov	r0, r7
 8006710:	f7ff fa90 	bl	8005c34 <_malloc_r>
 8006714:	4605      	mov	r5, r0
 8006716:	2800      	cmp	r0, #0
 8006718:	d0f2      	beq.n	8006700 <_realloc_r+0x1c>
 800671a:	4631      	mov	r1, r6
 800671c:	4622      	mov	r2, r4
 800671e:	f7fe fee1 	bl	80054e4 <memcpy>
 8006722:	4631      	mov	r1, r6
 8006724:	4638      	mov	r0, r7
 8006726:	f7ff fa39 	bl	8005b9c <_free_r>
 800672a:	e7e9      	b.n	8006700 <_realloc_r+0x1c>
 800672c:	4635      	mov	r5, r6
 800672e:	e7e7      	b.n	8006700 <_realloc_r+0x1c>

08006730 <_read_r>:
 8006730:	b538      	push	{r3, r4, r5, lr}
 8006732:	4605      	mov	r5, r0
 8006734:	4608      	mov	r0, r1
 8006736:	4611      	mov	r1, r2
 8006738:	2200      	movs	r2, #0
 800673a:	4c05      	ldr	r4, [pc, #20]	; (8006750 <_read_r+0x20>)
 800673c:	6022      	str	r2, [r4, #0]
 800673e:	461a      	mov	r2, r3
 8006740:	f7fe fe26 	bl	8005390 <_read>
 8006744:	1c43      	adds	r3, r0, #1
 8006746:	d102      	bne.n	800674e <_read_r+0x1e>
 8006748:	6823      	ldr	r3, [r4, #0]
 800674a:	b103      	cbz	r3, 800674e <_read_r+0x1e>
 800674c:	602b      	str	r3, [r5, #0]
 800674e:	bd38      	pop	{r3, r4, r5, pc}
 8006750:	20000904 	.word	0x20000904

08006754 <_malloc_usable_size_r>:
 8006754:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8006758:	2800      	cmp	r0, #0
 800675a:	f1a0 0004 	sub.w	r0, r0, #4
 800675e:	bfbc      	itt	lt
 8006760:	580b      	ldrlt	r3, [r1, r0]
 8006762:	18c0      	addlt	r0, r0, r3
 8006764:	4770      	bx	lr
	...

08006768 <_init>:
 8006768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800676a:	bf00      	nop
 800676c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800676e:	bc08      	pop	{r3}
 8006770:	469e      	mov	lr, r3
 8006772:	4770      	bx	lr

08006774 <_fini>:
 8006774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006776:	bf00      	nop
 8006778:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800677a:	bc08      	pop	{r3}
 800677c:	469e      	mov	lr, r3
 800677e:	4770      	bx	lr
